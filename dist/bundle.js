/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={162:(t,e,r)=>{"use strict";r.d(e,{e$:()=>v,Zx:()=>h,S4:()=>u});for(var n=r(591),o=r.n(n),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=new Uint8Array(256),s=0;s<i.length;s++)a[i.charCodeAt(s)]=s;var u,c=function(t){return function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}(o().inflate(function(t){var e,r,n,o,i,s=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var l=new Uint8Array(s);for(e=0;e<u;e+=4)r=a[t.charCodeAt(e)],n=a[t.charCodeAt(e+1)],o=a[t.charCodeAt(e+2)],i=a[t.charCodeAt(e+3)],l[c++]=r<<2|n>>4,l[c++]=(15&n)<<4|o>>2,l[c++]=(3&o)<<6|63&i;return l}(t)))},l={Courier:"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","Courier-Bold":"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","Courier-Oblique":"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","Courier-BoldOblique":"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",Helvetica:"","Helvetica-Bold":"","Helvetica-Oblique":"","Helvetica-BoldOblique":"","Times-Roman":"","Times-Bold":"","Times-Italic":"","Times-BoldItalic":"",Symbol:"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",ZapfDingbats:"eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w=="};!function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(u||(u={}));var d={},h=function(){function t(){var t=this;this.getWidthOfGlyph=function(e){return t.CharWidths[e]},this.getXAxisKerningForPair=function(e,r){return(t.KernPairXAmounts[e]||{})[r]}}return t.load=function(e){var r=d[e];if(r)return r;var n=c(l[e]),o=Object.assign(new t,JSON.parse(n));return o.CharWidths=o.CharMetrics.reduce((function(t,e){return t[e.N]=e.WX,t}),{}),o.KernPairXAmounts=o.KernPairs.reduce((function(t,e){var r=e[0],n=e[1],o=e[2];return t[r]||(t[r]={}),t[r][n]=o,t}),{}),d[e]=o,o},t}(),f=c("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"),p=JSON.parse(f),g=function(t,e){var r=this;this.canEncodeUnicodeCodePoint=function(t){return t in r.unicodeMappings},this.encodeUnicodeCodePoint=function(t){var e=r.unicodeMappings[t];if(!e){var n=String.fromCharCode(t),o="0x"+function(t,e,r){for(var n="",o=0,i=4-t.length;o<i;o++)n+="0";return n+t}(t.toString(16)),i=r.name+' cannot encode "'+n+'" ('+o+")";throw new Error(i)}return{code:e[0],name:e[1]}},this.name=t,this.supportedCodePoints=Object.keys(e).map(Number).sort((function(t,e){return t-e})),this.unicodeMappings=e},v={Symbol:new g("Symbol",p.symbol),ZapfDingbats:new g("ZapfDingbats",p.zapfdingbats),WinAnsi:new g("WinAnsi",p.win1252)}},591:(t,e,r)=>{"use strict";var n={};(0,r(236).assign)(n,r(555),r(843),r(619)),t.exports=n},555:(t,e,r)=>{"use strict";var n=r(405),o=r(236),i=r(373),a=r(898),s=r(292),u=Object.prototype.toString,c=0,l=-1,d=0,h=8;function f(t){if(!(this instanceof f))return new f(t);this.options=o.assign({level:l,method:h,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==c)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var p;if(p="string"==typeof e.dictionary?i.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=n.deflateSetDictionary(this.strm,p))!==c)throw new Error(a[r]);this._dict_set=!0}}function p(t,e){var r=new f(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}f.prototype.push=function(t,e){var r,a,s=this.strm,l=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=i.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new o.Buf8(l),s.next_out=0,s.avail_out=l),1!==(r=n.deflate(s,a))&&r!==c)return this.onEnd(r),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(s.output,s.next_out))):this.onData(o.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===c):2!==a||(this.onEnd(c),s.avail_out=0,!0)},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){t===c&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=f,e.deflate=p,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,p(t,e)}},843:(t,e,r)=>{"use strict";var n=r(948),o=r(236),i=r(373),a=r(619),s=r(898),u=r(292),c=r(401),l=Object.prototype.toString;function d(t){if(!(this instanceof d))return new d(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);if(this.header=new c,n.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=i.string2buf(e.dictionary):"[object ArrayBuffer]"===l.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=n.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[r])}function h(t,e){var r=new d(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}d.prototype.push=function(t,e){var r,s,u,c,d,h=this.strm,f=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?h.input=i.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new o.Buf8(f),h.next_out=0,h.avail_out=f),(r=n.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&p&&(r=n.inflateSetDictionary(this.strm,p)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;h.next_out&&(0!==h.avail_out&&r!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=i.utf8border(h.output,h.next_out),c=h.next_out-u,d=i.buf2string(h.output,u),h.next_out=c,h.avail_out=f-c,c&&o.arraySet(h.output,h.output,u,c,0),this.onData(d)):this.onData(o.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(g=!0)}while((h.avail_in>0||0===h.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),h.avail_out=0,!0)},d.prototype.onData=function(t){this.chunks.push(t)},d.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=d,e.inflate=h,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.ungzip=h},236:(t,e)=>{"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var o in r)n(r,o)&&(t[o]=r[o])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var o={arraySet:function(t,e,r,n,o){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),o);else for(var i=0;i<n;i++)t[o+i]=e[r+i]},flattenChunks:function(t){var e,r,n,o,i,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),o=0,e=0,r=t.length;e<r;e++)i=t[e],a.set(i,o),o+=i.length;return a}},i={arraySet:function(t,e,r,n,o){for(var i=0;i<n;i++)t[o+i]=e[r+i]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,o)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,i))},e.setTyped(r)},373:(t,e,r)=>{"use strict";var n=r(236),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(t){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){i=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65534&&(t.subarray&&i||!t.subarray&&o))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,o,i,a,s=t.length,u=0;for(i=0;i<s;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),a=0,i=0;a<u;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,o=e.length;r<o;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,o,i,s=e||t.length,c=new Array(2*s);for(n=0,r=0;r<s;)if((o=t[r++])<128)c[n++]=o;else if((i=a[o])>4)c[n++]=65533,r+=i-1;else{for(o&=2===i?31:3===i?15:7;i>1&&r<s;)o=o<<6|63&t[r++],i--;i>1?c[n++]=65533:o<65536?c[n++]=o:(o-=65536,c[n++]=55296|o>>10&1023,c[n++]=56320|1023&o)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},69:t=>{"use strict";t.exports=function(t,e,r,n){for(var o=65535&t|0,i=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{i=i+(o=o+e[n++]|0)|0}while(--a);o%=65521,i%=65521}return o|i<<16|0}},619:t=>{"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},869:t=>{"use strict";var e=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,r,n,o){var i=e,a=o+n;t^=-1;for(var s=o;s<a;s++)t=t>>>8^i[255&(t^r[s])];return-1^t}},405:(t,e,r)=>{"use strict";var n,o=r(236),i=r(342),a=r(69),s=r(869),u=r(898),c=0,l=4,d=0,h=-2,f=2,p=8,g=286,v=30,y=19,m=2*g+1,b=15,w=3,x=258,F=x+w+1,S=42,k=103,C=113,P=666,T=1,D=2,A=3,O=4;function R(t,e){return t.msg=u[e],e}function N(t){return(t<<1)-(t>4?9:0)}function M(t){for(var e=t.length;--e>=0;)t[e]=0}function E(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(o.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function j(t,e){i._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,E(t.strm)}function Z(t,e){t.pending_buf[t.pending++]=e}function B(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function V(t,e){var r,n,o=t.max_chain_length,i=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-F?t.strstart-(t.w_size-F):0,c=t.window,l=t.w_mask,d=t.prev,h=t.strstart+x,f=c[i+a-1],p=c[i+a];t.prev_length>=t.good_match&&(o>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===p&&c[r+a-1]===f&&c[r]===c[i]&&c[++r]===c[i+1]){i+=2,r++;do{}while(c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&i<h);if(n=x-(h-i),i=h-x,n>a){if(t.match_start=e,a=n,n>=s)break;f=c[i+a-1],p=c[i+a]}}}while((e=d[e&l])>u&&0!=--o);return a<=t.lookahead?a:t.lookahead}function I(t){var e,r,n,i,u,c,l,d,h,f,p=t.w_size;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-F)){o.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=r=t.hash_size;do{n=t.head[--e],t.head[e]=n>=p?n-p:0}while(--r);e=r=p;do{n=t.prev[--e],t.prev[e]=n>=p?n-p:0}while(--r);i+=p}if(0===t.strm.avail_in)break;if(c=t.strm,l=t.window,d=t.strstart+t.lookahead,h=i,f=void 0,(f=c.avail_in)>h&&(f=h),r=0===f?0:(c.avail_in-=f,o.arraySet(l,c.input,c.next_in,f,d),1===c.state.wrap?c.adler=a(c.adler,l,f,d):2===c.state.wrap&&(c.adler=s(c.adler,l,f,d)),c.next_in+=f,c.total_in+=f,f),t.lookahead+=r,t.lookahead+t.insert>=w)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+w-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<w)););}while(t.lookahead<F&&0!==t.strm.avail_in)}function z(t,e){for(var r,n;;){if(t.lookahead<F){if(I(t),t.lookahead<F&&e===c)return T;if(0===t.lookahead)break}if(r=0,t.lookahead>=w&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-F&&(t.match_length=V(t,r)),t.match_length>=w)if(n=i._tr_tally(t,t.strstart-t.match_start,t.match_length-w),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=w){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(j(t,!1),0===t.strm.avail_out))return T}return t.insert=t.strstart<w-1?t.strstart:w-1,e===l?(j(t,!0),0===t.strm.avail_out?A:O):t.last_lit&&(j(t,!1),0===t.strm.avail_out)?T:D}function U(t,e){for(var r,n,o;;){if(t.lookahead<F){if(I(t),t.lookahead<F&&e===c)return T;if(0===t.lookahead)break}if(r=0,t.lookahead>=w&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=w-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-F&&(t.match_length=V(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===w&&t.strstart-t.match_start>4096)&&(t.match_length=w-1)),t.prev_length>=w&&t.match_length<=t.prev_length){o=t.strstart+t.lookahead-w,n=i._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-w),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=o&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=w-1,t.strstart++,n&&(j(t,!1),0===t.strm.avail_out))return T}else if(t.match_available){if((n=i._tr_tally(t,0,t.window[t.strstart-1]))&&j(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return T}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=i._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<w-1?t.strstart:w-1,e===l?(j(t,!0),0===t.strm.avail_out?A:O):t.last_lit&&(j(t,!1),0===t.strm.avail_out)?T:D}function G(t,e,r,n,o){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=o}function q(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=p,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(2*m),this.dyn_dtree=new o.Buf16(2*(2*v+1)),this.bl_tree=new o.Buf16(2*(2*y+1)),M(this.dyn_ltree),M(this.dyn_dtree),M(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(b+1),this.heap=new o.Buf16(2*g+1),M(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(2*g+1),M(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function W(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=f,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?S:C,t.adler=2===e.wrap?0:1,e.last_flush=c,i._tr_init(e),d):R(t,h)}function L(t){var e,r=W(t);return r===d&&((e=t.state).window_size=2*e.w_size,M(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=w-1,e.match_available=0,e.ins_h=0),r}function K(t,e,r,n,i,a){if(!t)return h;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),i<1||i>9||r!==p||n<8||n>15||e<0||e>9||a<0||a>4)return R(t,h);8===n&&(n=9);var u=new q;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=i+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+w-1)/w),u.window=new o.Buf8(2*u.w_size),u.head=new o.Buf16(u.hash_size),u.prev=new o.Buf16(u.w_size),u.lit_bufsize=1<<i+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new o.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,L(t)}n=[new G(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(I(t),0===t.lookahead&&e===c)return T;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,j(t,!1),0===t.strm.avail_out))return T;if(t.strstart-t.block_start>=t.w_size-F&&(j(t,!1),0===t.strm.avail_out))return T}return t.insert=0,e===l?(j(t,!0),0===t.strm.avail_out?A:O):(t.strstart>t.block_start&&(j(t,!1),t.strm.avail_out),T)})),new G(4,4,8,4,z),new G(4,5,16,8,z),new G(4,6,32,32,z),new G(4,4,16,16,U),new G(8,16,32,32,U),new G(8,16,128,128,U),new G(8,32,128,256,U),new G(32,128,258,1024,U),new G(32,258,258,4096,U)],e.deflateInit=function(t,e){return K(t,e,p,15,8,0)},e.deflateInit2=K,e.deflateReset=L,e.deflateResetKeep=W,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?h:(t.state.gzhead=e,d):h},e.deflate=function(t,e){var r,o,a,u;if(!t||!t.state||e>5||e<0)return t?R(t,h):h;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===P&&e!==l)return R(t,0===t.avail_out?-5:h);if(o.strm=t,r=o.last_flush,o.last_flush=e,o.status===S)if(2===o.wrap)t.adler=0,Z(o,31),Z(o,139),Z(o,8),o.gzhead?(Z(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),Z(o,255&o.gzhead.time),Z(o,o.gzhead.time>>8&255),Z(o,o.gzhead.time>>16&255),Z(o,o.gzhead.time>>24&255),Z(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),Z(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(Z(o,255&o.gzhead.extra.length),Z(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=s(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(Z(o,0),Z(o,0),Z(o,0),Z(o,0),Z(o,0),Z(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),Z(o,3),o.status=C);else{var f=p+(o.w_bits-8<<4)<<8;f|=(o.strategy>=2||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(f|=32),f+=31-f%31,o.status=C,B(o,f),0!==o.strstart&&(B(o,t.adler>>>16),B(o,65535&t.adler)),t.adler=1}if(69===o.status)if(o.gzhead.extra){for(a=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),E(t),a=o.pending,o.pending!==o.pending_buf_size));)Z(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),E(t),a=o.pending,o.pending===o.pending_buf_size)){u=1;break}u=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,Z(o,u)}while(0!==u);o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),0===u&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),E(t),a=o.pending,o.pending===o.pending_buf_size)){u=1;break}u=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,Z(o,u)}while(0!==u);o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),0===u&&(o.status=k)}else o.status=k;if(o.status===k&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&E(t),o.pending+2<=o.pending_buf_size&&(Z(o,255&t.adler),Z(o,t.adler>>8&255),t.adler=0,o.status=C)):o.status=C),0!==o.pending){if(E(t),0===t.avail_out)return o.last_flush=-1,d}else if(0===t.avail_in&&N(e)<=N(r)&&e!==l)return R(t,-5);if(o.status===P&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==o.lookahead||e!==c&&o.status!==P){var g=2===o.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(I(t),0===t.lookahead)){if(e===c)return T;break}if(t.match_length=0,r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(j(t,!1),0===t.strm.avail_out))return T}return t.insert=0,e===l?(j(t,!0),0===t.strm.avail_out?A:O):t.last_lit&&(j(t,!1),0===t.strm.avail_out)?T:D}(o,e):3===o.strategy?function(t,e){for(var r,n,o,a,s=t.window;;){if(t.lookahead<=x){if(I(t),t.lookahead<=x&&e===c)return T;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=w&&t.strstart>0&&(n=s[o=t.strstart-1])===s[++o]&&n===s[++o]&&n===s[++o]){a=t.strstart+x;do{}while(n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&o<a);t.match_length=x-(a-o),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=w?(r=i._tr_tally(t,1,t.match_length-w),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(j(t,!1),0===t.strm.avail_out))return T}return t.insert=0,e===l?(j(t,!0),0===t.strm.avail_out?A:O):t.last_lit&&(j(t,!1),0===t.strm.avail_out)?T:D}(o,e):n[o.level].func(o,e);if(g!==A&&g!==O||(o.status=P),g===T||g===A)return 0===t.avail_out&&(o.last_flush=-1),d;if(g===D&&(1===e?i._tr_align(o):5!==e&&(i._tr_stored_block(o,0,0,!1),3===e&&(M(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),E(t),0===t.avail_out))return o.last_flush=-1,d}return e!==l?d:o.wrap<=0?1:(2===o.wrap?(Z(o,255&t.adler),Z(o,t.adler>>8&255),Z(o,t.adler>>16&255),Z(o,t.adler>>24&255),Z(o,255&t.total_in),Z(o,t.total_in>>8&255),Z(o,t.total_in>>16&255),Z(o,t.total_in>>24&255)):(B(o,t.adler>>>16),B(o,65535&t.adler)),E(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?d:1)},e.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==S&&69!==e&&73!==e&&91!==e&&e!==k&&e!==C&&e!==P?R(t,h):(t.state=null,e===C?R(t,-3):d):h},e.deflateSetDictionary=function(t,e){var r,n,i,s,u,c,l,f,p=e.length;if(!t||!t.state)return h;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==S||r.lookahead)return h;for(1===s&&(t.adler=a(t.adler,e,p,0)),r.wrap=0,p>=r.w_size&&(0===s&&(M(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new o.Buf8(r.w_size),o.arraySet(f,e,p-r.w_size,r.w_size,0),e=f,p=r.w_size),u=t.avail_in,c=t.next_in,l=t.input,t.avail_in=p,t.next_in=0,t.input=e,I(r);r.lookahead>=w;){n=r.strstart,i=r.lookahead-(w-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+w-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--i);r.strstart=n,r.lookahead=w-1,I(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=w-1,r.match_available=0,t.next_in=c,t.input=l,t.avail_in=u,r.wrap=s,d},e.deflateInfo="pako deflate (from Nodeca project)"},401:t=>{"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},264:t=>{"use strict";t.exports=function(t,e){var r,n,o,i,a,s,u,c,l,d,h,f,p,g,v,y,m,b,w,x,F,S,k,C,P;r=t.state,n=t.next_in,C=t.input,o=n+(t.avail_in-5),i=t.next_out,P=t.output,a=i-(e-t.avail_out),s=i+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,d=r.wnext,h=r.window,f=r.hold,p=r.bits,g=r.lencode,v=r.distcode,y=(1<<r.lenbits)-1,m=(1<<r.distbits)-1;t:do{p<15&&(f+=C[n++]<<p,p+=8,f+=C[n++]<<p,p+=8),b=g[f&y];e:for(;;){if(f>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))P[i++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(f&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}x=65535&b,(w&=15)&&(p<w&&(f+=C[n++]<<p,p+=8),x+=f&(1<<w)-1,f>>>=w,p-=w),p<15&&(f+=C[n++]<<p,p+=8,f+=C[n++]<<p,p+=8),b=v[f&m];r:for(;;){if(f>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(f&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(F=65535&b,p<(w&=15)&&(f+=C[n++]<<p,(p+=8)<w&&(f+=C[n++]<<p,p+=8)),(F+=f&(1<<w)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(f>>>=w,p-=w,F>(w=i-a)){if((w=F-w)>l&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=0,k=h,0===d){if(S+=c-w,w<x){x-=w;do{P[i++]=h[S++]}while(--w);S=i-F,k=P}}else if(d<w){if(S+=c+d-w,(w-=d)<x){x-=w;do{P[i++]=h[S++]}while(--w);if(S=0,d<x){x-=w=d;do{P[i++]=h[S++]}while(--w);S=i-F,k=P}}}else if(S+=d-w,w<x){x-=w;do{P[i++]=h[S++]}while(--w);S=i-F,k=P}for(;x>2;)P[i++]=k[S++],P[i++]=k[S++],P[i++]=k[S++],x-=3;x&&(P[i++]=k[S++],x>1&&(P[i++]=k[S++]))}else{S=i-F;do{P[i++]=P[S++],P[i++]=P[S++],P[i++]=P[S++],x-=3}while(x>2);x&&(P[i++]=P[S++],x>1&&(P[i++]=P[S++]))}break}}break}}while(n<o&&i<s);n-=x=p>>3,f&=(1<<(p-=x<<3))-1,t.next_in=n,t.next_out=i,t.avail_in=n<o?o-n+5:5-(n-o),t.avail_out=i<s?s-i+257:257-(i-s),r.hold=f,r.bits=p}},948:(t,e,r)=>{"use strict";var n=r(236),o=r(69),i=r(869),a=r(264),s=r(241),u=1,c=2,l=0,d=-2,h=1,f=12,p=30,g=852,v=592;function y(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function m(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function b(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=h,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(g),e.distcode=e.distdyn=new n.Buf32(v),e.sane=1,e.back=-1,l):d}function w(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,b(t)):d}function x(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?d:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,w(t))):d}function F(t,e){var r,n;return t?(n=new m,t.state=n,n.window=null,(r=x(t,e))!==l&&(t.state=null),r):d}var S,k,C=!0;function P(t){if(C){var e;for(S=new n.Buf32(512),k=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(u,t.lens,0,288,S,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(c,t.lens,0,32,k,0,t.work,{bits:5}),C=!1}t.lencode=S,t.lenbits=9,t.distcode=k,t.distbits=5}function T(t,e,r,o){var i,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),o>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((i=a.wsize-a.wnext)>o&&(i=o),n.arraySet(a.window,e,r-o,i,a.wnext),(o-=i)?(n.arraySet(a.window,e,r-o,o,0),a.wnext=o,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}e.inflateReset=w,e.inflateReset2=x,e.inflateResetKeep=b,e.inflateInit=function(t){return F(t,15)},e.inflateInit2=F,e.inflate=function(t,e){var r,g,v,m,b,w,x,F,S,k,C,D,A,O,R,N,M,E,j,Z,B,V,I,z,U=0,G=new n.Buf8(4),q=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return d;(r=t.state).mode===f&&(r.mode=13),b=t.next_out,v=t.output,x=t.avail_out,m=t.next_in,g=t.input,w=t.avail_in,F=r.hold,S=r.bits,k=w,C=x,V=l;t:for(;;)switch(r.mode){case h:if(0===r.wrap){r.mode=13;break}for(;S<16;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(2&r.wrap&&35615===F){r.check=0,G[0]=255&F,G[1]=F>>>8&255,r.check=i(r.check,G,2,0),F=0,S=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&F)<<8)+(F>>8))%31){t.msg="incorrect header check",r.mode=p;break}if(8!=(15&F)){t.msg="unknown compression method",r.mode=p;break}if(S-=4,B=8+(15&(F>>>=4)),0===r.wbits)r.wbits=B;else if(B>r.wbits){t.msg="invalid window size",r.mode=p;break}r.dmax=1<<B,t.adler=r.check=1,r.mode=512&F?10:f,F=0,S=0;break;case 2:for(;S<16;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(r.flags=F,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=p;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=p;break}r.head&&(r.head.text=F>>8&1),512&r.flags&&(G[0]=255&F,G[1]=F>>>8&255,r.check=i(r.check,G,2,0)),F=0,S=0,r.mode=3;case 3:for(;S<32;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.head&&(r.head.time=F),512&r.flags&&(G[0]=255&F,G[1]=F>>>8&255,G[2]=F>>>16&255,G[3]=F>>>24&255,r.check=i(r.check,G,4,0)),F=0,S=0,r.mode=4;case 4:for(;S<16;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.head&&(r.head.xflags=255&F,r.head.os=F>>8),512&r.flags&&(G[0]=255&F,G[1]=F>>>8&255,r.check=i(r.check,G,2,0)),F=0,S=0,r.mode=5;case 5:if(1024&r.flags){for(;S<16;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.length=F,r.head&&(r.head.extra_len=F),512&r.flags&&(G[0]=255&F,G[1]=F>>>8&255,r.check=i(r.check,G,2,0)),F=0,S=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((D=r.length)>w&&(D=w),D&&(r.head&&(B=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,g,m,D,B)),512&r.flags&&(r.check=i(r.check,g,D,m)),w-=D,m+=D,r.length-=D),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===w)break t;D=0;do{B=g[m+D++],r.head&&B&&r.length<65536&&(r.head.name+=String.fromCharCode(B))}while(B&&D<w);if(512&r.flags&&(r.check=i(r.check,g,D,m)),w-=D,m+=D,B)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===w)break t;D=0;do{B=g[m+D++],r.head&&B&&r.length<65536&&(r.head.comment+=String.fromCharCode(B))}while(B&&D<w);if(512&r.flags&&(r.check=i(r.check,g,D,m)),w-=D,m+=D,B)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;S<16;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(F!==(65535&r.check)){t.msg="header crc mismatch",r.mode=p;break}F=0,S=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=f;break;case 10:for(;S<32;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}t.adler=r.check=y(F),F=0,S=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=b,t.avail_out=x,t.next_in=m,t.avail_in=w,r.hold=F,r.bits=S,2;t.adler=r.check=1,r.mode=f;case f:if(5===e||6===e)break t;case 13:if(r.last){F>>>=7&S,S-=7&S,r.mode=27;break}for(;S<3;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}switch(r.last=1&F,S-=1,3&(F>>>=1)){case 0:r.mode=14;break;case 1:if(P(r),r.mode=20,6===e){F>>>=2,S-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=p}F>>>=2,S-=2;break;case 14:for(F>>>=7&S,S-=7&S;S<32;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if((65535&F)!=(F>>>16^65535)){t.msg="invalid stored block lengths",r.mode=p;break}if(r.length=65535&F,F=0,S=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(D=r.length){if(D>w&&(D=w),D>x&&(D=x),0===D)break t;n.arraySet(v,g,m,D,b),w-=D,m+=D,x-=D,b+=D,r.length-=D;break}r.mode=f;break;case 17:for(;S<14;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(r.nlen=257+(31&F),F>>>=5,S-=5,r.ndist=1+(31&F),F>>>=5,S-=5,r.ncode=4+(15&F),F>>>=4,S-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=p;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;S<3;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.lens[q[r.have++]]=7&F,F>>>=3,S-=3}for(;r.have<19;)r.lens[q[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,I={bits:r.lenbits},V=s(0,r.lens,0,19,r.lencode,0,r.work,I),r.lenbits=I.bits,V){t.msg="invalid code lengths set",r.mode=p;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;N=(U=r.lencode[F&(1<<r.lenbits)-1])>>>16&255,M=65535&U,!((R=U>>>24)<=S);){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(M<16)F>>>=R,S-=R,r.lens[r.have++]=M;else{if(16===M){for(z=R+2;S<z;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(F>>>=R,S-=R,0===r.have){t.msg="invalid bit length repeat",r.mode=p;break}B=r.lens[r.have-1],D=3+(3&F),F>>>=2,S-=2}else if(17===M){for(z=R+3;S<z;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}S-=R,B=0,D=3+(7&(F>>>=R)),F>>>=3,S-=3}else{for(z=R+7;S<z;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}S-=R,B=0,D=11+(127&(F>>>=R)),F>>>=7,S-=7}if(r.have+D>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=p;break}for(;D--;)r.lens[r.have++]=B}}if(r.mode===p)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=p;break}if(r.lenbits=9,I={bits:r.lenbits},V=s(u,r.lens,0,r.nlen,r.lencode,0,r.work,I),r.lenbits=I.bits,V){t.msg="invalid literal/lengths set",r.mode=p;break}if(r.distbits=6,r.distcode=r.distdyn,I={bits:r.distbits},V=s(c,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,I),r.distbits=I.bits,V){t.msg="invalid distances set",r.mode=p;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(w>=6&&x>=258){t.next_out=b,t.avail_out=x,t.next_in=m,t.avail_in=w,r.hold=F,r.bits=S,a(t,C),b=t.next_out,v=t.output,x=t.avail_out,m=t.next_in,g=t.input,w=t.avail_in,F=r.hold,S=r.bits,r.mode===f&&(r.back=-1);break}for(r.back=0;N=(U=r.lencode[F&(1<<r.lenbits)-1])>>>16&255,M=65535&U,!((R=U>>>24)<=S);){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(N&&0==(240&N)){for(E=R,j=N,Z=M;N=(U=r.lencode[Z+((F&(1<<E+j)-1)>>E)])>>>16&255,M=65535&U,!(E+(R=U>>>24)<=S);){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}F>>>=E,S-=E,r.back+=E}if(F>>>=R,S-=R,r.back+=R,r.length=M,0===N){r.mode=26;break}if(32&N){r.back=-1,r.mode=f;break}if(64&N){t.msg="invalid literal/length code",r.mode=p;break}r.extra=15&N,r.mode=22;case 22:if(r.extra){for(z=r.extra;S<z;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.length+=F&(1<<r.extra)-1,F>>>=r.extra,S-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;N=(U=r.distcode[F&(1<<r.distbits)-1])>>>16&255,M=65535&U,!((R=U>>>24)<=S);){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(0==(240&N)){for(E=R,j=N,Z=M;N=(U=r.distcode[Z+((F&(1<<E+j)-1)>>E)])>>>16&255,M=65535&U,!(E+(R=U>>>24)<=S);){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}F>>>=E,S-=E,r.back+=E}if(F>>>=R,S-=R,r.back+=R,64&N){t.msg="invalid distance code",r.mode=p;break}r.offset=M,r.extra=15&N,r.mode=24;case 24:if(r.extra){for(z=r.extra;S<z;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}r.offset+=F&(1<<r.extra)-1,F>>>=r.extra,S-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=p;break}r.mode=25;case 25:if(0===x)break t;if(D=C-x,r.offset>D){if((D=r.offset-D)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=p;break}D>r.wnext?(D-=r.wnext,A=r.wsize-D):A=r.wnext-D,D>r.length&&(D=r.length),O=r.window}else O=v,A=b-r.offset,D=r.length;D>x&&(D=x),x-=D,r.length-=D;do{v[b++]=O[A++]}while(--D);0===r.length&&(r.mode=21);break;case 26:if(0===x)break t;v[b++]=r.length,x--,r.mode=21;break;case 27:if(r.wrap){for(;S<32;){if(0===w)break t;w--,F|=g[m++]<<S,S+=8}if(C-=x,t.total_out+=C,r.total+=C,C&&(t.adler=r.check=r.flags?i(r.check,v,C,b-C):o(r.check,v,C,b-C)),C=x,(r.flags?F:y(F))!==r.check){t.msg="incorrect data check",r.mode=p;break}F=0,S=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;S<32;){if(0===w)break t;w--,F+=g[m++]<<S,S+=8}if(F!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=p;break}F=0,S=0}r.mode=29;case 29:V=1;break t;case p:V=-3;break t;case 31:return-4;default:return d}return t.next_out=b,t.avail_out=x,t.next_in=m,t.avail_in=w,r.hold=F,r.bits=S,(r.wsize||C!==t.avail_out&&r.mode<p&&(r.mode<27||4!==e))&&T(t,t.output,t.next_out,C-t.avail_out)?(r.mode=31,-4):(k-=t.avail_in,C-=t.avail_out,t.total_in+=k,t.total_out+=C,r.total+=C,r.wrap&&C&&(t.adler=r.check=r.flags?i(r.check,v,C,t.next_out-C):o(r.check,v,C,t.next_out-C)),t.data_type=r.bits+(r.last?64:0)+(r.mode===f?128:0)+(20===r.mode||15===r.mode?256:0),(0===k&&0===C||4===e)&&V===l&&(V=-5),V)},e.inflateEnd=function(t){if(!t||!t.state)return d;var e=t.state;return e.window&&(e.window=null),t.state=null,l},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?d:(r.head=e,e.done=!1,l):d},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?d:11===r.mode&&o(1,e,n,0)!==r.check?-3:T(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,l):d},e.inflateInfo="pako inflate (from Nodeca project)"},241:(t,e,r)=>{"use strict";var n=r(236),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,l,d,h){var f,p,g,v,y,m,b,w,x,F=h.bits,S=0,k=0,C=0,P=0,T=0,D=0,A=0,O=0,R=0,N=0,M=null,E=0,j=new n.Buf16(16),Z=new n.Buf16(16),B=null,V=0;for(S=0;S<=15;S++)j[S]=0;for(k=0;k<u;k++)j[e[r+k]]++;for(T=F,P=15;P>=1&&0===j[P];P--);if(T>P&&(T=P),0===P)return c[l++]=20971520,c[l++]=20971520,h.bits=1,0;for(C=1;C<P&&0===j[C];C++);for(T<C&&(T=C),O=1,S=1;S<=15;S++)if(O<<=1,(O-=j[S])<0)return-1;if(O>0&&(0===t||1!==P))return-1;for(Z[1]=0,S=1;S<15;S++)Z[S+1]=Z[S]+j[S];for(k=0;k<u;k++)0!==e[r+k]&&(d[Z[e[r+k]]++]=k);if(0===t?(M=B=d,m=19):1===t?(M=o,E-=257,B=i,V-=257,m=256):(M=a,B=s,m=-1),N=0,k=0,S=C,y=l,D=T,A=0,g=-1,v=(R=1<<T)-1,1===t&&R>852||2===t&&R>592)return 1;for(;;){b=S-A,d[k]<m?(w=0,x=d[k]):d[k]>m?(w=B[V+d[k]],x=M[E+d[k]]):(w=96,x=0),f=1<<S-A,C=p=1<<D;do{c[y+(N>>A)+(p-=f)]=b<<24|w<<16|x|0}while(0!==p);for(f=1<<S-1;N&f;)f>>=1;if(0!==f?(N&=f-1,N+=f):N=0,k++,0==--j[S]){if(S===P)break;S=e[r+d[k]]}if(S>T&&(N&v)!==g){for(0===A&&(A=T),y+=C,O=1<<(D=S-A);D+A<P&&!((O-=j[D+A])<=0);)D++,O<<=1;if(R+=1<<D,1===t&&R>852||2===t&&R>592)return 1;c[g=N&v]=T<<24|D<<16|y-l|0}}return 0!==N&&(c[y+N]=S-A<<24|64<<16|0),h.bits=T,0}},898:t=>{"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},342:(t,e,r)=>{"use strict";var n=r(236);function o(t){for(var e=t.length;--e>=0;)t[e]=0}var i=256,a=i+1+29,s=30,u=19,c=2*a+1,l=15,d=16,h=256,f=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],p=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],g=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],v=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],y=new Array(2*(a+2));o(y);var m=new Array(60);o(m);var b=new Array(512);o(b);var w=new Array(256);o(w);var x=new Array(29);o(x);var F,S,k,C=new Array(s);function P(t,e,r,n,o){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=o,this.has_stree=t&&t.length}function T(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function D(t){return t<256?b[t]:b[256+(t>>>7)]}function A(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function O(t,e,r){t.bi_valid>d-r?(t.bi_buf|=e<<t.bi_valid&65535,A(t,t.bi_buf),t.bi_buf=e>>d-t.bi_valid,t.bi_valid+=r-d):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function R(t,e,r){O(t,r[2*e],r[2*e+1])}function N(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function M(t,e,r){var n,o,i=new Array(l+1),a=0;for(n=1;n<=l;n++)i[n]=a=a+r[n-1]<<1;for(o=0;o<=e;o++){var s=t[2*o+1];0!==s&&(t[2*o]=N(i[s]++,s))}}function E(t){var e;for(e=0;e<a;e++)t.dyn_ltree[2*e]=0;for(e=0;e<s;e++)t.dyn_dtree[2*e]=0;for(e=0;e<u;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*h]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function j(t){t.bi_valid>8?A(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function Z(t,e,r,n){var o=2*e,i=2*r;return t[o]<t[i]||t[o]===t[i]&&n[e]<=n[r]}function B(t,e,r){for(var n=t.heap[r],o=r<<1;o<=t.heap_len&&(o<t.heap_len&&Z(e,t.heap[o+1],t.heap[o],t.depth)&&o++,!Z(e,n,t.heap[o],t.depth));)t.heap[r]=t.heap[o],r=o,o<<=1;t.heap[r]=n}function V(t,e,r){var n,o,a,s,u=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*u]<<8|t.pending_buf[t.d_buf+2*u+1],o=t.pending_buf[t.l_buf+u],u++,0===n?R(t,o,e):(R(t,(a=w[o])+i+1,e),0!==(s=f[a])&&O(t,o-=x[a],s),R(t,a=D(--n),r),0!==(s=p[a])&&O(t,n-=C[a],s))}while(u<t.last_lit);R(t,h,e)}function I(t,e){var r,n,o,i=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,d=-1;for(t.heap_len=0,t.heap_max=c,r=0;r<u;r++)0!==i[2*r]?(t.heap[++t.heap_len]=d=r,t.depth[r]=0):i[2*r+1]=0;for(;t.heap_len<2;)i[2*(o=t.heap[++t.heap_len]=d<2?++d:0)]=1,t.depth[o]=0,t.opt_len--,s&&(t.static_len-=a[2*o+1]);for(e.max_code=d,r=t.heap_len>>1;r>=1;r--)B(t,i,r);o=u;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],B(t,i,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,i[2*o]=i[2*r]+i[2*n],t.depth[o]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,i[2*r+1]=i[2*n+1]=o,t.heap[1]=o++,B(t,i,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,o,i,a,s,u=e.dyn_tree,d=e.max_code,h=e.stat_desc.static_tree,f=e.stat_desc.has_stree,p=e.stat_desc.extra_bits,g=e.stat_desc.extra_base,v=e.stat_desc.max_length,y=0;for(i=0;i<=l;i++)t.bl_count[i]=0;for(u[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<c;r++)(i=u[2*u[2*(n=t.heap[r])+1]+1]+1)>v&&(i=v,y++),u[2*n+1]=i,n>d||(t.bl_count[i]++,a=0,n>=g&&(a=p[n-g]),s=u[2*n],t.opt_len+=s*(i+a),f&&(t.static_len+=s*(h[2*n+1]+a)));if(0!==y){do{for(i=v-1;0===t.bl_count[i];)i--;t.bl_count[i]--,t.bl_count[i+1]+=2,t.bl_count[v]--,y-=2}while(y>0);for(i=v;0!==i;i--)for(n=t.bl_count[i];0!==n;)(o=t.heap[--r])>d||(u[2*o+1]!==i&&(t.opt_len+=(i-u[2*o+1])*u[2*o],u[2*o+1]=i),n--)}}(t,e),M(i,d,t.bl_count)}function z(t,e,r){var n,o,i=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)o=a,a=e[2*(n+1)+1],++s<u&&o===a||(s<c?t.bl_tree[2*o]+=s:0!==o?(o!==i&&t.bl_tree[2*o]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=0,i=o,0===a?(u=138,c=3):o===a?(u=6,c=3):(u=7,c=4))}function U(t,e,r){var n,o,i=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(o=a,a=e[2*(n+1)+1],!(++s<u&&o===a)){if(s<c)do{R(t,o,t.bl_tree)}while(0!=--s);else 0!==o?(o!==i&&(R(t,o,t.bl_tree),s--),R(t,16,t.bl_tree),O(t,s-3,2)):s<=10?(R(t,17,t.bl_tree),O(t,s-3,3)):(R(t,18,t.bl_tree),O(t,s-11,7));s=0,i=o,0===a?(u=138,c=3):o===a?(u=6,c=3):(u=7,c=4)}}o(C);var G=!1;function q(t,e,r,o){O(t,0+(o?1:0),3),function(t,e,r,o){j(t),A(t,r),A(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}e._tr_init=function(t){G||(function(){var t,e,r,n,o,c=new Array(l+1);for(r=0,n=0;n<28;n++)for(x[n]=r,t=0;t<1<<f[n];t++)w[r++]=n;for(w[r-1]=n,o=0,n=0;n<16;n++)for(C[n]=o,t=0;t<1<<p[n];t++)b[o++]=n;for(o>>=7;n<s;n++)for(C[n]=o<<7,t=0;t<1<<p[n]-7;t++)b[256+o++]=n;for(e=0;e<=l;e++)c[e]=0;for(t=0;t<=143;)y[2*t+1]=8,t++,c[8]++;for(;t<=255;)y[2*t+1]=9,t++,c[9]++;for(;t<=279;)y[2*t+1]=7,t++,c[7]++;for(;t<=287;)y[2*t+1]=8,t++,c[8]++;for(M(y,a+1,c),t=0;t<s;t++)m[2*t+1]=5,m[2*t]=N(t,5);F=new P(y,f,i+1,a,l),S=new P(m,p,0,s,l),k=new P(new Array(0),g,0,u,7)}(),G=!0),t.l_desc=new T(t.dyn_ltree,F),t.d_desc=new T(t.dyn_dtree,S),t.bl_desc=new T(t.bl_tree,k),t.bi_buf=0,t.bi_valid=0,E(t)},e._tr_stored_block=q,e._tr_flush_block=function(t,e,r,n){var o,a,s=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<i;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),I(t,t.l_desc),I(t,t.d_desc),s=function(t){var e;for(z(t,t.dyn_ltree,t.l_desc.max_code),z(t,t.dyn_dtree,t.d_desc.max_code),I(t,t.bl_desc),e=u-1;e>=3&&0===t.bl_tree[2*v[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),o=t.opt_len+3+7>>>3,(a=t.static_len+3+7>>>3)<=o&&(o=a)):o=a=r+5,r+4<=o&&-1!==e?q(t,e,r,n):4===t.strategy||a===o?(O(t,2+(n?1:0),3),V(t,y,m)):(O(t,4+(n?1:0),3),function(t,e,r,n){var o;for(O(t,e-257,5),O(t,r-1,5),O(t,n-4,4),o=0;o<n;o++)O(t,t.bl_tree[2*v[o]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),V(t,t.dyn_ltree,t.dyn_dtree)),E(t),n&&j(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(w[r]+i+1)]++,t.dyn_dtree[2*D(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){O(t,2,3),R(t,h,y),function(t){16===t.bi_valid?(A(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},292:t=>{"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},214:(t,e,r)=>{"use strict";r.d(e,{bt:()=>br,dd:()=>ht,ll:()=>Se,ip:()=>he,uo:()=>ke,MY:()=>be,Ke:()=>xe,I3:()=>fe,Nl:()=>pe,Cb:()=>He,Ic:()=>we,_D:()=>Ce,kP:()=>l,r4:()=>Z,eB:()=>me,wx:()=>ve,Qu:()=>xr,vL:()=>_e,Rj:()=>yr,PK:()=>$e,Cx:()=>We,Lf:()=>Je,MR:()=>Le,o0:()=>ar,qC:()=>Xe,jM:()=>pr,BE:()=>tr,SI:()=>wr,bF:()=>er,yg:()=>rr,X7:()=>nr,bi:()=>dr,uc:()=>sr,jw:()=>ge,E9:()=>Fe,Yt:()=>n,EE:()=>or,H:()=>Pt,pO:()=>V,VV:()=>ye,bY:()=>w,rz:()=>W,ad:()=>L,mH:()=>u,N$:()=>a,Q0:()=>s,Sn:()=>kt,Fv:()=>ot,oq:()=>F,Rx:()=>S,ZM:()=>K,Qn:()=>At,wG:()=>Zt,p4:()=>jt,Fc:()=>T,DS:()=>ze,S8:()=>Ve,oX:()=>Ge,E3:()=>qe,gi:()=>Ie,HN:()=>Ue,RW:()=>h,Ht:()=>g,FC:()=>ue,lg:()=>ae,ZT:()=>oe,xL:()=>re,If:()=>ee,AE:()=>Qt,pS:()=>_t,kw:()=>Yt,Ax:()=>yt,JT:()=>de,sS:()=>Jt,lt:()=>se,JG:()=>$t,os:()=>ne,yU:()=>Ht,zh:()=>le,Bj:()=>ce,Ip:()=>Ct,ZY:()=>tt,Qj:()=>it,hl:()=>_,y2:()=>$,se:()=>Tt,qs:()=>Oe,jg:()=>Ae,v0:()=>Re,kZ:()=>H,Vb:()=>rt,Ao:()=>X,t:()=>et,TE:()=>Ne,Pq:()=>G,bo:()=>U,uR:()=>d,vi:()=>v,C9:()=>Y,U6:()=>b,YN:()=>j,B8:()=>Dt,YK:()=>vt,Iz:()=>gt,Ge:()=>R,kc:()=>ie,Ih:()=>O,o7:()=>x,bA:()=>A,xl:()=>st,Q$:()=>ct,Rt:()=>E,O8:()=>Ft,l6:()=>Mt,GR:()=>mt,mE:()=>wt,vE:()=>at,Ou:()=>z,xC:()=>B,H7:()=>lt,lf:()=>I,H_:()=>q,sp:()=>St,yb:()=>Et,dA:()=>bt,XS:()=>xt,an:()=>pt,zS:()=>ft,kW:()=>dt,nU:()=>ut,V_:()=>nt,Cs:()=>M,VQ:()=>N,h6:()=>Q,Go:()=>J,Ux:()=>m,Yr:()=>y,Iu:()=>D});var n,o=r(655),i=r(878),a=function(t){return t instanceof i.wQ?t:i.wQ.of(t)},s=function(t){return t instanceof i.qI?t:i.qI.of(t)},u=function(t){return t instanceof i.qI?t.asNumber():t},c=r(955);!function(t){t.Degrees="degrees",t.Radians="radians"}(n||(n={}));var l,d=function(t){return(0,c.ku)(t,"radianAngle",["number"]),{type:n.Radians,angle:t}},h=function(t){return(0,c.ku)(t,"degreeAngle",["number"]),{type:n.Degrees,angle:t}},f=n.Radians,p=n.Degrees,g=function(t){return t*Math.PI/180},v=function(t){return 180*t/Math.PI},y=function(t){return t.type===f?t.angle:t.type===p?g(t.angle):(0,c.vU)("Invalid rotation: "+JSON.stringify(t))},m=function(t){return t.type===f?v(t.angle):t.type===p?t.angle:(0,c.vU)("Invalid rotation: "+JSON.stringify(t))},b=function(t){void 0===t&&(t=0);var e=t/90%4;return 0===e?0:1===e?90:2===e?180:3===e?270:0},w=function(t,e){void 0===e&&(e=0);var r=b(e);return 90===r||270===r?{width:t.height,height:t.width}:{width:t.width,height:t.height}},x=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0);var n=t.x,o=t.y,i=t.width,a=t.height,s=b(r),u=e/2;return 0===s?{x:n-u,y:o-u,width:i,height:a}:90===s?{x:n-a+u,y:o-u,width:a,height:i}:180===s?{x:n-i+u,y:o-a+u,width:i,height:a}:270===s?{x:n-u,y:o-i+u,width:a,height:i}:{x:n-u,y:o-u,width:i,height:a}},F=function(){return i.sI.of(i.Y3.ClipNonZero)},S=function(){return i.sI.of(i.Y3.ClipEvenOdd)},k=Math.cos,C=Math.sin,P=Math.tan,T=function(t,e,r,n,o,a){return i.sI.of(i.Y3.ConcatTransformationMatrix,[s(t),s(e),s(r),s(n),s(o),s(a)])},D=function(t,e){return T(1,0,0,1,t,e)},A=function(t,e){return T(t,0,0,e,0,0)},O=function(t){return T(k(u(t)),C(u(t)),-C(u(t)),k(u(t)),0,0)},R=function(t){return O(g(u(t)))},N=function(t,e){return T(1,P(u(t)),P(u(e)),1,0,0)},M=function(t,e){return N(g(u(t)),g(u(e)))},E=function(t,e){return i.sI.of(i.Y3.SetLineDashPattern,["["+t.map(s).join(" ")+"]",s(e)])},j=function(){return E([],0)};!function(t){t[t.Butt=0]="Butt",t[t.Round=1]="Round",t[t.Projecting=2]="Projecting"}(l||(l={}));var Z,B=function(t){return i.sI.of(i.Y3.SetLineCapStyle,[s(t)])};!function(t){t[t.Miter=0]="Miter",t[t.Round=1]="Round",t[t.Bevel=2]="Bevel"}(Z||(Z={}));var V,I=function(t){return i.sI.of(i.Y3.SetLineJoinStyle,[s(t)])},z=function(t){return i.sI.of(i.Y3.SetGraphicsStateParams,[a(t)])},U=function(){return i.sI.of(i.Y3.PushGraphicsState)},G=function(){return i.sI.of(i.Y3.PopGraphicsState)},q=function(t){return i.sI.of(i.Y3.SetLineWidth,[s(t)])},W=function(t,e,r,n,o,a){return i.sI.of(i.Y3.AppendBezierCurve,[s(t),s(e),s(r),s(n),s(o),s(a)])},L=function(t,e,r,n){return i.sI.of(i.Y3.CurveToReplicateInitialPoint,[s(t),s(e),s(r),s(n)])},K=function(){return i.sI.of(i.Y3.ClosePath)},X=function(t,e){return i.sI.of(i.Y3.MoveTo,[s(t),s(e)])},H=function(t,e){return i.sI.of(i.Y3.LineTo,[s(t),s(e)])},Y=function(t,e,r,n){return i.sI.of(i.Y3.AppendRectangle,[s(t),s(e),s(r),s(n)])},Q=function(t,e,r){return Y(t,e,r,r)},J=function(){return i.sI.of(i.Y3.StrokePath)},_=function(){return i.sI.of(i.Y3.FillNonZero)},$=function(){return i.sI.of(i.Y3.FillNonZeroAndStroke)},tt=function(){return i.sI.of(i.Y3.EndPath)},et=function(){return i.sI.of(i.Y3.NextLine)},rt=function(t,e){return i.sI.of(i.Y3.MoveText,[s(t),s(e)])},nt=function(t){return i.sI.of(i.Y3.ShowText,[t])},ot=function(){return i.sI.of(i.Y3.BeginText)},it=function(){return i.sI.of(i.Y3.EndText)},at=function(t,e){return i.sI.of(i.Y3.SetFontAndSize,[a(t),s(e)])},st=function(t){return i.sI.of(i.Y3.SetCharacterSpacing,[s(t)])},ut=function(t){return i.sI.of(i.Y3.SetWordSpacing,[s(t)])},ct=function(t){return i.sI.of(i.Y3.SetTextHorizontalScaling,[s(t)])},lt=function(t){return i.sI.of(i.Y3.SetTextLineHeight,[s(t)])},dt=function(t){return i.sI.of(i.Y3.SetTextRise,[s(t)])};!function(t){t[t.Fill=0]="Fill",t[t.Outline=1]="Outline",t[t.FillAndOutline=2]="FillAndOutline",t[t.Invisible=3]="Invisible",t[t.FillAndClip=4]="FillAndClip",t[t.OutlineAndClip=5]="OutlineAndClip",t[t.FillAndOutlineAndClip=6]="FillAndOutlineAndClip",t[t.Clip=7]="Clip"}(V||(V={}));var ht,ft=function(t){return i.sI.of(i.Y3.SetTextRenderingMode,[s(t)])},pt=function(t,e,r,n,o,a){return i.sI.of(i.Y3.SetTextMatrix,[s(t),s(e),s(r),s(n),s(o),s(a)])},gt=function(t,e,r,n,o){return pt(k(u(t)),C(u(t))+P(u(e)),-C(u(t))+P(u(r)),k(u(t)),n,o)},vt=function(t,e,r,n,o){return gt(g(u(t)),g(u(e)),g(u(r)),n,o)},yt=function(t){return i.sI.of(i.Y3.DrawObject,[a(t)])},mt=function(t){return i.sI.of(i.Y3.NonStrokingColorGray,[s(t)])},bt=function(t){return i.sI.of(i.Y3.StrokingColorGray,[s(t)])},wt=function(t,e,r){return i.sI.of(i.Y3.NonStrokingColorRgb,[s(t),s(e),s(r)])},xt=function(t,e,r){return i.sI.of(i.Y3.StrokingColorRgb,[s(t),s(e),s(r)])},Ft=function(t,e,r,n){return i.sI.of(i.Y3.NonStrokingColorCmyk,[s(t),s(e),s(r),s(n)])},St=function(t,e,r,n){return i.sI.of(i.Y3.StrokingColorCmyk,[s(t),s(e),s(r),s(n)])},kt=function(t){return i.sI.of(i.Y3.BeginMarkedContent,[a(t)])},Ct=function(){return i.sI.of(i.Y3.EndMarkedContent)};!function(t){t.Grayscale="Grayscale",t.RGB="RGB",t.CMYK="CMYK"}(ht||(ht={}));var Pt,Tt=function(t){return(0,c.gI)(t,"gray",0,1),{type:ht.Grayscale,gray:t}},Dt=function(t,e,r){return(0,c.gI)(t,"red",0,1),(0,c.gI)(e,"green",0,1),(0,c.gI)(r,"blue",0,1),{type:ht.RGB,red:t,green:e,blue:r}},At=function(t,e,r,n){return(0,c.gI)(t,"cyan",0,1),(0,c.gI)(e,"magenta",0,1),(0,c.gI)(r,"yellow",0,1),(0,c.gI)(n,"key",0,1),{type:ht.CMYK,cyan:t,magenta:e,yellow:r,key:n}},Ot=ht.Grayscale,Rt=ht.RGB,Nt=ht.CMYK,Mt=function(t){return t.type===Ot?mt(t.gray):t.type===Rt?wt(t.red,t.green,t.blue):t.type===Nt?Ft(t.cyan,t.magenta,t.yellow,t.key):(0,c.vU)("Invalid color: "+JSON.stringify(t))},Et=function(t){return t.type===Ot?bt(t.gray):t.type===Rt?xt(t.red,t.green,t.blue):t.type===Nt?St(t.cyan,t.magenta,t.yellow,t.key):(0,c.vU)("Invalid color: "+JSON.stringify(t))},jt=function(t,e){return void 0===e&&(e=1),1===(null==t?void 0:t.length)?Tt(t[0]*e):3===(null==t?void 0:t.length)?Dt(t[0]*e,t[1]*e,t[2]*e):4===(null==t?void 0:t.length)?At(t[0]*e,t[1]*e,t[2]*e,t[3]*e):void 0},Zt=function(t){return t.type===Ot?[t.gray]:t.type===Rt?[t.red,t.green,t.blue]:t.type===Nt?[t.cyan,t.magenta,t.yellow,t.key]:(0,c.vU)("Invalid color: "+JSON.stringify(t))},Bt=0,Vt=0,It=0,zt=0,Ut=0,Gt=0,qt=new Map([["A",7],["a",7],["C",6],["c",6],["H",1],["h",1],["L",2],["l",2],["M",2],["m",2],["Q",4],["q",4],["S",4],["s",4],["T",2],["t",2],["V",1],["v",1],["Z",0],["z",0]]),Wt={M:function(t){return Bt=t[0],Vt=t[1],It=zt=null,Ut=Bt,Gt=Vt,X(Bt,Vt)},m:function(t){return Bt+=t[0],Vt+=t[1],It=zt=null,Ut=Bt,Gt=Vt,X(Bt,Vt)},C:function(t){return Bt=t[4],Vt=t[5],It=t[2],zt=t[3],W(t[0],t[1],t[2],t[3],t[4],t[5])},c:function(t){var e=W(t[0]+Bt,t[1]+Vt,t[2]+Bt,t[3]+Vt,t[4]+Bt,t[5]+Vt);return It=Bt+t[2],zt=Vt+t[3],Bt+=t[4],Vt+=t[5],e},S:function(t){null!==It&&null!==zt||(It=Bt,zt=Vt);var e=W(Bt-(It-Bt),Vt-(zt-Vt),t[0],t[1],t[2],t[3]);return It=t[0],zt=t[1],Bt=t[2],Vt=t[3],e},s:function(t){null!==It&&null!==zt||(It=Bt,zt=Vt);var e=W(Bt-(It-Bt),Vt-(zt-Vt),Bt+t[0],Vt+t[1],Bt+t[2],Vt+t[3]);return It=Bt+t[0],zt=Vt+t[1],Bt+=t[2],Vt+=t[3],e},Q:function(t){return It=t[0],zt=t[1],Bt=t[2],Vt=t[3],L(t[0],t[1],Bt,Vt)},q:function(t){var e=L(t[0]+Bt,t[1]+Vt,t[2]+Bt,t[3]+Vt);return It=Bt+t[0],zt=Vt+t[1],Bt+=t[2],Vt+=t[3],e},T:function(t){null===It||null===zt?(It=Bt,zt=Vt):(It=Bt-(It-Bt),zt=Vt-(zt-Vt));var e=L(It,zt,t[0],t[1]);return It=Bt-(It-Bt),zt=Vt-(zt-Vt),Bt=t[0],Vt=t[1],e},t:function(t){null===It||null===zt?(It=Bt,zt=Vt):(It=Bt-(It-Bt),zt=Vt-(zt-Vt));var e=L(It,zt,Bt+t[0],Vt+t[1]);return Bt+=t[0],Vt+=t[1],e},A:function(t){var e=Lt(Bt,Vt,t);return Bt=t[5],Vt=t[6],e},a:function(t){t[5]+=Bt,t[6]+=Vt;var e=Lt(Bt,Vt,t);return Bt=t[5],Vt=t[6],e},L:function(t){return Bt=t[0],Vt=t[1],It=zt=null,H(Bt,Vt)},l:function(t){return Bt+=t[0],Vt+=t[1],It=zt=null,H(Bt,Vt)},H:function(t){return Bt=t[0],It=zt=null,H(Bt,Vt)},h:function(t){return Bt+=t[0],It=zt=null,H(Bt,Vt)},V:function(t){return Vt=t[0],It=zt=null,H(Bt,Vt)},v:function(t){return Vt+=t[0],It=zt=null,H(Bt,Vt)},Z:function(){var t=K();return Bt=Ut,Vt=Gt,t},z:function(){var t=K();return Bt=Ut,Vt=Gt,t}},Lt=function(t,e,r){for(var n=r[0],o=r[1],i=r[2],a=r[3],s=r[4],u=r[5],c=r[6],l=[],d=0,h=Kt(u,c,n,o,a,s,i,t,e);d<h.length;d++){var f=h[d],p=Xt.apply(void 0,f);l.push(W.apply(void 0,p))}return l},Kt=function(t,e,r,n,o,i,a,s,u){var c=a*(Math.PI/180),l=Math.sin(c),d=Math.cos(c);r=Math.abs(r),n=Math.abs(n);var h=(It=d*(s-t)*.5+l*(u-e)*.5)*It/(r*r)+(zt=d*(u-e)*.5-l*(s-t)*.5)*zt/(n*n);h>1&&(r*=h=Math.sqrt(h),n*=h);var f=d/r,p=l/r,g=-l/n,v=d/n,y=f*s+p*u,m=g*s+v*u,b=f*t+p*e,w=g*t+v*e,x=1/((b-y)*(b-y)+(w-m)*(w-m))-.25;x<0&&(x=0);var F=Math.sqrt(x);i===o&&(F=-F);var S=.5*(y+b)-F*(w-m),k=.5*(m+w)+F*(b-y),C=Math.atan2(m-k,y-S),P=Math.atan2(w-k,b-S)-C;P<0&&1===i?P+=2*Math.PI:P>0&&0===i&&(P-=2*Math.PI);for(var T=Math.ceil(Math.abs(P/(.5*Math.PI+.001))),D=[],A=0;A<T;A++){var O=C+A*P/T,R=C+(A+1)*P/T;D[A]=[S,k,O,R,r,n,l,d]}return D},Xt=function(t,e,r,n,o,i,a,s){var u=s*o,c=-a*i,l=a*o,d=s*i,h=.5*(n-r),f=8/3*Math.sin(.5*h)*Math.sin(.5*h)/Math.sin(h),p=t+Math.cos(r)-f*Math.sin(r),g=e+Math.sin(r)+f*Math.cos(r),v=t+Math.cos(n),y=e+Math.sin(n),m=v+f*Math.sin(n),b=y-f*Math.cos(n);return[u*p+c*g,l*p+d*g,u*m+c*b,l*m+d*b,u*v+c*y,l*v+d*y]},Ht=function(t,e){return[U(),e.graphicsState&&z(e.graphicsState),ot(),Mt(e.color),at(e.font,e.size),gt(y(e.rotate),y(e.xSkew),y(e.ySkew),e.x,e.y),nt(t),it(),G()].filter(Boolean)},Yt=function(t,e){for(var r=[U(),e.graphicsState&&z(e.graphicsState),ot(),Mt(e.color),at(e.font,e.size),lt(e.lineHeight),gt(y(e.rotate),y(e.xSkew),y(e.ySkew),e.x,e.y)].filter(Boolean),n=0,o=t.length;n<o;n++)r.push(nt(t[n]),et());return r.push(it(),G()),r},Qt=function(t,e){return[U(),e.graphicsState&&z(e.graphicsState),D(e.x,e.y),O(y(e.rotate)),A(e.width,e.height),N(y(e.xSkew),y(e.ySkew)),yt(t),G()].filter(Boolean)},Jt=function(t,e){return[U(),e.graphicsState&&z(e.graphicsState),D(e.x,e.y),O(y(e.rotate)),A(e.xScale,e.yScale),N(y(e.xSkew),y(e.ySkew)),yt(t),G()].filter(Boolean)},_t=function(t){var e,r;return[U(),t.graphicsState&&z(t.graphicsState),t.color&&Et(t.color),q(t.thickness),E(null!==(e=t.dashArray)&&void 0!==e?e:[],null!==(r=t.dashPhase)&&void 0!==r?r:0),X(t.start.x,t.start.y),t.lineCap&&B(t.lineCap),X(t.start.x,t.start.y),H(t.end.x,t.end.y),J(),G()].filter(Boolean)},$t=function(t){var e,r;return[U(),t.graphicsState&&z(t.graphicsState),t.color&&Mt(t.color),t.borderColor&&Et(t.borderColor),q(t.borderWidth),t.borderLineCap&&B(t.borderLineCap),E(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0),D(t.x,t.y),O(y(t.rotate)),N(y(t.xSkew),y(t.ySkew)),X(0,0),H(0,t.height),H(t.width,t.height),H(t.width,0),K(),t.color&&t.borderWidth?$():t.color?_():t.borderColor?J():K(),G()].filter(Boolean)},te=(Math.sqrt(2)-1)/3*4,ee=function(t){var e=u(t.x),r=u(t.y),n=u(t.xScale),o=u(t.yScale),i=n*te,a=o*te,s=(e-=n)+2*n,c=(r-=o)+2*o,l=e+n,d=r+o;return[U(),X(e,d),W(e,d-a,l-i,r,l,r),W(l+i,r,s,d-a,s,d),W(s,d+a,l+i,c,l,c),W(l-i,c,e,d+a,e,d),G()]},re=function(t){var e,r,n,i,a,s,c,l,d,f,p,g,v,m,b,w;return(0,o.pr)([U(),t.graphicsState&&z(t.graphicsState),t.color&&Mt(t.color),t.borderColor&&Et(t.borderColor),q(t.borderWidth),t.borderLineCap&&B(t.borderLineCap),E(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0)],void 0===t.rotate?ee({x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale}):(i={x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale,rotate:null!==(n=t.rotate)&&void 0!==n?n:h(0)},a=u(i.x),s=u(i.y),c=u(i.xScale),l=u(i.yScale),d=-c,f=-l,p=c*te,g=l*te,v=d+2*c,m=f+2*l,b=d+c,w=f+l,[D(a,s),O(y(i.rotate)),X(d,w),W(d,w-g,b-p,f,b,f),W(b+p,f,v,w-g,v,w),W(v,w+g,b+p,m,b,m),W(b-p,m,d,w+g,d,w)]),[t.color&&t.borderWidth?$():t.color?_():t.borderColor?J():K(),G()]).filter(Boolean)},ne=function(t,e){var r,n,i;return(0,o.pr)([U(),e.graphicsState&&z(e.graphicsState),D(e.x,e.y),O(y(null!==(r=e.rotate)&&void 0!==r?r:h(0))),e.scale?A(e.scale,-e.scale):A(1,-1),e.color&&Mt(e.color),e.borderColor&&Et(e.borderColor),e.borderWidth&&q(e.borderWidth),e.borderLineCap&&B(e.borderLineCap),E(null!==(n=e.borderDashArray)&&void 0!==n?n:[],null!==(i=e.borderDashPhase)&&void 0!==i?i:0)],function(t){return function(t){Bt=Vt=It=zt=Ut=Gt=0;for(var e=[],r=0;r<t.length;r++){var n=t[r];if(n.cmd&&"function"==typeof Wt[n.cmd]){var o=Wt[n.cmd](n.args);Array.isArray(o)?e=e.concat(o):e.push(o)}}return e}(function(t){for(var e,r=[],n=[],o="",i=!1,a=0,s=0,u=t;s<u.length;s++){var c=u[s];if(qt.has(c))a=qt.get(c),e&&(o.length>0&&(n[n.length]=+o),r[r.length]={cmd:e,args:n},n=[],o="",i=!1),e=c;else if([" ",","].includes(c)||"-"===c&&o.length>0&&"e"!==o[o.length-1]||"."===c&&i){if(0===o.length)continue;n.length===a?(r[r.length]={cmd:e,args:n},n=[+o],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+o,i="."===c,o=["-","."].includes(c)?c:""}else o+=c,"."===c&&(i=!0)}return o.length>0&&(n.length===a?(r[r.length]={cmd:e,args:n},n=[+o],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+o),r[r.length]={cmd:e,args:n},r}(t))}(t),[e.color&&e.borderWidth?$():e.color?_():e.borderColor?J():K(),G()]).filter(Boolean)},oe=function(t){var e=u(t.size);return[U(),t.color&&Et(t.color),q(t.thickness),D(t.x,t.y),X(-.675*e,-.07601036269430045*e),H(-.25*e,-.49*e),H(.69*e,.475*e),J(),G()].filter(Boolean)},ie=function(t){return 0===t.rotation?[D(0,0),R(0)]:90===t.rotation?[D(t.width,0),R(90)]:180===t.rotation?[D(t.width,t.height),R(180)]:270===t.rotation?[D(0,t.height),R(270)]:[]},ae=function(t){var e=$t({x:t.x,y:t.y,width:t.width,height:t.height,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:h(0),xSkew:h(0),ySkew:h(0)});if(!t.filled)return e;var r=u(t.width),n=u(t.height),i=Math.min(r,n)/2,a=oe({x:r/2,y:n/2,size:i,thickness:t.thickness,color:t.markColor});return(0,o.pr)([U()],e,a,[G()])},se=function(t){var e=u(t.width),r=u(t.height),n=Math.min(e,r)/2,i=re({x:t.x,y:t.y,xScale:n,yScale:n,color:t.color,borderColor:t.borderColor,borderWidth:t.borderWidth});if(!t.filled)return i;var a=re({x:t.x,y:t.y,xScale:.45*n,yScale:.45*n,color:t.dotColor,borderColor:void 0,borderWidth:0});return(0,o.pr)([U()],i,a,[G()])},ue=function(t){var e=u(t.x),r=u(t.y),n=u(t.width),i=u(t.height),a=$t({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:h(0),xSkew:h(0),ySkew:h(0)}),s=ce(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:h(0),xSkew:h(0),ySkew:h(0)});return(0,o.pr)([U()],a,s,[G()])},ce=function(t,e){for(var r=[ot(),Mt(e.color),at(e.font,e.size)],n=0,o=t.length;n<o;n++){var i=t[n],a=i.encoded,s=i.x,u=i.y;r.push(gt(y(e.rotate),y(e.xSkew),y(e.ySkew),s,u),nt(a))}return r.push(it()),r},le=function(t){var e=u(t.x),r=u(t.y),n=u(t.width),i=u(t.height),a=u(t.borderWidth),s=u(t.padding),c=e+a/2+s,l=r+a/2+s,d=n-2*(a/2+s),f=i-2*(a/2+s),p=[X(c,l),H(c,l+f),H(c+d,l+f),H(c+d,l),K(),F(),tt()],g=$t({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:h(0),xSkew:h(0),ySkew:h(0)}),v=ce(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:h(0),xSkew:h(0),ySkew:h(0)}),y=(0,o.pr)([kt("Tx"),U()],v,[G(),Ct()]);return(0,o.pr)([U()],g,p,y,[G()])},de=function(t){for(var e=u(t.x),r=u(t.y),n=u(t.width),i=u(t.height),a=u(t.lineHeight),s=u(t.borderWidth),c=u(t.padding),l=e+s/2+c,d=r+s/2+c,f=n-2*(s/2+c),p=i-2*(s/2+c),g=[X(l,d),H(l,d+p),H(l+f,d+p),H(l+f,d),K(),F(),tt()],v=$t({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:h(0),xSkew:h(0),ySkew:h(0)}),y=[],m=0,b=t.selectedLines.length;m<b;m++){var w=t.textLines[t.selectedLines[m]];y.push.apply(y,$t({x:w.x-c,y:w.y-(a-w.height)/2,width:n-s,height:w.height+(a-w.height)/2,borderWidth:0,color:t.selectedColor,borderColor:void 0,rotate:h(0),xSkew:h(0),ySkew:h(0)}))}var x=ce(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:h(0),xSkew:h(0),ySkew:h(0)}),S=(0,o.pr)([kt("Tx"),U()],x,[G(),Ct()]);return(0,o.pr)([U()],v,y,g,S,[G()])},he=function(t){function e(){return t.call(this,"Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.")||this}return(0,o.ZT)(e,t),e}(Error),fe=function(t){function e(){return t.call(this,"Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.")||this}return(0,o.ZT)(e,t),e}(Error),pe=function(t){function e(){return t.call(this,"A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.")||this}return(0,o.ZT)(e,t),e}(Error),ge=function(t){function e(){return t.call(this,"PDFDocument has no pages so `PDFDocument.removePage` cannot be called")||this}return(0,o.ZT)(e,t),e}(Error),ve=function(t){function e(e){var r='PDFDocument has no form field with the name "'+e+'"';return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),ye=function(t){function e(e,r,n){var o,i,a='Expected field "'+e+'" to be of type '+(null==r?void 0:r.name)+", but it is actually of type "+(null!==(i=null===(o=null==n?void 0:n.constructor)||void 0===o?void 0:o.name)&&void 0!==i?i:n);return t.call(this,a)||this}return(0,o.ZT)(e,t),e}(Error),me=function(t){function e(e){var r='Failed to select check box due to missing onValue: "'+e+'"';return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),be=function(t){function e(e){var r='A field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),we=function(t){function e(e){var r='Field name contains invalid component: "'+e+'"';return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),xe=function(t){function e(e){var r='A non-terminal field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),Fe=function(t){function e(e){var r="Reading rich text fields is not supported: Attempted to read rich text field: "+e;return t.call(this,r)||this}return(0,o.ZT)(e,t),e}(Error),Se=function(t){function e(e,r){var n="Failed to layout combed text as lineLength="+e+" is greater than cellCount="+r;return t.call(this,n)||this}return(0,o.ZT)(e,t),e}(Error),ke=function(t){function e(e,r,n){var o="Attempted to set text with length="+e+" for TextField with maxLength="+r+" and name="+n;return t.call(this,o)||this}return(0,o.ZT)(e,t),e}(Error),Ce=function(t){function e(e,r,n){var o="Attempted to set maxLength="+r+", which is less than "+e+", the length of this field's current value (name="+n+")";return t.call(this,o)||this}return(0,o.ZT)(e,t),e}(Error);!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(Pt||(Pt={}));var Pe=function(t,e,r,n){void 0===n&&(n=!1);for(var o=4;o<500;){for(var i=0,a=0,s=t.length;a<s;a++){i+=1;for(var u=t[a].split(" "),c=r.width,l=0,d=u.length;l<d;l++){var h=l===d-1?u[l]:u[l]+" ",f=e.widthOfTextAtSize(h,o);(c-=f)<=0&&(i+=1,c=r.width-f)}}if(!n&&i>t.length)return o-1;var p=e.heightAtSize(o);if((p+.2*p)*i>Math.abs(r.height))return o-1;o+=1}return o},Te=function(t){for(var e=t.length;e>0;e--)if(/\s/.test(t[e]))return e},De=function(t,e,r,n){for(var o,i=t.length;i>0;){var a=t.substring(0,i),s=r.encodeText(a),u=r.widthOfTextAtSize(a,n);if(u<e)return{line:a,encoded:s,width:u,remainder:t.substring(i)||void 0};i=null!==(o=Te(a))&&void 0!==o?o:0}return{line:t,encoded:r.encodeText(t),width:r.widthOfTextAtSize(t,n),remainder:void 0}},Ae=function(t,e){var r=e.alignment,n=e.fontSize,o=e.font,i=e.bounds,a=(0,c.f7)((0,c.FV)(t));void 0!==n&&0!==n||(n=Pe(a,o,i,!0));for(var s=o.heightAtSize(n),u=s+.2*s,l=[],d=i.x,h=i.y,f=i.x+i.width,p=i.y+i.height,g=i.y+i.height,v=0,y=a.length;v<y;v++)for(var m=a[v];void 0!==m;){var b=De(m,i.width,o,n),w=b.line,x=b.encoded,F=b.width,S=b.remainder,k=r===Pt.Left?i.x:r===Pt.Center?i.x+i.width/2-F/2:r===Pt.Right?i.x+i.width-F:i.x;k<d&&(d=k),(g-=u)<h&&(h=g),k+F>f&&(f=k+F),g+s>p&&(p=g+s),l.push({text:w,encoded:x,width:F,height:s,x:k,y:g}),m=null==S?void 0:S.trim()}return{fontSize:n,lineHeight:u,lines:l,bounds:{x:d,y:h,width:f-d,height:p-h}}},Oe=function(t,e){var r=e.fontSize,n=e.font,o=e.bounds,i=e.cellCount,a=(0,c.VX)((0,c.FV)(t));if(a.length>i)throw new Se(a.length,i);void 0!==r&&0!==r||(r=function(t,e,r,n){for(var o=r.width/n,i=r.height,a=4,s=(0,c.Qs)(t);a<500;){for(var u=0,l=s.length;u<l;u++){var d=s[u];if(e.widthOfTextAtSize(d,a)>.75*o)return a-1}if(e.heightAtSize(a,{descender:!1})>i)return a-1;a+=1}return a}(a,n,o,i));for(var s=o.width/i,u=n.heightAtSize(r,{descender:!1}),l=o.y+(o.height/2-u/2),d=[],h=o.x,f=o.y,p=o.x+o.width,g=o.y+o.height,v=0,y=0;v<i;){var m=(0,c.Vk)(a,y),b=m[0],w=m[1],x=n.encodeText(b),F=n.widthOfTextAtSize(b,r),S=o.x+(s*v+s/2)-F/2;S<h&&(h=S),l<f&&(f=l),S+F>p&&(p=S+F),l+u>g&&(g=l+u),d.push({text:a,encoded:x,width:F,height:u,x:S,y:l}),v+=1,y+=w}return{fontSize:r,cells:d,bounds:{x:h,y:f,width:p-h,height:g-f}}},Re=function(t,e){var r=e.alignment,n=e.fontSize,o=e.font,i=e.bounds,a=(0,c.VX)((0,c.FV)(t));void 0!==n&&0!==n||(n=Pe([a],o,i));var s=o.encodeText(a),u=o.widthOfTextAtSize(a,n),l=o.heightAtSize(n,{descender:!1}),d=r===Pt.Left?i.x:r===Pt.Center?i.x+i.width/2-u/2:r===Pt.Right?i.x+i.width-u:i.x,h=i.y+(i.height/2-l/2);return{fontSize:n,line:{text:a,encoded:s,width:u,height:l,x:d,y:h},bounds:{x:d,y:h,width:u,height:l}}},Ne=function(t){return"normal"in t?t:{normal:t}},Me=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]+(\d*\.\d+|\d+)[\0\t\n\f\r\ ]+Tf/,Ee=function(t){var e,r,n=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",o=null!==(r=(0,c.JZ)(n,Me).match)&&void 0!==r?r:[],i=Number(o[2]);return isFinite(i)?i:void 0},je=/(\d*\.\d+|\d+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+(g|rg|k)/,Ze=function(t){var e,r=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",n=(0,c.JZ)(r,je).match,o=null!=n?n:[],i=o[1],a=o[2],s=o[3],u=o[4],l=o[5];return"g"===l&&i?Tt(Number(i)):"rg"===l&&i&&a&&s?Dt(Number(i),Number(a),Number(s)):"k"===l&&i&&a&&s&&u?At(Number(i),Number(a),Number(s),Number(u)):void 0},Be=function(t,e,r,n){var o;void 0===n&&(n=0);var i=[Mt(e).toString(),at(null!==(o=null==r?void 0:r.name)&&void 0!==o?o:"dummy__noop",n).toString()].join("\n");t.setDefaultAppearance(i)},Ve=function(t,e){var r,n,i,a=Ze(e),s=Ze(t.acroField),u=e.getRectangle(),c=e.getAppearanceCharacteristics(),l=e.getBorderStyle(),d=null!==(r=null==l?void 0:l.getWidth())&&void 0!==r?r:0,h=b(null==c?void 0:c.getRotation()),f=w(u,h),p=f.width,g=f.height,v=ie((0,o.pi)((0,o.pi)({},u),{rotation:h})),y=Dt(0,0,0),m=null!==(n=jt(null==c?void 0:c.getBorderColor()))&&void 0!==n?n:y,x=jt(null==c?void 0:c.getBackgroundColor()),F=jt(null==c?void 0:c.getBackgroundColor(),.8),S=null!==(i=null!=a?a:s)&&void 0!==i?i:y;Be(a?e:t.acroField,S);var k={x:0+d/2,y:0+d/2,width:p-d,height:g-d,thickness:1.5,borderWidth:d,borderColor:m,markColor:S};return{normal:{on:(0,o.pr)(v,ae((0,o.pi)((0,o.pi)({},k),{color:x,filled:!0}))),off:(0,o.pr)(v,ae((0,o.pi)((0,o.pi)({},k),{color:x,filled:!1})))},down:{on:(0,o.pr)(v,ae((0,o.pi)((0,o.pi)({},k),{color:F,filled:!0}))),off:(0,o.pr)(v,ae((0,o.pi)((0,o.pi)({},k),{color:F,filled:!1})))}}},Ie=function(t,e){var r,n,i,a=Ze(e),s=Ze(t.acroField),u=e.getRectangle(),c=e.getAppearanceCharacteristics(),l=e.getBorderStyle(),d=null!==(r=null==l?void 0:l.getWidth())&&void 0!==r?r:0,h=b(null==c?void 0:c.getRotation()),f=w(u,h),p=f.width,g=f.height,v=ie((0,o.pi)((0,o.pi)({},u),{rotation:h})),y=Dt(0,0,0),m=null!==(n=jt(null==c?void 0:c.getBorderColor()))&&void 0!==n?n:y,x=jt(null==c?void 0:c.getBackgroundColor()),F=jt(null==c?void 0:c.getBackgroundColor(),.8),S=null!==(i=null!=a?a:s)&&void 0!==i?i:y;Be(a?e:t.acroField,S);var k={x:p/2,y:g/2,width:p-d,height:g-d,borderWidth:d,borderColor:m,dotColor:S};return{normal:{on:(0,o.pr)(v,se((0,o.pi)((0,o.pi)({},k),{color:x,filled:!0}))),off:(0,o.pr)(v,se((0,o.pi)((0,o.pi)({},k),{color:x,filled:!1})))},down:{on:(0,o.pr)(v,se((0,o.pi)((0,o.pi)({},k),{color:F,filled:!0}))),off:(0,o.pr)(v,se((0,o.pi)((0,o.pi)({},k),{color:F,filled:!1})))}}},ze=function(t,e,r){var n,i,a,s,u,c=Ze(e),l=Ze(t.acroField),d=Ee(e),h=Ee(t.acroField),f=e.getRectangle(),p=e.getAppearanceCharacteristics(),g=e.getBorderStyle(),v=null==p?void 0:p.getCaptions(),y=null!==(n=null==v?void 0:v.normal)&&void 0!==n?n:"",m=null!==(a=null!==(i=null==v?void 0:v.down)&&void 0!==i?i:y)&&void 0!==a?a:"",x=null!==(s=null==g?void 0:g.getWidth())&&void 0!==s?s:0,F=b(null==p?void 0:p.getRotation()),S=w(f,F),k=S.width,C=S.height,P=ie((0,o.pi)((0,o.pi)({},f),{rotation:F})),T=Dt(0,0,0),D=jt(null==p?void 0:p.getBorderColor()),A=jt(null==p?void 0:p.getBackgroundColor()),O=jt(null==p?void 0:p.getBackgroundColor(),.8),R={x,y:x,width:k-2*x,height:C-2*x},N=Re(y,{alignment:Pt.Center,fontSize:null!=d?d:h,font:r,bounds:R}),M=Re(m,{alignment:Pt.Center,fontSize:null!=d?d:h,font:r,bounds:R}),E=Math.min(N.fontSize,M.fontSize),j=null!==(u=null!=c?c:l)&&void 0!==u?u:T;Be(c||void 0!==d?e:t.acroField,j,r,E);var Z={x:0+x/2,y:0+x/2,width:k-x,height:C-x,borderWidth:x,borderColor:D,textColor:j,font:r.name,fontSize:E};return{normal:(0,o.pr)(P,ue((0,o.pi)((0,o.pi)({},Z),{color:A,textLines:[N.line]}))),down:(0,o.pr)(P,ue((0,o.pi)((0,o.pi)({},Z),{color:O,textLines:[M.line]})))}},Ue=function(t,e,r){var n,i,a,s,u,c,l=Ze(e),d=Ze(t.acroField),h=Ee(e),f=Ee(t.acroField),p=e.getRectangle(),g=e.getAppearanceCharacteristics(),v=e.getBorderStyle(),y=null!==(n=t.getText())&&void 0!==n?n:"",m=null!==(i=null==v?void 0:v.getWidth())&&void 0!==i?i:0,x=b(null==g?void 0:g.getRotation()),F=w(p,x),S=F.width,k=F.height,C=ie((0,o.pi)((0,o.pi)({},p),{rotation:x})),P=Dt(0,0,0),T=jt(null==g?void 0:g.getBorderColor()),D=jt(null==g?void 0:g.getBackgroundColor()),A=t.isCombed()?0:1,O={x:m+A,y:m+A,width:S-2*(m+A),height:k-2*(m+A)};if(t.isMultiline())u=(R=Ae(y,{alignment:t.getAlignment(),fontSize:null!=h?h:f,font:r,bounds:O})).lines,c=R.fontSize;else if(t.isCombed())u=(R=Oe(y,{fontSize:null!=h?h:f,font:r,bounds:O,cellCount:null!==(a=t.getMaxLength())&&void 0!==a?a:0})).cells,c=R.fontSize;else{var R;u=[(R=Re(y,{alignment:t.getAlignment(),fontSize:null!=h?h:f,font:r,bounds:O})).line],c=R.fontSize}var N=null!==(s=null!=l?l:d)&&void 0!==s?s:P;Be(l||void 0!==h?e:t.acroField,N,r,c);var M={x:0+m/2,y:0+m/2,width:S-m,height:k-m,borderWidth:null!=m?m:0,borderColor:T,textColor:N,font:r.name,fontSize:c,color:D,textLines:u,padding:A};return(0,o.pr)(C,le(M))},Ge=function(t,e,r){var n,i,a,s=Ze(e),u=Ze(t.acroField),c=Ee(e),l=Ee(t.acroField),d=e.getRectangle(),h=e.getAppearanceCharacteristics(),f=e.getBorderStyle(),p=null!==(n=t.getSelected()[0])&&void 0!==n?n:"",g=null!==(i=null==f?void 0:f.getWidth())&&void 0!==i?i:0,v=b(null==h?void 0:h.getRotation()),y=w(d,v),m=y.width,x=y.height,F=ie((0,o.pi)((0,o.pi)({},d),{rotation:v})),S=Dt(0,0,0),k=jt(null==h?void 0:h.getBorderColor()),C=jt(null==h?void 0:h.getBackgroundColor()),P={x:g+1,y:g+1,width:m-2*(g+1),height:x-2*(g+1)},T=Re(p,{alignment:Pt.Left,fontSize:null!=c?c:l,font:r,bounds:P}),D=T.line,A=T.fontSize,O=null!==(a=null!=s?s:u)&&void 0!==a?a:S;Be(s||void 0!==c?e:t.acroField,O,r,A);var R={x:0+g/2,y:0+g/2,width:m-g,height:x-g,borderWidth:null!=g?g:0,borderColor:k,textColor:O,font:r.name,fontSize:A,color:C,textLines:[D],padding:1};return(0,o.pr)(F,le(R))},qe=function(t,e,r){var n,i,a=Ze(e),s=Ze(t.acroField),u=Ee(e),c=Ee(t.acroField),l=e.getRectangle(),d=e.getAppearanceCharacteristics(),h=e.getBorderStyle(),f=null!==(n=null==h?void 0:h.getWidth())&&void 0!==n?n:0,p=b(null==d?void 0:d.getRotation()),g=w(l,p),v=g.width,y=g.height,m=ie((0,o.pi)((0,o.pi)({},l),{rotation:p})),x=Dt(0,0,0),F=jt(null==d?void 0:d.getBorderColor()),S=jt(null==d?void 0:d.getBackgroundColor()),k=t.getOptions(),C=t.getSelected();t.isSorted()&&k.sort();for(var P="",T=0,D=k.length;T<D;T++)P+=k[T],T<D-1&&(P+="\n");var A={x:f+1,y:f+1,width:v-2*(f+1),height:y-2*(f+1)},O=Ae(P,{alignment:Pt.Left,fontSize:null!=u?u:c,font:r,bounds:A}),R=O.lines,N=O.fontSize,M=O.lineHeight,E=[];for(T=0,D=R.length;T<D;T++){var j=R[T];C.includes(j.text)&&E.push(T)}var Z=Dt(.6,193/255,218/255),B=null!==(i=null!=a?a:s)&&void 0!==i?i:x;return Be(a||void 0!==u?e:t.acroField,B,r,N),(0,o.pr)(m,de({x:0+f/2,y:0+f/2,width:v-f,height:y-f,borderWidth:null!=f?f:0,borderColor:F,textColor:B,font:r.name,fontSize:N,color:S,textLines:R,lineHeight:M,selectedColor:Z,selectedLines:E,padding:1}))};const We=function(){function t(t,e,r){this.alreadyEmbedded=!1,(0,c.ku)(t,"ref",[[i.$F,"PDFRef"]]),(0,c.ku)(e,"doc",[[yr,"PDFDocument"]]),(0,c.ku)(r,"embedder",[[i.dS,"PDFPageEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return(0,c.ku)(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return(0,o.mG)(this,void 0,void 0,(function(){return(0,o.Jh)(this,(function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}(),Le=function(){function t(t,e,r){this.modified=!0,(0,c.ku)(t,"ref",[[i.$F,"PDFRef"]]),(0,c.ku)(e,"doc",[[yr,"PDFDocument"]]),(0,c.ku)(r,"embedder",[[i.Wz,"CustomFontEmbedder"],[i.IL,"StandardFontEmbedder"]]),this.ref=t,this.doc=e,this.name=r.fontName,this.embedder=r}return t.prototype.encodeText=function(t){return(0,c.ku)(t,"text",["string"]),this.modified=!0,this.embedder.encodeText(t)},t.prototype.widthOfTextAtSize=function(t,e){return(0,c.ku)(t,"text",["string"]),(0,c.ku)(e,"size",["number"]),this.embedder.widthOfTextAtSize(t,e)},t.prototype.heightAtSize=function(t,e){var r;return(0,c.ku)(t,"size",["number"]),(0,c.MU)(null==e?void 0:e.descender,"options.descender",["boolean"]),this.embedder.heightOfFontAtSize(t,{descender:null===(r=null==e?void 0:e.descender)||void 0===r||r})},t.prototype.sizeAtHeight=function(t){return(0,c.ku)(t,"height",["number"]),this.embedder.sizeOfFontAtHeight(t)},t.prototype.getCharacterSet=function(){return this.embedder instanceof i.IL?this.embedder.encoding.supportedCodePoints:this.embedder.font.characterSet},t.prototype.embed=function(){return(0,o.mG)(this,void 0,void 0,(function(){return(0,o.Jh)(this,(function(t){switch(t.label){case 0:return this.modified?[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]:[3,2];case 1:t.sent(),this.modified=!1,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();var Ke=function(){function t(t,e,r){(0,c.ku)(t,"ref",[[i.$F,"PDFRef"]]),(0,c.ku)(e,"doc",[[yr,"PDFDocument"]]),(0,c.ku)(r,"embedder",[[i.sm,"JpegEmbedder"],[i.Le,"PngEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return(0,c.ku)(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.scaleToFit=function(t,e){(0,c.ku)(t,"width",["number"]),(0,c.ku)(e,"height",["number"]);var r=t/this.width,n=e/this.height,o=Math.min(r,n);return this.scale(o)},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return(0,o.mG)(this,void 0,void 0,(function(){var t,e,r;return(0,o.Jh)(this,(function(n){switch(n.label){case 0:return this.embedder?(this.embedTask||(e=(t=this).doc,r=t.ref,this.embedTask=this.embedder.embedIntoContext(e.context,r)),[4,this.embedTask]):[2];case 1:return n.sent(),this.embedder=void 0,[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();const Xe=Ke;var He;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(He||(He={}));var Ye=function(t){(0,c.MU)(null==t?void 0:t.x,"options.x",["number"]),(0,c.MU)(null==t?void 0:t.y,"options.y",["number"]),(0,c.MU)(null==t?void 0:t.width,"options.width",["number"]),(0,c.MU)(null==t?void 0:t.height,"options.height",["number"]),(0,c.MU)(null==t?void 0:t.textColor,"options.textColor",[[Object,"Color"]]),(0,c.MU)(null==t?void 0:t.backgroundColor,"options.backgroundColor",[[Object,"Color"]]),(0,c.MU)(null==t?void 0:t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,c.MU)(null==t?void 0:t.borderWidth,"options.borderWidth",["number"]),(0,c.MU)(null==t?void 0:t.rotate,"options.rotate",[[Object,"Rotation"]])},Qe=function(){function t(t,e,r){(0,c.ku)(t,"acroField",[[i.Fs,"PDFAcroTerminal"]]),(0,c.ku)(e,"ref",[[i.$F,"PDFRef"]]),(0,c.ku)(r,"doc",[[yr,"PDFDocument"]]),this.acroField=t,this.ref=e,this.doc=r}return t.prototype.getName=function(){var t;return null!==(t=this.acroField.getFullyQualifiedName())&&void 0!==t?t:""},t.prototype.isReadOnly=function(){return this.acroField.hasFlag(i.PV.ReadOnly)},t.prototype.enableReadOnly=function(){this.acroField.setFlagTo(i.PV.ReadOnly,!0)},t.prototype.disableReadOnly=function(){this.acroField.setFlagTo(i.PV.ReadOnly,!1)},t.prototype.isRequired=function(){return this.acroField.hasFlag(i.PV.Required)},t.prototype.enableRequired=function(){this.acroField.setFlagTo(i.PV.Required,!0)},t.prototype.disableRequired=function(){this.acroField.setFlagTo(i.PV.Required,!1)},t.prototype.isExported=function(){return!this.acroField.hasFlag(i.PV.NoExport)},t.prototype.enableExporting=function(){this.acroField.setFlagTo(i.PV.NoExport,!1)},t.prototype.disableExporting=function(){this.acroField.setFlagTo(i.PV.NoExport,!0)},t.prototype.needsAppearancesUpdate=function(){throw new i.iQ(this.constructor.name,"needsAppearancesUpdate")},t.prototype.defaultUpdateAppearances=function(t){throw new i.iQ(this.constructor.name,"defaultUpdateAppearances")},t.prototype.markAsDirty=function(){this.doc.getForm().markFieldAsDirty(this.ref)},t.prototype.markAsClean=function(){this.doc.getForm().markFieldAsClean(this.ref)},t.prototype.isDirty=function(){return this.doc.getForm().fieldIsDirty(this.ref)},t.prototype.createWidget=function(t){var e,r=t.textColor,n=t.backgroundColor,o=t.borderColor,a=t.borderWidth,s=m(t.rotate),u=t.caption,l=t.x,d=t.y,h=t.width+a,f=t.height+a,p=Boolean(t.hidden),g=t.page;(0,c.m_)(s,"degreesAngle",90);var v=i.ci.create(this.doc.context,this.ref),y=x({x:l,y:d,width:h,height:f},a,s);v.setRectangle(y),g&&v.setP(g);var b=v.getOrCreateAppearanceCharacteristics();n&&b.setBackgroundColor(Zt(n)),b.setRotation(s),u&&b.setCaptions({normal:u}),o&&b.setBorderColor(Zt(o));var w=v.getOrCreateBorderStyle();if(void 0!==a&&w.setWidth(a),v.setFlagTo(i.TV.Print,!0),v.setFlagTo(i.TV.Hidden,p),v.setFlagTo(i.TV.Invisible,!1),r){var F=(null!==(e=this.acroField.getDefaultAppearance())&&void 0!==e?e:"")+"\n"+Mt(r).toString();this.acroField.setDefaultAppearance(F)}return v},t.prototype.updateWidgetAppearanceWithFont=function(t,e,r){var n=r.normal,o=r.rollover,i=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceStream(t,n,e),rollover:o&&this.createAppearanceStream(t,o,e),down:i&&this.createAppearanceStream(t,i,e)})},t.prototype.updateOnOffWidgetAppearance=function(t,e,r){var n=r.normal,o=r.rollover,i=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceDict(t,n,e),rollover:o&&this.createAppearanceDict(t,o,e),down:i&&this.createAppearanceDict(t,i,e)})},t.prototype.updateWidgetAppearances=function(t,e){var r=e.normal,n=e.rollover,o=e.down;t.setNormalAppearance(r),n?t.setRolloverAppearance(n):t.removeRolloverAppearance(),o?t.setDownAppearance(o):t.removeDownAppearance()},t.prototype.createAppearanceStream=function(t,e,r){var n,o=this.acroField.dict.context,i=t.getRectangle(),a=i.width,s=i.height,u=r&&{Font:(n={},n[r.name]=r.ref,n)},c=o.formXObject(e,{Resources:u,BBox:o.obj([0,0,a,s]),Matrix:o.obj([1,0,0,1,0,0])});return o.register(c)},t.prototype.createImageAppearanceStream=function(t,e,r){var n,i,a=this.acroField.dict.context,s=t.getRectangle(),u=t.getAppearanceCharacteristics(),c=t.getBorderStyle(),l=null!==(i=null==c?void 0:c.getWidth())&&void 0!==i?i:0,d=b(null==u?void 0:u.getRotation()),f=ie((0,o.pi)((0,o.pi)({},s),{rotation:d})),p=w(s,d),g=e.scaleToFit(p.width-2*l,p.height-2*l),v={x:l,y:l,width:g.width,height:g.height,rotate:h(0),xSkew:h(0),ySkew:h(0)};r===He.Center?(v.x+=(p.width-2*l)/2-g.width/2,v.y+=(p.height-2*l)/2-g.height/2):r===He.Right&&(v.x=p.width-l-g.width,v.y=p.height-l-g.height);var y=this.doc.context.addRandomSuffix("Image",10),m=(0,o.pr)(f,Qt(y,v)),x={XObject:(n={},n[y]=e.ref,n)},F=a.formXObject(m,{Resources:x,BBox:a.obj([0,0,s.width,s.height]),Matrix:a.obj([1,0,0,1,0,0])});return a.register(F)},t.prototype.createAppearanceDict=function(t,e,r){var n=this.acroField.dict.context,o=this.createAppearanceStream(t,e.on),a=this.createAppearanceStream(t,e.off),s=n.obj({});return s.set(r,o),s.set(i.wQ.of("Off"),a),s},t}();const Je=Qe,_e=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroCheckBox",[[i.Ei,"PDFAcroCheckBox"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.check=function(){var t,e=null!==(t=this.acroField.getOnValue())&&void 0!==t?t:i.wQ.of("Yes");this.markAsDirty(),this.acroField.setValue(e)},e.prototype.uncheck=function(){this.markAsDirty(),this.acroField.setValue(i.wQ.of("Off"))},e.prototype.isChecked=function(){var t=this.acroField.getOnValue();return!!t&&t===this.acroField.getValue()},e.prototype.addToPage=function(t,e){var r,n,o,a,s,u;(0,c.ku)(t,"page",[[wr,"PDFPage"]]),Ye(e),e||(e={}),"textColor"in e||(e.textColor=Dt(0,0,0)),"backgroundColor"in e||(e.backgroundColor=Dt(1,1,1)),"borderColor"in e||(e.borderColor=Dt(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var l=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:50,height:null!==(a=e.height)&&void 0!==a?a:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(s=e.borderWidth)&&void 0!==s?s:0,rotate:null!==(u=e.rotate)&&void 0!==u?u:h(0),hidden:e.hidden,page:t.ref}),d=this.doc.context.register(l.dict);this.acroField.addWidget(d),l.setAppearanceState(i.wQ.of("Off")),this.updateWidgetAppearance(l,i.wQ.of("Yes")),t.node.addAnnot(d)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var o=e[r],a=o.getAppearanceState(),s=null===(t=o.getAppearances())||void 0===t?void 0:t.normal;if(!(s instanceof i.mh))return!0;if(a&&!s.has(a))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){var e;(0,c.MU)(t,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var a=r[n],s=null!==(e=a.getOnValue())&&void 0!==e?e:i.wQ.of("Yes");s&&this.updateWidgetAppearance(a,s,t)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:Ve)(this,t));this.updateOnOffWidgetAppearance(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je),$e=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroComboBox",[[i.sS,"PDFAcroComboBox"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var o=t[r],i=o.display,a=o.value;e[r]=(null!=i?i:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){(0,c.ku)(t,"options",[Array]);for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:i.Ij.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){(0,c.ku)(t,"options",["string",Array]);for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),o=0,a=e.length;o<a;o++)n[o]={value:i.Ij.fromText(e[o])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),(0,c.ku)(t,"options",["string",Array]),(0,c.ku)(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t],n=this.getOptions();r.find((function(t){return!n.includes(t)}))&&this.enableEditing(),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var o=new Array(r.length),a=0,s=r.length;a<s;a++)o[a]=i.Ij.fromText(r[a]);if(e){var u=this.acroField.getValues();this.acroField.setValues(u.concat(o))}else this.acroField.setValues(o)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){(0,c.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isEditable=function(){return this.acroField.hasFlag(i.m0.Edit)},e.prototype.enableEditing=function(){this.acroField.setFlagTo(i.m0.Edit,!0)},e.prototype.disableEditing=function(){this.acroField.setFlagTo(i.m0.Edit,!1)},e.prototype.isSorted=function(){return this.acroField.hasFlag(i.m0.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(i.m0.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(i.m0.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(i.m0.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(i.m0.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(i.m0.MultiSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(i.m0.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(i.m0.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(i.m0.DoNotSpellCheck,!0)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(i.m0.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(i.m0.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(i.m0.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,o,i,a,s,u;(0,c.ku)(t,"page",[[wr,"PDFPage"]]),Ye(e),e||(e={}),"textColor"in e||(e.textColor=Dt(0,0,0)),"backgroundColor"in e||(e.backgroundColor=Dt(1,1,1)),"borderColor"in e||(e.borderColor=Dt(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var l=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(i=e.height)&&void 0!==i?i:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:h(0),hidden:e.hidden,page:t.ref}),d=this.doc.context.register(l.dict);this.acroField.addWidget(d);var f=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(l,f),t.node.addAnnot(d)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof i.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),(0,c.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var i=r[n];this.updateWidgetAppearance(i,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:Ge)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je),tr=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroListBox",[[i.Au,"PDFAcroListBox"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var o=t[r],i=o.display,a=o.value;e[r]=(null!=i?i:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){(0,c.ku)(t,"options",[Array]),this.markAsDirty();for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:i.Ij.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){(0,c.ku)(t,"options",["string",Array]),this.markAsDirty();for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),o=0,a=e.length;o<a;o++)n[o]={value:i.Ij.fromText(e[o])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),(0,c.ku)(t,"options",["string",Array]),(0,c.ku)(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t],n=this.getOptions();(0,c.k$)(r,"option",n),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var o=new Array(r.length),a=0,s=r.length;a<s;a++)o[a]=i.Ij.fromText(r[a]);if(e){var u=this.acroField.getValues();this.acroField.setValues(u.concat(o))}else this.acroField.setValues(o)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){(0,c.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isSorted=function(){return this.acroField.hasFlag(i.m0.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(i.m0.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(i.m0.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(i.m0.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(i.m0.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(i.m0.MultiSelect,!1)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(i.m0.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(i.m0.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(i.m0.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,o,i,a,s,u;(0,c.ku)(t,"page",[[wr,"PDFPage"]]),Ye(e),e||(e={}),"textColor"in e||(e.textColor=Dt(0,0,0)),"backgroundColor"in e||(e.backgroundColor=Dt(1,1,1)),"borderColor"in e||(e.borderColor=Dt(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var l=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(i=e.height)&&void 0!==i?i:100,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:h(0),hidden:e.hidden,page:t.ref}),d=this.doc.context.register(l.dict);this.acroField.addWidget(d);var f=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(l,f),t.node.addAnnot(d)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof i.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),(0,c.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var i=r[n];this.updateWidgetAppearance(i,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:qe)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je),er=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroRadioButton",[[i.Ym,"PDFAcroRadioButton"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.getOptions=function(){var t=this.acroField.getExportValues();if(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e}var o=this.acroField.getOnValues(),i=new Array(o.length);for(r=0,n=i.length;r<n;r++)i[r]=o[r].decodeText();return i},e.prototype.getSelected=function(){var t=this.acroField.getValue();if(t!==i.wQ.of("Off")){var e=this.acroField.getExportValues();if(e)for(var r=this.acroField.getOnValues(),n=0,o=r.length;n<o;n++)if(r[n]===t)return e[n].decodeText();return t.decodeText()}},e.prototype.select=function(t){(0,c.ku)(t,"option",["string"]);var e=this.getOptions();(0,c.DA)(t,"option",e),this.markAsDirty();var r=this.acroField.getOnValues(),n=this.acroField.getExportValues();if(n)for(var o=0,i=n.length;o<i;o++)n[o].decodeText()===t&&this.acroField.setValue(r[o]);else for(o=0,i=r.length;o<i;o++){var a=r[o];a.decodeText()===t&&this.acroField.setValue(a)}},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValue(i.wQ.of("Off"))},e.prototype.isOffToggleable=function(){return!this.acroField.hasFlag(i.Ub.NoToggleToOff)},e.prototype.enableOffToggling=function(){this.acroField.setFlagTo(i.Ub.NoToggleToOff,!1)},e.prototype.disableOffToggling=function(){this.acroField.setFlagTo(i.Ub.NoToggleToOff,!0)},e.prototype.isMutuallyExclusive=function(){return!this.acroField.hasFlag(i.Ub.RadiosInUnison)},e.prototype.enableMutualExclusion=function(){this.acroField.setFlagTo(i.Ub.RadiosInUnison,!1)},e.prototype.disableMutualExclusion=function(){this.acroField.setFlagTo(i.Ub.RadiosInUnison,!0)},e.prototype.addOptionToPage=function(t,e,r){var n,o,a,s,u,l,d,f,p;(0,c.ku)(t,"option",["string"]),(0,c.ku)(e,"page",[[wr,"PDFPage"]]),Ye(r);var g=this.createWidget({x:null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0,y:null!==(o=null==r?void 0:r.y)&&void 0!==o?o:0,width:null!==(a=null==r?void 0:r.width)&&void 0!==a?a:50,height:null!==(s=null==r?void 0:r.height)&&void 0!==s?s:50,textColor:null!==(u=null==r?void 0:r.textColor)&&void 0!==u?u:Dt(0,0,0),backgroundColor:null!==(l=null==r?void 0:r.backgroundColor)&&void 0!==l?l:Dt(1,1,1),borderColor:null!==(d=null==r?void 0:r.borderColor)&&void 0!==d?d:Dt(0,0,0),borderWidth:null!==(f=null==r?void 0:r.borderWidth)&&void 0!==f?f:1,rotate:null!==(p=null==r?void 0:r.rotate)&&void 0!==p?p:h(0),hidden:null==r?void 0:r.hidden,page:e.ref}),v=this.doc.context.register(g.dict),y=this.acroField.addWidgetWithOpt(v,i.Ij.fromText(t),!this.isMutuallyExclusive());g.setAppearanceState(i.wQ.of("Off")),this.updateWidgetAppearance(g,y),e.node.addAnnot(v)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var o=e[r],a=o.getAppearanceState(),s=null===(t=o.getAppearances())||void 0===t?void 0:t.normal;if(!(s instanceof i.mh))return!0;if(a&&!s.has(a))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){(0,c.MU)(t,"provider",[Function]);for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var o=e[r],i=o.getOnValue();i&&this.updateWidgetAppearance(o,i,t)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:Ie)(this,t));this.updateOnOffWidgetAppearance(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je),rr=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroSignature",[[i.uQ,"PDFAcroSignature"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.needsAppearancesUpdate=function(){return!1},e.of=function(t,r,n){return new e(t,r,n)},e}(Je),nr=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroText",[[i._X,"PDFAcroText"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.getText=function(){var t=this.acroField.getValue();if(!t&&this.isRichFormatted())throw new Fe(this.getName());return null==t?void 0:t.decodeText()},e.prototype.setText=function(t){(0,c.MU)(t,"text",["string"]);var e=this.getMaxLength();if(void 0!==e&&t&&t.length>e)throw new ke(t.length,e,this.getName());this.markAsDirty(),this.disableRichFormatting(),t?this.acroField.setValue(i.Ij.fromText(t)):this.acroField.removeValue()},e.prototype.getAlignment=function(){var t=this.acroField.getQuadding();return 0===t?Pt.Left:1===t?Pt.Center:2===t?Pt.Right:Pt.Left},e.prototype.setAlignment=function(t){(0,c.DA)(t,"alignment",Pt),this.markAsDirty(),this.acroField.setQuadding(t)},e.prototype.getMaxLength=function(){return this.acroField.getMaxLength()},e.prototype.setMaxLength=function(t){if((0,c.zo)(t,"maxLength",0,Number.MAX_SAFE_INTEGER),this.markAsDirty(),void 0===t)this.acroField.removeMaxLength();else{var e=this.getText();if(e&&e.length>t)throw new Ce(e.length,t,this.getName());this.acroField.setMaxLength(t)}},e.prototype.removeMaxLength=function(){this.markAsDirty(),this.acroField.removeMaxLength()},e.prototype.setImage=function(t){for(var e=this.getAlignment(),r=e===Pt.Center?He.Center:e===Pt.Right?He.Right:He.Left,n=this.acroField.getWidgets(),o=0,i=n.length;o<i;o++){var a=n[o],s=this.createImageAppearanceStream(a,t,r);this.updateWidgetAppearances(a,{normal:s})}this.markAsClean()},e.prototype.setFontSize=function(t){(0,c.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isMultiline=function(){return this.acroField.hasFlag(i.oD.Multiline)},e.prototype.enableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(i.oD.Multiline,!0)},e.prototype.disableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(i.oD.Multiline,!1)},e.prototype.isPassword=function(){return this.acroField.hasFlag(i.oD.Password)},e.prototype.enablePassword=function(){this.acroField.setFlagTo(i.oD.Password,!0)},e.prototype.disablePassword=function(){this.acroField.setFlagTo(i.oD.Password,!1)},e.prototype.isFileSelector=function(){return this.acroField.hasFlag(i.oD.FileSelect)},e.prototype.enableFileSelection=function(){this.acroField.setFlagTo(i.oD.FileSelect,!0)},e.prototype.disableFileSelection=function(){this.acroField.setFlagTo(i.oD.FileSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(i.oD.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(i.oD.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(i.oD.DoNotSpellCheck,!0)},e.prototype.isScrollable=function(){return!this.acroField.hasFlag(i.oD.DoNotScroll)},e.prototype.enableScrolling=function(){this.acroField.setFlagTo(i.oD.DoNotScroll,!1)},e.prototype.disableScrolling=function(){this.acroField.setFlagTo(i.oD.DoNotScroll,!0)},e.prototype.isCombed=function(){return this.acroField.hasFlag(i.oD.Comb)&&!this.isMultiline()&&!this.isPassword()&&!this.isFileSelector()&&void 0!==this.getMaxLength()},e.prototype.enableCombing=function(){void 0===this.getMaxLength()&&console.warn("PDFTextFields must have a max length in order to be combed"),this.markAsDirty(),this.disableMultiline(),this.disablePassword(),this.disableFileSelection(),this.acroField.setFlagTo(i.oD.Comb,!0)},e.prototype.disableCombing=function(){this.markAsDirty(),this.acroField.setFlagTo(i.oD.Comb,!1)},e.prototype.isRichFormatted=function(){return this.acroField.hasFlag(i.oD.RichText)},e.prototype.enableRichFormatting=function(){this.acroField.setFlagTo(i.oD.RichText,!0)},e.prototype.disableRichFormatting=function(){this.acroField.setFlagTo(i.oD.RichText,!1)},e.prototype.addToPage=function(t,e){var r,n,o,i,a,s,u;(0,c.ku)(t,"page",[[wr,"PDFPage"]]),Ye(e),e||(e={}),"textColor"in e||(e.textColor=Dt(0,0,0)),"backgroundColor"in e||(e.backgroundColor=Dt(1,1,1)),"borderColor"in e||(e.borderColor=Dt(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var l=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(i=e.height)&&void 0!==i?i:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:h(0),hidden:e.hidden,page:t.ref}),d=this.doc.context.register(l.dict);this.acroField.addWidget(d);var f=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(l,f),t.node.addAnnot(d)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof i.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),(0,c.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var i=r[n];this.updateWidgetAppearance(i,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:Ue)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je);var or;!function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(or||(or={}));var ir=function(){function t(t,e){var r=this;this.embedDefaultFont=function(){return r.doc.embedStandardFont(or.Helvetica)},(0,c.ku)(t,"acroForm",[[i.PS,"PDFAcroForm"]]),(0,c.ku)(e,"doc",[[yr,"PDFDocument"]]),this.acroForm=t,this.doc=e,this.dirtyFields=new Set,this.defaultFontCache=c.Ct.populatedBy(this.embedDefaultFont)}return t.prototype.hasXFA=function(){return this.acroForm.dict.has(i.wQ.of("XFA"))},t.prototype.deleteXFA=function(){this.acroForm.dict.delete(i.wQ.of("XFA"))},t.prototype.getFields=function(){for(var t=this.acroForm.getAllFields(),e=[],r=0,n=t.length;r<n;r++){var o=t[r],i=o[0],a=o[1],s=ur(i,a,this.doc);s&&e.push(s)}return e},t.prototype.getFieldMaybe=function(t){(0,c.ku)(t,"name",["string"]);for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var o=e[r];if(o.getName()===t)return o}},t.prototype.getField=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getFieldMaybe(t);if(e)return e;throw new ve(t)},t.prototype.getButton=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof xr)return e;throw new ye(t,xr,e)},t.prototype.getCheckBox=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof _e)return e;throw new ye(t,_e,e)},t.prototype.getDropdown=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof $e)return e;throw new ye(t,$e,e)},t.prototype.getOptionList=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof tr)return e;throw new ye(t,tr,e)},t.prototype.getRadioGroup=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof er)return e;throw new ye(t,er,e)},t.prototype.getSignature=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof rr)return e;throw new ye(t,rr,e)},t.prototype.getTextField=function(t){(0,c.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof nr)return e;throw new ye(t,nr,e)},t.prototype.createButton=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i._.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),xr.of(n,n.ref,this.doc)},t.prototype.createCheckBox=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i.Ei.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),_e.of(n,n.ref,this.doc)},t.prototype.createDropdown=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i.sS.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),$e.of(n,n.ref,this.doc)},t.prototype.createOptionList=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i.Au.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),tr.of(n,n.ref,this.doc)},t.prototype.createRadioGroup=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i.Ym.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),er.of(n,n.ref,this.doc)},t.prototype.createTextField=function(t){(0,c.ku)(t,"name",["string"]);var e=cr(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=i._X.create(this.doc.context);return n.setPartialName(e.terminal),lr(r,[n,n.ref],e.terminal),nr.of(n,n.ref,this.doc)},t.prototype.flatten=function(t){void 0===t&&(t={updateFieldAppearances:!0}),t.updateFieldAppearances&&this.updateFieldAppearances();for(var e=this.getFields(),r=0,n=e.length;r<n;r++){for(var i=e[r],a=i.acroField.getWidgets(),s=0,u=a.length;s<u;s++){var c=a[s],l=this.findWidgetPage(c),d=this.findWidgetAppearanceRef(i,c),h=l.node.newXObject("FlatWidget",d),f=c.getRectangle(),p=(0,o.pr)([U(),D(f.x,f.y)],ie((0,o.pi)((0,o.pi)({},f),{rotation:0})),[yt(h),G()]).filter(Boolean);l.pushOperators.apply(l,p)}this.removeField(i)}},t.prototype.removeField=function(t){for(var e=t.acroField.getWidgets(),r=new Set,n=0,o=e.length;n<o;n++){var a=e[n],s=this.findWidgetAppearanceRef(t,a),u=this.findWidgetPage(a);r.add(u),u.node.removeAnnot(s)}r.forEach((function(e){return e.node.removeAnnot(t.ref)})),this.acroForm.removeField(t.acroField);for(var c=t.acroField.normalizedEntries().Kids,l=c.size(),d=0;d<l;d++){var h=c.get(d);h instanceof i.$F&&this.doc.context.delete(h)}this.doc.context.delete(t.ref)},t.prototype.updateFieldAppearances=function(t){(0,c.MU)(t,"font",[[Le,"PDFFont"]]),t=null!=t?t:this.getDefaultFont();for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var o=e[r];o.needsAppearancesUpdate()&&o.defaultUpdateAppearances(t)}},t.prototype.markFieldAsDirty=function(t){(0,c.MU)(t,"fieldRef",[[i.$F,"PDFRef"]]),this.dirtyFields.add(t)},t.prototype.markFieldAsClean=function(t){(0,c.MU)(t,"fieldRef",[[i.$F,"PDFRef"]]),this.dirtyFields.delete(t)},t.prototype.fieldIsDirty=function(t){return(0,c.MU)(t,"fieldRef",[[i.$F,"PDFRef"]]),this.dirtyFields.has(t)},t.prototype.getDefaultFont=function(){return this.defaultFontCache.access()},t.prototype.findWidgetPage=function(t){var e=t.P(),r=this.doc.getPages().find((function(t){return t.ref===e}));if(void 0===r){var n=this.doc.context.getObjectRef(t.dict);if(void 0===n)throw new Error("Could not find PDFRef for PDFObject");if(void 0===(r=this.doc.findPageForAnnotationRef(n)))throw new Error("Could not find page for PDFRef "+n)}return r},t.prototype.findWidgetAppearanceRef=function(t,e){var r,n=e.getNormalAppearance();if(n instanceof i.mh&&(t instanceof _e||t instanceof er)){var o=t.acroField.getValue(),a=null!==(r=n.get(o))&&void 0!==r?r:n.get(i.wQ.of("Off"));a instanceof i.$F&&(n=a)}if(!(n instanceof i.$F)){var s=t.getName();throw new Error("Failed to extract appearance ref for: "+s)}return n},t.prototype.findOrCreateNonTerminals=function(t){for(var e=[this.acroForm],r=0,n=t.length;r<n;r++){var o=t[r];if(!o)throw new we(o);var a=e[0],s=e[1],u=this.findNonTerminal(o,a);if(u)e=u;else{var c=i.qg.create(this.doc.context);c.setPartialName(o),c.setParent(s);var l=this.doc.context.register(c.dict);a.addField(l),e=[c,l]}}return e},t.prototype.findNonTerminal=function(t,e){for(var r=e instanceof i.PS?this.acroForm.getFields():(0,i.P_)(e.Kids()),n=0,o=r.length;n<o;n++){var a=r[n],s=a[0],u=a[1];if(s.getPartialName()===t){if(s instanceof i.qg)return[s,u];throw new be(t)}}},t.of=function(e,r){return new t(e,r)},t}();const ar=ir;var sr,ur=function(t,e,r){return t instanceof i._?xr.of(t,e,r):t instanceof i.Ei?_e.of(t,e,r):t instanceof i.sS?$e.of(t,e,r):t instanceof i.Au?tr.of(t,e,r):t instanceof i._X?nr.of(t,e,r):t instanceof i.Ym?er.of(t,e,r):t instanceof i.uQ?rr.of(t,e,r):void 0},cr=function(t){if(0===t.length)throw new Error("PDF field names must not be empty strings");for(var e=t.split("."),r=0,n=e.length;r<n;r++)if(""===e[r])throw new Error('Periods in PDF field names must be separated by at least one character: "'+t+'"');return 1===e.length?{nonTerminal:[],terminal:e[0]}:{nonTerminal:e.slice(0,e.length-1),terminal:e[e.length-1]}},lr=function(t,e,r){for(var n=t[0],o=t[1],a=e[0],s=e[1],u=n.normalizedEntries(),c=((0,i.P_)("Kids"in u?u.Kids:u.Fields)),l=0,d=c.length;l<d;l++)if(c[l][0].getPartialName()===r)throw new be(r);n.addField(s),a.setParent(o)},dr={"4A0":[4767.87,6740.79],"2A0":[3370.39,4767.87],A0:[2383.94,3370.39],A1:[1683.78,2383.94],A2:[1190.55,1683.78],A3:[841.89,1190.55],A4:[595.28,841.89],A5:[419.53,595.28],A6:[297.64,419.53],A7:[209.76,297.64],A8:[147.4,209.76],A9:[104.88,147.4],A10:[73.7,104.88],B0:[2834.65,4008.19],B1:[2004.09,2834.65],B2:[1417.32,2004.09],B3:[1000.63,1417.32],B4:[708.66,1000.63],B5:[498.9,708.66],B6:[354.33,498.9],B7:[249.45,354.33],B8:[175.75,249.45],B9:[124.72,175.75],B10:[87.87,124.72],C0:[2599.37,3676.54],C1:[1836.85,2599.37],C2:[1298.27,1836.85],C3:[918.43,1298.27],C4:[649.13,918.43],C5:[459.21,649.13],C6:[323.15,459.21],C7:[229.61,323.15],C8:[161.57,229.61],C9:[113.39,161.57],C10:[79.37,113.39],RA0:[2437.8,3458.27],RA1:[1729.13,2437.8],RA2:[1218.9,1729.13],RA3:[864.57,1218.9],RA4:[609.45,864.57],SRA0:[2551.18,3628.35],SRA1:[1814.17,2551.18],SRA2:[1275.59,1814.17],SRA3:[907.09,1275.59],SRA4:[637.8,907.09],Executive:[521.86,756],Folio:[612,936],Legal:[612,1008],Letter:[612,792],Tabloid:[792,1224]};!function(t){t[t.Fastest=1/0]="Fastest",t[t.Fast=1500]="Fast",t[t.Medium=500]="Medium",t[t.Slow=100]="Slow"}(sr||(sr={}));var hr=r(634);const fr=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return(0,o.mG)(this,void 0,void 0,(function(){var t,e,r,n;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t=o.sent(),this.doc.catalog.has(i.wQ.of("Names"))||this.doc.catalog.set(i.wQ.of("Names"),this.doc.context.obj({})),(e=this.doc.catalog.lookup(i.wQ.of("Names"),i.mh)).has(i.wQ.of("EmbeddedFiles"))||e.set(i.wQ.of("EmbeddedFiles"),this.doc.context.obj({})),(r=e.lookup(i.wQ.of("EmbeddedFiles"),i.mh)).has(i.wQ.of("Names"))||r.set(i.wQ.of("Names"),this.doc.context.obj([])),(n=r.lookup(i.wQ.of("Names"),i.Gr)).push(i.Ij.fromText(this.embedder.fileName)),n.push(t),this.doc.catalog.has(i.wQ.of("AF"))||this.doc.catalog.set(i.wQ.of("AF"),this.doc.context.obj([])),this.doc.catalog.lookup(i.wQ.of("AF"),i.Gr).push(t),this.alreadyEmbedded=!0,o.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}(),pr=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return(0,o.mG)(this,void 0,void 0,(function(){var t,e,r,n,a,s,u;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return this.alreadyEmbedded?[3,2]:(t=this.doc,e=t.catalog,r=t.context,[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]);case 1:n=o.sent(),e.has(i.wQ.of("Names"))||e.set(i.wQ.of("Names"),r.obj({})),(a=e.lookup(i.wQ.of("Names"),i.mh)).has(i.wQ.of("JavaScript"))||a.set(i.wQ.of("JavaScript"),r.obj({})),(s=a.lookup(i.wQ.of("JavaScript"),i.mh)).has(i.wQ.of("Names"))||s.set(i.wQ.of("Names"),r.obj([])),(u=s.lookup(i.wQ.of("Names"),i.Gr)).push(i.Ij.fromText(this.embedder.scriptName)),u.push(n),this.alreadyEmbedded=!0,o.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();var gr=r(158);const vr=function(){function t(t,e){this.script=t,this.scriptName=e}return t.for=function(e,r){return new t(e,r)},t.prototype.embedIntoContext=function(t,e){return(0,o.mG)(this,void 0,void 0,(function(){var r;return(0,o.Jh)(this,(function(n){return r=t.obj({Type:"Action",S:"JavaScript",JS:gr.Z.fromText(this.script)}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}(),yr=function(){function t(t,e,r){var n=this;if(this.defaultWordBreaks=[" "],this.computePages=function(){var t=[];return n.catalog.Pages().traverse((function(e,r){if(e instanceof i.Eg){var o=n.pageMap.get(e);o||(o=wr.of(e,r,n),n.pageMap.set(e,o)),t.push(o)}})),t},this.getOrCreateForm=function(){var t=n.catalog.getOrCreateAcroForm();return ar.of(t,n)},(0,c.ku)(t,"context",[[i.o6,"PDFContext"]]),(0,c.ku)(e,"ignoreEncryption",["boolean"]),this.context=t,this.catalog=t.lookup(t.trailerInfo.Root),this.isEncrypted=!!t.lookup(t.trailerInfo.Encrypt),this.pageCache=c.Ct.populatedBy(this.computePages),this.pageMap=new Map,this.formCache=c.Ct.populatedBy(this.getOrCreateForm),this.fonts=[],this.images=[],this.embeddedPages=[],this.embeddedFiles=[],this.javaScripts=[],!e&&this.isEncrypted)throw new he;r&&this.updateInfoDict()}return t.load=function(e,r){return void 0===r&&(r={}),(0,o.mG)(this,void 0,void 0,(function(){var n,a,s,u,l,d,h,f,p,g,v;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return n=r.ignoreEncryption,a=void 0!==n&&n,s=r.parseSpeed,u=void 0===s?sr.Slow:s,l=r.throwOnInvalidObject,d=void 0!==l&&l,h=r.updateMetadata,f=void 0===h||h,p=r.capNumbers,g=void 0!==p&&p,(0,c.ku)(e,"pdf",["string",Uint8Array,ArrayBuffer]),(0,c.ku)(a,"ignoreEncryption",["boolean"]),(0,c.ku)(u,"parseSpeed",["number"]),(0,c.ku)(d,"throwOnInvalidObject",["boolean"]),v=(0,c._f)(e),[4,i.h9.forBytesWithOptions(v,u,d,g).parseDocument()];case 1:return[2,new t(o.sent(),a,f)]}}))}))},t.create=function(e){return void 0===e&&(e={}),(0,o.mG)(this,void 0,void 0,(function(){var r,n,a,s,u,c;return(0,o.Jh)(this,(function(o){return r=e.updateMetadata,n=void 0===r||r,a=i.o6.create(),s=i.N8.withContext(a),u=a.register(s),c=i.lR.withContextAndPages(a,u),a.trailerInfo.Root=a.register(c),[2,new t(a,!1,n)]}))}))},t.prototype.registerFontkit=function(t){this.fontkit=t},t.prototype.getForm=function(){var t=this.formCache.access();return t.hasXFA()&&(console.warn("Removing XFA form data as pdf-lib does not support reading or writing XFA"),t.deleteXFA()),t},t.prototype.getTitle=function(){var t=this.getInfoDict().lookup(i.wQ.Title);if(t)return mr(t),t.decodeText()},t.prototype.getAuthor=function(){var t=this.getInfoDict().lookup(i.wQ.Author);if(t)return mr(t),t.decodeText()},t.prototype.getSubject=function(){var t=this.getInfoDict().lookup(i.wQ.Subject);if(t)return mr(t),t.decodeText()},t.prototype.getKeywords=function(){var t=this.getInfoDict().lookup(i.wQ.Keywords);if(t)return mr(t),t.decodeText()},t.prototype.getCreator=function(){var t=this.getInfoDict().lookup(i.wQ.Creator);if(t)return mr(t),t.decodeText()},t.prototype.getProducer=function(){var t=this.getInfoDict().lookup(i.wQ.Producer);if(t)return mr(t),t.decodeText()},t.prototype.getCreationDate=function(){var t=this.getInfoDict().lookup(i.wQ.CreationDate);if(t)return mr(t),t.decodeDate()},t.prototype.getModificationDate=function(){var t=this.getInfoDict().lookup(i.wQ.ModDate);if(t)return mr(t),t.decodeDate()},t.prototype.setTitle=function(t,e){(0,c.ku)(t,"title",["string"]);var r=i.wQ.of("Title");this.getInfoDict().set(r,i.Ij.fromText(t)),(null==e?void 0:e.showInWindowTitleBar)&&this.catalog.getOrCreateViewerPreferences().setDisplayDocTitle(!0)},t.prototype.setAuthor=function(t){(0,c.ku)(t,"author",["string"]);var e=i.wQ.of("Author");this.getInfoDict().set(e,i.Ij.fromText(t))},t.prototype.setSubject=function(t){(0,c.ku)(t,"author",["string"]);var e=i.wQ.of("Subject");this.getInfoDict().set(e,i.Ij.fromText(t))},t.prototype.setKeywords=function(t){(0,c.ku)(t,"keywords",[Array]);var e=i.wQ.of("Keywords");this.getInfoDict().set(e,i.Ij.fromText(t.join(" ")))},t.prototype.setCreator=function(t){(0,c.ku)(t,"creator",["string"]);var e=i.wQ.of("Creator");this.getInfoDict().set(e,i.Ij.fromText(t))},t.prototype.setProducer=function(t){(0,c.ku)(t,"creator",["string"]);var e=i.wQ.of("Producer");this.getInfoDict().set(e,i.Ij.fromText(t))},t.prototype.setLanguage=function(t){(0,c.ku)(t,"language",["string"]);var e=i.wQ.of("Lang");this.catalog.set(e,i.u2.of(t))},t.prototype.setCreationDate=function(t){(0,c.ku)(t,"creationDate",[[Date,"Date"]]);var e=i.wQ.of("CreationDate");this.getInfoDict().set(e,i.u2.fromDate(t))},t.prototype.setModificationDate=function(t){(0,c.ku)(t,"modificationDate",[[Date,"Date"]]);var e=i.wQ.of("ModDate");this.getInfoDict().set(e,i.u2.fromDate(t))},t.prototype.getPageCount=function(){return void 0===this.pageCount&&(this.pageCount=this.getPages().length),this.pageCount},t.prototype.getPages=function(){return this.pageCache.access()},t.prototype.getPage=function(t){var e=this.getPages();return(0,c.gI)(t,"index",0,e.length-1),e[t]},t.prototype.getPageIndices=function(){return(0,c.w6)(0,this.getPageCount())},t.prototype.removePage=function(t){var e=this.getPageCount();if(0===this.pageCount)throw new ge;(0,c.gI)(t,"index",0,e-1),this.catalog.removeLeafNode(t),this.pageCount=e-1},t.prototype.addPage=function(t){return(0,c.ku)(t,"page",["undefined",[wr,"PDFPage"],Array]),this.insertPage(this.getPageCount(),t)},t.prototype.insertPage=function(t,e){var r=this.getPageCount();if((0,c.gI)(t,"index",0,r),(0,c.ku)(e,"page",["undefined",[wr,"PDFPage"],Array]),!e||Array.isArray(e)){var n=Array.isArray(e)?e:dr.A4;(e=wr.create(this)).setSize.apply(e,n)}else if(e.doc!==this)throw new pe;var o=this.catalog.insertLeafNode(e.ref,t);return e.node.setParent(o),this.pageMap.set(e.node,e),this.pageCache.invalidate(),this.pageCount=r+1,e},t.prototype.copyPages=function(e,r){return(0,o.mG)(this,void 0,void 0,(function(){var n,a,s,u,l,d,h,f;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return(0,c.ku)(e,"srcDoc",[[t,"PDFDocument"]]),(0,c.ku)(r,"indices",[Array]),[4,e.flush()];case 1:for(o.sent(),n=i.Wy.for(e.context,this.context),a=e.getPages(),s=new Array(r.length),u=0,l=r.length;u<l;u++)d=a[r[u]],h=n.copy(d.node),f=this.context.register(h),s[u]=wr.of(h,f,this);return[2,s]}}))}))},t.prototype.copy=function(){return(0,o.mG)(this,void 0,void 0,(function(){var e,r,n,i;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return[4,t.create()];case 1:return[4,(e=o.sent()).copyPages(this,this.getPageIndices())];case 2:for(r=o.sent(),n=0,i=r.length;n<i;n++)e.addPage(r[n]);return void 0!==this.getAuthor()&&e.setAuthor(this.getAuthor()),void 0!==this.getCreationDate()&&e.setCreationDate(this.getCreationDate()),void 0!==this.getCreator()&&e.setCreator(this.getCreator()),void 0!==this.getModificationDate()&&e.setModificationDate(this.getModificationDate()),void 0!==this.getProducer()&&e.setProducer(this.getProducer()),void 0!==this.getSubject()&&e.setSubject(this.getSubject()),void 0!==this.getTitle()&&e.setTitle(this.getTitle()),e.defaultWordBreaks=this.defaultWordBreaks,[2,e]}}))}))},t.prototype.addJavaScript=function(t,e){(0,c.ku)(t,"name",["string"]),(0,c.ku)(e,"script",["string"]);var r=vr.for(e,t),n=this.context.nextRef(),o=pr.of(n,this,r);this.javaScripts.push(o)},t.prototype.attach=function(t,e,r){return void 0===r&&(r={}),(0,o.mG)(this,void 0,void 0,(function(){var n,i,a,s;return(0,o.Jh)(this,(function(o){return(0,c.ku)(t,"attachment",["string",Uint8Array,ArrayBuffer]),(0,c.ku)(e,"name",["string"]),(0,c.MU)(r.mimeType,"mimeType",["string"]),(0,c.MU)(r.description,"description",["string"]),(0,c.MU)(r.creationDate,"options.creationDate",[Date]),(0,c.MU)(r.modificationDate,"options.modificationDate",[Date]),(0,c.GT)(r.afRelationship,"options.afRelationship",hr.J),n=(0,c._f)(t),i=hr.Z.for(n,e,r),a=this.context.nextRef(),s=fr.of(a,this,i),this.embeddedFiles.push(s),[2]}))}))},t.prototype.embedFont=function(t,e){return void 0===e&&(e={}),(0,o.mG)(this,void 0,void 0,(function(){var r,n,a,s,u,l,d,h,f,p;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return r=e.subset,n=void 0!==r&&r,a=e.customName,s=e.features,(0,c.ku)(t,"font",["string",Uint8Array,ArrayBuffer]),(0,c.ku)(n,"subset",["boolean"]),(0,c.Cl)(t)?(u=i.IL.for(t,a),[3,7]):[3,1];case 1:return(0,c.TE)(t)?(l=(0,c._f)(t),d=this.assertFontkit(),n?[4,i.zO.for(d,l,a,s)]:[3,3]):[3,6];case 2:return h=o.sent(),[3,5];case 3:return[4,i.Wz.for(d,l,a,s)];case 4:h=o.sent(),o.label=5;case 5:return u=h,[3,7];case 6:throw new TypeError("`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`");case 7:return f=this.context.nextRef(),p=Le.of(f,this,u),this.fonts.push(p),[2,p]}}))}))},t.prototype.embedStandardFont=function(t,e){if((0,c.ku)(t,"font",["string"]),!(0,c.Cl)(t))throw new TypeError("`font` must be one of type `StandardFonts`");var r=i.IL.for(t,e),n=this.context.nextRef(),o=Le.of(n,this,r);return this.fonts.push(o),o},t.prototype.embedJpg=function(t){return(0,o.mG)(this,void 0,void 0,(function(){var e,r,n,a;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return(0,c.ku)(t,"jpg",["string",Uint8Array,ArrayBuffer]),e=(0,c._f)(t),[4,i.sm.for(e)];case 1:return r=o.sent(),n=this.context.nextRef(),a=Xe.of(n,this,r),this.images.push(a),[2,a]}}))}))},t.prototype.embedPng=function(t){return(0,o.mG)(this,void 0,void 0,(function(){var e,r,n,a;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return(0,c.ku)(t,"png",["string",Uint8Array,ArrayBuffer]),e=(0,c._f)(t),[4,i.Le.for(e)];case 1:return r=o.sent(),n=this.context.nextRef(),a=Xe.of(n,this,r),this.images.push(a),[2,a]}}))}))},t.prototype.embedPdf=function(e,r){return void 0===r&&(r=[0]),(0,o.mG)(this,void 0,void 0,(function(){var n,i,a;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return(0,c.ku)(e,"pdf",["string",Uint8Array,ArrayBuffer,[t,"PDFDocument"]]),(0,c.ku)(r,"indices",[Array]),e instanceof t?(i=e,[3,3]):[3,1];case 1:return[4,t.load(e)];case 2:i=o.sent(),o.label=3;case 3:return n=i,a=(0,c.Jp)(n.getPages(),r),[2,this.embedPages(a)]}}))}))},t.prototype.embedPage=function(t,e,r){return(0,o.mG)(this,void 0,void 0,(function(){return(0,o.Jh)(this,(function(n){switch(n.label){case 0:return(0,c.ku)(t,"page",[[wr,"PDFPage"]]),[4,this.embedPages([t],[e],[r])];case 1:return[2,n.sent()[0]]}}))}))},t.prototype.embedPages=function(t,e,r){return void 0===e&&(e=[]),void 0===r&&(r=[]),(0,o.mG)(this,void 0,void 0,(function(){var n,a,s,u,c,l,d,h,f,p,g,v,y;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:if(0===t.length)return[2,[]];for(l=0,d=t.length-1;l<d;l++)if(n=t[l],a=t[l+1],n.node.context!==a.node.context)throw new i.qX;s=t[0].node.context,u=s===this.context?function(t){return t}:i.Wy.for(s,this.context).copy,c=new Array(t.length),l=0,d=t.length,o.label=1;case 1:return l<d?(h=u(t[l].node),f=e[l],p=r[l],[4,i.dS.for(h,f,p)]):[3,4];case 2:g=o.sent(),v=this.context.nextRef(),c[l]=We.of(v,this,g),o.label=3;case 3:return l++,[3,1];case 4:return(y=this.embeddedPages).push.apply(y,c),[2,c]}}))}))},t.prototype.flush=function(){return(0,o.mG)(this,void 0,void 0,(function(){return(0,o.Jh)(this,(function(t){switch(t.label){case 0:return[4,this.embedAll(this.fonts)];case 1:return t.sent(),[4,this.embedAll(this.images)];case 2:return t.sent(),[4,this.embedAll(this.embeddedPages)];case 3:return t.sent(),[4,this.embedAll(this.embeddedFiles)];case 4:return t.sent(),[4,this.embedAll(this.javaScripts)];case 5:return t.sent(),[2]}}))}))},t.prototype.save=function(t){return void 0===t&&(t={}),(0,o.mG)(this,void 0,void 0,(function(){var e,r,n,a,s,u,l,d,h;return(0,o.Jh)(this,(function(o){switch(o.label){case 0:return e=t.useObjectStreams,r=void 0===e||e,n=t.addDefaultPage,a=void 0===n||n,s=t.objectsPerTick,u=void 0===s?50:s,l=t.updateFieldAppearances,d=void 0===l||l,(0,c.ku)(r,"useObjectStreams",["boolean"]),(0,c.ku)(a,"addDefaultPage",["boolean"]),(0,c.ku)(u,"objectsPerTick",["number"]),(0,c.ku)(d,"updateFieldAppearances",["boolean"]),a&&0===this.getPageCount()&&this.addPage(),d&&(h=this.formCache.getValue())&&h.updateFieldAppearances(),[4,this.flush()];case 1:return o.sent(),[2,(r?i.pV:i.Bn).forContext(this.context,u).serializeToBuffer()]}}))}))},t.prototype.saveAsBase64=function(t){return void 0===t&&(t={}),(0,o.mG)(this,void 0,void 0,(function(){var e,r,n,i,a;return(0,o.Jh)(this,(function(s){switch(s.label){case 0:return e=t.dataUri,r=void 0!==e&&e,n=(0,o._T)(t,["dataUri"]),(0,c.ku)(r,"dataUri",["boolean"]),[4,this.save(n)];case 1:return i=s.sent(),a=(0,c.Eo)(i),[2,r?"data:application/pdf;base64,"+a:a]}}))}))},t.prototype.findPageForAnnotationRef=function(t){for(var e=this.getPages(),r=0,n=e.length;r<n;r++){var o=e[r],i=o.node.Annots();if(void 0!==(null==i?void 0:i.indexOf(t)))return o}},t.prototype.embedAll=function(t){return(0,o.mG)(this,void 0,void 0,(function(){var e,r;return(0,o.Jh)(this,(function(n){switch(n.label){case 0:e=0,r=t.length,n.label=1;case 1:return e<r?[4,t[e].embed()]:[3,4];case 2:n.sent(),n.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.updateInfoDict=function(){var t="pdf-lib (https://github.com/Hopding/pdf-lib)",e=new Date,r=this.getInfoDict();this.setProducer(t),this.setModificationDate(e),r.get(i.wQ.of("Creator"))||this.setCreator(t),r.get(i.wQ.of("CreationDate"))||this.setCreationDate(e)},t.prototype.getInfoDict=function(){var t=this.context.lookup(this.context.trailerInfo.Info);if(t instanceof i.mh)return t;var e=this.context.obj({});return this.context.trailerInfo.Info=this.context.register(e),e},t.prototype.assertFontkit=function(){if(!this.fontkit)throw new fe;return this.fontkit},t}();function mr(t){if(!(t instanceof i.Ij||t instanceof i.u2))throw new i.VX([i.Ij,i.u2],t)}var br;!function(t){t.Normal="Normal",t.Multiply="Multiply",t.Screen="Screen",t.Overlay="Overlay",t.Darken="Darken",t.Lighten="Lighten",t.ColorDodge="ColorDodge",t.ColorBurn="ColorBurn",t.HardLight="HardLight",t.SoftLight="SoftLight",t.Difference="Difference",t.Exclusion="Exclusion"}(br||(br={}));const wr=function(){function t(t,e,r){this.fontSize=24,this.fontColor=Dt(0,0,0),this.lineHeight=24,this.x=0,this.y=0,(0,c.ku)(t,"leafNode",[[i.Eg,"PDFPageLeaf"]]),(0,c.ku)(e,"ref",[[i.$F,"PDFRef"]]),(0,c.ku)(r,"doc",[[yr,"PDFDocument"]]),this.node=t,this.ref=e,this.doc=r}return t.prototype.setRotation=function(t){var e=m(t);(0,c.m_)(e,"degreesAngle",90),this.node.set(i.wQ.of("Rotate"),this.doc.context.obj(e))},t.prototype.getRotation=function(){var t=this.node.Rotate();return h(t?t.asNumber():0)},t.prototype.setSize=function(t,e){(0,c.ku)(t,"width",["number"]),(0,c.ku)(e,"height",["number"]);var r=this.getMediaBox();this.setMediaBox(r.x,r.y,t,e);var n=this.getCropBox(),o=this.getBleedBox(),i=this.getTrimBox(),a=this.getArtBox(),s=this.node.CropBox(),u=this.node.BleedBox(),l=this.node.TrimBox(),d=this.node.ArtBox();s&&(0,c.EO)(n,r)&&this.setCropBox(r.x,r.y,t,e),u&&(0,c.EO)(o,r)&&this.setBleedBox(r.x,r.y,t,e),l&&(0,c.EO)(i,r)&&this.setTrimBox(r.x,r.y,t,e),d&&(0,c.EO)(a,r)&&this.setArtBox(r.x,r.y,t,e)},t.prototype.setWidth=function(t){(0,c.ku)(t,"width",["number"]),this.setSize(t,this.getSize().height)},t.prototype.setHeight=function(t){(0,c.ku)(t,"height",["number"]),this.setSize(this.getSize().width,t)},t.prototype.setMediaBox=function(t,e,r,n){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),(0,c.ku)(r,"width",["number"]),(0,c.ku)(n,"height",["number"]);var o=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(i.wQ.MediaBox,o)},t.prototype.setCropBox=function(t,e,r,n){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),(0,c.ku)(r,"width",["number"]),(0,c.ku)(n,"height",["number"]);var o=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(i.wQ.CropBox,o)},t.prototype.setBleedBox=function(t,e,r,n){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),(0,c.ku)(r,"width",["number"]),(0,c.ku)(n,"height",["number"]);var o=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(i.wQ.BleedBox,o)},t.prototype.setTrimBox=function(t,e,r,n){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),(0,c.ku)(r,"width",["number"]),(0,c.ku)(n,"height",["number"]);var o=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(i.wQ.TrimBox,o)},t.prototype.setArtBox=function(t,e,r,n){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),(0,c.ku)(r,"width",["number"]),(0,c.ku)(n,"height",["number"]);var o=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(i.wQ.ArtBox,o)},t.prototype.getSize=function(){var t=this.getMediaBox();return{width:t.width,height:t.height}},t.prototype.getWidth=function(){return this.getSize().width},t.prototype.getHeight=function(){return this.getSize().height},t.prototype.getMediaBox=function(){return this.node.MediaBox().asRectangle()},t.prototype.getCropBox=function(){var t,e=this.node.CropBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getMediaBox()},t.prototype.getBleedBox=function(){var t,e=this.node.BleedBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getTrimBox=function(){var t,e=this.node.TrimBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getArtBox=function(){var t,e=this.node.ArtBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.translateContent=function(t,e){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),this.node.normalize(),this.getContentStream();var r=this.createContentStream(U(),D(t,e)),n=this.doc.context.register(r),o=this.createContentStream(G()),i=this.doc.context.register(o);this.node.wrapContentStreams(n,i)},t.prototype.scale=function(t,e){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),this.setSize(this.getWidth()*t,this.getHeight()*e),this.scaleContent(t,e),this.scaleAnnotations(t,e)},t.prototype.scaleContent=function(t,e){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),this.node.normalize(),this.getContentStream();var r=this.createContentStream(U(),A(t,e)),n=this.doc.context.register(r),o=this.createContentStream(G()),i=this.doc.context.register(o);this.node.wrapContentStreams(n,i)},t.prototype.scaleAnnotations=function(t,e){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]);var r=this.node.Annots();if(r)for(var n=0;n<r.size();n++){var o=r.lookup(n);o instanceof i.mh&&this.scaleAnnot(o,t,e)}},t.prototype.resetPosition=function(){this.getContentStream(!1),this.x=0,this.y=0},t.prototype.setFont=function(t){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),this.font=t,this.fontKey=this.node.newFontDictionary(this.font.name,this.font.ref)},t.prototype.setFontSize=function(t){(0,c.ku)(t,"fontSize",["number"]),this.fontSize=t},t.prototype.setFontColor=function(t){(0,c.ku)(t,"fontColor",[[Object,"Color"]]),this.fontColor=t},t.prototype.setLineHeight=function(t){(0,c.ku)(t,"lineHeight",["number"]),this.lineHeight=t},t.prototype.getPosition=function(){return{x:this.x,y:this.y}},t.prototype.getX=function(){return this.x},t.prototype.getY=function(){return this.y},t.prototype.moveTo=function(t,e){(0,c.ku)(t,"x",["number"]),(0,c.ku)(e,"y",["number"]),this.x=t,this.y=e},t.prototype.moveDown=function(t){(0,c.ku)(t,"yDecrease",["number"]),this.y-=t},t.prototype.moveUp=function(t){(0,c.ku)(t,"yIncrease",["number"]),this.y+=t},t.prototype.moveLeft=function(t){(0,c.ku)(t,"xDecrease",["number"]),this.x-=t},t.prototype.moveRight=function(t){(0,c.ku)(t,"xIncrease",["number"]),this.x+=t},t.prototype.pushOperators=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];(0,c.pO)(t,"operator",[[i.sI,"PDFOperator"]]);var r=this.getContentStream();r.push.apply(r,t)},t.prototype.drawText=function(t,e){var r,n,o,i,a,s,u;void 0===e&&(e={}),(0,c.ku)(t,"text",["string"]),(0,c.MU)(e.color,"options.color",[[Object,"Color"]]),(0,c.zo)(e.opacity,"opacity.opacity",0,1),(0,c.MU)(e.font,"options.font",[[Le,"PDFFont"]]),(0,c.MU)(e.size,"options.size",["number"]),(0,c.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,c.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,c.MU)(e.x,"options.x",["number"]),(0,c.MU)(e.y,"options.y",["number"]),(0,c.MU)(e.lineHeight,"options.lineHeight",["number"]),(0,c.MU)(e.maxWidth,"options.maxWidth",["number"]),(0,c.MU)(e.wordBreaks,"options.wordBreaks",[Array]),(0,c.GT)(e.blendMode,"options.blendMode",br);for(var l=this.setOrEmbedFont(e.font),d=l.oldFont,f=l.newFont,p=l.newFontKey,g=e.size||this.fontSize,v=e.wordBreaks||this.doc.defaultWordBreaks,y=void 0===e.maxWidth?(0,c.f7)((0,c.FV)(t)):(0,c.KU)(t,v,e.maxWidth,(function(t){return f.widthOfTextAtSize(t,g)})),m=new Array(y.length),b=0,w=y.length;b<w;b++)m[b]=f.encodeText(y[b]);var x=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),F=this.getContentStream();F.push.apply(F,Yt(m,{color:null!==(r=e.color)&&void 0!==r?r:this.fontColor,font:p,size:g,rotate:null!==(n=e.rotate)&&void 0!==n?n:h(0),xSkew:null!==(o=e.xSkew)&&void 0!==o?o:h(0),ySkew:null!==(i=e.ySkew)&&void 0!==i?i:h(0),x:null!==(a=e.x)&&void 0!==a?a:this.x,y:null!==(s=e.y)&&void 0!==s?s:this.y,lineHeight:null!==(u=e.lineHeight)&&void 0!==u?u:this.lineHeight,graphicsState:x})),e.font&&(d?this.setFont(d):this.resetFont())},t.prototype.drawImage=function(t,e){var r,n,o,i,a,s,u;void 0===e&&(e={}),(0,c.ku)(t,"image",[[Xe,"PDFImage"]]),(0,c.MU)(e.x,"options.x",["number"]),(0,c.MU)(e.y,"options.y",["number"]),(0,c.MU)(e.width,"options.width",["number"]),(0,c.MU)(e.height,"options.height",["number"]),(0,c.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,c.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,c.zo)(e.opacity,"opacity.opacity",0,1),(0,c.GT)(e.blendMode,"options.blendMode",br);var l=this.node.newXObject("Image",t.ref),d=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),f=this.getContentStream();f.push.apply(f,Qt(l,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,width:null!==(o=e.width)&&void 0!==o?o:t.size().width,height:null!==(i=e.height)&&void 0!==i?i:t.size().height,rotate:null!==(a=e.rotate)&&void 0!==a?a:h(0),xSkew:null!==(s=e.xSkew)&&void 0!==s?s:h(0),ySkew:null!==(u=e.ySkew)&&void 0!==u?u:h(0),graphicsState:d}))},t.prototype.drawPage=function(t,e){var r,n,o,i,a;void 0===e&&(e={}),(0,c.ku)(t,"embeddedPage",[[We,"PDFEmbeddedPage"]]),(0,c.MU)(e.x,"options.x",["number"]),(0,c.MU)(e.y,"options.y",["number"]),(0,c.MU)(e.xScale,"options.xScale",["number"]),(0,c.MU)(e.yScale,"options.yScale",["number"]),(0,c.MU)(e.width,"options.width",["number"]),(0,c.MU)(e.height,"options.height",["number"]),(0,c.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,c.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,c.zo)(e.opacity,"opacity.opacity",0,1),(0,c.GT)(e.blendMode,"options.blendMode",br);var s=this.node.newXObject("EmbeddedPdfPage",t.ref),u=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),l=void 0!==e.width?e.width/t.width:void 0!==e.xScale?e.xScale:1,d=void 0!==e.height?e.height/t.height:void 0!==e.yScale?e.yScale:1,f=this.getContentStream();f.push.apply(f,Jt(s,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,xScale:l,yScale:d,rotate:null!==(o=e.rotate)&&void 0!==o?o:h(0),xSkew:null!==(i=e.xSkew)&&void 0!==i?i:h(0),ySkew:null!==(a=e.ySkew)&&void 0!==a?a:h(0),graphicsState:u}))},t.prototype.drawSvgPath=function(t,e){var r,n,o,i,a,s,u,d,f;void 0===e&&(e={}),(0,c.ku)(t,"path",["string"]),(0,c.MU)(e.x,"options.x",["number"]),(0,c.MU)(e.y,"options.y",["number"]),(0,c.MU)(e.scale,"options.scale",["number"]),(0,c.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(e.borderWidth,"options.borderWidth",["number"]),(0,c.MU)(e.color,"options.color",[[Object,"Color"]]),(0,c.zo)(e.opacity,"opacity.opacity",0,1),(0,c.MU)(e.borderColor,"options.borderColor",[[Object,"Color"]]),(0,c.MU)(e.borderDashArray,"options.borderDashArray",[Array]),(0,c.MU)(e.borderDashPhase,"options.borderDashPhase",["number"]),(0,c.GT)(e.borderLineCap,"options.borderLineCap",l),(0,c.zo)(e.borderOpacity,"options.borderOpacity",0,1),(0,c.GT)(e.blendMode,"options.blendMode",br);var p=this.maybeEmbedGraphicsState({opacity:e.opacity,borderOpacity:e.borderOpacity,blendMode:e.blendMode});"color"in e||"borderColor"in e||(e.borderColor=Dt(0,0,0));var g=this.getContentStream();g.push.apply(g,ne(t,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,scale:e.scale,rotate:null!==(o=e.rotate)&&void 0!==o?o:h(0),color:null!==(i=e.color)&&void 0!==i?i:void 0,borderColor:null!==(a=e.borderColor)&&void 0!==a?a:void 0,borderWidth:null!==(s=e.borderWidth)&&void 0!==s?s:0,borderDashArray:null!==(u=e.borderDashArray)&&void 0!==u?u:void 0,borderDashPhase:null!==(d=e.borderDashPhase)&&void 0!==d?d:void 0,borderLineCap:null!==(f=e.borderLineCap)&&void 0!==f?f:void 0,graphicsState:p}))},t.prototype.drawLine=function(t){var e,r,n,o,i;(0,c.ku)(t.start,"options.start",[[Object,"{ x: number, y: number }"]]),(0,c.ku)(t.end,"options.end",[[Object,"{ x: number, y: number }"]]),(0,c.ku)(t.start.x,"options.start.x",["number"]),(0,c.ku)(t.start.y,"options.start.y",["number"]),(0,c.ku)(t.end.x,"options.end.x",["number"]),(0,c.ku)(t.end.y,"options.end.y",["number"]),(0,c.MU)(t.thickness,"options.thickness",["number"]),(0,c.MU)(t.color,"options.color",[[Object,"Color"]]),(0,c.MU)(t.dashArray,"options.dashArray",[Array]),(0,c.MU)(t.dashPhase,"options.dashPhase",["number"]),(0,c.GT)(t.lineCap,"options.lineCap",l),(0,c.zo)(t.opacity,"opacity.opacity",0,1),(0,c.GT)(t.blendMode,"options.blendMode",br);var a=this.maybeEmbedGraphicsState({borderOpacity:t.opacity,blendMode:t.blendMode});"color"in t||(t.color=Dt(0,0,0));var s=this.getContentStream();s.push.apply(s,_t({start:t.start,end:t.end,thickness:null!==(e=t.thickness)&&void 0!==e?e:1,color:null!==(r=t.color)&&void 0!==r?r:void 0,dashArray:null!==(n=t.dashArray)&&void 0!==n?n:void 0,dashPhase:null!==(o=t.dashPhase)&&void 0!==o?o:void 0,lineCap:null!==(i=t.lineCap)&&void 0!==i?i:void 0,graphicsState:a}))},t.prototype.drawRectangle=function(t){var e,r,n,o,i,a,s,u,d,f,p,g,v;void 0===t&&(t={}),(0,c.MU)(t.x,"options.x",["number"]),(0,c.MU)(t.y,"options.y",["number"]),(0,c.MU)(t.width,"options.width",["number"]),(0,c.MU)(t.height,"options.height",["number"]),(0,c.MU)(t.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(t.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,c.MU)(t.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,c.MU)(t.borderWidth,"options.borderWidth",["number"]),(0,c.MU)(t.color,"options.color",[[Object,"Color"]]),(0,c.zo)(t.opacity,"opacity.opacity",0,1),(0,c.MU)(t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,c.MU)(t.borderDashArray,"options.borderDashArray",[Array]),(0,c.MU)(t.borderDashPhase,"options.borderDashPhase",["number"]),(0,c.GT)(t.borderLineCap,"options.borderLineCap",l),(0,c.zo)(t.borderOpacity,"options.borderOpacity",0,1),(0,c.GT)(t.blendMode,"options.blendMode",br);var y=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=Dt(0,0,0));var m=this.getContentStream();m.push.apply(m,$t({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,width:null!==(n=t.width)&&void 0!==n?n:150,height:null!==(o=t.height)&&void 0!==o?o:100,rotate:null!==(i=t.rotate)&&void 0!==i?i:h(0),xSkew:null!==(a=t.xSkew)&&void 0!==a?a:h(0),ySkew:null!==(s=t.ySkew)&&void 0!==s?s:h(0),borderWidth:null!==(u=t.borderWidth)&&void 0!==u?u:0,color:null!==(d=t.color)&&void 0!==d?d:void 0,borderColor:null!==(f=t.borderColor)&&void 0!==f?f:void 0,borderDashArray:null!==(p=t.borderDashArray)&&void 0!==p?p:void 0,borderDashPhase:null!==(g=t.borderDashPhase)&&void 0!==g?g:void 0,graphicsState:y,borderLineCap:null!==(v=t.borderLineCap)&&void 0!==v?v:void 0}))},t.prototype.drawSquare=function(t){void 0===t&&(t={});var e=t.size;(0,c.MU)(e,"size",["number"]),this.drawRectangle((0,o.pi)((0,o.pi)({},t),{width:e,height:e}))},t.prototype.drawEllipse=function(t){var e,r,n,o,i,a,s,u,d,h,f;void 0===t&&(t={}),(0,c.MU)(t.x,"options.x",["number"]),(0,c.MU)(t.y,"options.y",["number"]),(0,c.MU)(t.xScale,"options.xScale",["number"]),(0,c.MU)(t.yScale,"options.yScale",["number"]),(0,c.MU)(t.rotate,"options.rotate",[[Object,"Rotation"]]),(0,c.MU)(t.color,"options.color",[[Object,"Color"]]),(0,c.zo)(t.opacity,"opacity.opacity",0,1),(0,c.MU)(t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,c.zo)(t.borderOpacity,"options.borderOpacity",0,1),(0,c.MU)(t.borderWidth,"options.borderWidth",["number"]),(0,c.MU)(t.borderDashArray,"options.borderDashArray",[Array]),(0,c.MU)(t.borderDashPhase,"options.borderDashPhase",["number"]),(0,c.GT)(t.borderLineCap,"options.borderLineCap",l),(0,c.GT)(t.blendMode,"options.blendMode",br);var p=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=Dt(0,0,0));var g=this.getContentStream();g.push.apply(g,re({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,xScale:null!==(n=t.xScale)&&void 0!==n?n:100,yScale:null!==(o=t.yScale)&&void 0!==o?o:100,rotate:null!==(i=t.rotate)&&void 0!==i?i:void 0,color:null!==(a=t.color)&&void 0!==a?a:void 0,borderColor:null!==(s=t.borderColor)&&void 0!==s?s:void 0,borderWidth:null!==(u=t.borderWidth)&&void 0!==u?u:0,borderDashArray:null!==(d=t.borderDashArray)&&void 0!==d?d:void 0,borderDashPhase:null!==(h=t.borderDashPhase)&&void 0!==h?h:void 0,borderLineCap:null!==(f=t.borderLineCap)&&void 0!==f?f:void 0,graphicsState:p}))},t.prototype.drawCircle=function(t){void 0===t&&(t={});var e=t.size,r=void 0===e?100:e;(0,c.MU)(r,"size",["number"]),this.drawEllipse((0,o.pi)((0,o.pi)({},t),{xScale:r,yScale:r}))},t.prototype.setOrEmbedFont=function(t){var e=this.font,r=this.fontKey;return t?this.setFont(t):this.getFont(),{oldFont:e,oldFontKey:r,newFont:this.font,newFontKey:this.fontKey}},t.prototype.getFont=function(){if(!this.font||!this.fontKey){var t=this.doc.embedStandardFont(or.Helvetica);this.setFont(t)}return[this.font,this.fontKey]},t.prototype.resetFont=function(){this.font=void 0,this.fontKey=void 0},t.prototype.getContentStream=function(t){return void 0===t&&(t=!0),t&&this.contentStream||(this.contentStream=this.createContentStream(),this.contentStreamRef=this.doc.context.register(this.contentStream),this.node.addContentStream(this.contentStreamRef)),this.contentStream},t.prototype.createContentStream=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=this.doc.context.obj({});return i.kK.of(r,t)},t.prototype.maybeEmbedGraphicsState=function(t){var e=t.opacity,r=t.borderOpacity,n=t.blendMode;if(void 0!==e||void 0!==r||void 0!==n){var o=this.doc.context.obj({Type:"ExtGState",ca:e,CA:r,BM:n});return this.node.newExtGState("GS",o)}},t.prototype.scaleAnnot=function(t,e,r){for(var n=["RD","CL","Vertices","QuadPoints","L","Rect"],o=0,a=n.length;o<a;o++){var s=t.lookup(i.wQ.of(n[o]));s instanceof i.Gr&&s.scalePDFNumbers(e,r)}var u=t.lookup(i.wQ.of("InkList"));if(u instanceof i.Gr)for(o=0,a=u.size();o<a;o++){var c=u.lookup(o);c instanceof i.Gr&&c.scalePDFNumbers(e,r)}},t.of=function(e,r,n){return new t(e,r,n)},t.create=function(e){(0,c.ku)(e,"doc",[[yr,"PDFDocument"]]);var r=i.$F.of(-1),n=i.Eg.withContextAndParent(e.context,r);return new t(n,e.context.register(n),e)},t}(),xr=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return(0,c.ku)(e,"acroButton",[[i._,"PDFAcroPushButton"]]),o.acroField=e,o}return(0,o.ZT)(e,t),e.prototype.setImage=function(t,e){void 0===e&&(e=He.Center);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var i=r[n],a=this.createImageAppearanceStream(i,t,e);this.updateWidgetAppearances(i,{normal:a})}this.markAsClean()},e.prototype.setFontSize=function(t){(0,c.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.addToPage=function(t,e,r){var n,o,i,a,s,u,l,d,f,p,g;(0,c.MU)(t,"text",["string"]),(0,c.MU)(e,"page",[[wr,"PDFPage"]]),Ye(r);var v=this.createWidget({x:(null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0)-(null!==(o=null==r?void 0:r.borderWidth)&&void 0!==o?o:0)/2,y:(null!==(i=null==r?void 0:r.y)&&void 0!==i?i:0)-(null!==(a=null==r?void 0:r.borderWidth)&&void 0!==a?a:0)/2,width:null!==(s=null==r?void 0:r.width)&&void 0!==s?s:100,height:null!==(u=null==r?void 0:r.height)&&void 0!==u?u:50,textColor:null!==(l=null==r?void 0:r.textColor)&&void 0!==l?l:Dt(0,0,0),backgroundColor:null!==(d=null==r?void 0:r.backgroundColor)&&void 0!==d?d:Dt(.75,.75,.75),borderColor:null==r?void 0:r.borderColor,borderWidth:null!==(f=null==r?void 0:r.borderWidth)&&void 0!==f?f:0,rotate:null!==(p=null==r?void 0:r.rotate)&&void 0!==p?p:h(0),caption:t,hidden:null==r?void 0:r.hidden,page:e.ref}),y=this.doc.context.register(v.dict);this.acroField.addWidget(y);var m=null!==(g=null==r?void 0:r.font)&&void 0!==g?g:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(v,m),e.node.addAnnot(y)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof i.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,c.ku)(t,"font",[[Le,"PDFFont"]]),(0,c.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,o=r.length;n<o;n++){var i=r[n];this.updateWidgetAppearance(i,t,e)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ne((null!=r?r:ze)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(Je)},634:(t,e,r)=>{"use strict";r.d(e,{J:()=>n,Z:()=>s});var n,o=r(655),i=r(222),a=r(158);!function(t){t.Source="Source",t.Data="Data",t.Alternative="Alternative",t.Supplement="Supplement",t.EncryptedPayload="EncryptedPayload",t.FormData="EncryptedPayload",t.Schema="Schema",t.Unspecified="Unspecified"}(n||(n={}));const s=function(){function t(t,e,r){void 0===r&&(r={}),this.fileData=t,this.fileName=e,this.options=r}return t.for=function(e,r,n){return void 0===n&&(n={}),new t(e,r,n)},t.prototype.embedIntoContext=function(t,e){return(0,o.mG)(this,void 0,void 0,(function(){var r,n,s,u,c,l,d,h,f;return(0,o.Jh)(this,(function(o){return r=this.options,n=r.mimeType,s=r.description,u=r.creationDate,c=r.modificationDate,l=r.afRelationship,d=t.flateStream(this.fileData,{Type:"EmbeddedFile",Subtype:null!=n?n:void 0,Params:{Size:this.fileData.length,CreationDate:u?i.Z.fromDate(u):void 0,ModDate:c?i.Z.fromDate(c):void 0}}),h=t.register(d),f=t.obj({Type:"Filespec",F:i.Z.of(this.fileName),UF:a.Z.fromText(this.fileName),EF:{F:h},Desc:s?a.Z.fromText(s):void 0,AFRelationship:null!=l?l:void 0}),e?(t.assign(e,f),[2,e]):[2,t.register(f)]}))}))},t}()},732:(t,e,r)=>{"use strict";r.d(e,{$O:()=>k,Dr:()=>O,EX:()=>P,Gp:()=>a,Iu:()=>F,Ke:()=>T,NP:()=>h,RS:()=>S,SR:()=>d,SY:()=>l,Sh:()=>D,TC:()=>w,VX:()=>s,Y8:()=>v,_z:()=>x,aj:()=>c,bg:()=>y,dm:()=>g,iQ:()=>i,ku:()=>R,l:()=>u,or:()=>A,qX:()=>f,sE:()=>m,sV:()=>p,uu:()=>N,vM:()=>b,ze:()=>C});var n=r(655),o=r(955),i=function(t){function e(e,r){var n="Method "+e+"."+r+"() not implemented";return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),a=function(t){function e(e){var r="Cannot construct "+e+" - it has a private constructor";return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),s=function(t){function e(e,r){var n=function(t){var e,r;return null!==(e=null==t?void 0:t.name)&&void 0!==e?e:null===(r=null==t?void 0:t.constructor)||void 0===r?void 0:r.name},o="Expected instance of "+(Array.isArray(e)?e.map(n):[n(e)]).join(" or ")+", but got instance of "+(r?n(r):r);return t.call(this,o)||this}return(0,n.ZT)(e,t),e}(Error),u=function(t){function e(e){var r=e+" stream encoding not supported";return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),c=function(t){function e(e,r){var n="Cannot call "+e+"."+r+"() more than once";return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),l=function(t){function e(e){var r="Missing catalog (ref="+e+")";return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),d=function(t){function e(){return t.call(this,"Can't embed page with missing Contents")||this}return(0,n.ZT)(e,t),e}(Error),h=function(t){function e(e){var r,n,o,i="Unrecognized stream type: "+(null!==(o=null!==(n=null===(r=null==e?void 0:e.contructor)||void 0===r?void 0:r.name)&&void 0!==n?n:null==e?void 0:e.name)&&void 0!==o?o:e);return t.call(this,i)||this}return(0,n.ZT)(e,t),e}(Error),f=function(t){function e(){return t.call(this,"Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.")||this}return(0,n.ZT)(e,t),e}(Error),p=function(t){function e(e){var r="Attempted to convert PDFArray with "+e+" elements to rectangle, but must have exactly 4 elements.";return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),g=function(t){function e(e){var r='Attempted to convert "'+e+'" to a date, but it does not match the PDF date string format.';return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),v=function(t){function e(e,r){var n="Invalid targetIndex specified: targetIndex="+e+" must be less than Count="+r;return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),y=function(t){function e(e,r){var n="Failed to "+r+" at targetIndex="+e+" due to corrupt page tree: It is likely that one or more 'Count' entries are invalid";return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),m=function(t){function e(e,r,n){var o="index should be at least "+r+" and at most "+n+", but was actually "+e;return t.call(this,o)||this}return(0,n.ZT)(e,t),e}(Error),b=function(t){function e(){return t.call(this,"Attempted to set invalid field value")||this}return(0,n.ZT)(e,t),e}(Error),w=function(t){function e(){return t.call(this,"Attempted to select multiple values for single-select field")||this}return(0,n.ZT)(e,t),e}(Error),x=function(t){function e(e){var r="No /DA (default appearance) entry found for field: "+e;return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),F=function(t){function e(e){var r="No Tf operator found for DA of field: "+e;return t.call(this,r)||this}return(0,n.ZT)(e,t),e}(Error),S=function(t){function e(e,r){var n="Failed to parse number (line:"+e.line+" col:"+e.column+" offset="+e.offset+'): "'+r+'"';return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),k=function(t){function e(e,r){var n="Failed to parse PDF document (line:"+e.line+" col:"+e.column+" offset="+e.offset+"): "+r;return t.call(this,n)||this}return(0,n.ZT)(e,t),e}(Error),C=function(t){function e(e,r,n){var o="Expected next byte to be "+r+" but it was actually "+n;return t.call(this,e,o)||this}return(0,n.ZT)(e,t),e}(k),P=function(t){function e(e,r){var n="Failed to parse PDF object starting with the following byte: "+r;return t.call(this,e,n)||this}return(0,n.ZT)(e,t),e}(k),T=function(t){function e(e){return t.call(this,e,"Failed to parse invalid PDF object")||this}return(0,n.ZT)(e,t),e}(k),D=function(t){function e(e){return t.call(this,e,"Failed to parse PDF stream")||this}return(0,n.ZT)(e,t),e}(k),A=function(t){function e(e){return t.call(this,e,"Failed to parse PDF literal string due to unbalanced parenthesis")||this}return(0,n.ZT)(e,t),e}(k),O=function(t){function e(e){return t.call(this,e,"Parser stalled")||this}return(0,n.ZT)(e,t),e}(k),R=function(t){function e(e){return t.call(this,e,"No PDF header found")||this}return(0,n.ZT)(e,t),e}(k),N=function(t){function e(e,r){var n="Did not find expected keyword '"+(0,o.Qo)(r)+"'";return t.call(this,e,n)||this}return(0,n.ZT)(e,t),e}(k)},878:(t,e,r)=>{"use strict";r.d(e,{JN:()=>St.J,Ub:()=>Ae,m0:()=>Re,PV:()=>De,oD:()=>Oe,TV:()=>Cr,F5:()=>be,iJ:()=>o.Z,bg:()=>n.bg,Wz:()=>bt,zO:()=>xt,$P:()=>se,Gb:()=>St.Z,sE:()=>n.sE,vM:()=>n.vM,dm:()=>n.dm,Y8:()=>n.Y8,sm:()=>Pt,iQ:()=>n.iQ,SY:()=>n.SY,_z:()=>n._z,uu:()=>n.uu,ku:()=>n.ku,SR:()=>n.SR,Iu:()=>n.Iu,TC:()=>n.TC,ze:()=>n.ze,Ie:()=>oe,RS:()=>n.RS,ry:()=>Ce,Ei:()=>Te,P0:()=>Ee,sS:()=>je,Kg:()=>fe,PS:()=>$e,Au:()=>Ge,qg:()=>Ze,_:()=>Ie,Ym:()=>Ue,uQ:()=>Be,Fs:()=>Se,_X:()=>Ve,oY:()=>ye,Gr:()=>f,sV:()=>n.sV,hd:()=>g,lR:()=>tr,kK:()=>I,o6:()=>q,w9:()=>Y,PO:()=>at,mh:()=>P,QM:()=>B,o:()=>c,Ij:()=>lt.Z,wt:()=>nt,Ke:()=>n.Ke,wQ:()=>S,oX:()=>k,qI:()=>d,bU:()=>l.Z,Wy:()=>X,D2:()=>mr,EX:()=>n.EX,Qc:()=>$,gz:()=>wr,sI:()=>E,Y3:()=>Z,dS:()=>ne,Eg:()=>L,N8:()=>rr,h9:()=>kr,$O:()=>n.$O,SV:()=>A,$F:()=>N,kO:()=>D,Sh:()=>n.Sh,pV:()=>ut,u2:()=>yt.Z,$4:()=>Q,O5:()=>J,ci:()=>xe,Bn:()=>et,Dw:()=>Fr,qX:()=>n.qX,Le:()=>Et,A1:()=>ae,Gp:()=>n.Gp,M$:()=>ie,aj:()=>n.aj,Dr:()=>n.Dr,IL:()=>ht,or:()=>n.or,VX:()=>n.VX,NP:()=>n.NP,l:()=>n.l,gF:()=>le,WT:()=>We,P_:()=>qe,yh:()=>ee});var n=r(732),o=r(842),i=r(655),a=r(591),s=r.n(a),u=r(955);const c=function(){function t(t,e){this.major=String(t),this.minor=String(e)}return t.prototype.toString=function(){var t=(0,u.D_)(129);return"%PDF-"+this.major+"."+this.minor+"\n%"+t+t+t+t},t.prototype.sizeInBytes=function(){return 12+this.major.length+this.minor.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=o.Z.Percent,t[e++]=o.Z.P,t[e++]=o.Z.D,t[e++]=o.Z.F,t[e++]=o.Z.Dash,e+=(0,u.C1)(this.major,t,e),t[e++]=o.Z.Period,e+=(0,u.C1)(this.minor,t,e),t[e++]=o.Z.Newline,t[e++]=o.Z.Percent,t[e++]=129,t[e++]=129,t[e++]=129,t[e++]=129,e-r},t.forVersion=function(e,r){return new t(e,r)},t}();var l=r(18);const d=function(t){function e(e){var r=t.call(this)||this;return r.numberValue=e,r.stringValue=(0,u.D$)(e),r}return(0,i.ZT)(e,t),e.prototype.asNumber=function(){return this.numberValue},e.prototype.value=function(){return this.numberValue},e.prototype.clone=function(){return e.of(this.numberValue)},e.prototype.toString=function(){return this.stringValue},e.prototype.sizeInBytes=function(){return this.stringValue.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,u.C1)(this.stringValue,t,e),this.stringValue.length},e.of=function(t){return new e(t)},e}(l.Z);var h=function(t){function e(e){var r=t.call(this)||this;return r.array=[],r.context=e,r}return(0,i.ZT)(e,t),e.prototype.size=function(){return this.array.length},e.prototype.push=function(t){this.array.push(t)},e.prototype.insert=function(t,e){this.array.splice(t,0,e)},e.prototype.indexOf=function(t){var e=this.array.indexOf(t);return-1===e?void 0:e},e.prototype.remove=function(t){this.array.splice(t,1)},e.prototype.set=function(t,e){this.array[t]=e},e.prototype.get=function(t){return this.array[t]},e.prototype.lookupMaybe=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];return(e=this.context).lookupMaybe.apply(e,(0,i.pr)([this.get(t)],r))},e.prototype.lookup=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];return(e=this.context).lookup.apply(e,(0,i.pr)([this.get(t)],r))},e.prototype.asRectangle=function(){if(4!==this.size())throw new n.sV(this.size());var t=this.lookup(0,d).asNumber(),e=this.lookup(1,d).asNumber();return{x:t,y:e,width:this.lookup(2,d).asNumber()-t,height:this.lookup(3,d).asNumber()-e}},e.prototype.asArray=function(){return this.array.slice()},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=0,o=this.size();n<o;n++)r.push(this.array[n]);return r},e.prototype.toString=function(){for(var t="[ ",e=0,r=this.size();e<r;e++)t+=this.get(e).toString(),t+=" ";return t+"]"},e.prototype.sizeInBytes=function(){for(var t=3,e=0,r=this.size();e<r;e++)t+=this.get(e).sizeInBytes()+1;return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=o.Z.LeftSquareBracket,t[e++]=o.Z.Space;for(var n=0,i=this.size();n<i;n++)e+=this.get(n).copyBytesInto(t,e),t[e++]=o.Z.Space;return t[e++]=o.Z.RightSquareBracket,e-r},e.prototype.scalePDFNumbers=function(t,e){for(var r=0,n=this.size();r<n;r++){var o=this.lookup(r);if(o instanceof d){var i=r%2==0?t:e;this.set(r,d.of(o.asNumber()*i))}}},e.withContext=function(t){return new e(t)},e}(l.Z);const f=h;var p={};const g=function(t){function e(e,r){var o=this;if(e!==p)throw new n.Gp("PDFBool");return(o=t.call(this)||this).value=r,o}return(0,i.ZT)(e,t),e.prototype.asBoolean=function(){return this.value},e.prototype.clone=function(){return this},e.prototype.toString=function(){return String(this.value)},e.prototype.sizeInBytes=function(){return this.value?4:5},e.prototype.copyBytesInto=function(t,e){return this.value?(t[e++]=o.Z.t,t[e++]=o.Z.r,t[e++]=o.Z.u,t[e++]=o.Z.e,4):(t[e++]=o.Z.f,t[e++]=o.Z.a,t[e++]=o.Z.l,t[e++]=o.Z.s,t[e++]=o.Z.e,5)},e.True=new e(p,!0),e.False=new e(p,!1),e}(l.Z);var v=new Uint8Array(256);v[o.Z.LeftParen]=1,v[o.Z.RightParen]=1,v[o.Z.LessThan]=1,v[o.Z.GreaterThan]=1,v[o.Z.LeftSquareBracket]=1,v[o.Z.RightSquareBracket]=1,v[o.Z.LeftCurly]=1,v[o.Z.RightCurly]=1,v[o.Z.ForwardSlash]=1,v[o.Z.Percent]=1;var y=new Uint8Array(256);y[o.Z.Null]=1,y[o.Z.Tab]=1,y[o.Z.Newline]=1,y[o.Z.FormFeed]=1,y[o.Z.CarriageReturn]=1,y[o.Z.Space]=1;for(var m=new Uint8Array(256),b=0;b<256;b++)m[b]=y[b]||v[b]?1:0;m[o.Z.Hash]=1;var w={},x=new Map,F=function(t){function e(e,r){var i=this;if(e!==w)throw new n.Gp("PDFName");i=t.call(this)||this;for(var a,s="/",c=0,l=r.length;c<l;c++){var d=r[c],h=(0,u.GN)(d);s+=(a=h)>=o.Z.ExclamationPoint&&a<=o.Z.Tilde&&!m[a]?d:"#"+(0,u.zv)(h)}return i.encodedName=s,i}return(0,i.ZT)(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},i=1,a=this.encodedName.length;i<a;i++){var s=this.encodedName[i],c=(0,u.GN)(s),l=this.encodedName[i+1];r?c>=o.Z.Zero&&c<=o.Z.Nine||c>=o.Z.a&&c<=o.Z.f||c>=o.Z.A&&c<=o.Z.F?2!==(e+=s).length&&(l>="0"&&l<="9"||l>="a"&&l<="f"||l>="A"&&l<="F")||(n(parseInt(e,16)),e=""):n(c):c===o.Z.Hash?r=!0:n(c)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return String.fromCharCode.apply(String,Array.from(t))},e.prototype.asString=function(){return this.encodedName},e.prototype.value=function(){return this.encodedName},e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.encodedName},e.prototype.sizeInBytes=function(){return this.encodedName.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,u.C1)(this.encodedName,t,e),this.encodedName.length},e.of=function(t){var r=function(t){return t.replace(/#([\dABCDEF]{2})/g,(function(t,e){return(0,u.Dc)(e)}))}(t),n=x.get(r);return n||(n=new e(w,r),x.set(r,n)),n},e.Length=e.of("Length"),e.FlateDecode=e.of("FlateDecode"),e.Resources=e.of("Resources"),e.Font=e.of("Font"),e.XObject=e.of("XObject"),e.ExtGState=e.of("ExtGState"),e.Contents=e.of("Contents"),e.Type=e.of("Type"),e.Parent=e.of("Parent"),e.MediaBox=e.of("MediaBox"),e.Page=e.of("Page"),e.Annots=e.of("Annots"),e.TrimBox=e.of("TrimBox"),e.ArtBox=e.of("ArtBox"),e.BleedBox=e.of("BleedBox"),e.CropBox=e.of("CropBox"),e.Rotate=e.of("Rotate"),e.Title=e.of("Title"),e.Author=e.of("Author"),e.Subject=e.of("Subject"),e.Creator=e.of("Creator"),e.Keywords=e.of("Keywords"),e.Producer=e.of("Producer"),e.CreationDate=e.of("CreationDate"),e.ModDate=e.of("ModDate"),e}(l.Z);const S=F,k=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.asNull=function(){return null},e.prototype.clone=function(){return this},e.prototype.toString=function(){return"null"},e.prototype.sizeInBytes=function(){return 4},e.prototype.copyBytesInto=function(t,e){return t[e++]=o.Z.n,t[e++]=o.Z.u,t[e++]=o.Z.l,t[e++]=o.Z.l,4},e}(l.Z));var C=function(t){function e(e,r){var n=t.call(this)||this;return n.dict=e,n.context=r,n}return(0,i.ZT)(e,t),e.prototype.keys=function(){return Array.from(this.dict.keys())},e.prototype.values=function(){return Array.from(this.dict.values())},e.prototype.entries=function(){return Array.from(this.dict.entries())},e.prototype.set=function(t,e){this.dict.set(t,e)},e.prototype.get=function(t,e){void 0===e&&(e=!1);var r=this.dict.get(t);if(r!==k||e)return r},e.prototype.has=function(t){var e=this.dict.get(t);return void 0!==e&&e!==k},e.prototype.lookupMaybe=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var o=r.includes(k),a=(e=this.context).lookupMaybe.apply(e,(0,i.pr)([this.get(t,o)],r));if(a!==k||o)return a},e.prototype.lookup=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var o=r.includes(k),a=(e=this.context).lookup.apply(e,(0,i.pr)([this.get(t,o)],r));if(a!==k||o)return a},e.prototype.delete=function(t){return this.dict.delete(t)},e.prototype.asMap=function(){return new Map(this.dict)},e.prototype.uniqueKey=function(t){void 0===t&&(t="");for(var e=this.keys(),r=S.of(this.context.addRandomSuffix(t,10));e.includes(r);)r=S.of(this.context.addRandomSuffix(t,10));return r},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=this.entries(),o=0,i=n.length;o<i;o++){var a=n[o],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.toString=function(){for(var t="<<\n",e=this.entries(),r=0,n=e.length;r<n;r++){var o=e[r],i=o[0],a=o[1];t+=i.toString()+" "+a.toString()+"\n"}return t+">>"},e.prototype.sizeInBytes=function(){for(var t=5,e=this.entries(),r=0,n=e.length;r<n;r++){var o=e[r],i=o[0],a=o[1];t+=i.sizeInBytes()+a.sizeInBytes()+2}return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=o.Z.LessThan,t[e++]=o.Z.LessThan,t[e++]=o.Z.Newline;for(var n=this.entries(),i=0,a=n.length;i<a;i++){var s=n[i],u=s[0],c=s[1];e+=u.copyBytesInto(t,e),t[e++]=o.Z.Space,e+=c.copyBytesInto(t,e),t[e++]=o.Z.Newline}return t[e++]=o.Z.GreaterThan,t[e++]=o.Z.GreaterThan,e-r},e.withContext=function(t){return new e(new Map,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(l.Z);const P=C;var T=function(t){function e(e){var r=t.call(this)||this;return r.dict=e,r}return(0,i.ZT)(e,t),e.prototype.clone=function(t){throw new n.iQ(this.constructor.name,"clone")},e.prototype.getContentsString=function(){throw new n.iQ(this.constructor.name,"getContentsString")},e.prototype.getContents=function(){throw new n.iQ(this.constructor.name,"getContents")},e.prototype.getContentsSize=function(){throw new n.iQ(this.constructor.name,"getContentsSize")},e.prototype.updateDict=function(){var t=this.getContentsSize();this.dict.set(S.Length,d.of(t))},e.prototype.sizeInBytes=function(){return this.updateDict(),this.dict.sizeInBytes()+this.getContentsSize()+18},e.prototype.toString=function(){this.updateDict();var t=this.dict.toString();return t+="\nstream\n",(t+=this.getContentsString())+"\nendstream"},e.prototype.copyBytesInto=function(t,e){this.updateDict();var r=e;e+=this.dict.copyBytesInto(t,e),t[e++]=o.Z.Newline,t[e++]=o.Z.s,t[e++]=o.Z.t,t[e++]=o.Z.r,t[e++]=o.Z.e,t[e++]=o.Z.a,t[e++]=o.Z.m,t[e++]=o.Z.Newline;for(var n=this.getContents(),i=0,a=n.length;i<a;i++)t[e++]=n[i];return t[e++]=o.Z.Newline,t[e++]=o.Z.e,t[e++]=o.Z.n,t[e++]=o.Z.d,t[e++]=o.Z.s,t[e++]=o.Z.t,t[e++]=o.Z.r,t[e++]=o.Z.e,t[e++]=o.Z.a,t[e++]=o.Z.m,e-r},e}(l.Z);const D=T,A=function(t){function e(e,r){var n=t.call(this,e)||this;return n.contents=r,n}return(0,i.ZT)(e,t),e.prototype.asUint8Array=function(){return this.contents.slice()},e.prototype.clone=function(t){return e.of(this.dict.clone(t),this.contents.slice())},e.prototype.getContentsString=function(){return(0,u.Qo)(this.contents)},e.prototype.getContents=function(){return this.contents},e.prototype.getContentsSize=function(){return this.contents.length},e.of=function(t,r){return new e(t,r)},e}(D);var O={},R=new Map;const N=function(t){function e(e,r,o){var i=this;if(e!==O)throw new n.Gp("PDFRef");return(i=t.call(this)||this).objectNumber=r,i.generationNumber=o,i.tag=r+" "+o+" R",i}return(0,i.ZT)(e,t),e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.tag},e.prototype.sizeInBytes=function(){return this.tag.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,u.C1)(this.tag,t,e),this.tag.length},e.of=function(t,r){void 0===r&&(r=0);var n=t+" "+r+" R",o=R.get(n);return o||(o=new e(O,t,r),R.set(n,o)),o},e}(l.Z);var M=function(){function t(t,e){this.name=t,this.args=e||[]}return t.prototype.clone=function(e){for(var r=new Array(this.args.length),n=0,o=r.length;n<o;n++){var i=this.args[n];r[n]=i instanceof l.Z?i.clone(e):i}return t.of(this.name,r)},t.prototype.toString=function(){for(var t="",e=0,r=this.args.length;e<r;e++)t+=String(this.args[e])+" ";return t+this.name},t.prototype.sizeInBytes=function(){for(var t=0,e=0,r=this.args.length;e<r;e++){var n=this.args[e];t+=(n instanceof l.Z?n.sizeInBytes():n.length)+1}return t+this.name.length},t.prototype.copyBytesInto=function(t,e){for(var r=e,n=0,i=this.args.length;n<i;n++){var a=this.args[n];a instanceof l.Z?e+=a.copyBytesInto(t,e):e+=(0,u.C1)(a,t,e),t[e++]=o.Z.Space}return(e+=(0,u.C1)(this.name,t,e))-r},t.of=function(e,r){return new t(e,r)},t}();const E=M;var j;!function(t){t.NonStrokingColor="sc",t.NonStrokingColorN="scn",t.NonStrokingColorRgb="rg",t.NonStrokingColorGray="g",t.NonStrokingColorCmyk="k",t.NonStrokingColorspace="cs",t.StrokingColor="SC",t.StrokingColorN="SCN",t.StrokingColorRgb="RG",t.StrokingColorGray="G",t.StrokingColorCmyk="K",t.StrokingColorspace="CS",t.BeginMarkedContentSequence="BDC",t.BeginMarkedContent="BMC",t.EndMarkedContent="EMC",t.MarkedContentPointWithProps="DP",t.MarkedContentPoint="MP",t.DrawObject="Do",t.ConcatTransformationMatrix="cm",t.PopGraphicsState="Q",t.PushGraphicsState="q",t.SetFlatness="i",t.SetGraphicsStateParams="gs",t.SetLineCapStyle="J",t.SetLineDashPattern="d",t.SetLineJoinStyle="j",t.SetLineMiterLimit="M",t.SetLineWidth="w",t.SetTextMatrix="Tm",t.SetRenderingIntent="ri",t.AppendRectangle="re",t.BeginInlineImage="BI",t.BeginInlineImageData="ID",t.EndInlineImage="EI",t.ClipEvenOdd="W*",t.ClipNonZero="W",t.CloseAndStroke="s",t.CloseFillEvenOddAndStroke="b*",t.CloseFillNonZeroAndStroke="b",t.ClosePath="h",t.AppendBezierCurve="c",t.CurveToReplicateFinalPoint="y",t.CurveToReplicateInitialPoint="v",t.EndPath="n",t.FillEvenOddAndStroke="B*",t.FillEvenOdd="f*",t.FillNonZeroAndStroke="B",t.FillNonZero="f",t.LegacyFillNonZero="F",t.LineTo="l",t.MoveTo="m",t.ShadingFill="sh",t.StrokePath="S",t.BeginText="BT",t.EndText="ET",t.MoveText="Td",t.MoveTextSetLeading="TD",t.NextLine="T*",t.SetCharacterSpacing="Tc",t.SetFontAndSize="Tf",t.SetTextHorizontalScaling="Tz",t.SetTextLineHeight="TL",t.SetTextRenderingMode="Tr",t.SetTextRise="Ts",t.SetWordSpacing="Tw",t.ShowText="Tj",t.ShowTextAdjusted="TJ",t.ShowTextLine="'",t.ShowTextLineAndSpace='"',t.Type3D0="d0",t.Type3D1="d1",t.BeginCompatibilitySection="BX",t.EndCompatibilitySection="EX"}(j||(j={}));const Z=j,B=function(t){function e(e,r){var n=t.call(this,e)||this;return n.computeContents=function(){var t=n.getUnencodedContents();return n.encode?s().deflate(t):t},n.encode=r,r&&e.set(S.of("Filter"),S.of("FlateDecode")),n.contentsCache=u.Ct.populatedBy(n.computeContents),n}return(0,i.ZT)(e,t),e.prototype.getContents=function(){return this.contentsCache.access()},e.prototype.getContentsSize=function(){return this.contentsCache.access().length},e.prototype.getUnencodedContents=function(){throw new n.iQ(this.constructor.name,"getUnencodedContents")},e}(D);var V=function(t){function e(e,r,n){void 0===n&&(n=!0);var o=t.call(this,e,n)||this;return o.operators=r,o}return(0,i.ZT)(e,t),e.prototype.push=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];(t=this.operators).push.apply(t,e)},e.prototype.clone=function(t){for(var r=new Array(this.operators.length),n=0,o=this.operators.length;n<o;n++)r[n]=this.operators[n].clone(t);var i=this.dict,a=this.encode;return e.of(i.clone(t),r,a)},e.prototype.getContentsString=function(){for(var t="",e=0,r=this.operators.length;e<r;e++)t+=this.operators[e]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=0,r=0,n=this.operators.length;r<n;r++)e+=this.operators[r].copyBytesInto(t,e),t[e++]=o.Z.Newline;return t},e.prototype.getUnencodedContentsSize=function(){for(var t=0,e=0,r=this.operators.length;e<r;e++)t+=this.operators[e].sizeInBytes()+1;return t},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(B);const I=V;var z=function(){function t(t){this.seed=t}return t.prototype.nextInt=function(){var t=1e4*Math.sin(this.seed++);return t-Math.floor(t)},t.withSeed=function(e){return new t(e)},t}(),U=function(t,e){var r=t[0],n=e[0];return r.objectNumber-n.objectNumber},G=function(){function t(){this.largestObjectNumber=0,this.header=c.forVersion(1,7),this.trailerInfo={},this.indirectObjects=new Map,this.rng=z.withSeed(1)}return t.prototype.assign=function(t,e){this.indirectObjects.set(t,e),t.objectNumber>this.largestObjectNumber&&(this.largestObjectNumber=t.objectNumber)},t.prototype.nextRef=function(){return this.largestObjectNumber+=1,N.of(this.largestObjectNumber)},t.prototype.register=function(t){var e=this.nextRef();return this.assign(e,t),e},t.prototype.delete=function(t){return this.indirectObjects.delete(t)},t.prototype.lookupMaybe=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var o=e.includes(k),i=t instanceof N?this.indirectObjects.get(t):t;if(i&&(i!==k||o)){for(var a=0,s=e.length;a<s;a++){var u=e[a];if(u===k){if(i===k)return i}else if(i instanceof u)return i}throw new n.VX(e,i)}},t.prototype.lookup=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var o=t instanceof N?this.indirectObjects.get(t):t;if(0===e.length)return o;for(var i=0,a=e.length;i<a;i++){var s=e[i];if(s===k){if(o===k)return o}else if(o instanceof s)return o}throw new n.VX(e,o)},t.prototype.getObjectRef=function(t){for(var e=Array.from(this.indirectObjects.entries()),r=0,n=e.length;r<n;r++){var o=e[r],i=o[0];if(o[1]===t)return i}},t.prototype.enumerateIndirectObjects=function(){return Array.from(this.indirectObjects.entries()).sort(U)},t.prototype.obj=function(t){if(t instanceof l.Z)return t;if(null==t)return k;if("string"==typeof t)return S.of(t);if("number"==typeof t)return d.of(t);if("boolean"==typeof t)return t?g.True:g.False;if(Array.isArray(t)){for(var e=f.withContext(this),r=0,n=t.length;r<n;r++)e.push(this.obj(t[r]));return e}var o=P.withContext(this),i=Object.keys(t);for(r=0,n=i.length;r<n;r++){var a=i[r],s=t[a];void 0!==s&&o.set(S.of(a),this.obj(s))}return o},t.prototype.stream=function(t,e){return void 0===e&&(e={}),A.of(this.obj(e),(0,u.b3)(t))},t.prototype.flateStream=function(t,e){return void 0===e&&(e={}),this.stream(s().deflate((0,u.b3)(t)),(0,i.pi)((0,i.pi)({},e),{Filter:"FlateDecode"}))},t.prototype.contentStream=function(t,e){return void 0===e&&(e={}),I.of(this.obj(e),t)},t.prototype.formXObject=function(t,e){return void 0===e&&(e={}),this.contentStream(t,(0,i.pi)((0,i.pi)({BBox:this.obj([0,0,0,0]),Matrix:this.obj([1,0,0,1,0,0])},e),{Type:"XObject",Subtype:"Form"}))},t.prototype.getPushGraphicsStateContentStream=function(){if(this.pushGraphicsStateContentStreamRef)return this.pushGraphicsStateContentStreamRef;var t=this.obj({}),e=E.of(Z.PushGraphicsState),r=I.of(t,[e]);return this.pushGraphicsStateContentStreamRef=this.register(r),this.pushGraphicsStateContentStreamRef},t.prototype.getPopGraphicsStateContentStream=function(){if(this.popGraphicsStateContentStreamRef)return this.popGraphicsStateContentStreamRef;var t=this.obj({}),e=E.of(Z.PopGraphicsState),r=I.of(t,[e]);return this.popGraphicsStateContentStreamRef=this.register(r),this.popGraphicsStateContentStreamRef},t.prototype.addRandomSuffix=function(t,e){return void 0===e&&(e=4),t+"-"+Math.floor(this.rng.nextInt()*Math.pow(10,e))},t.create=function(){return new t},t}();const q=G;var W=function(t){function e(e,r,n){void 0===n&&(n=!0);var o=t.call(this,e,r)||this;return o.normalized=!1,o.autoNormalizeCTM=n,o}return(0,i.ZT)(e,t),e.prototype.clone=function(t){for(var r=e.fromMapWithContext(new Map,t||this.context,this.autoNormalizeCTM),n=this.entries(),o=0,i=n.length;o<i;o++){var a=n[o],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.Parent=function(){return this.lookupMaybe(S.Parent,P)},e.prototype.Contents=function(){return this.lookup(S.of("Contents"))},e.prototype.Annots=function(){return this.lookupMaybe(S.Annots,f)},e.prototype.BleedBox=function(){return this.lookupMaybe(S.BleedBox,f)},e.prototype.TrimBox=function(){return this.lookupMaybe(S.TrimBox,f)},e.prototype.ArtBox=function(){return this.lookupMaybe(S.ArtBox,f)},e.prototype.Resources=function(){var t=this.getInheritableAttribute(S.Resources);return this.context.lookupMaybe(t,P)},e.prototype.MediaBox=function(){var t=this.getInheritableAttribute(S.MediaBox);return this.context.lookup(t,f)},e.prototype.CropBox=function(){var t=this.getInheritableAttribute(S.CropBox);return this.context.lookupMaybe(t,f)},e.prototype.Rotate=function(){var t=this.getInheritableAttribute(S.Rotate);return this.context.lookupMaybe(t,d)},e.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.get(t))})),e},e.prototype.setParent=function(t){this.set(S.Parent,t)},e.prototype.addContentStream=function(t){var e=this.normalizedEntries().Contents||this.context.obj([]);this.set(S.Contents,e),e.push(t)},e.prototype.wrapContentStreams=function(t,e){var r=this.Contents();return r instanceof f&&(r.insert(0,t),r.push(e),!0)},e.prototype.addAnnot=function(t){this.normalizedEntries().Annots.push(t)},e.prototype.removeAnnot=function(t){var e=this.normalizedEntries().Annots,r=e.indexOf(t);void 0!==r&&e.remove(r)},e.prototype.setFontDictionary=function(t,e){this.normalizedEntries().Font.set(t,e)},e.prototype.newFontDictionaryKey=function(t){return this.normalizedEntries().Font.uniqueKey(t)},e.prototype.newFontDictionary=function(t,e){var r=this.newFontDictionaryKey(t);return this.setFontDictionary(r,e),r},e.prototype.setXObject=function(t,e){this.normalizedEntries().XObject.set(t,e)},e.prototype.newXObjectKey=function(t){return this.normalizedEntries().XObject.uniqueKey(t)},e.prototype.newXObject=function(t,e){var r=this.newXObjectKey(t);return this.setXObject(r,e),r},e.prototype.setExtGState=function(t,e){this.normalizedEntries().ExtGState.set(t,e)},e.prototype.newExtGStateKey=function(t){return this.normalizedEntries().ExtGState.uniqueKey(t)},e.prototype.newExtGState=function(t,e){var r=this.newExtGStateKey(t);return this.setExtGState(r,e),r},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.normalize=function(){if(!this.normalized){var t=this.context,e=this.get(S.Contents);this.context.lookup(e)instanceof D&&this.set(S.Contents,t.obj([e])),this.autoNormalizeCTM&&this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(),this.context.getPopGraphicsStateContentStream());var r=this.getInheritableAttribute(S.Resources),n=t.lookupMaybe(r,P)||t.obj({});this.set(S.Resources,n);var o=n.lookupMaybe(S.Font,P)||t.obj({});n.set(S.Font,o);var i=n.lookupMaybe(S.XObject,P)||t.obj({});n.set(S.XObject,i);var a=n.lookupMaybe(S.ExtGState,P)||t.obj({});n.set(S.ExtGState,a);var s=this.Annots()||t.obj([]);this.set(S.Annots,s),this.normalized=!0}},e.prototype.normalizedEntries=function(){this.normalize();var t=this.Annots(),e=this.Resources();return{Annots:t,Resources:e,Contents:this.Contents(),Font:e.lookup(S.Font,P),XObject:e.lookup(S.XObject,P),ExtGState:e.lookup(S.ExtGState,P)}},e.InheritableEntries=["Resources","MediaBox","CropBox","Rotate"],e.withContextAndParent=function(t,r){var n=new Map;return n.set(S.Type,S.Page),n.set(S.Parent,r),n.set(S.Resources,t.obj({})),n.set(S.MediaBox,t.obj([0,0,612,792])),new e(n,t,!1)},e.fromMapWithContext=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(P);const L=W;var K=function(){function t(t,e){var r=this;this.traversedObjects=new Map,this.copy=function(t){return t instanceof L?r.copyPDFPage(t):t instanceof P?r.copyPDFDict(t):t instanceof f?r.copyPDFArray(t):t instanceof D?r.copyPDFStream(t):t instanceof N?r.copyPDFIndirectObject(t):t.clone()},this.copyPDFPage=function(t){for(var e=t.clone(),n=L.InheritableEntries,o=0,i=n.length;o<i;o++){var a=S.of(n[o]),s=e.getInheritableAttribute(a);!e.get(a)&&s&&e.set(a,s)}return e.delete(S.of("Parent")),r.copyPDFDict(e)},this.copyPDFDict=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.entries(),o=0,i=n.length;o<i;o++){var a=n[o],s=a[0],u=a[1];e.set(s,r.copy(u))}return e},this.copyPDFArray=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=0,o=t.size();n<o;n++){var i=t.get(n);e.set(n,r.copy(i))}return e},this.copyPDFStream=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.dict.entries(),o=0,i=n.length;o<i;o++){var a=n[o],s=a[0],u=a[1];e.dict.set(s,r.copy(u))}return e},this.copyPDFIndirectObject=function(t){if(!r.traversedObjects.has(t)){var e=r.dest.nextRef();r.traversedObjects.set(t,e);var n=r.src.lookup(t);if(n){var o=r.copy(n);r.dest.assign(e,o)}}return r.traversedObjects.get(t)},this.src=t,this.dest=e}return t.for=function(e,r){return new t(e,r)},t}();const X=K;var H=function(){function t(t){this.subsections=t?[[t]]:[],this.chunkIdx=0,this.chunkLength=t?1:0}return t.prototype.addEntry=function(t,e){this.append({ref:t,offset:e,deleted:!1})},t.prototype.addDeletedEntry=function(t,e){this.append({ref:t,offset:e,deleted:!0})},t.prototype.toString=function(){for(var t="xref\n",e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e];t+=n[0].ref.objectNumber+" "+n.length+"\n";for(var o=0,i=n.length;o<i;o++){var a=n[o];t+=(0,u.Sk)(String(a.offset),10,"0"),t+=" ",t+=(0,u.Sk)(String(a.ref.generationNumber),5,"0"),t+=" ",t+=a.deleted?"f":"n",t+=" \n"}}return t},t.prototype.sizeInBytes=function(){for(var t=5,e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e],o=n.length,i=n[0];t+=2,t+=String(i.ref.objectNumber).length,t+=String(o).length,t+=20*o}return t},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=o.Z.x,t[e++]=o.Z.r,t[e++]=o.Z.e,t[e++]=o.Z.f,t[e++]=o.Z.Newline,(e+=this.copySubsectionsIntoBuffer(this.subsections,t,e))-r},t.prototype.copySubsectionsIntoBuffer=function(t,e,r){for(var n=r,i=t.length,a=0;a<i;a++){var s=this.subsections[a],c=String(s[0].ref.objectNumber);r+=(0,u.C1)(c,e,r),e[r++]=o.Z.Space;var l=String(s.length);r+=(0,u.C1)(l,e,r),e[r++]=o.Z.Newline,r+=this.copyEntriesIntoBuffer(s,e,r)}return r-n},t.prototype.copyEntriesIntoBuffer=function(t,e,r){for(var n=t.length,i=0;i<n;i++){var a=t[i],s=(0,u.Sk)(String(a.offset),10,"0");r+=(0,u.C1)(s,e,r),e[r++]=o.Z.Space;var c=(0,u.Sk)(String(a.ref.generationNumber),5,"0");r+=(0,u.C1)(c,e,r),e[r++]=o.Z.Space,e[r++]=a.deleted?o.Z.f:o.Z.n,e[r++]=o.Z.Space,e[r++]=o.Z.Newline}return 20*n},t.prototype.append=function(t){if(0===this.chunkLength)return this.subsections.push([t]),this.chunkIdx=0,void(this.chunkLength=1);var e=this.subsections[this.chunkIdx],r=e[this.chunkLength-1];t.ref.objectNumber-r.ref.objectNumber>1?(this.subsections.push([t]),this.chunkIdx+=1,this.chunkLength=1):(e.push(t),this.chunkLength+=1)},t.create=function(){return new t({ref:N.of(0,65535),offset:0,deleted:!0})},t.createEmpty=function(){return new t},t}();const Y=H,Q=function(){function t(t){this.lastXRefOffset=String(t)}return t.prototype.toString=function(){return"startxref\n"+this.lastXRefOffset+"\n%%EOF"},t.prototype.sizeInBytes=function(){return 16+this.lastXRefOffset.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=o.Z.s,t[e++]=o.Z.t,t[e++]=o.Z.a,t[e++]=o.Z.r,t[e++]=o.Z.t,t[e++]=o.Z.x,t[e++]=o.Z.r,t[e++]=o.Z.e,t[e++]=o.Z.f,t[e++]=o.Z.Newline,e+=(0,u.C1)(this.lastXRefOffset,t,e),t[e++]=o.Z.Newline,t[e++]=o.Z.Percent,t[e++]=o.Z.Percent,t[e++]=o.Z.E,t[e++]=o.Z.O,t[e++]=o.Z.F,e-r},t.forLastCrossRefSectionOffset=function(e){return new t(e)},t}(),J=function(){function t(t){this.dict=t}return t.prototype.toString=function(){return"trailer\n"+this.dict.toString()},t.prototype.sizeInBytes=function(){return 8+this.dict.sizeInBytes()},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=o.Z.t,t[e++]=o.Z.r,t[e++]=o.Z.a,t[e++]=o.Z.i,t[e++]=o.Z.l,t[e++]=o.Z.e,t[e++]=o.Z.r,t[e++]=o.Z.Newline,(e+=this.dict.copyBytesInto(t,e))-r},t.of=function(e){return new t(e)},t}();var _=function(t){function e(e,r,n){void 0===n&&(n=!0);var o=t.call(this,e.obj({}),n)||this;return o.objects=r,o.offsets=o.computeObjectOffsets(),o.offsetsString=o.computeOffsetsString(),o.dict.set(S.of("Type"),S.of("ObjStm")),o.dict.set(S.of("N"),d.of(o.objects.length)),o.dict.set(S.of("First"),d.of(o.offsetsString.length)),o}return(0,i.ZT)(e,t),e.prototype.getObjectsCount=function(){return this.objects.length},e.prototype.clone=function(t){return e.withContextAndObjects(t||this.dict.context,this.objects.slice(),this.encode)},e.prototype.getContentsString=function(){for(var t=this.offsetsString,e=0,r=this.objects.length;e<r;e++)t+=this.objects[e][1]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=(0,u.C1)(this.offsetsString,t,0),r=0,n=this.objects.length;r<n;r++)e+=this.objects[r][1].copyBytesInto(t,e),t[e++]=o.Z.Newline;return t},e.prototype.getUnencodedContentsSize=function(){return this.offsetsString.length+(0,u.Z$)(this.offsets)[1]+(0,u.Z$)(this.objects)[1].sizeInBytes()+1},e.prototype.computeOffsetsString=function(){for(var t="",e=0,r=this.offsets.length;e<r;e++){var n=this.offsets[e];t+=n[0]+" "+n[1]+" "}return t},e.prototype.computeObjectOffsets=function(){for(var t=0,e=new Array(this.objects.length),r=0,n=this.objects.length;r<n;r++){var o=this.objects[r],i=o[0],a=o[1];e[r]=[i.objectNumber,t],t+=a.sizeInBytes()+1}return e},e.withContextAndObjects=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(B);const $=_;var tt=function(){function t(t,e){var r=this;this.parsedObjects=0,this.shouldWaitForTick=function(t){return r.parsedObjects+=t,r.parsedObjects%r.objectsPerTick==0},this.context=t,this.objectsPerTick=e}return t.prototype.serializeToBuffer=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e,r,n,a,s,c,l,d,h,f,p,g,v,y,m,b;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:return[4,this.computeBufferSize()];case 1:t=i.sent(),e=t.size,r=t.header,n=t.indirectObjects,a=t.xref,s=t.trailerDict,c=t.trailer,l=0,d=new Uint8Array(e),l+=r.copyBytesInto(d,l),d[l++]=o.Z.Newline,d[l++]=o.Z.Newline,h=0,f=n.length,i.label=2;case 2:return h<f?(p=n[h],g=p[0],v=p[1],y=String(g.objectNumber),l+=(0,u.C1)(y,d,l),d[l++]=o.Z.Space,m=String(g.generationNumber),l+=(0,u.C1)(m,d,l),d[l++]=o.Z.Space,d[l++]=o.Z.o,d[l++]=o.Z.b,d[l++]=o.Z.j,d[l++]=o.Z.Newline,l+=v.copyBytesInto(d,l),d[l++]=o.Z.Newline,d[l++]=o.Z.e,d[l++]=o.Z.n,d[l++]=o.Z.d,d[l++]=o.Z.o,d[l++]=o.Z.b,d[l++]=o.Z.j,d[l++]=o.Z.Newline,d[l++]=o.Z.Newline,b=v instanceof $?v.getObjectsCount():1,this.shouldWaitForTick(b)?[4,(0,u.uj)()]:[3,4]):[3,5];case 3:i.sent(),i.label=4;case 4:return h++,[3,2];case 5:return a&&(l+=a.copyBytesInto(d,l),d[l++]=o.Z.Newline),s&&(l+=s.copyBytesInto(d,l),d[l++]=o.Z.Newline,d[l++]=o.Z.Newline),l+=c.copyBytesInto(d,l),[2,d]}}))}))},t.prototype.computeIndirectObjectSize=function(t){var e=t[0],r=t[1];return e.sizeInBytes()+3+(r.sizeInBytes()+9)},t.prototype.createTrailerDict=function(){return this.context.obj({Size:this.context.largestObjectNumber+1,Root:this.context.trailerInfo.Root,Encrypt:this.context.trailerInfo.Encrypt,Info:this.context.trailerInfo.Info,ID:this.context.trailerInfo.ID})},t.prototype.computeBufferSize=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e,r,n,o,a,s,l,d,h,f;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:t=c.forVersion(1,7),e=t.sizeInBytes()+2,r=Y.create(),n=this.context.enumerateIndirectObjects(),o=0,a=n.length,i.label=1;case 1:return o<a?(s=n[o],l=s[0],r.addEntry(l,e),e+=this.computeIndirectObjectSize(s),this.shouldWaitForTick(1)?[4,(0,u.uj)()]:[3,3]):[3,4];case 2:i.sent(),i.label=3;case 3:return o++,[3,1];case 4:return d=e,e+=r.sizeInBytes()+1,h=J.of(this.createTrailerDict()),e+=h.sizeInBytes()+2,f=Q.forLastCrossRefSectionOffset(d),[2,{size:e+=f.sizeInBytes(),header:t,indirectObjects:n,xref:r,trailerDict:h,trailer:f}]}}))}))},t.forContext=function(e,r){return new t(e,r)},t}();const et=tt;var rt=function(t){function e(e){var r=t.call(this)||this;return r.data=e,r}return(0,i.ZT)(e,t),e.prototype.clone=function(){return e.of(this.data.slice())},e.prototype.toString=function(){return"PDFInvalidObject("+this.data.length+" bytes)"},e.prototype.sizeInBytes=function(){return this.data.length},e.prototype.copyBytesInto=function(t,e){for(var r=this.data.length,n=0;n<r;n++)t[e++]=this.data[n];return r},e.of=function(t){return new e(t)},e}(l.Z);const nt=rt;var ot;!function(t){t[t.Deleted=0]="Deleted",t[t.Uncompressed=1]="Uncompressed",t[t.Compressed=2]="Compressed"}(ot||(ot={}));var it=function(t){function e(e,r,n){void 0===n&&(n=!0);var o=t.call(this,e,n)||this;return o.computeIndex=function(){for(var t=[],e=0,r=0,n=o.entries.length;r<n;r++){var i=o.entries[r],a=o.entries[r-1];0===r?t.push(i.ref.objectNumber):i.ref.objectNumber-a.ref.objectNumber>1&&(t.push(e),t.push(i.ref.objectNumber),e=0),e+=1}return t.push(e),t},o.computeEntryTuples=function(){for(var t=new Array(o.entries.length),e=0,r=o.entries.length;e<r;e++){var n=o.entries[e];if(n.type===ot.Deleted){var i=n.type,a=n.nextFreeObjectNumber,s=n.ref;t[e]=[i,a,s.generationNumber]}if(n.type===ot.Uncompressed){i=n.type;var u=n.offset;s=n.ref,t[e]=[i,u,s.generationNumber]}if(n.type===ot.Compressed){i=n.type;var c=n.objectStreamRef,l=n.index;t[e]=[i,c.objectNumber,l]}}return t},o.computeMaxEntryByteWidths=function(){for(var t=o.entryTuplesCache.access(),e=[0,0,0],r=0,n=t.length;r<n;r++){var i=t[r],a=i[0],s=i[1],c=i[2],l=(0,u.yJ)(a),d=(0,u.yJ)(s),h=(0,u.yJ)(c);l>e[0]&&(e[0]=l),d>e[1]&&(e[1]=d),h>e[2]&&(e[2]=h)}return e},o.entries=r||[],o.entryTuplesCache=u.Ct.populatedBy(o.computeEntryTuples),o.maxByteWidthsCache=u.Ct.populatedBy(o.computeMaxEntryByteWidths),o.indexCache=u.Ct.populatedBy(o.computeIndex),e.set(S.of("Type"),S.of("XRef")),o}return(0,i.ZT)(e,t),e.prototype.addDeletedEntry=function(t,e){var r=ot.Deleted;this.entries.push({type:r,ref:t,nextFreeObjectNumber:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addUncompressedEntry=function(t,e){var r=ot.Uncompressed;this.entries.push({type:r,ref:t,offset:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addCompressedEntry=function(t,e,r){var n=ot.Compressed;this.entries.push({type:n,ref:t,objectStreamRef:e,index:r}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.clone=function(t){var r=this,n=r.dict,o=r.entries,i=r.encode;return e.of(n.clone(t),o.slice(),i)},e.prototype.getContentsString=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r="",n=0,o=t.length;n<o;n++){for(var i=t[n],a=i[0],s=i[1],c=i[2],l=(0,u.GP)((0,u.DV)(a)),d=(0,u.GP)((0,u.DV)(s)),h=(0,u.GP)((0,u.DV)(c)),f=e[0]-1;f>=0;f--)r+=(l[f]||0).toString(2);for(f=e[1]-1;f>=0;f--)r+=(d[f]||0).toString(2);for(f=e[2]-1;f>=0;f--)r+=(h[f]||0).toString(2)}return r},e.prototype.getUnencodedContents=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r=new Uint8Array(this.getUnencodedContentsSize()),n=0,o=0,i=t.length;o<i;o++){for(var a=t[o],s=a[0],c=a[1],l=a[2],d=(0,u.GP)((0,u.DV)(s)),h=(0,u.GP)((0,u.DV)(c)),f=(0,u.GP)((0,u.DV)(l)),p=e[0]-1;p>=0;p--)r[n++]=d[p]||0;for(p=e[1]-1;p>=0;p--)r[n++]=h[p]||0;for(p=e[2]-1;p>=0;p--)r[n++]=f[p]||0}return r},e.prototype.getUnencodedContentsSize=function(){var t=this.maxByteWidthsCache.access();return(0,u.Sm)(t)*this.entries.length},e.prototype.updateDict=function(){t.prototype.updateDict.call(this);var e=this.maxByteWidthsCache.access(),r=this.indexCache.access(),n=this.dict.context;this.dict.set(S.of("W"),n.obj(e)),this.dict.set(S.of("Index"),n.obj(r))},e.create=function(t,r){void 0===r&&(r=!0);var n=new e(t,[],r);return n.addDeletedEntry(N.of(0,65535),0),n},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(B);const at=it;var st=function(t){function e(e,r,n,o){var i=t.call(this,e,r)||this;return i.encodeStreams=n,i.objectsPerStream=o,i}return(0,i.ZT)(e,t),e.prototype.computeBufferSize=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e,r,n,o,a,s,l,h,f,p,g,v,y,m,b,w,x,F;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:t=this.context.largestObjectNumber+1,e=c.forVersion(1,7),r=e.sizeInBytes()+2,n=at.create(this.createTrailerDict(),this.encodeStreams),o=[],a=[],s=[],l=this.context.enumerateIndirectObjects(),g=0,v=l.length,i.label=1;case 1:return g<v?(h=l[g],m=h[0],f=h[1],m===this.context.trailerInfo.Encrypt||f instanceof D||f instanceof nt||0!==m.generationNumber?(o.push(h),n.addUncompressedEntry(m,r),r+=this.computeIndirectObjectSize(h),this.shouldWaitForTick(1)?[4,(0,u.uj)()]:[3,3]):[3,4]):[3,6];case 2:i.sent(),i.label=3;case 3:return[3,5];case 4:y=(0,u.Z$)(a),p=(0,u.Z$)(s),y&&y.length%this.objectsPerStream!=0||(y=[],a.push(y),p=N.of(t++),s.push(p)),n.addCompressedEntry(m,p,y.length),y.push(h),i.label=5;case 5:return g++,[3,1];case 6:g=0,v=a.length,i.label=7;case 7:return g<v?(y=a[g],m=s[g],b=$.withContextAndObjects(this.context,y,this.encodeStreams),n.addUncompressedEntry(m,r),r+=this.computeIndirectObjectSize([m,b]),o.push([m,b]),this.shouldWaitForTick(y.length)?[4,(0,u.uj)()]:[3,9]):[3,10];case 8:i.sent(),i.label=9;case 9:return g++,[3,7];case 10:return w=N.of(t++),n.dict.set(S.of("Size"),d.of(t)),n.addUncompressedEntry(w,r),x=r,r+=this.computeIndirectObjectSize([w,n]),o.push([w,n]),F=Q.forLastCrossRefSectionOffset(x),[2,{size:r+=F.sizeInBytes(),header:e,indirectObjects:o,trailer:F}]}}))}))},e.forContext=function(t,r,n,o){return void 0===n&&(n=!0),void 0===o&&(o=50),new e(t,r,n,o)},e}(et);const ut=st;var ct=r(162),lt=r(158),dt=function(){function t(t,e){this.encoding=t===ct.S4.ZapfDingbats?ct.e$.ZapfDingbats:t===ct.S4.Symbol?ct.e$.Symbol:ct.e$.WinAnsi,this.font=ct.Zx.load(t),this.fontName=this.font.FontName,this.customName=e}return t.prototype.encodeText=function(t){for(var e=this.encodeTextAsGlyphs(t),r=new Array(e.length),n=0,o=e.length;n<o;n++)r[n]=(0,u.zv)(e[n].code);return lt.Z.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.encodeTextAsGlyphs(t),n=0,o=0,i=r.length;o<i;o++){var a=r[o].name,s=(r[o+1]||{}).name,u=this.font.getXAxisKerningForPair(a,s)||0;n+=this.widthOfGlyph(a)+u}return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,o=this.font,i=o.Ascender,a=o.Descender,s=o.FontBBox,u=(i||s[3])-(a||s[1]);return n||(u+=a||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.Ascender,n=e.Descender,o=e.FontBBox;return 1e3*t/((r||o[3])-(n||o[1]))},t.prototype.embedIntoContext=function(t,e){var r=t.obj({Type:"Font",Subtype:"Type1",BaseFont:this.customName||this.fontName,Encoding:this.encoding===ct.e$.WinAnsi?"WinAnsiEncoding":void 0});return e?(t.assign(e,r),e):t.register(r)},t.prototype.widthOfGlyph=function(t){return this.font.getWidthOfGlyph(t)||250},t.prototype.encodeTextAsGlyphs=function(t){for(var e=Array.from(t),r=new Array(e.length),n=0,o=e.length;n<o;n++){var i=(0,u.yq)(e[n]);r[n]=this.encoding.encodeUnicodeCodePoint(i)}return r},t.for=function(e,r){return new t(e,r)},t}();const ht=dt;var ft=r(235),pt=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"<"+t.join("")+">"},gt=function(t){return(0,u.CK)(t,4)},vt=function(t){if((0,ft.yo)(t))return gt(t);if((0,ft.pY)(t)){var e=(0,ft.D1)(t),r=(0,ft.$O)(t);return""+gt(e)+gt(r)}var n=(0,u.zv)(t);throw new Error("0x"+n+" is not a valid UTF-8 or UTF-16 codepoint.")},yt=r(222),mt=function(){function t(t,e,r,n){var o=this;this.allGlyphsInFontSortedById=function(){for(var t=new Array(o.font.characterSet.length),e=0,r=t.length;e<r;e++){var n=o.font.characterSet[e];t[e]=o.font.glyphForCodePoint(n)}return(0,u.PF)(t.sort(u.Yj),(function(t){return t.id}))},this.font=t,this.scale=1e3/this.font.unitsPerEm,this.fontData=e,this.fontName=this.font.postscriptName||"Font",this.customName=r,this.fontFeatures=n,this.baseFontName="",this.glyphCache=u.Ct.populatedBy(this.allGlyphsInFontSortedById)}return t.for=function(e,r,n,o){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(i){switch(i.label){case 0:return[4,e.create(r)];case 1:return[2,new t(i.sent(),r,n,o)]}}))}))},t.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,o=e.length;n<o;n++)r[n]=(0,u.CK)(e[n].id,4);return lt.Z.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.font.layout(t,this.fontFeatures).glyphs,n=0,o=0,i=r.length;o<i;o++)n+=r[o].advanceWidth*this.scale;return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,o=this.font,i=o.ascent,a=o.descent,s=o.bbox,u=(i||s.maxY)*this.scale-(a||s.minY)*this.scale;return n||(u-=Math.abs(a)||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.ascent,n=e.descent,o=e.bbox;return 1e3*t/((r||o.maxY)*this.scale-(n||o.minY)*this.scale)},t.prototype.embedIntoContext=function(t,e){return this.baseFontName=this.customName||t.addRandomSuffix(this.fontName),this.embedFontDict(t,e)},t.prototype.embedFontDict=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r,n,o;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:return[4,this.embedCIDFontDict(t)];case 1:return r=i.sent(),n=this.embedUnicodeCmap(t),o=t.obj({Type:"Font",Subtype:"Type0",BaseFont:this.baseFontName,Encoding:"Identity-H",DescendantFonts:[r],ToUnicode:n}),e?(t.assign(e,o),[2,e]):[2,t.register(o)]}}))}))},t.prototype.isCFF=function(){return this.font.cff},t.prototype.embedCIDFontDict=function(t){return(0,i.mG)(this,void 0,void 0,(function(){var e,r;return(0,i.Jh)(this,(function(n){switch(n.label){case 0:return[4,this.embedFontDescriptor(t)];case 1:return e=n.sent(),r=t.obj({Type:"Font",Subtype:this.isCFF()?"CIDFontType0":"CIDFontType2",CIDToGIDMap:"Identity",BaseFont:this.baseFontName,CIDSystemInfo:{Registry:yt.Z.of("Adobe"),Ordering:yt.Z.of("Identity"),Supplement:0},FontDescriptor:e,W:this.computeWidths()}),[2,t.register(r)]}}))}))},t.prototype.embedFontDescriptor=function(t){return(0,i.mG)(this,void 0,void 0,(function(){var e,r,n,o,a,s,u,c,l,d,h,f,p,g,v;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:return[4,this.embedFontStream(t)];case 1:return e=i.sent(),r=this.scale,n=this.font,o=n.italicAngle,a=n.ascent,s=n.descent,u=n.capHeight,c=n.xHeight,l=this.font.bbox,d=l.minX,h=l.minY,f=l.maxX,p=l.maxY,g=t.obj(((v={Type:"FontDescriptor",FontName:this.baseFontName,Flags:(w=this.font,x=w["OS/2"]?w["OS/2"].sFamilyClass:0,y={fixedPitch:w.post.isFixedPitch,serif:1<=x&&x<=7,symbolic:!0,script:10===x,italic:w.head.macStyle.italic},m=0,b=function(t){m|=1<<t-1},y.fixedPitch&&b(1),y.serif&&b(2),y.symbolic&&b(3),y.script&&b(4),y.nonsymbolic&&b(6),y.italic&&b(7),y.allCap&&b(17),y.smallCap&&b(18),y.forceBold&&b(19),m),FontBBox:[d*r,h*r,f*r,p*r],ItalicAngle:o,Ascent:a*r,Descent:s*r,CapHeight:(u||a)*r,XHeight:(c||0)*r,StemV:0})[this.isCFF()?"FontFile3":"FontFile2"]=e,v)),[2,t.register(g)]}var y,m,b,w,x}))}))},t.prototype.serializeFont=function(){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(t){return[2,this.fontData]}))}))},t.prototype.embedFontStream=function(t){return(0,i.mG)(this,void 0,void 0,(function(){var e,r,n;return(0,i.Jh)(this,(function(o){switch(o.label){case 0:return n=(r=t).flateStream,[4,this.serializeFont()];case 1:return e=n.apply(r,[o.sent(),{Subtype:this.isCFF()?"CIDFontType0C":void 0}]),[2,t.register(e)]}}))}))},t.prototype.embedUnicodeCmap=function(t){var e=function(t,e){for(var r=new Array(t.length),n=0,o=t.length;n<o;n++){var i=t[n],a=pt(gt(e(i))),s=pt.apply(void 0,i.codePoints.map(vt));r[n]=[a,s]}return function(t){return"/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n"+t.length+" beginbfchar\n"+t.map((function(t){return t[0]+" "+t[1]})).join("\n")+"\nendbfchar\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"}(r)}(this.glyphCache.access(),this.glyphId.bind(this)),r=t.flateStream(e);return t.register(r)},t.prototype.glyphId=function(t){return t?t.id:-1},t.prototype.computeWidths=function(){for(var t=this.glyphCache.access(),e=[],r=[],n=0,o=t.length;n<o;n++){var i=t[n],a=t[n-1],s=this.glyphId(i),u=this.glyphId(a);0===n?e.push(s):s-u!=1&&(e.push(r),e.push(s),r=[]),r.push(i.advanceWidth*this.scale)}return e.push(r),e},t}();const bt=mt;var wt=function(t){function e(e,r,n,o){var i=t.call(this,e,r,n,o)||this;return i.subset=i.font.createSubset(),i.glyphs=[],i.glyphCache=u.Ct.populatedBy((function(){return i.glyphs})),i.glyphIdMap=new Map,i}return(0,i.ZT)(e,t),e.for=function(t,r,n,o){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(i){switch(i.label){case 0:return[4,t.create(r)];case 1:return[2,new e(i.sent(),r,n,o)]}}))}))},e.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,o=e.length;n<o;n++){var i=e[n],a=this.subset.includeGlyph(i);this.glyphs[a-1]=i,this.glyphIdMap.set(i.id,a),r[n]=(0,u.CK)(a,4)}return this.glyphCache.invalidate(),lt.Z.of(r.join(""))},e.prototype.isCFF=function(){return this.subset.cff},e.prototype.glyphId=function(t){return t?this.glyphIdMap.get(t.id):-1},e.prototype.serializeFont=function(){var t=this;return new Promise((function(e,r){var n=[];t.subset.encodeStream().on("data",(function(t){return n.push(t)})).on("end",(function(){return e((0,u.Jm)(n))})).on("error",(function(t){return r(t)}))}))},e}(bt);const xt=wt;var Ft,St=r(634),kt=[65472,65473,65474,65475,65477,65478,65479,65480,65481,65482,65483,65484,65485,65486,65487];!function(t){t.DeviceGray="DeviceGray",t.DeviceRGB="DeviceRGB",t.DeviceCMYK="DeviceCMYK"}(Ft||(Ft={}));var Ct={1:Ft.DeviceGray,3:Ft.DeviceRGB,4:Ft.DeviceCMYK};const Pt=function(){function t(t,e,r,n,o){this.imageData=t,this.bitsPerComponent=e,this.width=r,this.height=n,this.colorSpace=o}return t.for=function(e){return(0,i.mG)(this,void 0,void 0,(function(){var r,n,o,a,s,u,c,l;return(0,i.Jh)(this,(function(i){if(65496!==(r=new DataView(e.buffer)).getUint16(0))throw new Error("SOI not found in JPEG");for(n=2;n<r.byteLength&&(o=r.getUint16(n),n+=2,!kt.includes(o));)n+=r.getUint16(n);if(!kt.includes(o))throw new Error("Invalid JPEG");if(n+=2,a=r.getUint8(n++),s=r.getUint16(n),n+=2,u=r.getUint16(n),n+=2,c=r.getUint8(n++),!(l=Ct[c]))throw new Error("Unknown JPEG channel.");return[2,new t(e,a,u,s,l)]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r;return(0,i.Jh)(this,(function(n){return r=t.stream(this.imageData,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.bitsPerComponent,Width:this.width,Height:this.height,ColorSpace:this.colorSpace,Filter:"DCTDecode",Decode:this.colorSpace===Ft.DeviceCMYK?[1,0,1,0,1,0,1,0]:void 0}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}();var Tt,Dt,At,Ot={toRGBA8:function(t){var e=t.width,r=t.height;if(null==t.tabs.acTL)return[Ot.toRGBA8.decodeImage(t.data,e,r,t).buffer];var n=[];null==t.frames[0].data&&(t.frames[0].data=t.data);for(var o=e*r*4,i=new Uint8Array(o),a=new Uint8Array(o),s=new Uint8Array(o),u=0;u<t.frames.length;u++){var c=t.frames[u],l=c.rect.x,d=c.rect.y,h=c.rect.width,f=c.rect.height,p=Ot.toRGBA8.decodeImage(c.data,h,f,t);if(0!=u)for(var g=0;g<o;g++)s[g]=i[g];if(0==c.blend?Ot._copyTile(p,h,f,i,e,r,l,d,0):1==c.blend&&Ot._copyTile(p,h,f,i,e,r,l,d,1),n.push(i.buffer.slice(0)),0==c.dispose);else if(1==c.dispose)Ot._copyTile(a,h,f,i,e,r,l,d,0);else if(2==c.dispose)for(g=0;g<o;g++)i[g]=s[g]}return n}};Ot.toRGBA8.decodeImage=function(t,e,r,n){var o=e*r,i=Ot.decode._getBPP(n),a=Math.ceil(e*i/8),s=new Uint8Array(4*o),u=new Uint32Array(s.buffer),c=n.ctype,l=n.depth,d=Ot._bin.readUshort;if(Date.now(),6==c){var h=o<<2;if(8==l)for(var f=0;f<h;f+=4)s[f]=t[f],s[f+1]=t[f+1],s[f+2]=t[f+2],s[f+3]=t[f+3];if(16==l)for(f=0;f<h;f++)s[f]=t[f<<1]}else if(2==c){var p=n.tabs.tRNS;if(null==p){if(8==l)for(f=0;f<o;f++){var g=3*f;u[f]=255<<24|t[g+2]<<16|t[g+1]<<8|t[g]}if(16==l)for(f=0;f<o;f++)g=6*f,u[f]=255<<24|t[g+4]<<16|t[g+2]<<8|t[g]}else{var v=p[0],y=p[1],m=p[2];if(8==l)for(f=0;f<o;f++){var b=f<<2;g=3*f,u[f]=255<<24|t[g+2]<<16|t[g+1]<<8|t[g],t[g]==v&&t[g+1]==y&&t[g+2]==m&&(s[b+3]=0)}if(16==l)for(f=0;f<o;f++)b=f<<2,g=6*f,u[f]=255<<24|t[g+4]<<16|t[g+2]<<8|t[g],d(t,g)==v&&d(t,g+2)==y&&d(t,g+4)==m&&(s[b+3]=0)}}else if(3==c){var w=n.tabs.PLTE,x=n.tabs.tRNS,F=x?x.length:0;if(1==l)for(var S=0;S<r;S++){var k=S*a,C=S*e;for(f=0;f<e;f++){b=C+f<<2;var P=3*(T=t[k+(f>>3)]>>7-((7&f)<<0)&1);s[b]=w[P],s[b+1]=w[P+1],s[b+2]=w[P+2],s[b+3]=T<F?x[T]:255}}if(2==l)for(S=0;S<r;S++)for(k=S*a,C=S*e,f=0;f<e;f++)b=C+f<<2,P=3*(T=t[k+(f>>2)]>>6-((3&f)<<1)&3),s[b]=w[P],s[b+1]=w[P+1],s[b+2]=w[P+2],s[b+3]=T<F?x[T]:255;if(4==l)for(S=0;S<r;S++)for(k=S*a,C=S*e,f=0;f<e;f++)b=C+f<<2,P=3*(T=t[k+(f>>1)]>>4-((1&f)<<2)&15),s[b]=w[P],s[b+1]=w[P+1],s[b+2]=w[P+2],s[b+3]=T<F?x[T]:255;if(8==l)for(f=0;f<o;f++){var T;b=f<<2,P=3*(T=t[f]),s[b]=w[P],s[b+1]=w[P+1],s[b+2]=w[P+2],s[b+3]=T<F?x[T]:255}}else if(4==c){if(8==l)for(f=0;f<o;f++){b=f<<2;var D=t[A=f<<1];s[b]=D,s[b+1]=D,s[b+2]=D,s[b+3]=t[A+1]}if(16==l)for(f=0;f<o;f++){var A;b=f<<2,D=t[A=f<<2],s[b]=D,s[b+1]=D,s[b+2]=D,s[b+3]=t[A+2]}}else if(0==c)for(v=n.tabs.tRNS?n.tabs.tRNS:-1,S=0;S<r;S++){var O=S*a,R=S*e;if(1==l)for(var N=0;N<e;N++){var M=(D=255*(t[O+(N>>>3)]>>>7-(7&N)&1))==255*v?0:255;u[R+N]=M<<24|D<<16|D<<8|D}else if(2==l)for(N=0;N<e;N++)M=(D=85*(t[O+(N>>>2)]>>>6-((3&N)<<1)&3))==85*v?0:255,u[R+N]=M<<24|D<<16|D<<8|D;else if(4==l)for(N=0;N<e;N++)M=(D=17*(t[O+(N>>>1)]>>>4-((1&N)<<2)&15))==17*v?0:255,u[R+N]=M<<24|D<<16|D<<8|D;else if(8==l)for(N=0;N<e;N++)M=(D=t[O+N])==v?0:255,u[R+N]=M<<24|D<<16|D<<8|D;else if(16==l)for(N=0;N<e;N++)D=t[O+(N<<1)],M=d(t,O+(N<<f))==v?0:255,u[R+N]=M<<24|D<<16|D<<8|D}return s},Ot.decode=function(t){for(var e,r=new Uint8Array(t),n=8,o=Ot._bin,i=o.readUshort,a=o.readUint,s={tabs:{},frames:[]},u=new Uint8Array(r.length),c=0,l=0,d=[137,80,78,71,13,10,26,10],h=0;h<8;h++)if(r[h]!=d[h])throw"The input is not a PNG file!";for(;n<r.length;){var f=o.readUint(r,n);n+=4;var p=o.readASCII(r,n,4);if(n+=4,"IHDR"==p)Ot.decode._IHDR(r,n,s);else if("IDAT"==p){for(h=0;h<f;h++)u[c+h]=r[n+h];c+=f}else if("acTL"==p)s.tabs[p]={num_frames:a(r,n),num_plays:a(r,n+4)},e=new Uint8Array(r.length);else if("fcTL"==p){var g;0!=l&&((g=s.frames[s.frames.length-1]).data=Ot.decode._decompress(s,e.slice(0,l),g.rect.width,g.rect.height),l=0);var v={x:a(r,n+12),y:a(r,n+16),width:a(r,n+4),height:a(r,n+8)},y=i(r,n+22);y=i(r,n+20)/(0==y?100:y);var m={rect:v,delay:Math.round(1e3*y),dispose:r[n+24],blend:r[n+25]};s.frames.push(m)}else if("fdAT"==p){for(h=0;h<f-4;h++)e[l+h]=r[n+h+4];l+=f-4}else if("pHYs"==p)s.tabs[p]=[o.readUint(r,n),o.readUint(r,n+4),r[n+8]];else if("cHRM"==p)for(s.tabs[p]=[],h=0;h<8;h++)s.tabs[p].push(o.readUint(r,n+4*h));else if("tEXt"==p){null==s.tabs[p]&&(s.tabs[p]={});var b=o.nextZero(r,n),w=o.readASCII(r,n,b-n),x=o.readASCII(r,b+1,n+f-b-1);s.tabs[p][w]=x}else if("iTXt"==p){null==s.tabs[p]&&(s.tabs[p]={}),b=0;var F=n;b=o.nextZero(r,F),w=o.readASCII(r,F,b-F),r[F=b+1],r[F+1],F+=2,b=o.nextZero(r,F),o.readASCII(r,F,b-F),F=b+1,b=o.nextZero(r,F),o.readUTF8(r,F,b-F),F=b+1,x=o.readUTF8(r,F,f-(F-n)),s.tabs[p][w]=x}else if("PLTE"==p)s.tabs[p]=o.readBytes(r,n,f);else if("hIST"==p){var S=s.tabs.PLTE.length/3;for(s.tabs[p]=[],h=0;h<S;h++)s.tabs[p].push(i(r,n+2*h))}else if("tRNS"==p)3==s.ctype?s.tabs[p]=o.readBytes(r,n,f):0==s.ctype?s.tabs[p]=i(r,n):2==s.ctype&&(s.tabs[p]=[i(r,n),i(r,n+2),i(r,n+4)]);else if("gAMA"==p)s.tabs[p]=o.readUint(r,n)/1e5;else if("sRGB"==p)s.tabs[p]=r[n];else if("bKGD"==p)0==s.ctype||4==s.ctype?s.tabs[p]=[i(r,n)]:2==s.ctype||6==s.ctype?s.tabs[p]=[i(r,n),i(r,n+2),i(r,n+4)]:3==s.ctype&&(s.tabs[p]=r[n]);else if("IEND"==p)break;n+=f,o.readUint(r,n),n+=4}return 0!=l&&((g=s.frames[s.frames.length-1]).data=Ot.decode._decompress(s,e.slice(0,l),g.rect.width,g.rect.height),l=0),s.data=Ot.decode._decompress(s,u,s.width,s.height),delete s.compress,delete s.interlace,delete s.filter,s},Ot.decode._decompress=function(t,e,r,n){Date.now();var o=Ot.decode._getBPP(t),i=Math.ceil(r*o/8),a=new Uint8Array((i+1+t.interlace)*n);return e=Ot.decode._inflate(e,a),Date.now(),0==t.interlace?e=Ot.decode._filterZero(e,t,0,r,n):1==t.interlace&&(e=Ot.decode._readInterlace(e,t)),e},Ot.decode._inflate=function(t,e){return Ot.inflateRaw(new Uint8Array(t.buffer,2,t.length-6),e)},Ot.inflateRaw=((At={}).H={},At.H.N=function(t,e){var r,n,o=Uint8Array,i=0,a=0,s=0,u=0,c=0,l=0,d=0,h=0,f=0;if(3==t[0]&&0==t[1])return e||new o(0);var p=At.H,g=p.b,v=p.e,y=p.R,m=p.n,b=p.A,w=p.Z,x=p.m,F=null==e;for(F&&(e=new o(t.length>>>2<<3));0==i;)if(i=g(t,f,1),a=g(t,f+1,2),f+=3,0!=a){if(F&&(e=At.H.W(e,h+(1<<17))),1==a&&(r=x.J,n=x.h,l=511,d=31),2==a){s=v(t,f,5)+257,u=v(t,f+5,5)+1,c=v(t,f+10,4)+4,f+=14;for(var S=1,k=0;k<38;k+=2)x.Q[k]=0,x.Q[k+1]=0;for(k=0;k<c;k++){var C=v(t,f+3*k,3);x.Q[1+(x.X[k]<<1)]=C,C>S&&(S=C)}f+=3*c,m(x.Q,S),b(x.Q,S,x.u),r=x.w,n=x.d,f=y(x.u,(1<<S)-1,s+u,t,f,x.v);var P=p.V(x.v,0,s,x.C);l=(1<<P)-1;var T=p.V(x.v,s,u,x.D);d=(1<<T)-1,m(x.C,P),b(x.C,P,r),m(x.D,T),b(x.D,T,n)}for(;;){var D=r[w(t,f)&l];f+=15&D;var A=D>>>4;if(A>>>8==0)e[h++]=A;else{if(256==A)break;var O=h+A-254;if(A>264){var R=x.q[A-257];O=h+(R>>>3)+v(t,f,7&R),f+=7&R}var N=n[w(t,f)&d];f+=15&N;var M=N>>>4,E=x.c[M],j=(E>>>4)+g(t,f,15&E);for(f+=15&E;h<O;)e[h]=e[h++-j],e[h]=e[h++-j],e[h]=e[h++-j],e[h]=e[h++-j];h=O}}}else{0!=(7&f)&&(f+=8-(7&f));var Z=4+(f>>>3),B=t[Z-4]|t[Z-3]<<8;F&&(e=At.H.W(e,h+B)),e.set(new o(t.buffer,t.byteOffset+Z,B),h),f=Z+B<<3,h+=B}return e.length==h?e:e.slice(0,h)},At.H.W=function(t,e){var r=t.length;if(e<=r)return t;var n=new Uint8Array(r<<1);return n.set(t,0),n},At.H.R=function(t,e,r,n,o,i){for(var a=At.H.e,s=At.H.Z,u=0;u<r;){var c=t[s(n,o)&e];o+=15&c;var l=c>>>4;if(l<=15)i[u]=l,u++;else{var d=0,h=0;16==l?(h=3+a(n,o,2),o+=2,d=i[u-1]):17==l?(h=3+a(n,o,3),o+=3):18==l&&(h=11+a(n,o,7),o+=7);for(var f=u+h;u<f;)i[u]=d,u++}}return o},At.H.V=function(t,e,r,n){for(var o=0,i=0,a=n.length>>>1;i<r;){var s=t[i+e];n[i<<1]=0,n[1+(i<<1)]=s,s>o&&(o=s),i++}for(;i<a;)n[i<<1]=0,n[1+(i<<1)]=0,i++;return o},At.H.n=function(t,e){for(var r,n,o,i,a=At.H.m,s=t.length,u=a.j,c=0;c<=e;c++)u[c]=0;for(c=1;c<s;c+=2)u[t[c]]++;var l=a.K;for(r=0,u[0]=0,n=1;n<=e;n++)r=r+u[n-1]<<1,l[n]=r;for(o=0;o<s;o+=2)0!=(i=t[o+1])&&(t[o]=l[i],l[i]++)},At.H.A=function(t,e,r){for(var n=t.length,o=At.H.m.r,i=0;i<n;i+=2)if(0!=t[i+1])for(var a=i>>1,s=t[i+1],u=a<<4|s,c=e-s,l=t[i]<<c,d=l+(1<<c);l!=d;)r[o[l]>>>15-e]=u,l++},At.H.l=function(t,e){for(var r=At.H.m.r,n=15-e,o=0;o<t.length;o+=2){var i=t[o]<<e-t[o+1];t[o]=r[i]>>>n}},At.H.M=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8},At.H.I=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8,t[n+2]|=r>>>16},At.H.e=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8)>>>(7&e)&(1<<r)-1},At.H.b=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)&(1<<r)-1},At.H.Z=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)},At.H.i=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16|t[3+(e>>>3)]<<24)>>>(7&e)},At.H.m=(Tt=Uint16Array,Dt=Uint32Array,{K:new Tt(16),j:new Tt(16),X:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],S:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],T:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],q:new Tt(32),p:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],z:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],c:new Dt(32),J:new Tt(512),_:[],h:new Tt(32),$:[],w:new Tt(32768),C:[],v:[],d:new Tt(32768),D:[],u:new Tt(512),Q:[],r:new Tt(32768),s:new Dt(286),Y:new Dt(30),a:new Dt(19),t:new Dt(15e3),k:new Tt(65536),g:new Tt(32768)}),function(){for(var t=At.H.m,e=0;e<32768;e++){var r=e;r=(4278255360&(r=(4042322160&(r=(3435973836&(r=(2863311530&r)>>>1|(1431655765&r)<<1))>>>2|(858993459&r)<<2))>>>4|(252645135&r)<<4))>>>8|(16711935&r)<<8,t.r[e]=(r>>>16|r<<16)>>>17}function n(t,e,r){for(;0!=e--;)t.push(0,r)}for(e=0;e<32;e++)t.q[e]=t.S[e]<<3|t.T[e],t.c[e]=t.p[e]<<4|t.z[e];n(t._,144,8),n(t._,112,9),n(t._,24,7),n(t._,8,8),At.H.n(t._,9),At.H.A(t._,9,t.J),At.H.l(t._,9),n(t.$,32,5),At.H.n(t.$,5),At.H.A(t.$,5,t.h),At.H.l(t.$,5),n(t.Q,19,0),n(t.C,286,0),n(t.D,30,0),n(t.v,320,0)}(),At.H.N),Ot.decode._readInterlace=function(t,e){for(var r=e.width,n=e.height,o=Ot.decode._getBPP(e),i=o>>3,a=Math.ceil(r*o/8),s=new Uint8Array(n*a),u=0,c=[0,0,4,0,2,0,1],l=[0,4,0,2,0,1,0],d=[8,8,8,4,4,2,2],h=[8,8,4,4,2,2,1],f=0;f<7;){for(var p=d[f],g=h[f],v=0,y=0,m=c[f];m<n;)m+=p,y++;for(var b=l[f];b<r;)b+=g,v++;var w=Math.ceil(v*o/8);Ot.decode._filterZero(t,e,u,v,y);for(var x=0,F=c[f];F<n;){for(var S=l[f],k=u+x*w<<3;S<r;){var C;if(1==o&&(C=(C=t[k>>3])>>7-(7&k)&1,s[F*a+(S>>3)]|=C<<7-((7&S)<<0)),2==o&&(C=(C=t[k>>3])>>6-(7&k)&3,s[F*a+(S>>2)]|=C<<6-((3&S)<<1)),4==o&&(C=(C=t[k>>3])>>4-(7&k)&15,s[F*a+(S>>1)]|=C<<4-((1&S)<<2)),o>=8)for(var P=F*a+S*i,T=0;T<i;T++)s[P+T]=t[(k>>3)+T];k+=o,S+=g}x++,F+=p}v*y!=0&&(u+=y*(1+w)),f+=1}return s},Ot.decode._getBPP=function(t){return[1,null,3,1,2,null,4][t.ctype]*t.depth},Ot.decode._filterZero=function(t,e,r,n,o){var i=Ot.decode._getBPP(e),a=Math.ceil(n*i/8),s=Ot.decode._paeth;i=Math.ceil(i/8);var u=0,c=1,l=t[r],d=0;if(l>1&&(t[r]=[0,0,1][l-2]),3==l)for(d=i;d<a;d++)t[d+1]=t[d+1]+(t[d+1-i]>>>1)&255;for(var h=0;h<o;h++)if(d=0,0==(l=t[(c=(u=r+h*a)+h+1)-1]))for(;d<a;d++)t[u+d]=t[c+d];else if(1==l){for(;d<i;d++)t[u+d]=t[c+d];for(;d<a;d++)t[u+d]=t[c+d]+t[u+d-i]}else if(2==l)for(;d<a;d++)t[u+d]=t[c+d]+t[u+d-a];else if(3==l){for(;d<i;d++)t[u+d]=t[c+d]+(t[u+d-a]>>>1);for(;d<a;d++)t[u+d]=t[c+d]+(t[u+d-a]+t[u+d-i]>>>1)}else{for(;d<i;d++)t[u+d]=t[c+d]+s(0,t[u+d-a],0);for(;d<a;d++)t[u+d]=t[c+d]+s(t[u+d-i],t[u+d-a],t[u+d-i-a])}return t},Ot.decode._paeth=function(t,e,r){var n=t+e-r,o=n-t,i=n-e,a=n-r;return o*o<=i*i&&o*o<=a*a?t:i*i<=a*a?e:r},Ot.decode._IHDR=function(t,e,r){var n=Ot._bin;r.width=n.readUint(t,e),e+=4,r.height=n.readUint(t,e),e+=4,r.depth=t[e],e++,r.ctype=t[e],e++,r.compress=t[e],e++,r.filter=t[e],e++,r.interlace=t[e],e++},Ot._bin={nextZero:function(t,e){for(;0!=t[e];)e++;return e},readUshort:function(t,e){return t[e]<<8|t[e+1]},writeUshort:function(t,e,r){t[e]=r>>8&255,t[e+1]=255&r},readUint:function(t,e){return 16777216*t[e]+(t[e+1]<<16|t[e+2]<<8|t[e+3])},writeUint:function(t,e,r){t[e]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=255&r},readASCII:function(t,e,r){for(var n="",o=0;o<r;o++)n+=String.fromCharCode(t[e+o]);return n},writeASCII:function(t,e,r){for(var n=0;n<r.length;n++)t[e+n]=r.charCodeAt(n)},readBytes:function(t,e,r){for(var n=[],o=0;o<r;o++)n.push(t[e+o]);return n},pad:function(t){return t.length<2?"0"+t:t},readUTF8:function(t,e,r){for(var n,o="",i=0;i<r;i++)o+="%"+Ot._bin.pad(t[e+i].toString(16));try{n=decodeURIComponent(o)}catch(n){return Ot._bin.readASCII(t,e,r)}return n}},Ot._copyTile=function(t,e,r,n,o,i,a,s,u){for(var c=Math.min(e,o),l=Math.min(r,i),d=0,h=0,f=0;f<l;f++)for(var p=0;p<c;p++)if(a>=0&&s>=0?(d=f*e+p<<2,h=(s+f)*o+a+p<<2):(d=(-s+f)*e-a+p<<2,h=f*o+p<<2),0==u)n[h]=t[d],n[h+1]=t[d+1],n[h+2]=t[d+2],n[h+3]=t[d+3];else if(1==u){var g=t[d+3]*(1/255),v=t[d]*g,y=t[d+1]*g,m=t[d+2]*g,b=n[h+3]*(1/255),w=n[h]*b,x=n[h+1]*b,F=n[h+2]*b,S=1-g,k=g+b*S,C=0==k?0:1/k;n[h+3]=255*k,n[h+0]=(v+w*S)*C,n[h+1]=(y+x*S)*C,n[h+2]=(m+F*S)*C}else if(2==u)g=t[d+3],v=t[d],y=t[d+1],m=t[d+2],b=n[h+3],w=n[h],x=n[h+1],F=n[h+2],g==b&&v==w&&y==x&&m==F?(n[h]=0,n[h+1]=0,n[h+2]=0,n[h+3]=0):(n[h]=v,n[h+1]=y,n[h+2]=m,n[h+3]=g);else if(3==u){if(g=t[d+3],v=t[d],y=t[d+1],m=t[d+2],b=n[h+3],w=n[h],x=n[h+1],F=n[h+2],g==b&&v==w&&y==x&&m==F)continue;if(g<220&&b>20)return!1}return!0},Ot.encode=function(t,e,r,n,o,i,a){null==n&&(n=0),null==a&&(a=!1);var s=Ot.encode.compress(t,e,r,n,[!1,!1,!1,0,a]);return Ot.encode.compressPNG(s,-1),Ot.encode._main(s,e,r,o,i)},Ot.encodeLL=function(t,e,r,n,o,i,a,s){for(var u={ctype:0+(1==n?0:2)+(0==o?0:4),depth:i,frames:[]},c=(Date.now(),(n+o)*i),l=c*e,d=0;d<t.length;d++)u.frames.push({rect:{x:0,y:0,width:e,height:r},img:new Uint8Array(t[d]),blend:0,dispose:1,bpp:Math.ceil(c/8),bpl:Math.ceil(l/8)});return Ot.encode.compressPNG(u,0,!0),Ot.encode._main(u,e,r,a,s)},Ot.encode._main=function(t,e,r,n,o){null==o&&(o={});var i=Ot.crc.crc,a=Ot._bin.writeUint,s=Ot._bin.writeUshort,u=Ot._bin.writeASCII,c=8,l=t.frames.length>1,d=!1,h=33+(l?20:0);if(null!=o.sRGB&&(h+=13),null!=o.pHYs&&(h+=21),3==t.ctype){for(var f=t.plte.length,p=0;p<f;p++)t.plte[p]>>>24!=255&&(d=!0);h+=8+3*f+4+(d?8+1*f+4:0)}for(var g=0;g<t.frames.length;g++)l&&(h+=38),h+=(k=t.frames[g]).cimg.length+12,0!=g&&(h+=4);h+=12;var v=new Uint8Array(h),y=[137,80,78,71,13,10,26,10];for(p=0;p<8;p++)v[p]=y[p];if(a(v,c,13),u(v,c+=4,"IHDR"),a(v,c+=4,e),a(v,c+=4,r),v[c+=4]=t.depth,v[++c]=t.ctype,v[++c]=0,v[++c]=0,v[++c]=0,a(v,++c,i(v,c-17,17)),c+=4,null!=o.sRGB&&(a(v,c,1),u(v,c+=4,"sRGB"),v[c+=4]=o.sRGB,a(v,++c,i(v,c-5,5)),c+=4),null!=o.pHYs&&(a(v,c,9),u(v,c+=4,"pHYs"),a(v,c+=4,o.pHYs[0]),a(v,c+=4,o.pHYs[1]),v[c+=4]=o.pHYs[2],a(v,++c,i(v,c-13,13)),c+=4),l&&(a(v,c,8),u(v,c+=4,"acTL"),a(v,c+=4,t.frames.length),a(v,c+=4,null!=o.loop?o.loop:0),a(v,c+=4,i(v,c-12,12)),c+=4),3==t.ctype){for(a(v,c,3*(f=t.plte.length)),u(v,c+=4,"PLTE"),c+=4,p=0;p<f;p++){var m=3*p,b=t.plte[p],w=255&b,x=b>>>8&255,F=b>>>16&255;v[c+m+0]=w,v[c+m+1]=x,v[c+m+2]=F}if(a(v,c+=3*f,i(v,c-3*f-4,3*f+4)),c+=4,d){for(a(v,c,f),u(v,c+=4,"tRNS"),c+=4,p=0;p<f;p++)v[c+p]=t.plte[p]>>>24&255;a(v,c+=f,i(v,c-f-4,f+4)),c+=4}}var S=0;for(g=0;g<t.frames.length;g++){var k=t.frames[g];l&&(a(v,c,26),u(v,c+=4,"fcTL"),a(v,c+=4,S++),a(v,c+=4,k.rect.width),a(v,c+=4,k.rect.height),a(v,c+=4,k.rect.x),a(v,c+=4,k.rect.y),s(v,c+=4,n[g]),s(v,c+=2,1e3),v[c+=2]=k.dispose,v[++c]=k.blend,a(v,++c,i(v,c-30,30)),c+=4);var C=k.cimg;a(v,c,(f=C.length)+(0==g?0:4));var P=c+=4;u(v,c,0==g?"IDAT":"fdAT"),c+=4,0!=g&&(a(v,c,S++),c+=4),v.set(C,c),a(v,c+=f,i(v,P,c-P)),c+=4}return a(v,c,0),u(v,c+=4,"IEND"),a(v,c+=4,i(v,c-4,4)),c+=4,v.buffer},Ot.encode.compressPNG=function(t,e,r){for(var n=0;n<t.frames.length;n++){var o=t.frames[n],i=(o.rect.width,o.rect.height),a=new Uint8Array(i*o.bpl+i);o.cimg=Ot.encode._filterZero(o.img,i,o.bpp,o.bpl,a,e,r)}},Ot.encode.compress=function(t,e,r,n,o){for(var i=o[0],a=o[1],s=o[2],u=o[3],c=o[4],l=6,d=8,h=255,f=0;f<t.length;f++)for(var p=new Uint8Array(t[f]),g=p.length,v=0;v<g;v+=4)h&=p[v+3];var y=255!=h,m=Ot.encode.framize(t,e,r,i,a,s),b={},w=[],x=[];if(0!=n){var F=[];for(v=0;v<m.length;v++)F.push(m[v].img.buffer);var S=Ot.encode.concatRGBA(F),k=Ot.quantize(S,n),C=0,P=new Uint8Array(k.abuf);for(v=0;v<m.length;v++){var T=(L=m[v].img).length;for(x.push(new Uint8Array(k.inds.buffer,C>>2,T>>2)),f=0;f<T;f+=4)L[f]=P[C+f],L[f+1]=P[C+f+1],L[f+2]=P[C+f+2],L[f+3]=P[C+f+3];C+=T}for(v=0;v<k.plte.length;v++)w.push(k.plte[v].est.rgba)}else for(f=0;f<m.length;f++){var D=m[f],A=new Uint32Array(D.img.buffer),O=D.rect.width,R=(g=A.length,new Uint8Array(g));for(x.push(R),v=0;v<g;v++){var N=A[v];if(0!=v&&N==A[v-1])R[v]=R[v-1];else if(v>O&&N==A[v-O])R[v]=R[v-O];else{var M=b[N];if(null==M&&(b[N]=M=w.length,w.push(N),w.length>=300))break;R[v]=M}}}var E=w.length;for(E<=256&&0==c&&(d=E<=2?1:E<=4?2:E<=16?4:8,d=Math.max(d,u)),f=0;f<m.length;f++){(D=m[f]).rect.x,D.rect.y,O=D.rect.width;var j=D.rect.height,Z=D.img,B=(new Uint32Array(Z.buffer),4*O),V=4;if(E<=256&&0==c){B=Math.ceil(d*O/8);for(var I=new Uint8Array(B*j),z=x[f],U=0;U<j;U++){v=U*B;var G=U*O;if(8==d)for(var q=0;q<O;q++)I[v+q]=z[G+q];else if(4==d)for(q=0;q<O;q++)I[v+(q>>1)]|=z[G+q]<<4-4*(1&q);else if(2==d)for(q=0;q<O;q++)I[v+(q>>2)]|=z[G+q]<<6-2*(3&q);else if(1==d)for(q=0;q<O;q++)I[v+(q>>3)]|=z[G+q]<<7-1*(7&q)}Z=I,l=3,V=1}else if(0==y&&1==m.length){I=new Uint8Array(O*j*3);var W=O*j;for(v=0;v<W;v++){var L,K=4*v;I[L=3*v]=Z[K],I[L+1]=Z[K+1],I[L+2]=Z[K+2]}Z=I,l=2,V=3,B=3*O}D.img=Z,D.bpl=B,D.bpp=V}return{ctype:l,depth:d,plte:w,frames:m}},Ot.encode.framize=function(t,e,r,n,o,i){for(var a=[],s=0;s<t.length;s++){var u,c=new Uint8Array(t[s]),l=new Uint32Array(c.buffer),d=0,h=0,f=e,p=r,g=n?1:0;if(0!=s){for(var v=i||n||1==s||0!=a[s-2].dispose?1:2,y=0,m=1e9,b=0;b<v;b++){for(var w=new Uint8Array(t[s-1-b]),x=new Uint32Array(t[s-1-b]),F=e,S=r,k=-1,C=-1,P=0;P<r;P++)for(var T=0;T<e;T++)l[E=P*e+T]!=x[E]&&(T<F&&(F=T),T>k&&(k=T),P<S&&(S=P),P>C&&(C=P));-1==k&&(F=S=k=C=0),o&&(1==(1&F)&&F--,1==(1&S)&&S--);var D=(k-F+1)*(C-S+1);D<m&&(m=D,y=b,d=F,h=S,f=k-F+1,p=C-S+1)}w=new Uint8Array(t[s-1-y]),1==y&&(a[s-1].dispose=2),u=new Uint8Array(f*p*4),Ot._copyTile(w,e,r,u,f,p,-d,-h,0),1==(g=Ot._copyTile(c,e,r,u,f,p,-d,-h,3)?1:0)?Ot.encode._prepareDiff(c,e,r,u,{x:d,y:h,width:f,height:p}):Ot._copyTile(c,e,r,u,f,p,-d,-h,0)}else u=c.slice(0);a.push({rect:{x:d,y:h,width:f,height:p},img:u,blend:g,dispose:0})}if(n)for(s=0;s<a.length;s++)if(1!=(j=a[s]).blend){var A=j.rect,O=a[s-1].rect,R=Math.min(A.x,O.x),N=Math.min(A.y,O.y),M={x:R,y:N,width:Math.max(A.x+A.width,O.x+O.width)-R,height:Math.max(A.y+A.height,O.y+O.height)-N};a[s-1].dispose=1,s-1!=0&&Ot.encode._updateFrame(t,e,r,a,s-1,M,o),Ot.encode._updateFrame(t,e,r,a,s,M,o)}if(1!=t.length)for(var E=0;E<a.length;E++){var j;(j=a[E]).rect.width,j.rect.height}return a},Ot.encode._updateFrame=function(t,e,r,n,o,i,a){for(var s=Uint8Array,u=Uint32Array,c=new s(t[o-1]),l=new u(t[o-1]),d=o+1<t.length?new s(t[o+1]):null,h=new s(t[o]),f=new u(h.buffer),p=e,g=r,v=-1,y=-1,m=0;m<i.height;m++)for(var b=0;b<i.width;b++){var w=i.x+b,x=i.y+m,F=x*e+w,S=f[F];0==S||0==n[o-1].dispose&&l[F]==S&&(null==d||0!=d[4*F+3])||(w<p&&(p=w),w>v&&(v=w),x<g&&(g=x),x>y&&(y=x))}-1==v&&(p=g=v=y=0),a&&(1==(1&p)&&p--,1==(1&g)&&g--),i={x:p,y:g,width:v-p+1,height:y-g+1};var k=n[o];k.rect=i,k.blend=1,k.img=new Uint8Array(i.width*i.height*4),0==n[o-1].dispose?(Ot._copyTile(c,e,r,k.img,i.width,i.height,-i.x,-i.y,0),Ot.encode._prepareDiff(h,e,r,k.img,i)):Ot._copyTile(h,e,r,k.img,i.width,i.height,-i.x,-i.y,0)},Ot.encode._prepareDiff=function(t,e,r,n,o){Ot._copyTile(t,e,r,n,o.width,o.height,-o.x,-o.y,2)},Ot.encode._filterZero=function(t,e,r,n,o,i,a){var u,c=[],l=[0,1,2,3,4];-1!=i?l=[i]:(e*n>5e5||1==r)&&(l=[0]),a&&(u={level:0});for(var d=a&&null!=UZIP?UZIP:s(),h=0;h<l.length;h++){for(var f=0;f<e;f++)Ot.encode._filterLine(o,t,f,n,r,l[h]);c.push(d.deflate(o,u))}var p,g=1e9;for(h=0;h<c.length;h++)c[h].length<g&&(p=h,g=c[h].length);return c[p]},Ot.encode._filterLine=function(t,e,r,n,o,i){var a=r*n,s=a+r,u=Ot.decode._paeth;if(t[s]=i,s++,0==i)if(n<500)for(var c=0;c<n;c++)t[s+c]=e[a+c];else t.set(new Uint8Array(e.buffer,a,n),s);else if(1==i){for(c=0;c<o;c++)t[s+c]=e[a+c];for(c=o;c<n;c++)t[s+c]=e[a+c]-e[a+c-o]+256&255}else if(0==r){for(c=0;c<o;c++)t[s+c]=e[a+c];if(2==i)for(c=o;c<n;c++)t[s+c]=e[a+c];if(3==i)for(c=o;c<n;c++)t[s+c]=e[a+c]-(e[a+c-o]>>1)+256&255;if(4==i)for(c=o;c<n;c++)t[s+c]=e[a+c]-u(e[a+c-o],0,0)+256&255}else{if(2==i)for(c=0;c<n;c++)t[s+c]=e[a+c]+256-e[a+c-n]&255;if(3==i){for(c=0;c<o;c++)t[s+c]=e[a+c]+256-(e[a+c-n]>>1)&255;for(c=o;c<n;c++)t[s+c]=e[a+c]+256-(e[a+c-n]+e[a+c-o]>>1)&255}if(4==i){for(c=0;c<o;c++)t[s+c]=e[a+c]+256-u(0,e[a+c-n],0)&255;for(c=o;c<n;c++)t[s+c]=e[a+c]+256-u(e[a+c-o],e[a+c-n],e[a+c-o-n])&255}}},Ot.crc={table:function(){for(var t=new Uint32Array(256),e=0;e<256;e++){for(var r=e,n=0;n<8;n++)1&r?r=3988292384^r>>>1:r>>>=1;t[e]=r}return t}(),update:function(t,e,r,n){for(var o=0;o<n;o++)t=Ot.crc.table[255&(t^e[r+o])]^t>>>8;return t},crc:function(t,e,r){return 4294967295^Ot.crc.update(4294967295,t,e,r)}},Ot.quantize=function(t,e){for(var r=new Uint8Array(t),n=r.slice(0),o=new Uint32Array(n.buffer),i=Ot.quantize.getKDtree(n,e),a=i[0],s=i[1],u=(Ot.quantize.planeDst,r),c=o,l=u.length,d=new Uint8Array(r.length>>2),h=0;h<l;h+=4){var f=u[h]*(1/255),p=u[h+1]*(1/255),g=u[h+2]*(1/255),v=u[h+3]*(1/255),y=Ot.quantize.getNearest(a,f,p,g,v);d[h>>2]=y.ind,c[h>>2]=y.est.rgba}return{abuf:n.buffer,inds:d,plte:s}},Ot.quantize.getKDtree=function(t,e,r){null==r&&(r=1e-4);var n=new Uint32Array(t.buffer),o={i0:0,i1:t.length,bst:null,est:null,tdst:0,left:null,right:null};o.bst=Ot.quantize.stats(t,o.i0,o.i1),o.est=Ot.quantize.estats(o.bst);for(var i=[o];i.length<e;){for(var a=0,s=0,u=0;u<i.length;u++)i[u].est.L>a&&(a=i[u].est.L,s=u);if(a<r)break;var c=i[s],l=Ot.quantize.splitPixels(t,n,c.i0,c.i1,c.est.e,c.est.eMq255);if(c.i0>=l||c.i1<=l)c.est.L=0;else{var d={i0:c.i0,i1:l,bst:null,est:null,tdst:0,left:null,right:null};d.bst=Ot.quantize.stats(t,d.i0,d.i1),d.est=Ot.quantize.estats(d.bst);var h={i0:l,i1:c.i1,bst:null,est:null,tdst:0,left:null,right:null};for(h.bst={R:[],m:[],N:c.bst.N-d.bst.N},u=0;u<16;u++)h.bst.R[u]=c.bst.R[u]-d.bst.R[u];for(u=0;u<4;u++)h.bst.m[u]=c.bst.m[u]-d.bst.m[u];h.est=Ot.quantize.estats(h.bst),c.left=d,c.right=h,i[s]=d,i.push(h)}}for(i.sort((function(t,e){return e.bst.N-t.bst.N})),u=0;u<i.length;u++)i[u].ind=u;return[o,i]},Ot.quantize.getNearest=function(t,e,r,n,o){if(null==t.left)return t.tdst=Ot.quantize.dist(t.est.q,e,r,n,o),t;var i=Ot.quantize.planeDst(t.est,e,r,n,o),a=t.left,s=t.right;i>0&&(a=t.right,s=t.left);var u=Ot.quantize.getNearest(a,e,r,n,o);if(u.tdst<=i*i)return u;var c=Ot.quantize.getNearest(s,e,r,n,o);return c.tdst<u.tdst?c:u},Ot.quantize.planeDst=function(t,e,r,n,o){var i=t.e;return i[0]*e+i[1]*r+i[2]*n+i[3]*o-t.eMq},Ot.quantize.dist=function(t,e,r,n,o){var i=e-t[0],a=r-t[1],s=n-t[2],u=o-t[3];return i*i+a*a+s*s+u*u},Ot.quantize.splitPixels=function(t,e,r,n,o,i){var a=Ot.quantize.vecDot;for(n-=4;r<n;){for(;a(t,r,o)<=i;)r+=4;for(;a(t,n,o)>i;)n-=4;if(r>=n)break;var s=e[r>>2];e[r>>2]=e[n>>2],e[n>>2]=s,r+=4,n-=4}for(;a(t,r,o)>i;)r-=4;return r+4},Ot.quantize.vecDot=function(t,e,r){return t[e]*r[0]+t[e+1]*r[1]+t[e+2]*r[2]+t[e+3]*r[3]},Ot.quantize.stats=function(t,e,r){for(var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],o=[0,0,0,0],i=r-e>>2,a=e;a<r;a+=4){var s=t[a]*(1/255),u=t[a+1]*(1/255),c=t[a+2]*(1/255),l=t[a+3]*(1/255);o[0]+=s,o[1]+=u,o[2]+=c,o[3]+=l,n[0]+=s*s,n[1]+=s*u,n[2]+=s*c,n[3]+=s*l,n[5]+=u*u,n[6]+=u*c,n[7]+=u*l,n[10]+=c*c,n[11]+=c*l,n[15]+=l*l}return n[4]=n[1],n[8]=n[2],n[9]=n[6],n[12]=n[3],n[13]=n[7],n[14]=n[11],{R:n,m:o,N:i}},Ot.quantize.estats=function(t){var e=t.R,r=t.m,n=t.N,o=r[0],i=r[1],a=r[2],s=r[3],u=0==n?0:1/n,c=[e[0]-o*o*u,e[1]-o*i*u,e[2]-o*a*u,e[3]-o*s*u,e[4]-i*o*u,e[5]-i*i*u,e[6]-i*a*u,e[7]-i*s*u,e[8]-a*o*u,e[9]-a*i*u,e[10]-a*a*u,e[11]-a*s*u,e[12]-s*o*u,e[13]-s*i*u,e[14]-s*a*u,e[15]-s*s*u],l=c,d=Ot.M4,h=[.5,.5,.5,.5],f=0,p=0;if(0!=n)for(var g=0;g<10&&(h=d.multVec(l,h),p=Math.sqrt(d.dot(h,h)),h=d.sml(1/p,h),!(Math.abs(p-f)<1e-9));g++)f=p;var v=[o*u,i*u,a*u,s*u];return{Cov:c,q:v,e:h,L:f,eMq255:d.dot(d.sml(255,v),h),eMq:d.dot(h,v),rgba:(Math.round(255*v[3])<<24|Math.round(255*v[2])<<16|Math.round(255*v[1])<<8|Math.round(255*v[0])<<0)>>>0}},Ot.M4={multVec:function(t,e){return[t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3],t[4]*e[0]+t[5]*e[1]+t[6]*e[2]+t[7]*e[3],t[8]*e[0]+t[9]*e[1]+t[10]*e[2]+t[11]*e[3],t[12]*e[0]+t[13]*e[1]+t[14]*e[2]+t[15]*e[3]]},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},sml:function(t,e){return[t*e[0],t*e[1],t*e[2],t*e[3]]}},Ot.encode.concatRGBA=function(t){for(var e=0,r=0;r<t.length;r++)e+=t[r].byteLength;var n=new Uint8Array(e),o=0;for(r=0;r<t.length;r++){for(var i=new Uint8Array(t[r]),a=i.length,s=0;s<a;s+=4){var u=i[s],c=i[s+1],l=i[s+2],d=i[s+3];0==d&&(u=c=l=0),n[o+s]=u,n[o+s+1]=c,n[o+s+2]=l,n[o+s+3]=d}o+=a}return n.buffer};const Rt=Ot;var Nt;!function(t){t.Greyscale="Greyscale",t.Truecolour="Truecolour",t.IndexedColour="IndexedColour",t.GreyscaleWithAlpha="GreyscaleWithAlpha",t.TruecolourWithAlpha="TruecolourWithAlpha"}(Nt||(Nt={}));var Mt=function(){function t(t){var e=Rt.decode(t),r=Rt.toRGBA8(e);if(r.length>1)throw new Error("Animated PNGs are not supported");var n=function(t){for(var e=Math.floor(t.length/4),r=new Uint8Array(3*e),n=new Uint8Array(1*e),o=0,i=0,a=0;o<t.length;)r[i++]=t[o++],r[i++]=t[o++],r[i++]=t[o++],n[a++]=t[o++];return{rgbChannel:r,alphaChannel:n}}(new Uint8Array(r[0])),o=n.rgbChannel,i=n.alphaChannel;this.rgbChannel=o,i.some((function(t){return t<255}))&&(this.alphaChannel=i),this.type=function(t){if(0===t)return Nt.Greyscale;if(2===t)return Nt.Truecolour;if(3===t)return Nt.IndexedColour;if(4===t)return Nt.GreyscaleWithAlpha;if(6===t)return Nt.TruecolourWithAlpha;throw new Error("Unknown color type: "+t)}(e.ctype),this.width=e.width,this.height=e.height,this.bitsPerComponent=8}return t.load=function(e){return new t(e)},t}();const Et=function(){function t(t){this.image=t,this.bitsPerComponent=t.bitsPerComponent,this.width=t.width,this.height=t.height,this.colorSpace="DeviceRGB"}return t.for=function(e){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(r){return[2,new t(Mt.load(e))]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r,n;return(0,i.Jh)(this,(function(o){return r=this.embedAlphaChannel(t),n=t.flateStream(this.image.rgbChannel,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.image.bitsPerComponent,Width:this.image.width,Height:this.image.height,ColorSpace:this.colorSpace,SMask:r}),e?(t.assign(e,n),[2,e]):[2,t.register(n)]}))}))},t.prototype.embedAlphaChannel=function(t){if(this.image.alphaChannel){var e=t.flateStream(this.image.alphaChannel,{Type:"XObject",Subtype:"Image",Height:this.image.height,Width:this.image.width,BitsPerComponent:this.image.bitsPerComponent,ColorSpace:"DeviceGray",Decode:[0,1]});return t.register(e)}},t}(),jt=function(){function t(t,e,r){this.bytes=t,this.start=e||0,this.pos=this.start,this.end=e&&r?e+r:this.bytes.length}return Object.defineProperty(t.prototype,"length",{get:function(){return this.end-this.start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isEmpty",{get:function(){return 0===this.length},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){return this.pos>=this.end?-1:this.bytes[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){void 0===e&&(e=!1);var r=this.bytes,n=this.pos,o=this.end;if(t){var i=n+t;return i>o&&(i=o),this.pos=i,a=r.subarray(n,i),e?new Uint8ClampedArray(a):a}var a=r.subarray(n,o);return e?new Uint8ClampedArray(a):a},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=this.start},t.prototype.moveStart=function(){this.start=this.pos},t.prototype.makeSubStream=function(e,r){return new t(this.bytes,e,r)},t.prototype.decode=function(){return this.bytes},t}();var Zt=new Uint8Array(0);const Bt=function(){function t(t){if(this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=Zt,this.minBufferLength=512,t)for(;this.minBufferLength<t;)this.minBufferLength*=2}return Object.defineProperty(t.prototype,"isEmpty",{get:function(){for(;!this.eof&&0===this.bufferLength;)this.readBlock();return 0===this.bufferLength},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){var r;void 0===e&&(e=!1);var n=this.pos;if(t){for(this.ensureBuffer(n+t),r=n+t;!this.eof&&this.bufferLength<r;)this.readBlock();var o=this.bufferLength;r>o&&(r=o)}else{for(;!this.eof;)this.readBlock();r=this.bufferLength}this.pos=r;var i=this.buffer.subarray(n,r);return!e||i instanceof Uint8ClampedArray?i:new Uint8ClampedArray(i)},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=0},t.prototype.makeSubStream=function(t,e){for(var r=t+e;this.bufferLength<=r&&!this.eof;)this.readBlock();return new jt(this.buffer,t,e)},t.prototype.decode=function(){for(;!this.eof;)this.readBlock();return this.buffer.subarray(0,this.bufferLength)},t.prototype.readBlock=function(){throw new n.iQ(this.constructor.name,"readBlock")},t.prototype.ensureBuffer=function(t){var e=this.buffer;if(t<=e.byteLength)return e;for(var r=this.minBufferLength;r<t;)r*=2;var n=new Uint8Array(r);return n.set(e),this.buffer=n},t}();var Vt=function(t){return 32===t||9===t||13===t||10===t},It=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.input=new Uint8Array(5),r&&(r*=.8),n}return(0,i.ZT)(e,t),e.prototype.readBlock=function(){for(var t=this.stream,e=t.getByte();Vt(e);)e=t.getByte();if(-1!==e&&126!==e){var r,n,o=this.bufferLength;if(122===e){for(r=this.ensureBuffer(o+4),n=0;n<4;++n)r[o+n]=0;this.bufferLength+=4}else{var i=this.input;for(i[0]=e,n=1;n<5;++n){for(e=t.getByte();Vt(e);)e=t.getByte();if(i[n]=e,-1===e||126===e)break}if(r=this.ensureBuffer(o+n-1),this.bufferLength+=n-1,n<5){for(;n<5;++n)i[n]=117;this.eof=!0}var a=0;for(n=0;n<5;++n)a=85*a+(i[n]-33);for(n=3;n>=0;--n)r[o+n]=255&a,a>>=8}}else this.eof=!0},e}(Bt);const zt=It;var Ut=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.firstDigit=-1,r&&(r*=.5),n}return(0,i.ZT)(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(8e3);if(t.length){for(var e=t.length+1>>1,r=this.ensureBuffer(this.bufferLength+e),n=this.bufferLength,o=this.firstDigit,i=0,a=t.length;i<a;i++){var s=t[i],u=void 0;if(s>=48&&s<=57)u=15&s;else{if(!(s>=65&&s<=70||s>=97&&s<=102)){if(62===s){this.eof=!0;break}continue}u=9+(15&s)}o<0?o=u:(r[n++]=o<<4|u,o=-1)}o>=0&&this.eof&&(r[n++]=o<<4,o=-1),this.firstDigit=o,this.bufferLength=n}else this.eof=!0},e}(Bt);const Gt=Ut;var qt=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Wt=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),Lt=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),Kt=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],Xt=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5],Ht=function(t){function e(e,r){var n=t.call(this,r)||this;n.stream=e;var o=e.getByte(),i=e.getByte();if(-1===o||-1===i)throw new Error("Invalid header in flate stream: "+o+", "+i);if(8!=(15&o))throw new Error("Unknown compression method in flate stream: "+o+", "+i);if(((o<<8)+i)%31!=0)throw new Error("Bad FCHECK in flate stream: "+o+", "+i);if(32&i)throw new Error("FDICT bit set in flate stream: "+o+", "+i);return n.codeSize=0,n.codeBuf=0,n}return(0,i.ZT)(e,t),e.prototype.readBlock=function(){var t,e,r=this.stream,n=this.getBits(3);if(1&n&&(this.eof=!0),0!=(n>>=1)){var o,i;if(1===n)o=Kt,i=Xt;else{if(2!==n)throw new Error("Unknown block type in flate stream");var a=this.getBits(5)+257,s=this.getBits(5)+1,u=this.getBits(4)+4,c=new Uint8Array(qt.length),l=void 0;for(l=0;l<u;++l)c[qt[l]]=this.getBits(3);var d=this.generateHuffmanTable(c);e=0,l=0;for(var h=a+s,f=new Uint8Array(h),p=void 0,g=void 0,v=void 0;l<h;){var y=this.getCode(d);if(16===y)p=2,g=3,v=e;else if(17===y)p=3,g=3,v=e=0;else{if(18!==y){f[l++]=e=y;continue}p=7,g=11,v=e=0}for(var m=this.getBits(p)+g;m-- >0;)f[l++]=v}o=this.generateHuffmanTable(f.subarray(0,a)),i=this.generateHuffmanTable(f.subarray(a,h))}for(var b=(t=this.buffer)?t.length:0,w=this.bufferLength;;){var x=this.getCode(o);if(x<256)w+1>=b&&(b=(t=this.ensureBuffer(w+1)).length),t[w++]=x;else{if(256===x)return void(this.bufferLength=w);var F=(x=Wt[x-=257])>>16;F>0&&(F=this.getBits(F)),e=(65535&x)+F,x=this.getCode(i),(F=(x=Lt[x])>>16)>0&&(F=this.getBits(F));var S=(65535&x)+F;w+e>=b&&(b=(t=this.ensureBuffer(w+e)).length);for(var k=0;k<e;++k,++w)t[w]=t[w-S]}}}else{var C=void 0;if(-1===(C=r.getByte()))throw new Error("Bad block header in flate stream");var P=C;if(-1===(C=r.getByte()))throw new Error("Bad block header in flate stream");if(P|=C<<8,-1===(C=r.getByte()))throw new Error("Bad block header in flate stream");var T=C;if(-1===(C=r.getByte()))throw new Error("Bad block header in flate stream");if((T|=C<<8)!=(65535&~P)&&(0!==P||0!==T))throw new Error("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;var D=this.bufferLength;t=this.ensureBuffer(D+P);var A=D+P;if(this.bufferLength=A,0===P)-1===r.peekByte()&&(this.eof=!0);else for(var O=D;O<A;++O){if(-1===(C=r.getByte())){this.eof=!0;break}t[O]=C}}},e.prototype.getBits=function(t){for(var e,r=this.stream,n=this.codeSize,o=this.codeBuf;n<t;){if(-1===(e=r.getByte()))throw new Error("Bad encoding in flate stream");o|=e<<n,n+=8}return e=o&(1<<t)-1,this.codeBuf=o>>t,this.codeSize=n-=t,e},e.prototype.getCode=function(t){for(var e,r=this.stream,n=t[0],o=t[1],i=this.codeSize,a=this.codeBuf;i<o&&-1!==(e=r.getByte());)a|=e<<i,i+=8;var s=n[a&(1<<o)-1];"number"==typeof n&&console.log("FLATE:",s);var u=s>>16,c=65535&s;if(u<1||i<u)throw new Error("Bad encoding in flate stream");return this.codeBuf=a>>u,this.codeSize=i-u,c},e.prototype.generateHuffmanTable=function(t){var e,r=t.length,n=0;for(e=0;e<r;++e)t[e]>n&&(n=t[e]);for(var o=1<<n,i=new Int32Array(o),a=1,s=0,u=2;a<=n;++a,s<<=1,u<<=1)for(var c=0;c<r;++c)if(t[c]===a){var l=0,d=s;for(e=0;e<a;++e)l=l<<1|1&d,d>>=1;for(e=l;e<o;e+=u)i[e]=a<<16|c;++s}return[i,n]},e}(Bt);const Yt=Ht;var Qt=function(t){function e(e,r,n){var o=t.call(this,r)||this;o.stream=e,o.cachedData=0,o.bitsCached=0;for(var i=4096,a={earlyChange:n,codeLength:9,nextCode:258,dictionaryValues:new Uint8Array(i),dictionaryLengths:new Uint16Array(i),dictionaryPrevCodes:new Uint16Array(i),currentSequence:new Uint8Array(i),currentSequenceLength:0},s=0;s<256;++s)a.dictionaryValues[s]=s,a.dictionaryLengths[s]=1;return o.lzwState=a,o}return(0,i.ZT)(e,t),e.prototype.readBlock=function(){var t,e,r,n=1024,o=this.lzwState;if(o){var i=o.earlyChange,a=o.nextCode,s=o.dictionaryValues,u=o.dictionaryLengths,c=o.dictionaryPrevCodes,l=o.codeLength,d=o.prevCode,h=o.currentSequence,f=o.currentSequenceLength,p=0,g=this.bufferLength,v=this.ensureBuffer(this.bufferLength+n);for(t=0;t<512;t++){var y=this.readBits(l),m=f>0;if(!y||y<256)h[0]=y,f=1;else{if(!(y>=258)){if(256===y){l=9,a=258,f=0;continue}this.eof=!0,delete this.lzwState;break}if(y<a)for(e=(f=u[y])-1,r=y;e>=0;e--)h[e]=s[r],r=c[r];else h[f++]=h[0]}if(m&&(c[a]=d,u[a]=u[d]+1,s[a]=h[0],l=++a+i&a+i-1?l:0|Math.min(Math.log(a+i)/.6931471805599453+1,12)),d=y,n<(p+=f)){do{n+=512}while(n<p);v=this.ensureBuffer(this.bufferLength+n)}for(e=0;e<f;e++)v[g++]=h[e]}o.nextCode=a,o.codeLength=l,o.prevCode=d,o.currentSequenceLength=f,this.bufferLength=g}},e.prototype.readBits=function(t){for(var e=this.bitsCached,r=this.cachedData;e<t;){var n=this.stream.getByte();if(-1===n)return this.eof=!0,null;r=r<<8|n,e+=8}return this.bitsCached=e-=t,this.cachedData=r,r>>>e&(1<<t)-1},e}(Bt);const Jt=Qt;var _t=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n}return(0,i.ZT)(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(2);if(!t||t.length<2||128===t[0])this.eof=!0;else{var e,r=this.bufferLength,n=t[0];if(n<128){if((e=this.ensureBuffer(r+n+1))[r++]=t[1],n>0){var o=this.stream.getBytes(n);e.set(o,r),r+=n}}else{n=257-n;var i=t[1];e=this.ensureBuffer(r+n+1);for(var a=0;a<n;a++)e[r++]=i}this.bufferLength=r}},e}(Bt);const $t=_t;var te=function(t,e,r){if(e===S.of("FlateDecode"))return new Yt(t);if(e===S.of("LZWDecode")){var o=1;if(r instanceof P){var i=r.lookup(S.of("EarlyChange"));i instanceof d&&(o=i.asNumber())}return new Jt(t,void 0,o)}if(e===S.of("ASCII85Decode"))return new zt(t);if(e===S.of("ASCIIHexDecode"))return new Gt(t);if(e===S.of("RunLengthDecode"))return new $t(t);throw new n.l(e.asString())},ee=function(t){var e=t.dict,r=t.contents,o=new jt(r),i=e.lookup(S.of("Filter")),a=e.lookup(S.of("DecodeParms"));if(i instanceof S)o=te(o,i,a);else if(i instanceof f)for(var s=0,u=i.size();s<u;s++)o=te(o,i.lookup(s,S),a&&a.lookupMaybe(s,P));else if(i)throw new n.VX([S,f],i);return o},re=function(){function t(t,e,r){this.page=t;var n=null!=e?e:function(t){var e=t.MediaBox();return{left:0,bottom:0,right:e.lookup(2,d).asNumber()-e.lookup(0,d).asNumber(),top:e.lookup(3,d).asNumber()-e.lookup(1,d).asNumber()}}(t);this.width=n.right-n.left,this.height=n.top-n.bottom,this.boundingBox=n,this.transformationMatrix=null!=r?r:function(t){return[1,0,0,1,-t.left,-t.bottom]}(n)}return t.for=function(e,r,n){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(o){return[2,new t(e,r,n)]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r,o,a,s,u,c,l,d,h,f;return(0,i.Jh)(this,(function(i){if(r=this.page.normalizedEntries(),o=r.Contents,a=r.Resources,!o)throw new n.SR;return s=this.decodeContents(o),u=this.boundingBox,c=u.left,l=u.bottom,d=u.right,h=u.top,f=t.flateStream(s,{Type:"XObject",Subtype:"Form",FormType:1,BBox:[c,l,d,h],Matrix:this.transformationMatrix,Resources:a}),e?(t.assign(e,f),[2,e]):[2,t.register(f)]}))}))},t.prototype.decodeContents=function(t){for(var e=Uint8Array.of(o.Z.Newline),r=[],i=0,a=t.size();i<a;i++){var s=t.lookup(i,D),c=void 0;if(s instanceof A)c=ee(s).decode();else{if(!(s instanceof I))throw new n.NP(s);c=s.getUnencodedContents()}r.push(c,e)}return u.M5.apply(void 0,r)},t}();const ne=re;var oe,ie,ae,se,ue=function(t,e){if(void 0!==t)return e[t]};!function(t){t.UseNone="UseNone",t.UseOutlines="UseOutlines",t.UseThumbs="UseThumbs",t.UseOC="UseOC"}(oe||(oe={})),function(t){t.L2R="L2R",t.R2L="R2L"}(ie||(ie={})),function(t){t.None="None",t.AppDefault="AppDefault"}(ae||(ae={})),function(t){t.Simplex="Simplex",t.DuplexFlipShortEdge="DuplexFlipShortEdge",t.DuplexFlipLongEdge="DuplexFlipLongEdge"}(se||(se={}));var ce=function(){function t(t){this.dict=t}return t.prototype.lookupBool=function(t){var e=this.dict.lookup(S.of(t));if(e instanceof g)return e},t.prototype.lookupName=function(t){var e=this.dict.lookup(S.of(t));if(e instanceof S)return e},t.prototype.HideToolbar=function(){return this.lookupBool("HideToolbar")},t.prototype.HideMenubar=function(){return this.lookupBool("HideMenubar")},t.prototype.HideWindowUI=function(){return this.lookupBool("HideWindowUI")},t.prototype.FitWindow=function(){return this.lookupBool("FitWindow")},t.prototype.CenterWindow=function(){return this.lookupBool("CenterWindow")},t.prototype.DisplayDocTitle=function(){return this.lookupBool("DisplayDocTitle")},t.prototype.NonFullScreenPageMode=function(){return this.lookupName("NonFullScreenPageMode")},t.prototype.Direction=function(){return this.lookupName("Direction")},t.prototype.PrintScaling=function(){return this.lookupName("PrintScaling")},t.prototype.Duplex=function(){return this.lookupName("Duplex")},t.prototype.PickTrayByPDFSize=function(){return this.lookupBool("PickTrayByPDFSize")},t.prototype.PrintPageRange=function(){var t=this.dict.lookup(S.of("PrintPageRange"));if(t instanceof f)return t},t.prototype.NumCopies=function(){var t=this.dict.lookup(S.of("NumCopies"));if(t instanceof d)return t},t.prototype.getHideToolbar=function(){var t,e;return null!==(e=null===(t=this.HideToolbar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideMenubar=function(){var t,e;return null!==(e=null===(t=this.HideMenubar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideWindowUI=function(){var t,e;return null!==(e=null===(t=this.HideWindowUI())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getFitWindow=function(){var t,e;return null!==(e=null===(t=this.FitWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getCenterWindow=function(){var t,e;return null!==(e=null===(t=this.CenterWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getDisplayDocTitle=function(){var t,e;return null!==(e=null===(t=this.DisplayDocTitle())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getNonFullScreenPageMode=function(){var t,e,r=null===(t=this.NonFullScreenPageMode())||void 0===t?void 0:t.decodeText();return null!==(e=ue(r,oe))&&void 0!==e?e:oe.UseNone},t.prototype.getReadingDirection=function(){var t,e,r=null===(t=this.Direction())||void 0===t?void 0:t.decodeText();return null!==(e=ue(r,ie))&&void 0!==e?e:ie.L2R},t.prototype.getPrintScaling=function(){var t,e,r=null===(t=this.PrintScaling())||void 0===t?void 0:t.decodeText();return null!==(e=ue(r,ae))&&void 0!==e?e:ae.AppDefault},t.prototype.getDuplex=function(){var t,e=null===(t=this.Duplex())||void 0===t?void 0:t.decodeText();return ue(e,se)},t.prototype.getPickTrayByPDFSize=function(){var t;return null===(t=this.PickTrayByPDFSize())||void 0===t?void 0:t.asBoolean()},t.prototype.getPrintPageRange=function(){var t=this.PrintPageRange();if(!t)return[];for(var e=[],r=0;r<t.size();r+=2){var n=t.lookup(r,d).asNumber(),o=t.lookup(r+1,d).asNumber();e.push({start:n,end:o})}return e},t.prototype.getNumCopies=function(){var t,e;return null!==(e=null===(t=this.NumCopies())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setHideToolbar=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("HideToolbar"),e)},t.prototype.setHideMenubar=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("HideMenubar"),e)},t.prototype.setHideWindowUI=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("HideWindowUI"),e)},t.prototype.setFitWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("FitWindow"),e)},t.prototype.setCenterWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("CenterWindow"),e)},t.prototype.setDisplayDocTitle=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("DisplayDocTitle"),e)},t.prototype.setNonFullScreenPageMode=function(t){(0,u.DA)(t,"nonFullScreenPageMode",oe);var e=S.of(t);this.dict.set(S.of("NonFullScreenPageMode"),e)},t.prototype.setReadingDirection=function(t){(0,u.DA)(t,"readingDirection",ie);var e=S.of(t);this.dict.set(S.of("Direction"),e)},t.prototype.setPrintScaling=function(t){(0,u.DA)(t,"printScaling",ae);var e=S.of(t);this.dict.set(S.of("PrintScaling"),e)},t.prototype.setDuplex=function(t){(0,u.DA)(t,"duplex",se);var e=S.of(t);this.dict.set(S.of("Duplex"),e)},t.prototype.setPickTrayByPDFSize=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("PickTrayByPDFSize"),e)},t.prototype.setPrintPageRange=function(t){Array.isArray(t)||(t=[t]);for(var e=[],r=0,n=t.length;r<n;r++)e.push(t[r].start),e.push(t[r].end);(0,u.pO)(e,"printPageRange",["number"]);var o=this.dict.context.obj(e);this.dict.set(S.of("PrintPageRange"),o)},t.prototype.setNumCopies=function(t){(0,u.gI)(t,"numCopies",1,Number.MAX_VALUE),(0,u.Qk)(t,"numCopies");var e=this.dict.context.obj(t);this.dict.set(S.of("NumCopies"),e)},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({}))},t}();const le=ce;var de=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+Tf/,he=function(){function t(t,e){this.dict=t,this.ref=e}return t.prototype.T=function(){return this.dict.lookupMaybe(S.of("T"),yt.Z,lt.Z)},t.prototype.Ff=function(){var t=this.getInheritableAttribute(S.of("Ff"));return this.dict.context.lookupMaybe(t,d)},t.prototype.V=function(){var t=this.getInheritableAttribute(S.of("V"));return this.dict.context.lookup(t)},t.prototype.Kids=function(){return this.dict.lookupMaybe(S.of("Kids"),f)},t.prototype.DA=function(){var t=this.dict.lookup(S.of("DA"));if(t instanceof yt.Z||t instanceof lt.Z)return t},t.prototype.setKids=function(t){this.dict.set(S.of("Kids"),this.dict.context.obj(t))},t.prototype.getParent=function(){var e=this.dict.get(S.of("Parent"));if(e instanceof N)return new t(this.dict.lookup(S.of("Parent"),P),e)},t.prototype.setParent=function(t){t?this.dict.set(S.of("Parent"),t):this.dict.delete(S.of("Parent"))},t.prototype.getFullyQualifiedName=function(){var t=this.getParent();return t?t.getFullyQualifiedName()+"."+this.getPartialName():this.getPartialName()},t.prototype.getPartialName=function(){var t;return null===(t=this.T())||void 0===t?void 0:t.decodeText()},t.prototype.setPartialName=function(t){t?this.dict.set(S.of("T"),lt.Z.fromText(t)):this.dict.delete(S.of("T"))},t.prototype.setDefaultAppearance=function(t){this.dict.set(S.of("DA"),yt.Z.of(t))},t.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof lt.Z?t.decodeText():null==t?void 0:t.asString()},t.prototype.setFontSize=function(t){var e,r=null!==(e=this.getFullyQualifiedName())&&void 0!==e?e:"",o=this.getDefaultAppearance();if(!o)throw new n._z(r);var i=(0,u.JZ)(o,de);if(!i.match)throw new n.Iu(r);var a=o.slice(0,i.pos-i.match[0].length),s=i.pos<=o.length?o.slice(i.pos):"",c=a+" /"+i.match[1]+" "+t+" Tf "+s;this.setDefaultAppearance(c)},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.Ff())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(S.of("Ff"),d.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.dict.get(t))})),e},t.prototype.ascend=function(t){t(this);var e=this.getParent();e&&e.ascend(t)},t}();const fe=he;var pe=function(){function t(t){this.dict=t}return t.prototype.W=function(){var t=this.dict.lookup(S.of("W"));if(t instanceof d)return t},t.prototype.getWidth=function(){var t,e;return null!==(e=null===(t=this.W())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setWidth=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("W"),e)},t.fromDict=function(e){return new t(e)},t}();const ge=pe;var ve=function(){function t(t){this.dict=t}return t.prototype.Rect=function(){return this.dict.lookup(S.of("Rect"),f)},t.prototype.AP=function(){return this.dict.lookupMaybe(S.of("AP"),P)},t.prototype.F=function(){var t=this.dict.lookup(S.of("F"));return this.dict.context.lookupMaybe(t,d)},t.prototype.getRectangle=function(){var t,e=this.Rect();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:{x:0,y:0,width:0,height:0}},t.prototype.setRectangle=function(t){var e=t.x,r=t.y,n=t.width,o=t.height,i=this.dict.context.obj([e,r,e+n,r+o]);this.dict.set(S.of("Rect"),i)},t.prototype.getAppearanceState=function(){var t=this.dict.lookup(S.of("AS"));if(t instanceof S)return t},t.prototype.setAppearanceState=function(t){this.dict.set(S.of("AS"),t)},t.prototype.setAppearances=function(t){this.dict.set(S.of("AP"),t)},t.prototype.ensureAP=function(){var t=this.AP();return t||(t=this.dict.context.obj({}),this.dict.set(S.of("AP"),t)),t},t.prototype.getNormalAppearance=function(){var t=this.ensureAP().get(S.of("N"));if(t instanceof N||t instanceof P)return t;throw new Error("Unexpected N type: "+(null==t?void 0:t.constructor.name))},t.prototype.setNormalAppearance=function(t){this.ensureAP().set(S.of("N"),t)},t.prototype.setRolloverAppearance=function(t){this.ensureAP().set(S.of("R"),t)},t.prototype.setDownAppearance=function(t){this.ensureAP().set(S.of("D"),t)},t.prototype.removeRolloverAppearance=function(){var t=this.AP();null==t||t.delete(S.of("R"))},t.prototype.removeDownAppearance=function(){var t=this.AP();null==t||t.delete(S.of("D"))},t.prototype.getAppearances=function(){var t=this.AP();if(t)return{normal:t.lookup(S.of("N"),P,D),rollover:t.lookupMaybe(S.of("R"),P,D),down:t.lookupMaybe(S.of("D"),P,D)}},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.F())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(S.of("F"),d.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.fromDict=function(e){return new t(e)},t}();const ye=ve;var me=function(){function t(t){this.dict=t}return t.prototype.R=function(){var t=this.dict.lookup(S.of("R"));if(t instanceof d)return t},t.prototype.BC=function(){var t=this.dict.lookup(S.of("BC"));if(t instanceof f)return t},t.prototype.BG=function(){var t=this.dict.lookup(S.of("BG"));if(t instanceof f)return t},t.prototype.CA=function(){var t=this.dict.lookup(S.of("CA"));if(t instanceof lt.Z||t instanceof yt.Z)return t},t.prototype.RC=function(){var t=this.dict.lookup(S.of("RC"));if(t instanceof lt.Z||t instanceof yt.Z)return t},t.prototype.AC=function(){var t=this.dict.lookup(S.of("AC"));if(t instanceof lt.Z||t instanceof yt.Z)return t},t.prototype.getRotation=function(){var t;return null===(t=this.R())||void 0===t?void 0:t.asNumber()},t.prototype.getBorderColor=function(){var t=this.BC();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var o=t.get(r);o instanceof d&&e.push(o.asNumber())}return e}},t.prototype.getBackgroundColor=function(){var t=this.BG();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var o=t.get(r);o instanceof d&&e.push(o.asNumber())}return e}},t.prototype.getCaptions=function(){var t=this.CA(),e=this.RC(),r=this.AC();return{normal:null==t?void 0:t.decodeText(),rollover:null==e?void 0:e.decodeText(),down:null==r?void 0:r.decodeText()}},t.prototype.setRotation=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("R"),e)},t.prototype.setBorderColor=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("BC"),e)},t.prototype.setBackgroundColor=function(t){var e=this.dict.context.obj(t);this.dict.set(S.of("BG"),e)},t.prototype.setCaptions=function(t){var e=lt.Z.fromText(t.normal);if(this.dict.set(S.of("CA"),e),t.rollover){var r=lt.Z.fromText(t.rollover);this.dict.set(S.of("RC"),r)}else this.dict.delete(S.of("RC"));if(t.down){var n=lt.Z.fromText(t.down);this.dict.set(S.of("AC"),n)}else this.dict.delete(S.of("AC"))},t.fromDict=function(e){return new t(e)},t}();const be=me;var we=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.MK=function(){var t=this.dict.lookup(S.of("MK"));if(t instanceof P)return t},e.prototype.BS=function(){var t=this.dict.lookup(S.of("BS"));if(t instanceof P)return t},e.prototype.DA=function(){var t=this.dict.lookup(S.of("DA"));if(t instanceof yt.Z||t instanceof lt.Z)return t},e.prototype.P=function(){var t=this.dict.get(S.of("P"));if(t instanceof N)return t},e.prototype.setP=function(t){this.dict.set(S.of("P"),t)},e.prototype.setDefaultAppearance=function(t){this.dict.set(S.of("DA"),yt.Z.of(t))},e.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof lt.Z?t.decodeText():null==t?void 0:t.asString()},e.prototype.getAppearanceCharacteristics=function(){var t=this.MK();if(t)return be.fromDict(t)},e.prototype.getOrCreateAppearanceCharacteristics=function(){var t=this.MK();if(t)return be.fromDict(t);var e=be.fromDict(this.dict.context.obj({}));return this.dict.set(S.of("MK"),e.dict),e},e.prototype.getBorderStyle=function(){var t=this.BS();if(t)return ge.fromDict(t)},e.prototype.getOrCreateBorderStyle=function(){var t=this.BS();if(t)return ge.fromDict(t);var e=ge.fromDict(this.dict.context.obj({}));return this.dict.set(S.of("BS"),e.dict),e},e.prototype.getOnValue=function(){var t,e=null===(t=this.getAppearances())||void 0===t?void 0:t.normal;if(e instanceof P)for(var r=e.keys(),n=0,o=r.length;n<o;n++){var i=r[n];if(i!==S.of("Off"))return i}},e.fromDict=function(t){return new e(t)},e.create=function(t,r){return new e(t.obj({Type:"Annot",Subtype:"Widget",Rect:[0,0,0,0],Parent:r}))},e}(ye);const xe=we;var Fe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.FT=function(){var t=this.getInheritableAttribute(S.of("FT"));return this.dict.context.lookup(t,S)},e.prototype.getWidgets=function(){var t=this.Kids();if(!t)return[xe.fromDict(this.dict)];for(var e=new Array(t.size()),r=0,n=t.size();r<n;r++){var o=t.lookup(r,P);e[r]=xe.fromDict(o)}return e},e.prototype.addWidget=function(t){this.normalizedEntries().Kids.push(t)},e.prototype.removeWidget=function(t){var e=this.Kids();if(e){if(t<0||t>e.size())throw new n.sE(t,0,e.size());e.remove(t)}else{if(0!==t)throw new n.sE(t,0,0);this.setKids([])}},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([this.ref]),this.dict.set(S.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e}(fe);const Se=Fe;var ke=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.Opt=function(){return this.dict.lookupMaybe(S.of("Opt"),yt.Z,lt.Z,f)},e.prototype.setOpt=function(t){this.dict.set(S.of("Opt"),this.dict.context.obj(t))},e.prototype.getExportValues=function(){var t=this.Opt();if(t){if(t instanceof yt.Z||t instanceof lt.Z)return[t];for(var e=[],r=0,n=t.size();r<n;r++){var o=t.lookup(r);(o instanceof yt.Z||o instanceof lt.Z)&&e.push(o)}return e}},e.prototype.removeExportValue=function(t){var e=this.Opt();if(e)if(e instanceof yt.Z||e instanceof lt.Z){if(0!==t)throw new n.sE(t,0,0);this.setOpt([])}else{if(t<0||t>e.size())throw new n.sE(t,0,e.size());e.remove(t)}},e.prototype.normalizeExportValues=function(){for(var t,e,r,n,o=null!==(t=this.getExportValues())&&void 0!==t?t:[],i=[],a=this.getWidgets(),s=0,u=a.length;s<u;s++){var c=a[s],l=null!==(e=o[s])&&void 0!==e?e:lt.Z.fromText(null!==(n=null===(r=c.getOnValue())||void 0===r?void 0:r.decodeText())&&void 0!==n?n:"");i.push(l)}this.setOpt(i)},e.prototype.addOpt=function(t,e){var r;this.normalizeExportValues();var n,o=t.decodeText();if(e)for(var i=null!==(r=this.getExportValues())&&void 0!==r?r:[],a=0,s=i.length;a<s;a++)i[a].decodeText()===o&&(n=a);var u=this.Opt();return u.push(t),null!=n?n:u.size()-1},e.prototype.addWidgetWithOpt=function(t,e,r){var n=this.addOpt(e,r),o=S.of(String(n));return this.addWidget(t),o},e}(Se);const Ce=ke;var Pe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.setValue=function(t){var e;if(t!==(null!==(e=this.getOnValue())&&void 0!==e?e:S.of("Yes"))&&t!==S.of("Off"))throw new n.vM;this.dict.set(S.of("V"),t);for(var r=this.getWidgets(),o=0,i=r.length;o<i;o++){var a=r[o],s=a.getOnValue()===t?t:S.of("Off");a.setAppearanceState(s)}},e.prototype.getValue=function(){var t=this.V();return t instanceof S?t:S.of("Off")},e.prototype.getOnValue=function(){var t=this.getWidgets()[0];return null==t?void 0:t.getOnValue()},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Kids:[]});return new e(r,t.register(r))},e}(Ce);const Te=Pe;var De,Ae,Oe,Re,Ne=function(t){return 1<<t};!function(t){t[t.ReadOnly=Ne(0)]="ReadOnly",t[t.Required=Ne(1)]="Required",t[t.NoExport=Ne(2)]="NoExport"}(De||(De={})),function(t){t[t.NoToggleToOff=Ne(14)]="NoToggleToOff",t[t.Radio=Ne(15)]="Radio",t[t.PushButton=Ne(16)]="PushButton",t[t.RadiosInUnison=Ne(25)]="RadiosInUnison"}(Ae||(Ae={})),function(t){t[t.Multiline=Ne(12)]="Multiline",t[t.Password=Ne(13)]="Password",t[t.FileSelect=Ne(20)]="FileSelect",t[t.DoNotSpellCheck=Ne(22)]="DoNotSpellCheck",t[t.DoNotScroll=Ne(23)]="DoNotScroll",t[t.Comb=Ne(24)]="Comb",t[t.RichText=Ne(25)]="RichText"}(Oe||(Oe={})),function(t){t[t.Combo=Ne(17)]="Combo",t[t.Edit=Ne(18)]="Edit",t[t.Sort=Ne(19)]="Sort",t[t.MultiSelect=Ne(21)]="MultiSelect",t[t.DoNotSpellCheck=Ne(22)]="DoNotSpellCheck",t[t.CommitOnSelChange=Ne(26)]="CommitOnSelChange"}(Re||(Re={}));var Me=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.setValues=function(t){if(this.hasFlag(Re.Combo)&&!this.hasFlag(Re.Edit)&&!this.valuesAreValid(t))throw new n.vM;if(0===t.length&&this.dict.delete(S.of("V")),1===t.length&&this.dict.set(S.of("V"),t[0]),t.length>1){if(!this.hasFlag(Re.MultiSelect))throw new n.TC;this.dict.set(S.of("V"),this.dict.context.obj(t))}this.updateSelectedIndices(t)},e.prototype.valuesAreValid=function(t){for(var e=this.getOptions(),r=function(r,n){var o=t[r].decodeText();if(!e.find((function(t){return o===(t.display||t.value).decodeText()})))return{value:!1}},n=0,o=t.length;n<o;n++){var i=r(n);if("object"==typeof i)return i.value}return!0},e.prototype.updateSelectedIndices=function(t){if(t.length>1){for(var e=new Array(t.length),r=this.getOptions(),n=function(n,o){var i=t[n].decodeText();e[n]=r.findIndex((function(t){return i===(t.display||t.value).decodeText()}))},o=0,i=t.length;o<i;o++)n(o);this.dict.set(S.of("I"),this.dict.context.obj(e.sort()))}else this.dict.delete(S.of("I"))},e.prototype.getValues=function(){var t=this.V();if(t instanceof yt.Z||t instanceof lt.Z)return[t];if(t instanceof f){for(var e=[],r=0,n=t.size();r<n;r++){var o=t.lookup(r);(o instanceof yt.Z||o instanceof lt.Z)&&e.push(o)}return e}return[]},e.prototype.Opt=function(){return this.dict.lookupMaybe(S.of("Opt"),yt.Z,lt.Z,f)},e.prototype.setOptions=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++){var o=t[r],i=o.value,a=o.display;e[r]=this.dict.context.obj([i,a||i])}this.dict.set(S.of("Opt"),this.dict.context.obj(e))},e.prototype.getOptions=function(){var t=this.Opt();if(t instanceof yt.Z||t instanceof lt.Z)return[{value:t,display:t}];if(t instanceof f){for(var e=[],r=0,n=t.size();r<n;r++){var o=t.lookup(r);if((o instanceof yt.Z||o instanceof lt.Z)&&e.push({value:o,display:o}),o instanceof f&&o.size()>0){var i=o.lookup(0,yt.Z,lt.Z),a=o.lookupMaybe(1,yt.Z,lt.Z);e.push({value:i,display:a||i})}}return e}return[]},e}(Se);const Ee=Me,je=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Ff:Re.Combo,Kids:[]});return new e(r,t.register(r))},e}(Ee),Ze=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.addField=function(t){var e=this.normalizedEntries().Kids;null==e||e.push(t)},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([]),this.dict.set(S.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({});return new e(r,t.register(r))},e}(fe),Be=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e}(Se),Ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.MaxLen=function(){var t=this.dict.lookup(S.of("MaxLen"));if(t instanceof d)return t},e.prototype.Q=function(){var t=this.dict.lookup(S.of("Q"));if(t instanceof d)return t},e.prototype.setMaxLength=function(t){this.dict.set(S.of("MaxLen"),d.of(t))},e.prototype.removeMaxLength=function(){this.dict.delete(S.of("MaxLen"))},e.prototype.getMaxLength=function(){var t;return null===(t=this.MaxLen())||void 0===t?void 0:t.asNumber()},e.prototype.setQuadding=function(t){this.dict.set(S.of("Q"),d.of(t))},e.prototype.getQuadding=function(){var t;return null===(t=this.Q())||void 0===t?void 0:t.asNumber()},e.prototype.setValue=function(t){this.dict.set(S.of("V"),t)},e.prototype.removeValue=function(){this.dict.delete(S.of("V"))},e.prototype.getValue=function(){var t=this.V();if(t instanceof yt.Z||t instanceof lt.Z)return t},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Tx",Kids:[]});return new e(r,t.register(r))},e}(Se),Ie=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:Ae.PushButton,Kids:[]});return new e(r,t.register(r))},e}(Ce);var ze=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.setValue=function(t){if(!this.getOnValues().includes(t)&&t!==S.of("Off"))throw new n.vM;this.dict.set(S.of("V"),t);for(var e=this.getWidgets(),r=0,o=e.length;r<o;r++){var i=e[r],a=i.getOnValue()===t?t:S.of("Off");i.setAppearanceState(a)}},e.prototype.getValue=function(){var t=this.V();return t instanceof S?t:S.of("Off")},e.prototype.getOnValues=function(){for(var t=this.getWidgets(),e=[],r=0,n=t.length;r<n;r++){var o=t[r].getOnValue();o&&e.push(o)}return e},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:Ae.Radio,Kids:[]});return new e(r,t.register(r))},e}(Ce);const Ue=ze,Ge=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Kids:[]});return new e(r,t.register(r))},e}(Ee);var qe=function(t){if(!t)return[];for(var e=[],r=0,n=t.size();r<n;r++){var o=t.get(r),i=t.lookup(r);o instanceof N&&i instanceof P&&e.push([We(i,o),o])}return e},We=function(t,e){return Le(t)?Ze.fromDict(t,e):Ke(t,e)},Le=function(t){var e=t.lookup(S.of("Kids"));if(e instanceof f)for(var r=0,n=e.size();r<n;r++){var o=e.lookup(r);if(o instanceof P&&o.has(S.of("T")))return!0}return!1},Ke=function(t,e){var r=Qe(t,S.of("FT")),n=t.context.lookup(r,S);return n===S.of("Btn")?Xe(t,e):n===S.of("Ch")?He(t,e):n===S.of("Tx")?Ve.fromDict(t,e):n===S.of("Sig")?Be.fromDict(t,e):Se.fromDict(t,e)},Xe=function(t,e){var r,n=Qe(t,S.of("Ff")),o=t.context.lookupMaybe(n,d),i=null!==(r=null==o?void 0:o.asNumber())&&void 0!==r?r:0;return Ye(i,Ae.PushButton)?Ie.fromDict(t,e):Ye(i,Ae.Radio)?Ue.fromDict(t,e):Te.fromDict(t,e)},He=function(t,e){var r,n=Qe(t,S.of("Ff")),o=t.context.lookupMaybe(n,d),i=null!==(r=null==o?void 0:o.asNumber())&&void 0!==r?r:0;return Ye(i,Re.Combo)?je.fromDict(t,e):Ge.fromDict(t,e)},Ye=function(t,e){return 0!=(t&e)},Qe=function(t,e){var r;return Je(t,(function(t){r||(r=t.get(e))})),r},Je=function(t,e){e(t);var r=t.lookupMaybe(S.of("Parent"),P);r&&Je(r,e)},_e=function(){function t(t){this.dict=t}return t.prototype.Fields=function(){var t=this.dict.lookup(S.of("Fields"));if(t instanceof f)return t},t.prototype.getFields=function(){for(var t=this.normalizedEntries().Fields,e=new Array(t.size()),r=0,n=t.size();r<n;r++){var o=t.get(r),i=t.lookup(r,P);e[r]=[We(i,o),o]}return e},t.prototype.getAllFields=function(){var t=[],e=function(r){if(r)for(var n=0,o=r.length;n<o;n++){var i=r[n];t.push(i);var a=i[0];a instanceof Ze&&e(qe(a.Kids()))}};return e(this.getFields()),t},t.prototype.addField=function(t){var e=this.normalizedEntries().Fields;null==e||e.push(t)},t.prototype.removeField=function(t){var e=t.getParent(),r=void 0===e?this.normalizedEntries().Fields:e.Kids(),n=null==r?void 0:r.indexOf(t.ref);if(void 0===r||void 0===n)throw new Error("Tried to remove inexistent field "+t.getFullyQualifiedName());r.remove(n),void 0!==e&&0===r.size()&&this.removeField(e)},t.prototype.normalizedEntries=function(){var t=this.Fields();return t||(t=this.dict.context.obj([]),this.dict.set(S.of("Fields"),t)),{Fields:t}},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({Fields:[]}))},t}();const $e=_e,tr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.Pages=function(){return this.lookup(S.of("Pages"),P)},e.prototype.AcroForm=function(){return this.lookupMaybe(S.of("AcroForm"),P)},e.prototype.getAcroForm=function(){var t=this.AcroForm();if(t)return $e.fromDict(t)},e.prototype.getOrCreateAcroForm=function(){var t=this.getAcroForm();if(!t){t=$e.create(this.context);var e=this.context.register(t.dict);this.set(S.of("AcroForm"),e)}return t},e.prototype.ViewerPreferences=function(){return this.lookupMaybe(S.of("ViewerPreferences"),P)},e.prototype.getViewerPreferences=function(){var t=this.ViewerPreferences();if(t)return le.fromDict(t)},e.prototype.getOrCreateViewerPreferences=function(){var t=this.getViewerPreferences();if(!t){t=le.create(this.context);var e=this.context.register(t.dict);this.set(S.of("ViewerPreferences"),e)}return t},e.prototype.insertLeafNode=function(t,e){var r=this.get(S.of("Pages"));return this.Pages().insertLeafNode(t,e)||r},e.prototype.removeLeafNode=function(t){this.Pages().removeLeafNode(t)},e.withContextAndPages=function(t,r){var n=new Map;return n.set(S.of("Type"),S.of("Catalog")),n.set(S.of("Pages"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(P);var er=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.Parent=function(){return this.lookup(S.of("Parent"))},e.prototype.Kids=function(){return this.lookup(S.of("Kids"),f)},e.prototype.Count=function(){return this.lookup(S.of("Count"),d)},e.prototype.pushTreeNode=function(t){this.Kids().push(t)},e.prototype.pushLeafNode=function(t){var e=this.Kids();this.insertLeafKid(e.size(),t)},e.prototype.insertLeafNode=function(t,r){var o=this.Kids(),i=this.Count().asNumber();if(r>i)throw new n.Y8(r,i);for(var a=r,s=0,u=o.size();s<u;s++){if(0===a)return void this.insertLeafKid(s,t);var c=o.get(s),l=this.context.lookup(c);if(l instanceof e){if(l.Count().asNumber()>a)return l.insertLeafNode(t,a)||c;a-=l.Count().asNumber()}l instanceof L&&(a-=1)}if(0!==a)throw new n.bg(r,"insertLeafNode");this.insertLeafKid(o.size(),t)},e.prototype.removeLeafNode=function(t,r){void 0===r&&(r=!0);var o=this.Kids(),i=this.Count().asNumber();if(t>=i)throw new n.Y8(t,i);for(var a=t,s=0,u=o.size();s<u;s++){var c=o.get(s),l=this.context.lookup(c);if(l instanceof e){if(l.Count().asNumber()>a)return l.removeLeafNode(a,r),void(r&&0===l.Kids().size()&&o.remove(s));a-=l.Count().asNumber()}if(l instanceof L){if(0===a)return void this.removeKid(s);a-=1}}throw new n.bg(t,"removeLeafNode")},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.traverse=function(t){for(var r=this.Kids(),n=0,o=r.size();n<o;n++){var i=r.get(n),a=this.context.lookup(i);a instanceof e&&a.traverse(t),t(a,i)}},e.prototype.insertLeafKid=function(t,e){var r=this.Kids();this.ascend((function(t){var e=t.Count().asNumber()+1;t.set(S.of("Count"),d.of(e))})),r.insert(t,e)},e.prototype.removeKid=function(t){var e=this.Kids();e.lookup(t)instanceof L&&this.ascend((function(t){var e=t.Count().asNumber()-1;t.set(S.of("Count"),d.of(e))})),e.remove(t)},e.withContext=function(t,r){var n=new Map;return n.set(S.of("Type"),S.of("Pages")),n.set(S.of("Kids"),t.obj([])),n.set(S.of("Count"),t.obj(0)),r&&n.set(S.of("Parent"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(P);const rr=er;var nr=new Uint8Array(256);nr[o.Z.Zero]=1,nr[o.Z.One]=1,nr[o.Z.Two]=1,nr[o.Z.Three]=1,nr[o.Z.Four]=1,nr[o.Z.Five]=1,nr[o.Z.Six]=1,nr[o.Z.Seven]=1,nr[o.Z.Eight]=1,nr[o.Z.Nine]=1;var or=new Uint8Array(256);or[o.Z.Period]=1,or[o.Z.Plus]=1,or[o.Z.Minus]=1;for(var ir=new Uint8Array(256),ar=0;ar<256;ar++)ir[ar]=nr[ar]||or[ar]?1:0;var sr=o.Z.Newline,ur=o.Z.CarriageReturn,cr=function(){function t(t,e){void 0===e&&(e=!1),this.bytes=t,this.capNumbers=e}return t.prototype.parseRawInt=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!nr[e])break;t+=(0,u.D_)(this.bytes.next())}var r=Number(t);if(!t||!isFinite(r))throw new n.RS(this.bytes.position(),t);return r},t.prototype.parseRawNumber=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!ir[e])break;if(t+=(0,u.D_)(this.bytes.next()),e===o.Z.Period)break}for(;!this.bytes.done()&&(e=this.bytes.peek(),nr[e]);)t+=(0,u.D_)(this.bytes.next());var r=Number(t);if(!t||!isFinite(r))throw new n.RS(this.bytes.position(),t);if(r>Number.MAX_SAFE_INTEGER){if(this.capNumbers){var i="Parsed number that is too large for some PDF readers: "+t+", using Number.MAX_SAFE_INTEGER instead.";return console.warn(i),Number.MAX_SAFE_INTEGER}i="Parsed number that is too large for some PDF readers: "+t+", not capping.",console.warn(i)}return r},t.prototype.skipWhitespace=function(){for(;!this.bytes.done()&&y[this.bytes.peek()];)this.bytes.next()},t.prototype.skipLine=function(){for(;!this.bytes.done();){var t=this.bytes.peek();if(t===sr||t===ur)return;this.bytes.next()}},t.prototype.skipComment=function(){if(this.bytes.peek()!==o.Z.Percent)return!1;for(;!this.bytes.done();){var t=this.bytes.peek();if(t===sr||t===ur)return!0;this.bytes.next()}return!0},t.prototype.skipWhitespaceAndComments=function(){for(this.skipWhitespace();this.skipComment();)this.skipWhitespace()},t.prototype.matchKeyword=function(t){for(var e=this.bytes.offset(),r=0,n=t.length;r<n;r++)if(this.bytes.done()||this.bytes.next()!==t[r])return this.bytes.moveTo(e),!1;return!0},t}();const lr=cr,dr=function(){function t(t){this.idx=0,this.line=0,this.column=0,this.bytes=t,this.length=this.bytes.length}return t.prototype.moveTo=function(t){this.idx=t},t.prototype.next=function(){var t=this.bytes[this.idx++];return t===o.Z.Newline?(this.line+=1,this.column=0):this.column+=1,t},t.prototype.assertNext=function(t){if(this.peek()!==t)throw new n.ze(this.position(),t,this.peek());return this.next()},t.prototype.peek=function(){return this.bytes[this.idx]},t.prototype.peekAhead=function(t){return this.bytes[this.idx+t]},t.prototype.peekAt=function(t){return this.bytes[t]},t.prototype.done=function(){return this.idx>=this.length},t.prototype.offset=function(){return this.idx},t.prototype.slice=function(t,e){return this.bytes.slice(t,e)},t.prototype.position=function(){return{line:this.line,column:this.column,offset:this.idx}},t.of=function(e){return new t(e)},t.fromPDFRawStream=function(e){return t.of(ee(e).decode())},t}();var hr=o.Z.Space,fr=o.Z.CarriageReturn,pr=o.Z.Newline,gr=[o.Z.s,o.Z.t,o.Z.r,o.Z.e,o.Z.a,o.Z.m],vr=[o.Z.e,o.Z.n,o.Z.d,o.Z.s,o.Z.t,o.Z.r,o.Z.e,o.Z.a,o.Z.m],yr={header:[o.Z.Percent,o.Z.P,o.Z.D,o.Z.F,o.Z.Dash],eof:[o.Z.Percent,o.Z.Percent,o.Z.E,o.Z.O,o.Z.F],obj:[o.Z.o,o.Z.b,o.Z.j],endobj:[o.Z.e,o.Z.n,o.Z.d,o.Z.o,o.Z.b,o.Z.j],xref:[o.Z.x,o.Z.r,o.Z.e,o.Z.f],trailer:[o.Z.t,o.Z.r,o.Z.a,o.Z.i,o.Z.l,o.Z.e,o.Z.r],startxref:[o.Z.s,o.Z.t,o.Z.a,o.Z.r,o.Z.t,o.Z.x,o.Z.r,o.Z.e,o.Z.f],true:[o.Z.t,o.Z.r,o.Z.u,o.Z.e],false:[o.Z.f,o.Z.a,o.Z.l,o.Z.s,o.Z.e],null:[o.Z.n,o.Z.u,o.Z.l,o.Z.l],stream:gr,streamEOF1:(0,i.pr)(gr,[hr,fr,pr]),streamEOF2:(0,i.pr)(gr,[fr,pr]),streamEOF3:(0,i.pr)(gr,[fr]),streamEOF4:(0,i.pr)(gr,[pr]),endstream:vr,EOF1endstream:(0,i.pr)([fr,pr],vr),EOF2endstream:(0,i.pr)([fr],vr),EOF3endstream:(0,i.pr)([pr],vr)};const mr=function(t){function e(e,r,n){void 0===n&&(n=!1);var o=t.call(this,e,n)||this;return o.context=r,o}return(0,i.ZT)(e,t),e.prototype.parseObject=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(yr.true))return g.True;if(this.matchKeyword(yr.false))return g.False;if(this.matchKeyword(yr.null))return k;var t=this.bytes.peek();if(t===o.Z.LessThan&&this.bytes.peekAhead(1)===o.Z.LessThan)return this.parseDictOrStream();if(t===o.Z.LessThan)return this.parseHexString();if(t===o.Z.LeftParen)return this.parseString();if(t===o.Z.ForwardSlash)return this.parseName();if(t===o.Z.LeftSquareBracket)return this.parseArray();if(ir[t])return this.parseNumberOrRef();throw new n.EX(this.bytes.position(),t)},e.prototype.parseNumberOrRef=function(){var t=this.parseRawNumber();this.skipWhitespaceAndComments();var e=this.bytes.offset();if(nr[this.bytes.peek()]){var r=this.parseRawNumber();if(this.skipWhitespaceAndComments(),this.bytes.peek()===o.Z.R)return this.bytes.assertNext(o.Z.R),N.of(t,r)}return this.bytes.moveTo(e),d.of(t)},e.prototype.parseHexString=function(){var t="";for(this.bytes.assertNext(o.Z.LessThan);!this.bytes.done()&&this.bytes.peek()!==o.Z.GreaterThan;)t+=(0,u.D_)(this.bytes.next());return this.bytes.assertNext(o.Z.GreaterThan),lt.Z.of(t)},e.prototype.parseString=function(){for(var t=0,e=!1,r="";!this.bytes.done();){var i=this.bytes.next();if(r+=(0,u.D_)(i),e||(i===o.Z.LeftParen&&(t+=1),i===o.Z.RightParen&&(t-=1)),i===o.Z.BackSlash?e=!e:e&&(e=!1),0===t)return yt.Z.of(r.substring(1,r.length-1))}throw new n.or(this.bytes.position())},e.prototype.parseName=function(){this.bytes.assertNext(o.Z.ForwardSlash);for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(y[e]||v[e])break;t+=(0,u.D_)(e),this.bytes.next()}return S.of(t)},e.prototype.parseArray=function(){this.bytes.assertNext(o.Z.LeftSquareBracket),this.skipWhitespaceAndComments();for(var t=f.withContext(this.context);this.bytes.peek()!==o.Z.RightSquareBracket;){var e=this.parseObject();t.push(e),this.skipWhitespaceAndComments()}return this.bytes.assertNext(o.Z.RightSquareBracket),t},e.prototype.parseDict=function(){this.bytes.assertNext(o.Z.LessThan),this.bytes.assertNext(o.Z.LessThan),this.skipWhitespaceAndComments();for(var t=new Map;!this.bytes.done()&&this.bytes.peek()!==o.Z.GreaterThan&&this.bytes.peekAhead(1)!==o.Z.GreaterThan;){var e=this.parseName(),r=this.parseObject();t.set(e,r),this.skipWhitespaceAndComments()}this.skipWhitespaceAndComments(),this.bytes.assertNext(o.Z.GreaterThan),this.bytes.assertNext(o.Z.GreaterThan);var n=t.get(S.of("Type"));return n===S.of("Catalog")?tr.fromMapWithContext(t,this.context):n===S.of("Pages")?rr.fromMapWithContext(t,this.context):n===S.of("Page")?L.fromMapWithContext(t,this.context):P.fromMapWithContext(t,this.context)},e.prototype.parseDictOrStream=function(){var t=this.bytes.position(),e=this.parseDict();if(this.skipWhitespaceAndComments(),!(this.matchKeyword(yr.streamEOF1)||this.matchKeyword(yr.streamEOF2)||this.matchKeyword(yr.streamEOF3)||this.matchKeyword(yr.streamEOF4)||this.matchKeyword(yr.stream)))return e;var r,n=this.bytes.offset(),o=e.get(S.of("Length"));o instanceof d?(r=n+o.asNumber(),this.bytes.moveTo(r),this.skipWhitespaceAndComments(),this.matchKeyword(yr.endstream)||(this.bytes.moveTo(n),r=this.findEndOfStreamFallback(t))):r=this.findEndOfStreamFallback(t);var i=this.bytes.slice(n,r);return A.of(e,i)},e.prototype.findEndOfStreamFallback=function(t){for(var e=1,r=this.bytes.offset();!this.bytes.done()&&(r=this.bytes.offset(),this.matchKeyword(yr.stream)?e+=1:this.matchKeyword(yr.EOF1endstream)||this.matchKeyword(yr.EOF2endstream)||this.matchKeyword(yr.EOF3endstream)||this.matchKeyword(yr.endstream)?e-=1:this.bytes.next(),0!==e););if(0!==e)throw new n.Sh(t);return r},e.forBytes=function(t,r,n){return new e(dr.of(t),r,n)},e.forByteStream=function(t,r,n){return void 0===n&&(n=!1),new e(t,r,n)},e}(lr);var br=function(t){function e(e,r){var n=t.call(this,dr.fromPDFRawStream(e),e.dict.context)||this,o=e.dict;return n.alreadyParsed=!1,n.shouldWaitForTick=r||function(){return!1},n.firstOffset=o.lookup(S.of("First"),d).asNumber(),n.objectCount=o.lookup(S.of("N"),d).asNumber(),n}return(0,i.ZT)(e,t),e.prototype.parseIntoContext=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e,r,o,a,s,c,l;return(0,i.Jh)(this,(function(i){switch(i.label){case 0:if(this.alreadyParsed)throw new n.aj("PDFObjectStreamParser","parseIntoContext");this.alreadyParsed=!0,t=this.parseOffsetsAndObjectNumbers(),e=0,r=t.length,i.label=1;case 1:return e<r?(o=t[e],a=o.objectNumber,s=o.offset,this.bytes.moveTo(this.firstOffset+s),c=this.parseObject(),l=N.of(a,0),this.context.assign(l,c),this.shouldWaitForTick()?[4,(0,u.uj)()]:[3,3]):[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},e.prototype.parseOffsetsAndObjectNumbers=function(){for(var t=[],e=0,r=this.objectCount;e<r;e++){this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var o=this.parseRawInt();t.push({objectNumber:n,offset:o})}return t},e.forStream=function(t,r){return new e(t,r)},e}(mr);const wr=br;var xr=function(){function t(t){this.alreadyParsed=!1,this.dict=t.dict,this.bytes=dr.fromPDFRawStream(t),this.context=this.dict.context;var e=this.dict.lookup(S.of("Size"),d),r=this.dict.lookup(S.of("Index"));if(r instanceof f){this.subsections=[];for(var n=0,o=r.size();n<o;n+=2){var i=r.lookup(n+0,d).asNumber(),a=r.lookup(n+1,d).asNumber();this.subsections.push({firstObjectNumber:i,length:a})}}else this.subsections=[{firstObjectNumber:0,length:e.asNumber()}];var s=this.dict.lookup(S.of("W"),f);for(this.byteWidths=[-1,-1,-1],n=0,o=s.size();n<o;n++)this.byteWidths[n]=s.lookup(n,d).asNumber()}return t.prototype.parseIntoContext=function(){if(this.alreadyParsed)throw new n.aj("PDFXRefStreamParser","parseIntoContext");return this.alreadyParsed=!0,this.context.trailerInfo={Root:this.dict.get(S.of("Root")),Encrypt:this.dict.get(S.of("Encrypt")),Info:this.dict.get(S.of("Info")),ID:this.dict.get(S.of("ID"))},this.parseEntries()},t.prototype.parseEntries=function(){for(var t=[],e=this.byteWidths,r=e[0],n=e[1],o=e[2],i=0,a=this.subsections.length;i<a;i++)for(var s=this.subsections[i],u=s.firstObjectNumber,c=s.length,l=0;l<c;l++){for(var d=0,h=0,f=r;h<f;h++)d=d<<8|this.bytes.next();var p=0;for(h=0,f=n;h<f;h++)p=p<<8|this.bytes.next();var g=0;for(h=0,f=o;h<f;h++)g=g<<8|this.bytes.next();0===r&&(d=1);var v=u+l,y={ref:N.of(v,g),offset:p,deleted:0===d,inObjectStream:2===d};t.push(y)}return t},t.forStream=function(e){return new t(e)},t}();const Fr=xr;var Sr=function(t){function e(e,r,n,o){void 0===r&&(r=1/0),void 0===n&&(n=!1),void 0===o&&(o=!1);var i=t.call(this,dr.of(e),q.create(),o)||this;return i.alreadyParsed=!1,i.parsedObjects=0,i.shouldWaitForTick=function(){return i.parsedObjects+=1,i.parsedObjects%i.objectsPerTick==0},i.objectsPerTick=r,i.throwOnInvalidObject=n,i}return(0,i.ZT)(e,t),e.prototype.parseDocument=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e;return(0,i.Jh)(this,(function(r){switch(r.label){case 0:if(this.alreadyParsed)throw new n.aj("PDFParser","parseDocument");this.alreadyParsed=!0,this.context.header=this.parseHeader(),r.label=1;case 1:return this.bytes.done()?[3,3]:[4,this.parseDocumentSection()];case 2:if(r.sent(),(e=this.bytes.offset())===t)throw new n.Dr(this.bytes.position());return t=e,[3,1];case 3:return this.maybeRecoverRoot(),this.context.lookup(N.of(0))&&(console.warn("Removing parsed object: 0 0 R"),this.context.delete(N.of(0))),[2,this.context]}}))}))},e.prototype.maybeRecoverRoot=function(){var t=function(t){return t instanceof P&&t.lookup(S.of("Type"))===S.of("Catalog")};if(!t(this.context.lookup(this.context.trailerInfo.Root)))for(var e=this.context.enumerateIndirectObjects(),r=0,n=e.length;r<n;r++){var o=e[r],i=o[0];t(o[1])&&(this.context.trailerInfo.Root=i)}},e.prototype.parseHeader=function(){for(;!this.bytes.done();){if(this.matchKeyword(yr.header)){var t=this.parseRawInt();this.bytes.assertNext(o.Z.Period);var e=this.parseRawInt(),r=c.forVersion(t,e);return this.skipBinaryHeaderComment(),r}this.bytes.next()}throw new n.ku(this.bytes.position())},e.prototype.parseIndirectObjectHeader=function(){this.skipWhitespaceAndComments();var t=this.parseRawInt();this.skipWhitespaceAndComments();var e=this.parseRawInt();if(this.skipWhitespaceAndComments(),!this.matchKeyword(yr.obj))throw new n.uu(this.bytes.position(),yr.obj);return N.of(t,e)},e.prototype.matchIndirectObjectHeader=function(){var t=this.bytes.offset();try{return this.parseIndirectObjectHeader(),!0}catch(e){return this.bytes.moveTo(t),!1}},e.prototype.parseIndirectObject=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t,e;return(0,i.Jh)(this,(function(r){switch(r.label){case 0:return t=this.parseIndirectObjectHeader(),this.skipWhitespaceAndComments(),e=this.parseObject(),this.skipWhitespaceAndComments(),this.matchKeyword(yr.endobj),e instanceof A&&e.dict.lookup(S.of("Type"))===S.of("ObjStm")?[4,wr.forStream(e,this.shouldWaitForTick).parseIntoContext()]:[3,2];case 1:return r.sent(),[3,3];case 2:e instanceof A&&e.dict.lookup(S.of("Type"))===S.of("XRef")?Fr.forStream(e).parseIntoContext():this.context.assign(t,e),r.label=3;case 3:return[2,t]}}))}))},e.prototype.tryToParseInvalidIndirectObject=function(){var t=this.bytes.position(),e="Trying to parse invalid object: "+JSON.stringify(t)+")";if(this.throwOnInvalidObject)throw new Error(e);console.warn(e);var r=this.parseIndirectObjectHeader();console.warn("Invalid object ref: "+r),this.skipWhitespaceAndComments();for(var o=this.bytes.offset(),i=!0;!this.bytes.done()&&(this.matchKeyword(yr.endobj)&&(i=!1),i);)this.bytes.next();if(i)throw new n.Ke(t);var a=this.bytes.offset()-yr.endobj.length,s=nt.of(this.bytes.slice(o,a));return this.context.assign(r,s),r},e.prototype.parseIndirectObjects=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t;return(0,i.Jh)(this,(function(e){switch(e.label){case 0:this.skipWhitespaceAndComments(),e.label=1;case 1:if(this.bytes.done()||!nr[this.bytes.peek()])return[3,8];t=this.bytes.offset(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.parseIndirectObject()];case 3:return e.sent(),[3,5];case 4:return e.sent(),this.bytes.moveTo(t),this.tryToParseInvalidIndirectObject(),[3,5];case 5:return this.skipWhitespaceAndComments(),this.skipJibberish(),this.shouldWaitForTick()?[4,(0,u.uj)()]:[3,7];case 6:e.sent(),e.label=7;case 7:return[3,1];case 8:return[2]}}))}))},e.prototype.maybeParseCrossRefSection=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(yr.xref)){this.skipWhitespaceAndComments();for(var t=-1,e=Y.createEmpty();!this.bytes.done()&&nr[this.bytes.peek()];){var r=this.parseRawInt();this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var i=this.bytes.peek();if(i===o.Z.n||i===o.Z.f){var a=N.of(t,n);this.bytes.next()===o.Z.n?e.addEntry(a,r):e.addDeletedEntry(a,r),t+=1}else t=r;this.skipWhitespaceAndComments()}return e}},e.prototype.maybeParseTrailerDict=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(yr.trailer)){this.skipWhitespaceAndComments();var t=this.parseDict(),e=this.context;e.trailerInfo={Root:t.get(S.of("Root"))||e.trailerInfo.Root,Encrypt:t.get(S.of("Encrypt"))||e.trailerInfo.Encrypt,Info:t.get(S.of("Info"))||e.trailerInfo.Info,ID:t.get(S.of("ID"))||e.trailerInfo.ID}}},e.prototype.maybeParseTrailer=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(yr.startxref)){this.skipWhitespaceAndComments();var t=this.parseRawInt();return this.skipWhitespace(),this.matchKeyword(yr.eof),this.skipWhitespaceAndComments(),this.matchKeyword(yr.eof),this.skipWhitespaceAndComments(),Q.forLastCrossRefSectionOffset(t)}},e.prototype.parseDocumentSection=function(){return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(t){switch(t.label){case 0:return[4,this.parseIndirectObjects()];case 1:return t.sent(),this.maybeParseCrossRefSection(),this.maybeParseTrailerDict(),this.maybeParseTrailer(),this.skipJibberish(),[2]}}))}))},e.prototype.skipJibberish=function(){for(this.skipWhitespaceAndComments();!this.bytes.done();){var t=this.bytes.offset(),e=this.bytes.peek();if(e>=o.Z.Space&&e<=o.Z.Tilde&&(this.matchKeyword(yr.xref)||this.matchKeyword(yr.trailer)||this.matchKeyword(yr.startxref)||this.matchIndirectObjectHeader())){this.bytes.moveTo(t);break}this.bytes.next()}},e.prototype.skipBinaryHeaderComment=function(){this.skipWhitespaceAndComments();try{var t=this.bytes.offset();this.parseIndirectObjectHeader(),this.bytes.moveTo(t)}catch(t){this.bytes.next(),this.skipWhitespaceAndComments()}},e.forBytesWithOptions=function(t,r,n,o){return new e(t,r,n,o)},e}(mr);const kr=Sr;var Cr,Pr=function(t){return 1<<t};!function(t){t[t.Invisible=Pr(0)]="Invisible",t[t.Hidden=Pr(1)]="Hidden",t[t.Print=Pr(2)]="Print",t[t.NoZoom=Pr(3)]="NoZoom",t[t.NoRotate=Pr(4)]="NoRotate",t[t.NoView=Pr(5)]="NoView",t[t.ReadOnly=Pr(6)]="ReadOnly",t[t.Locked=Pr(7)]="Locked",t[t.ToggleNoView=Pr(8)]="ToggleNoView",t[t.LockedContents=Pr(9)]="LockedContents"}(Cr||(Cr={}))},158:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(655),o=r(18),i=r(842),a=r(955),s=r(732);const u=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return(0,n.ZT)(e,t),e.prototype.asBytes=function(){for(var t=this.value+(this.value.length%2==1?"0":""),e=t.length,r=new Uint8Array(t.length/2),n=0,o=0;n<e;){var i=parseInt(t.substring(n,n+2),16);r[o]=i,n+=2,o+=1}return r},e.prototype.decodeText=function(){var t=this.asBytes();return(0,a.O0)(t)?(0,a.aB)(t):(0,a.Ji)(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=(0,a.sG)(t);if(!e)throw new s.dm(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"<"+this.value+">"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=i.Z.LessThan,e+=(0,a.C1)(this.value,t,e),t[e++]=i.Z.GreaterThan,this.value.length+2},e.of=function(t){return new e(t)},e.fromText=function(t){for(var r=(0,a.nB)(t),n="",o=0,i=r.length;o<i;o++)n+=(0,a.CK)(r[o],4);return new e(n)},e}(o.Z)},18:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(732);const o=function(){function t(){}return t.prototype.clone=function(t){throw new n.iQ(this.constructor.name,"clone")},t.prototype.toString=function(){throw new n.iQ(this.constructor.name,"toString")},t.prototype.sizeInBytes=function(){throw new n.iQ(this.constructor.name,"sizeInBytes")},t.prototype.copyBytesInto=function(t,e){throw new n.iQ(this.constructor.name,"copyBytesInto")},t}()},222:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(655),o=r(18),i=r(842),a=r(955),s=r(732);const u=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return(0,n.ZT)(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},o=0,s=this.value.length;o<s;o++){var u=this.value[o],c=(0,a.GN)(u),l=this.value[o+1];r?c===i.Z.Newline||c===i.Z.CarriageReturn?n():c===i.Z.n?n(i.Z.Newline):c===i.Z.r?n(i.Z.CarriageReturn):c===i.Z.t?n(i.Z.Tab):c===i.Z.b?n(i.Z.Backspace):c===i.Z.f?n(i.Z.FormFeed):c===i.Z.LeftParen?n(i.Z.LeftParen):c===i.Z.RightParen?n(i.Z.RightParen):c===i.Z.Backspace?n(i.Z.BackSlash):c>=i.Z.Zero&&c<=i.Z.Seven?3!==(e+=u).length&&l>="0"&&l<="7"||(n(parseInt(e,8)),e=""):n(c):c===i.Z.BackSlash?r=!0:n(c)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return(0,a.O0)(t)?(0,a.aB)(t):(0,a.Ji)(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=(0,a.sG)(t);if(!e)throw new s.dm(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"("+this.value+")"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=i.Z.LeftParen,e+=(0,a.C1)(this.value,t,e),t[e++]=i.Z.RightParen,this.value.length+2},e.of=function(t){return new e(t)},e.fromDate=function(t){return new e("D:"+(0,a.Sk)(String(t.getUTCFullYear()),4,"0")+(0,a.Sk)(String(t.getUTCMonth()+1),2,"0")+(0,a.Sk)(String(t.getUTCDate()),2,"0")+(0,a.Sk)(String(t.getUTCHours()),2,"0")+(0,a.Sk)(String(t.getUTCMinutes()),2,"0")+(0,a.Sk)(String(t.getUTCSeconds()),2,"0")+"Z")},e}(o.Z)},842:(t,e,r)=>{"use strict";var n;r.d(e,{Z:()=>o}),function(t){t[t.Null=0]="Null",t[t.Backspace=8]="Backspace",t[t.Tab=9]="Tab",t[t.Newline=10]="Newline",t[t.FormFeed=12]="FormFeed",t[t.CarriageReturn=13]="CarriageReturn",t[t.Space=32]="Space",t[t.ExclamationPoint=33]="ExclamationPoint",t[t.Hash=35]="Hash",t[t.Percent=37]="Percent",t[t.LeftParen=40]="LeftParen",t[t.RightParen=41]="RightParen",t[t.Plus=43]="Plus",t[t.Minus=45]="Minus",t[t.Dash=45]="Dash",t[t.Period=46]="Period",t[t.ForwardSlash=47]="ForwardSlash",t[t.Zero=48]="Zero",t[t.One=49]="One",t[t.Two=50]="Two",t[t.Three=51]="Three",t[t.Four=52]="Four",t[t.Five=53]="Five",t[t.Six=54]="Six",t[t.Seven=55]="Seven",t[t.Eight=56]="Eight",t[t.Nine=57]="Nine",t[t.LessThan=60]="LessThan",t[t.GreaterThan=62]="GreaterThan",t[t.A=65]="A",t[t.D=68]="D",t[t.E=69]="E",t[t.F=70]="F",t[t.O=79]="O",t[t.P=80]="P",t[t.R=82]="R",t[t.LeftSquareBracket=91]="LeftSquareBracket",t[t.BackSlash=92]="BackSlash",t[t.RightSquareBracket=93]="RightSquareBracket",t[t.a=97]="a",t[t.b=98]="b",t[t.d=100]="d",t[t.e=101]="e",t[t.f=102]="f",t[t.i=105]="i",t[t.j=106]="j",t[t.l=108]="l",t[t.m=109]="m",t[t.n=110]="n",t[t.o=111]="o",t[t.r=114]="r",t[t.s=115]="s",t[t.t=116]="t",t[t.u=117]="u",t[t.x=120]="x",t[t.LeftCurly=123]="LeftCurly",t[t.RightCurly=125]="RightCurly",t[t.Tilde=126]="Tilde"}(n||(n={}));const o=n},55:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AFRelationship:()=>o.JN,AcroButtonFlags:()=>o.Ub,AcroChoiceFlags:()=>o.m0,AcroFieldFlags:()=>o.PV,AcroTextFlags:()=>o.oD,AnnotationFlags:()=>o.TV,AppearanceCharacteristics:()=>o.F5,BlendMode:()=>n.bt,Cache:()=>s.Ct,CharCodes:()=>o.iJ,ColorTypes:()=>n.dd,CombedTextLayoutError:()=>n.ll,CorruptPageTreeError:()=>o.bg,CustomFontEmbedder:()=>o.Wz,CustomFontSubsetEmbedder:()=>o.zO,Duplex:()=>o.$P,EncryptedPDFError:()=>n.ip,ExceededMaxLengthError:()=>n.uo,FieldAlreadyExistsError:()=>n.MY,FieldExistsAsNonTerminalError:()=>n.Ke,FileEmbedder:()=>o.Gb,FontkitNotRegisteredError:()=>n.I3,ForeignPageError:()=>n.Nl,ImageAlignment:()=>n.Cb,IndexOutOfBoundsError:()=>o.sE,InvalidAcroFieldValueError:()=>o.vM,InvalidFieldNamePartError:()=>n.Ic,InvalidMaxLengthError:()=>n._D,InvalidPDFDateStringError:()=>o.dm,InvalidTargetIndexError:()=>o.Y8,JpegEmbedder:()=>o.sm,LineCapStyle:()=>n.kP,LineJoinStyle:()=>n.r4,MethodNotImplementedError:()=>o.iQ,MissingCatalogError:()=>o.SY,MissingDAEntryError:()=>o._z,MissingKeywordError:()=>o.uu,MissingOnValueCheckError:()=>n.eB,MissingPDFHeaderError:()=>o.ku,MissingPageContentsEmbeddingError:()=>o.SR,MissingTfOperatorError:()=>o.Iu,MultiSelectValueError:()=>o.TC,NextByteAssertionError:()=>o.ze,NoSuchFieldError:()=>n.wx,NonFullScreenPageMode:()=>o.Ie,NumberParsingError:()=>o.RS,PDFAcroButton:()=>o.ry,PDFAcroCheckBox:()=>o.Ei,PDFAcroChoice:()=>o.P0,PDFAcroComboBox:()=>o.sS,PDFAcroField:()=>o.Kg,PDFAcroForm:()=>o.PS,PDFAcroListBox:()=>o.Au,PDFAcroNonTerminal:()=>o.qg,PDFAcroPushButton:()=>o._,PDFAcroRadioButton:()=>o.Ym,PDFAcroSignature:()=>o.uQ,PDFAcroTerminal:()=>o.Fs,PDFAcroText:()=>o._X,PDFAnnotation:()=>o.oY,PDFArray:()=>o.Gr,PDFArrayIsNotRectangleError:()=>o.sV,PDFBool:()=>o.hd,PDFButton:()=>n.Qu,PDFCatalog:()=>o.lR,PDFCheckBox:()=>n.vL,PDFContentStream:()=>o.kK,PDFContext:()=>o.o6,PDFCrossRefSection:()=>o.w9,PDFCrossRefStream:()=>o.PO,PDFDict:()=>o.mh,PDFDocument:()=>n.Rj,PDFDropdown:()=>n.PK,PDFEmbeddedPage:()=>n.Cx,PDFField:()=>n.Lf,PDFFlateStream:()=>o.QM,PDFFont:()=>n.MR,PDFForm:()=>n.o0,PDFHeader:()=>o.o,PDFHexString:()=>o.Ij,PDFImage:()=>n.qC,PDFInvalidObject:()=>o.wt,PDFInvalidObjectParsingError:()=>o.Ke,PDFJavaScript:()=>n.jM,PDFName:()=>o.wQ,PDFNull:()=>o.oX,PDFNumber:()=>o.qI,PDFObject:()=>o.bU,PDFObjectCopier:()=>o.Wy,PDFObjectParser:()=>o.D2,PDFObjectParsingError:()=>o.EX,PDFObjectStream:()=>o.Qc,PDFObjectStreamParser:()=>o.gz,PDFOperator:()=>o.sI,PDFOperatorNames:()=>o.Y3,PDFOptionList:()=>n.BE,PDFPage:()=>n.SI,PDFPageEmbedder:()=>o.dS,PDFPageLeaf:()=>o.Eg,PDFPageTree:()=>o.N8,PDFParser:()=>o.h9,PDFParsingError:()=>o.$O,PDFRadioGroup:()=>n.bF,PDFRawStream:()=>o.SV,PDFRef:()=>o.$F,PDFSignature:()=>n.yg,PDFStream:()=>o.kO,PDFStreamParsingError:()=>o.Sh,PDFStreamWriter:()=>o.pV,PDFString:()=>o.u2,PDFTextField:()=>n.X7,PDFTrailer:()=>o.$4,PDFTrailerDict:()=>o.O5,PDFWidgetAnnotation:()=>o.ci,PDFWriter:()=>o.Bn,PDFXRefStreamParser:()=>o.Dw,PageEmbeddingMismatchedContextError:()=>o.qX,PageSizes:()=>n.bi,ParseSpeeds:()=>n.uc,PngEmbedder:()=>o.Le,PrintScaling:()=>o.A1,PrivateConstructorError:()=>o.Gp,ReadingDirection:()=>o.M$,RemovePageFromEmptyDocumentError:()=>n.jw,ReparseError:()=>o.aj,RichTextFieldReadError:()=>n.E9,RotationTypes:()=>n.Yt,StalledParserError:()=>o.Dr,StandardFontEmbedder:()=>o.IL,StandardFontValues:()=>s.Rl,StandardFonts:()=>n.EE,TextAlignment:()=>n.H,TextRenderingMode:()=>n.pO,UnbalancedParenthesisError:()=>o.or,UnexpectedFieldTypeError:()=>n.VV,UnexpectedObjectTypeError:()=>o.VX,UnrecognizedStreamTypeError:()=>o.NP,UnsupportedEncodingError:()=>o.l,ViewerPreferences:()=>o.gF,addRandomSuffix:()=>s.si,adjustDimsForRotation:()=>n.bY,appendBezierCurve:()=>n.rz,appendQuadraticCurve:()=>n.ad,arrayAsString:()=>s.Qo,asNumber:()=>n.mH,asPDFName:()=>n.N$,asPDFNumber:()=>n.Q0,assertEachIs:()=>s.pO,assertInteger:()=>s.Qk,assertIs:()=>s.ku,assertIsOneOf:()=>s.DA,assertIsOneOfOrUndefined:()=>s.GT,assertIsSubset:()=>s.k$,assertMultiple:()=>s.m_,assertOrUndefined:()=>s.MU,assertPositive:()=>s.z7,assertRange:()=>s.gI,assertRangeOrUndefined:()=>s.zo,backtick:()=>s.Ni,beginMarkedContent:()=>n.Sn,beginText:()=>n.Fv,breakTextIntoLines:()=>s.KU,byAscendingId:()=>s.Yj,bytesFor:()=>s.DV,canBeConvertedToUint8Array:()=>s.TE,charAtIndex:()=>s.Vk,charFromCode:()=>s.D_,charFromHexCode:()=>s.Dc,charSplit:()=>s.Qs,cleanText:()=>s.FV,clip:()=>n.oq,clipEvenOdd:()=>n.Rx,closePath:()=>n.ZM,cmyk:()=>n.Qn,colorToComponents:()=>n.wG,componentsToColor:()=>n.p4,concatTransformationMatrix:()=>n.Fc,copyStringIntoBuffer:()=>s.C1,createPDFAcroField:()=>o.WT,createPDFAcroFields:()=>o.P_,createTypeErrorMsg:()=>s._s,createValueErrorMsg:()=>s.Bj,decodeFromBase64:()=>s.nN,decodeFromBase64DataUri:()=>s.Gw,decodePDFRawStream:()=>o.yh,defaultButtonAppearanceProvider:()=>n.DS,defaultCheckBoxAppearanceProvider:()=>n.S8,defaultDropdownAppearanceProvider:()=>n.oX,defaultOptionListAppearanceProvider:()=>n.E3,defaultRadioGroupAppearanceProvider:()=>n.gi,defaultTextFieldAppearanceProvider:()=>n.HN,degrees:()=>n.RW,degreesToRadians:()=>n.Ht,drawButton:()=>n.FC,drawCheckBox:()=>n.lg,drawCheckMark:()=>n.ZT,drawEllipse:()=>n.xL,drawEllipsePath:()=>n.If,drawImage:()=>n.AE,drawLine:()=>n.pS,drawLinesOfText:()=>n.kw,drawObject:()=>n.Ax,drawOptionList:()=>n.JT,drawPage:()=>n.sS,drawRadioButton:()=>n.lt,drawRectangle:()=>n.JG,drawSvgPath:()=>n.os,drawText:()=>n.yU,drawTextField:()=>n.zh,drawTextLines:()=>n.Bj,encodeToBase64:()=>s.Eo,endMarkedContent:()=>n.Ip,endPath:()=>n.ZY,endText:()=>n.Qj,error:()=>s.vU,escapeRegExp:()=>s.hr,escapedNewlineChars:()=>s.xV,fill:()=>n.hl,fillAndStroke:()=>n.y2,findLastMatch:()=>s.JZ,getType:()=>s.oL,grayscale:()=>n.se,hasSurrogates:()=>s.pY,hasUtf16BOM:()=>s.O0,highSurrogate:()=>s.D1,isNewlineChar:()=>s.By,isStandardFont:()=>s.Cl,isType:()=>s.P9,isWithinBMP:()=>s.yo,last:()=>s.Z$,layoutCombedText:()=>n.qs,layoutMultilineText:()=>n.jg,layoutSinglelineText:()=>n.v0,lineSplit:()=>s.f7,lineTo:()=>n.kZ,lowSurrogate:()=>s.$O,mergeIntoTypedArray:()=>s.M5,mergeLines:()=>s.VX,mergeUint8Arrays:()=>s.Jm,moveText:()=>n.Vb,moveTo:()=>n.Ao,newlineChars:()=>s.H1,nextLine:()=>n.t,normalizeAppearance:()=>n.TE,numberToString:()=>s.D$,padStart:()=>s.Sk,parseDate:()=>s.sG,pdfDocEncodingDecode:()=>s.Ji,pluckIndices:()=>s.Jp,popGraphicsState:()=>n.Pq,pushGraphicsState:()=>n.bo,radians:()=>n.uR,radiansToDegrees:()=>n.vi,range:()=>s.w6,rectangle:()=>n.C9,rectanglesAreEqual:()=>s.EO,reduceRotation:()=>n.U6,restoreDashPattern:()=>n.YN,reverseArray:()=>s.GP,rgb:()=>n.B8,rotateAndSkewTextDegreesAndTranslate:()=>n.YK,rotateAndSkewTextRadiansAndTranslate:()=>n.Iz,rotateDegrees:()=>n.Ge,rotateInPlace:()=>n.kc,rotateRadians:()=>n.Ih,rotateRectangle:()=>n.o7,scale:()=>n.bA,setCharacterSpacing:()=>n.xl,setCharacterSqueeze:()=>n.Q$,setDashPattern:()=>n.Rt,setFillingCmykColor:()=>n.O8,setFillingColor:()=>n.l6,setFillingGrayscaleColor:()=>n.GR,setFillingRgbColor:()=>n.mE,setFontAndSize:()=>n.vE,setGraphicsState:()=>n.Ou,setLineCap:()=>n.xC,setLineHeight:()=>n.H7,setLineJoin:()=>n.lf,setLineWidth:()=>n.H_,setStrokingCmykColor:()=>n.sp,setStrokingColor:()=>n.yb,setStrokingGrayscaleColor:()=>n.dA,setStrokingRgbColor:()=>n.XS,setTextMatrix:()=>n.an,setTextRenderingMode:()=>n.zS,setTextRise:()=>n.kW,setWordSpacing:()=>n.nU,showText:()=>n.V_,singleQuote:()=>s.ox,sizeInBytes:()=>s.yJ,skewDegrees:()=>n.Cs,skewRadians:()=>n.VQ,sortedUniq:()=>s.PF,square:()=>n.h6,stroke:()=>n.Go,sum:()=>s.Sm,toCharCode:()=>s.GN,toCodePoint:()=>s.yq,toDegrees:()=>n.Ux,toHexString:()=>s.zv,toHexStringOfMinLength:()=>s.CK,toRadians:()=>n.Yr,toUint8Array:()=>s._f,translate:()=>n.Iu,typedArrayFor:()=>s.b3,utf16Decode:()=>s.aB,utf16Encode:()=>s.nB,utf8Encode:()=>s.Rn,values:()=>s.VO,waitForTick:()=>s.uj});var n=r(214),o=r(878),i=r(934),a={};for(const t in i)["default","BlendMode","ColorTypes","CombedTextLayoutError","EncryptedPDFError","ExceededMaxLengthError","FieldAlreadyExistsError","FieldExistsAsNonTerminalError","FontkitNotRegisteredError","ForeignPageError","ImageAlignment","InvalidFieldNamePartError","InvalidMaxLengthError","LineCapStyle","LineJoinStyle","MissingOnValueCheckError","NoSuchFieldError","PDFButton","PDFCheckBox","PDFDocument","PDFDropdown","PDFEmbeddedPage","PDFField","PDFFont","PDFForm","PDFImage","PDFJavaScript","PDFOptionList","PDFPage","PDFRadioGroup","PDFSignature","PDFTextField","PageSizes","ParseSpeeds","RemovePageFromEmptyDocumentError","RichTextFieldReadError","RotationTypes","StandardFonts","TextAlignment","TextRenderingMode","UnexpectedFieldTypeError","adjustDimsForRotation","appendBezierCurve","appendQuadraticCurve","asNumber","asPDFName","asPDFNumber","beginMarkedContent","beginText","clip","clipEvenOdd","closePath","cmyk","colorToComponents","componentsToColor","concatTransformationMatrix","defaultButtonAppearanceProvider","defaultCheckBoxAppearanceProvider","defaultDropdownAppearanceProvider","defaultOptionListAppearanceProvider","defaultRadioGroupAppearanceProvider","defaultTextFieldAppearanceProvider","degrees","degreesToRadians","drawButton","drawCheckBox","drawCheckMark","drawEllipse","drawEllipsePath","drawImage","drawLine","drawLinesOfText","drawObject","drawOptionList","drawPage","drawRadioButton","drawRectangle","drawSvgPath","drawText","drawTextField","drawTextLines","endMarkedContent","endPath","endText","fill","fillAndStroke","grayscale","layoutCombedText","layoutMultilineText","layoutSinglelineText","lineTo","moveText","moveTo","nextLine","normalizeAppearance","popGraphicsState","pushGraphicsState","radians","radiansToDegrees","rectangle","reduceRotation","restoreDashPattern","rgb","rotateAndSkewTextDegreesAndTranslate","rotateAndSkewTextRadiansAndTranslate","rotateDegrees","rotateInPlace","rotateRadians","rotateRectangle","scale","setCharacterSpacing","setCharacterSqueeze","setDashPattern","setFillingCmykColor","setFillingColor","setFillingGrayscaleColor","setFillingRgbColor","setFontAndSize","setGraphicsState","setLineCap","setLineHeight","setLineJoin","setLineWidth","setStrokingCmykColor","setStrokingColor","setStrokingGrayscaleColor","setStrokingRgbColor","setTextMatrix","setTextRenderingMode","setTextRise","setWordSpacing","showText","skewDegrees","skewRadians","square","stroke","toDegrees","toRadians","translate","AFRelationship","AcroButtonFlags","AcroChoiceFlags","AcroFieldFlags","AcroTextFlags","AnnotationFlags","AppearanceCharacteristics","CharCodes","CorruptPageTreeError","CustomFontEmbedder","CustomFontSubsetEmbedder","Duplex","FileEmbedder","IndexOutOfBoundsError","InvalidAcroFieldValueError","InvalidPDFDateStringError","InvalidTargetIndexError","JpegEmbedder","MethodNotImplementedError","MissingCatalogError","MissingDAEntryError","MissingKeywordError","MissingPDFHeaderError","MissingPageContentsEmbeddingError","MissingTfOperatorError","MultiSelectValueError","NextByteAssertionError","NonFullScreenPageMode","NumberParsingError","PDFAcroButton","PDFAcroCheckBox","PDFAcroChoice","PDFAcroComboBox","PDFAcroField","PDFAcroForm","PDFAcroListBox","PDFAcroNonTerminal","PDFAcroPushButton","PDFAcroRadioButton","PDFAcroSignature","PDFAcroTerminal","PDFAcroText","PDFAnnotation","PDFArray","PDFArrayIsNotRectangleError","PDFBool","PDFCatalog","PDFContentStream","PDFContext","PDFCrossRefSection","PDFCrossRefStream","PDFDict","PDFFlateStream","PDFHeader","PDFHexString","PDFInvalidObject","PDFInvalidObjectParsingError","PDFName","PDFNull","PDFNumber","PDFObject","PDFObjectCopier","PDFObjectParser","PDFObjectParsingError","PDFObjectStream","PDFObjectStreamParser","PDFOperator","PDFOperatorNames","PDFPageEmbedder","PDFPageLeaf","PDFPageTree","PDFParser","PDFParsingError","PDFRawStream","PDFRef","PDFStream","PDFStreamParsingError","PDFStreamWriter","PDFString","PDFTrailer","PDFTrailerDict","PDFWidgetAnnotation","PDFWriter","PDFXRefStreamParser","PageEmbeddingMismatchedContextError","PngEmbedder","PrintScaling","PrivateConstructorError","ReadingDirection","ReparseError","StalledParserError","StandardFontEmbedder","UnbalancedParenthesisError","UnexpectedObjectTypeError","UnrecognizedStreamTypeError","UnsupportedEncodingError","ViewerPreferences","createPDFAcroField","createPDFAcroFields","decodePDFRawStream"].indexOf(t)<0&&(a[t]=()=>i[t]);r.d(e,a);var s=r(955)},934:()=>{},955:(t,e,r)=>{"use strict";r.d(e,{Ct:()=>rt,Rl:()=>N,si:()=>l.si,Qo:()=>g,pO:()=>X,Qk:()=>J,ku:()=>L,DA:()=>I,GT:()=>z,k$:()=>U,m_:()=>Q,MU:()=>K,z7:()=>_,gI:()=>H,zo:()=>Y,Ni:()=>j,KU:()=>l.KU,Yj:()=>v,DV:()=>D,TE:()=>F,Vk:()=>l.Vk,D_:()=>l.D_,Dc:()=>l.Dc,Qs:()=>l.Qs,FV:()=>l.FV,C1:()=>l.C1,_s:()=>W,Bj:()=>V,nN:()=>s,Gw:()=>c,Eo:()=>a,vU:()=>A,hr:()=>l.hr,xV:()=>l.xV,JZ:()=>l.JZ,oL:()=>G,pY:()=>C.pY,O0:()=>C.O0,D1:()=>C.D1,By:()=>l.By,Cl:()=>M,P9:()=>q,yo:()=>C.yo,Z$:()=>d,f7:()=>l.f7,$O:()=>C.$O,M5:()=>f,VX:()=>l.VX,Jm:()=>p,H1:()=>l.H1,D$:()=>P,Sk:()=>l.Sk,sG:()=>l.sG,Ji:()=>et,Jp:()=>x,w6:()=>w,EO:()=>E,GP:()=>m,ox:()=>Z,yJ:()=>T,PF:()=>y,Sm:()=>b,GN:()=>l.GN,yq:()=>l.yq,zv:()=>l.zv,CK:()=>l.CK,_f:()=>S,b3:()=>h,aB:()=>C.aB,nB:()=>C.nB,Rn:()=>C.Rn,VO:()=>R,uj:()=>k});for(var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=new Uint8Array(256),i=0;i<n.length;i++)o[n.charCodeAt(i)]=i;for(var a=function(t){for(var e="",r=t.length,o=0;o<r;o+=3)e+=n[t[o]>>2],e+=n[(3&t[o])<<4|t[o+1]>>4],e+=n[(15&t[o+1])<<2|t[o+2]>>6],e+=n[63&t[o+2]];return r%3==2?e=e.substring(0,e.length-1)+"=":r%3==1&&(e=e.substring(0,e.length-2)+"=="),e},s=function(t){var e,r,n,i,a,s=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var l=new Uint8Array(s);for(e=0;e<u;e+=4)r=o[t.charCodeAt(e)],n=o[t.charCodeAt(e+1)],i=o[t.charCodeAt(e+2)],a=o[t.charCodeAt(e+3)],l[c++]=r<<2|n>>4,l[c++]=(15&n)<<4|i>>2,l[c++]=(3&i)<<6|63&a;return l},u=/^(data)?:?([\w\/\+]+)?;?(charset=[\w-]+|base64)?.*,/i,c=function(t){var e=t.trim(),r=e.substring(0,100).match(u);if(!r)return s(e);var n=r[0],o=e.substring(n.length);return s(o)},l=r(244),d=function(t){return t[t.length-1]},h=function(t){if(t instanceof Uint8Array)return t;for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r},f=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=t.length,n=[],o=0;o<r;o++){var i=t[o];n[o]=i instanceof Uint8Array?i:h(i)}var a=0;for(o=0;o<r;o++)a+=t[o].length;for(var s=new Uint8Array(a),u=0,c=0;c<r;c++)for(var l=n[c],d=0,f=l.length;d<f;d++)s[u++]=l[d];return s},p=function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r].length;var o=new Uint8Array(e),i=0;for(r=0,n=t.length;r<n;r++){var a=t[r];o.set(a,i),i+=a.length}return o},g=function(t){for(var e="",r=0,n=t.length;r<n;r++)e+=(0,l.D_)(t[r]);return e},v=function(t,e){return t.id-e.id},y=function(t,e){for(var r=[],n=0,o=t.length;n<o;n++){var i=t[n],a=t[n-1];0!==n&&e(i)===e(a)||r.push(i)}return r},m=function(t){for(var e=t.length,r=0,n=Math.floor(e/2);r<n;r++){var o=r,i=e-r-1,a=t[r];t[o]=t[i],t[i]=a}return t},b=function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r];return e},w=function(t,e){for(var r=new Array(e-t),n=0,o=r.length;n<o;n++)r[n]=t+n;return r},x=function(t,e){for(var r=new Array(e.length),n=0,o=e.length;n<o;n++)r[n]=t[e[n]];return r},F=function(t){return t instanceof Uint8Array||t instanceof ArrayBuffer||"string"==typeof t},S=function(t){if("string"==typeof t)return c(t);if(t instanceof ArrayBuffer)return new Uint8Array(t);if(t instanceof Uint8Array)return t;throw new TypeError("`input` must be one of `string | ArrayBuffer | Uint8Array`")},k=function(){return new Promise((function(t){setTimeout((function(){return t()}),0)}))},C=r(235),P=function(t){var e,r=String(t);if(Math.abs(t)<1){if(e=parseInt(t.toString().split("e-")[1])){var n=t<0;n&&(t*=-1),t*=Math.pow(10,e-1),r="0."+new Array(e).join("0")+t.toString().substring(2),n&&(r="-"+r)}}else(e=parseInt(t.toString().split("+")[1]))>20&&(e-=20,r=(t/=Math.pow(10,e)).toString()+new Array(e+1).join("0"));return r},T=function(t){return Math.ceil(t.toString(2).length/8)},D=function(t){for(var e=new Uint8Array(T(t)),r=1;r<=e.length;r++)e[r-1]=t>>8*(e.length-r);return e},A=function(t){throw new Error(t)},O=r(162),R=function(t){return Object.keys(t).map((function(e){return t[e]}))},N=R(O.S4),M=function(t){return N.includes(t)},E=function(t,e){return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height},j=function(t){return"`"+t+"`"},Z=function(t){return"'"+t+"'"},B=function(t){var e=typeof t;return"string"===e?Z(t):"undefined"===e?j(t):t},V=function(t,e,r){for(var n=new Array(r.length),o=0,i=r.length;o<i;o++){var a=r[o];n[o]=B(a)}var s=n.join(" or ");return j(e)+" must be one of "+s+", but was actually "+B(t)},I=function(t,e,r){Array.isArray(r)||(r=R(r));for(var n=0,o=r.length;n<o;n++)if(t===r[n])return;throw new TypeError(V(t,e,r))},z=function(t,e,r){Array.isArray(r)||(r=R(r)),I(t,e,r.concat(void 0))},U=function(t,e,r){Array.isArray(r)||(r=R(r));for(var n=0,o=t.length;n<o;n++)I(t[n],e,r)},G=function(t){return null===t?"null":void 0===t?"undefined":"string"==typeof t?"string":isNaN(t)?"NaN":"number"==typeof t?"number":"boolean"==typeof t?"boolean":"symbol"==typeof t?"symbol":"bigint"==typeof t?"bigint":t.constructor&&t.constructor.name?t.constructor.name:t.name?t.name:t.constructor?String(t.constructor):String(t)},q=function(t,e){return"null"===e?null===t:"undefined"===e?void 0===t:"string"===e?"string"==typeof t:"number"===e?"number"==typeof t&&!isNaN(t):"boolean"===e?"boolean"==typeof t:"symbol"===e?"symbol"==typeof t:"bigint"===e?"bigint"==typeof t:e===Date?t instanceof Date:e===Array?t instanceof Array:e===Uint8Array?t instanceof Uint8Array:e===ArrayBuffer?t instanceof ArrayBuffer:e===Function?t instanceof Function:t instanceof e[0]},W=function(t,e,r){for(var n=new Array(r.length),o=0,i=r.length;o<i;o++){var a=r[o];"null"===a&&(n[o]=j("null")),"undefined"===a&&(n[o]=j("undefined")),"string"===a?n[o]=j("string"):"number"===a?n[o]=j("number"):"boolean"===a?n[o]=j("boolean"):"symbol"===a?n[o]=j("symbol"):"bigint"===a?n[o]=j("bigint"):a===Array?n[o]=j("Array"):a===Uint8Array?n[o]=j("Uint8Array"):a===ArrayBuffer?n[o]=j("ArrayBuffer"):n[o]=j(a[1])}var s=n.join(" or ");return j(e)+" must be of type "+s+", but was actually of type "+j(G(t))},L=function(t,e,r){for(var n=0,o=r.length;n<o;n++)if(q(t,r[n]))return;throw new TypeError(W(t,e,r))},K=function(t,e,r){L(t,e,r.concat("undefined"))},X=function(t,e,r){for(var n=0,o=t.length;n<o;n++)L(t[n],e,r)},H=function(t,e,r,n){if(L(t,e,["number"]),L(r,"min",["number"]),L(n,"max",["number"]),n=Math.max(r,n),t<r||t>n)throw new Error(j(e)+" must be at least "+r+" and at most "+n+", but was actually "+t)},Y=function(t,e,r,n){L(t,e,["number","undefined"]),"number"==typeof t&&H(t,e,r,n)},Q=function(t,e,r){if(L(t,e,["number"]),t%r!=0)throw new Error(j(e)+" must be a multiple of "+r+", but was actually "+t)},J=function(t,e){if(!Number.isInteger(t))throw new Error(j(e)+" must be an integer, but was actually "+t)},_=function(t,e){if(![1,0].includes(Math.sign(t)))throw new Error(j(e)+" must be a positive number or 0, but was actually "+t)},$=new Uint16Array(256),tt=0;tt<256;tt++)$[tt]=tt;$[22]=(0,l.GN)(""),$[24]=(0,l.GN)("˘"),$[25]=(0,l.GN)("ˇ"),$[26]=(0,l.GN)("ˆ"),$[27]=(0,l.GN)("˙"),$[28]=(0,l.GN)("˝"),$[29]=(0,l.GN)("˛"),$[30]=(0,l.GN)("˚"),$[31]=(0,l.GN)("˜"),$[127]=(0,l.GN)("�"),$[128]=(0,l.GN)("•"),$[129]=(0,l.GN)("†"),$[130]=(0,l.GN)("‡"),$[131]=(0,l.GN)("…"),$[132]=(0,l.GN)("—"),$[133]=(0,l.GN)("–"),$[134]=(0,l.GN)("ƒ"),$[135]=(0,l.GN)("⁄"),$[136]=(0,l.GN)("‹"),$[137]=(0,l.GN)("›"),$[138]=(0,l.GN)("−"),$[139]=(0,l.GN)("‰"),$[140]=(0,l.GN)("„"),$[141]=(0,l.GN)("“"),$[142]=(0,l.GN)("”"),$[143]=(0,l.GN)("‘"),$[144]=(0,l.GN)("’"),$[145]=(0,l.GN)("‚"),$[146]=(0,l.GN)("™"),$[147]=(0,l.GN)("ﬁ"),$[148]=(0,l.GN)("ﬂ"),$[149]=(0,l.GN)("Ł"),$[150]=(0,l.GN)("Œ"),$[151]=(0,l.GN)("Š"),$[152]=(0,l.GN)("Ÿ"),$[153]=(0,l.GN)("Ž"),$[154]=(0,l.GN)("ı"),$[155]=(0,l.GN)("ł"),$[156]=(0,l.GN)("œ"),$[157]=(0,l.GN)("š"),$[158]=(0,l.GN)("ž"),$[159]=(0,l.GN)("�"),$[160]=(0,l.GN)("€"),$[173]=(0,l.GN)("�");var et=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=$[t[r]];return String.fromCodePoint.apply(String,e)};const rt=function(){function t(t){this.populate=t,this.value=void 0}return t.prototype.getValue=function(){return this.value},t.prototype.access=function(){return this.value||(this.value=this.populate()),this.value},t.prototype.invalidate=function(){this.value=void 0},t.populatedBy=function(e){return new t(e)},t}()},244:(t,e,r)=>{"use strict";r.d(e,{By:()=>v,C1:()=>l,CK:()=>i,D_:()=>s,Dc:()=>u,FV:()=>f,GN:()=>n,H1:()=>g,JZ:()=>k,KU:()=>x,Qs:()=>w,Sk:()=>c,VX:()=>m,Vk:()=>b,f7:()=>y,hr:()=>h,sG:()=>S,si:()=>d,xV:()=>p,yq:()=>o,zv:()=>a});var n=function(t){return t.charCodeAt(0)},o=function(t){return t.codePointAt(0)},i=function(t,e){return c(t.toString(16),e,"0").toUpperCase()},a=function(t){return i(t,2)},s=function(t){return String.fromCharCode(t)},u=function(t){return s(parseInt(t,16))},c=function(t,e,r){for(var n="",o=0,i=e-t.length;o<i;o++)n+=r;return n+t},l=function(t,e,r){for(var n=t.length,o=0;o<n;o++)e[r++]=t.charCodeAt(o);return n},d=function(t,e){return void 0===e&&(e=4),t+"-"+Math.floor(Math.random()*Math.pow(10,e))},h=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},f=function(t){return t.replace(/\t|\u0085|\u2028|\u2029/g,"    ").replace(/[\b\v]/g,"")},p=["\\n","\\f","\\r","\\u000B"],g=["\n","\f","\r","\v"],v=function(t){return/^[\n\f\r\u000B]$/.test(t)},y=function(t){return t.split(/[\n\f\r\u000B]/)},m=function(t){return t.replace(/[\n\f\r\u000B]/g," ")},b=function(t,e){var r,n=t.charCodeAt(e),o=e+1,i=1;return n>=55296&&n<=56319&&t.length>o&&(r=t.charCodeAt(o))>=56320&&r<=57343&&(i=2),[t.slice(e,e+i),i]},w=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=b(t,r),i=o[0],a=o[1];e.push(i),r+=a}return e},x=function(t,e,r,n){for(var o=function(t){for(var e=p.join("|"),r=["$"],n=0,o=t.length;n<o;n++){var i=t[n];if(v(i))throw new TypeError("`wordBreak` must not include "+e);r.push(""===i?".":h(i))}var a=r.join("|");return new RegExp("("+e+")|((.*?)("+a+"))","gm")}(e),i=f(t).match(o),a="",s=0,u=[],c=function(){""!==a&&u.push(a),a="",s=0},l=0,d=i.length;l<d;l++){var g=i[l];if(v(g))c();else{var y=n(g);s+y>r&&c(),a+=g,s+=y}}return c(),u},F=/^D:(\d\d\d\d)(\d\d)?(\d\d)?(\d\d)?(\d\d)?(\d\d)?([+\-Z])?(\d\d)?'?(\d\d)?'?$/,S=function(t){var e=t.match(F);if(e){var r=e[1],n=e[2],o=void 0===n?"01":n,i=e[3],a=void 0===i?"01":i,s=e[4],u=void 0===s?"00":s,c=e[5],l=void 0===c?"00":c,d=e[6],h=void 0===d?"00":d,f=e[7],p=void 0===f?"Z":f,g=e[8],v=void 0===g?"00":g,y=e[9];return new Date(r+"-"+o+"-"+a+"T"+u+":"+l+":"+h+("Z"===p?"Z":""+p+v+":"+(void 0===y?"00":y)))}},k=function(t,e){for(var r,n,o=0;o<t.length;){var i=t.substring(o).match(e);if(!i)return{match:n,pos:o};n=i,o+=(null!==(r=i.index)&&void 0!==r?r:0)+i[0].length}return{match:n,pos:o}}},235:(t,e,r)=>{"use strict";r.d(e,{$O:()=>l,D1:()=>c,O0:()=>b,Rn:()=>i,aB:()=>h,nB:()=>a,pY:()=>u,yo:()=>s});var n,o=r(244),i=function(t,e){void 0===e&&(e=!0);var r=[];e&&r.push(239,187,191);for(var n=0,i=t.length;n<i;){var a=t.codePointAt(n);if(a<128){var s=127&a;r.push(s),n+=1}else if(a<2048){s=a>>6&31|192;var u=63&a|128;r.push(s,u),n+=1}else if(a<65536){s=a>>12&15|224,u=a>>6&63|128;var c=63&a|128;r.push(s,u,c),n+=1}else{if(!(a<1114112))throw new Error("Invalid code point: 0x"+(0,o.zv)(a));s=a>>18&7|240,u=a>>12&63|128,c=a>>6&63|128;var l=a>>0&63|128;r.push(s,u,c,l),n+=2}}return new Uint8Array(r)},a=function(t,e){void 0===e&&(e=!0);var r=[];e&&r.push(65279);for(var n=0,i=t.length;n<i;){var a=t.codePointAt(n);if(a<65536)r.push(a),n+=1;else{if(!(a<1114112))throw new Error("Invalid code point: 0x"+(0,o.zv)(a));r.push(c(a),l(a)),n+=2}}return new Uint16Array(r)},s=function(t){return t>=0&&t<=65535},u=function(t){return t>=65536&&t<=1114111},c=function(t){return Math.floor((t-65536)/1024)+55296},l=function(t){return(t-65536)%1024+56320};!function(t){t.BigEndian="BigEndian",t.LittleEndian="LittleEndian"}(n||(n={}));var d="�".codePointAt(0),h=function(t,e){if(void 0===e&&(e=!0),t.length<=1)return String.fromCodePoint(d);for(var r=e?v(t):n.BigEndian,o=e?2:0,i=[];t.length-o>=2;){var a=g(t[o++],t[o++],r);if(f(a))if(t.length-o<2)i.push(d);else{var s=g(t[o++],t[o++],r);p(s)?i.push(a,s):i.push(d)}else p(a)?(o+=2,i.push(d)):i.push(a)}return o<t.length&&i.push(d),String.fromCodePoint.apply(String,i)},f=function(t){return t>=55296&&t<=56319},p=function(t){return t>=56320&&t<=57343},g=function(t,e,r){if(r===n.LittleEndian)return e<<8|t;if(r===n.BigEndian)return t<<8|e;throw new Error("Invalid byteOrder: "+r)},v=function(t){return y(t)?n.BigEndian:m(t)?n.LittleEndian:n.BigEndian},y=function(t){return 254===t[0]&&255===t[1]},m=function(t){return 255===t[0]&&254===t[1]},b=function(t){return y(t)||m(t)}},346:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Cell=void 0;class r{constructor(t=null,e=null,r=null,n=0){this.row=t,this.column=e,this.box=null===t||null===e?null:3*Math.floor(this.row/3)+Math.floor(this.column/3),this.value=n,this.possibleValues=r}getRow(){return this.row}getColumn(){return this.column}getBox(){return this.box}getPossibleValues(){return this.possibleValues}getValue(){return this.value}setValue(t){this.value=t}setPossibleValues(t){this.possibleValues=t}clone(){return new r(this.row,this.column,[...this.possibleValues],this.value)}copy(){const t=new r;return t.row=this.row,t.column=this.column,t.box=this.box,t.value=this.value,t.possibleValues=[...this.possibleValues],t}removePossibleValue(t){const e=this.possibleValues.indexOf(t);e>-1&&this.possibleValues.splice(e,1)}isEmpty(){return 0===this.value||null===this.value}equals(t){return this.row===t.getRow()&&this.column===t.getColumn()&&this.box===t.getBox()&&this.value===t.getValue()&&function(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}(this.possibleValues,t.getPossibleValues())}}e.Cell=r},393:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grid=void 0;const n=r(346);class o{constructor(t,e){if(this.cells=[],e){const t=e;for(const e of t){const t=e.copy();this.cells.push(t)}}else for(let e=0;e<9;e++)for(let r=0;r<9;r++){const o=t[e][r],i=new n.Cell(e,r,0!==o?[]:[1,2,3,4,5,6,7,8,9],0!==o?o:0);this.cells.push(i)}}copy(){const t=this.toNumberArray();return new o(t,this.cells)}equals(t){const e=this.getCells(),r=t.getCells();for(let t=0;t<e.length;t++)if(!e[t].equals(r[t]))return!1;return!0}getCells(){return this.cells}getCell(t,e){for(let r=0;r<9;r++)for(let n=0;n<9;n++)if(r===t&&n===e)return this.cells[9*r+n]}toNumberArray(){const t=[];for(let e=0;e<9;e++){const r=[];for(let t=0;t<9;t++){const n=this.getCell(e,t);r.push(n.getValue())}t.push(r)}return t}isFull(){return this.cells.every((t=>0!==t.getValue()))}toString(){let t="";for(let e=0;e<9;e++){e%3==0&&0!==e&&(t+="+---+---+---+\n");for(let r=0;r<9;r++){r%3==0&&0!==r&&(t+="|");const n=this.getCell(e,r).getValue();t+=0===n?" ":n.toString()}t+="\n"}return t}}e.Grid=o},12:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getCurrentGrid=void 0,e.getCurrentGrid=()=>{let t=[];for(let e=0;e<9;e++)t[e]=new Array(9).fill(null);const e=document.querySelectorAll(".cell");if(null==e)return null;for(let r=0;r<=8;r++)for(let n=0;n<=8;n++){const o=e[9*r+n];if(!(o instanceof HTMLElement))return null;if(!o)return null;const i=o.innerText;t[r][n]=Number(i)}return t}},945:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createBoard=void 0;const n=r(410);e.createBoard=t=>{const e=document.getElementById("grid");null!=e&&t.forEach(((t,r)=>{const n=document.createElement("div");null!==n&&(n.classList.add("row"),n.setAttribute("row",`${r}`),2!==r&&5!==r||n.classList.add("underline"),e.append(n),t.forEach(((t,e)=>{const i=document.createElement("div");null!==i&&(i.setAttribute("row",`${r}`),i.setAttribute("column",`${e}`),i.classList.add("cell"),2!=e&&5!=e||i.classList.add("rightline"),null===t||0===t?(i.setAttribute("type","button"),i.addEventListener("click",o)):i.innerText=t.toString(),n.append(i))})))}))};const o=t=>{const e=t.target;if(!(e instanceof HTMLElement))return;const r=e.getAttribute("row"),o=e.getAttribute("column"),i=document.querySelector(`[row="${r}"][column="${o}"]`);if(!(i instanceof HTMLElement))return;let a;do{const t=prompt("Enter a number between 1 and 9:");if(null===t)return;a=Number.parseInt(t)}while(isNaN(Number(a)));if(!isNaN(Number(a))&&null!==i){let t;t=""===i.innerHTML?0:Number.parseInt(i.innerHTML),i.innerText=a.toString(),n.undoStack.push([Number.parseInt(r),Number.parseInt(o),t])}}},314:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.easyGrid2=e.easyGrid1=e.numOfEasyGrids=void 0,e.numOfEasyGrids=2,e.easyGrid1=[[8,2,7,3,0,0,0,4,9],[6,4,9,0,5,0,8,3,0],[0,0,0,4,8,9,6,0,0],[0,0,0,6,0,1,2,0,0],[2,1,0,0,0,7,0,0,6],[4,9,0,0,0,0,1,5,7],[1,8,0,0,2,4,7,0,0],[0,0,0,0,7,3,0,0,0],[3,0,4,1,0,0,0,0,0]],e.easyGrid2=[[4,9,0,8,0,0,5,1,0],[0,1,8,0,5,0,0,0,6],[0,0,0,0,6,9,0,0,4],[0,0,5,0,0,0,6,0,0],[0,7,4,5,0,6,2,9,0],[9,0,0,3,0,0,1,4,5],[5,0,0,9,4,0,0,6,0],[0,0,9,2,7,5,0,0,0],[8,2,7,0,3,1,0,0,0]]},380:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hardGrid2=e.hardGrid1=e.numOfHardrids=void 0,e.numOfHardrids=2,e.hardGrid1=[[0,8,9,3,7,0,0,4,0],[3,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,2,0,0],[0,0,0,0,0,8,0,0,4],[0,7,6,0,9,0,0,8,0],[0,5,0,0,0,0,0,0,0],[5,0,0,0,0,0,0,6,0],[4,0,0,0,3,0,0,0,0],[0,6,3,7,0,0,0,0,1]],e.hardGrid2=[[0,0,8,1,0,0,5,0,0],[7,0,0,9,0,0,0,0,0],[0,0,4,0,5,7,0,6,0],[2,0,0,0,4,5,8,0,0],[0,8,0,0,0,0,0,9,0],[0,0,0,0,1,0,0,0,0],[0,0,0,7,0,0,0,0,0],[4,0,0,0,8,2,9,0,0],[0,0,6,0,0,0,0,0,3]]},427:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mediumGrid2=e.mediumGrid1=e.numOfMediumGrids=void 0,e.numOfMediumGrids=2,e.mediumGrid1=[[9,0,0,0,0,4,0,0,0],[0,0,5,0,0,0,0,6,0],[0,7,0,0,1,2,0,0,5],[0,0,0,8,0,0,0,0,0],[3,0,0,0,0,0,9,0,0],[0,2,0,0,7,5,0,0,6],[2,0,0,0,8,1,0,3,0],[0,0,0,4,0,0,0,0,1],[0,8,0,6,0,0,0,0,0]],e.mediumGrid2=[[5,0,0,2,0,0,0,4,0],[6,0,0,0,3,0,0,0,2],[0,0,0,0,0,0,3,0,1],[0,8,0,0,4,0,9,1,0],[0,1,0,3,0,0,0,0,0],[0,9,0,7,0,0,0,6,0],[0,6,0,0,0,8,0,2,0],[7,0,0,4,0,0,0,9,0],[0,0,0,0,0,0,0,0,0]]},610:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getRandomHardGrid=e.getRandomMediumGrid=e.getRandomEasyGrid=void 0;const n=r(314),o=r(380),i=r(427);e.getRandomEasyGrid=()=>{const t=Math.floor(100*Math.random()%n.numOfEasyGrids)+1;return n[`easyGrid${t}`]},e.getRandomMediumGrid=()=>{const t=Math.floor(100*Math.random()%i.numOfMediumGrids)+1;return i[`mediumGrid${t}`]},e.getRandomHardGrid=()=>{const t=Math.floor(100*Math.random()%o.numOfHardrids)+1;return o[`hardGrid${t}`]}},38:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.checkRowsAndColumns=e.checkGrid=void 0;const n=r(12);e.checkGrid=()=>{let t;return null==(0,n.getCurrentGrid)()?(t="something went wrong with fetching the grid :S",alert(t),t):!0!==o()?(t="the grid is not fully filled :S",alert(t),t):!0!==i()&&!0!==a()?(t="the grid is incorrect :S",alert(t),t):(t="the grid is correct :D. Well done!",alert(t),t)};const o=()=>{const t=(0,n.getCurrentGrid)();for(let e=0;e<9;e++)for(let r=0;r<9;r++)if(null==t[e][r])return!1;return!0},i=()=>{const t=(0,n.getCurrentGrid)();let e=new Array(9).fill(0),r=new Array(9).fill(0);for(let n=0;n<9;n++){e.fill(0),r.fill(0);for(let o=0;o<9;o++){const i=t[n][o],a=t[o][n];if(e[i-1]++,r[a-1]++,1!=e[i-1])return!1;if(1!=r[a-1])return!1}}return!0};e.checkRowsAndColumns=i;const a=()=>1==s(0,2,0,2)&&1==s(0,2,3,5)&&1==s(0,2,6,8)&&1==s(3,5,0,2)&&1==s(3,5,6,8)&&1==s(3,5,0,2)&&1==s(5,8,0,2)&&1==s(5,8,3,5)&&1==s(5,8,5,8),s=(t,e,r,o)=>{const i=(0,n.getCurrentGrid)();let a=new Array(9).fill(0);for(let n=t;n<=e;n++)for(let t=r;t<=o;t++){const e=i[n][t];if(a[e-1]++,a[e-1]>1)return!1}return!0}},296:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.deleteBoard=e.clearBoard=void 0;const n=r(945),o=()=>{const t=document.getElementById("grid");if(null!==t)for(;t.lastChild;)t.removeChild(t.lastChild)};e.deleteBoard=o,e.clearBoard=()=>{o(),(0,n.createBoard)((()=>{let t=[];for(let e=0;e<9;e++)t[e]=new Array(9).fill(null);return t})())}},600:function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{u(n.next(t))}catch(t){i(t)}}function s(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}u((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.generateSudokuPDF=void 0;const o=r(55),i=r(12);e.generateSudokuPDF=()=>n(void 0,void 0,void 0,(function*(){const t=(0,i.getCurrentGrid)();if(!t)return console.log("Failed to retrieve grid data from the DOM"),null;const e=yield o.PDFDocument.create(),r=e.addPage(o.PageSizes.A4),n=yield e.embedFont("Helvetica"),a=r.getHeight()-100;for(let t=0;t<=9;t++){const e=50+40*t,n=a,i=a-360;r.drawLine({start:{x:e,y:n},end:{x:e,y:i},thickness:1,color:(0,o.rgb)(0,0,0)}),t%3==0&&r.drawLine({start:{x:e,y:n},end:{x:e,y:i},thickness:3,color:(0,o.rgb)(0,0,0)})}for(let t=0;t<=9;t++){const e=a-40*t,n=50,i=410;r.drawLine({start:{x:n,y:e},end:{x:i,y:e},thickness:1,color:(0,o.rgb)(0,0,0)}),t%3==0&&r.drawLine({start:{x:n,y:e},end:{x:i,y:e},thickness:3,color:(0,o.rgb)(0,0,0)})}for(let e=0;e<9;e++)for(let o=0;o<9;o++){const i=t[e][o],s=50+40*o+20-8,u=a-40*e-20-12;let c;c=0===i?"":i.toString(),r.drawText(c,{x:s,y:u,font:n,size:24})}const s=yield e.save(),u=new Blob([s],{type:"application/pdf"}),c=document.createElement("a");c.href=URL.createObjectURL(u),c.download="sudoku.pdf",c.click(),URL.revokeObjectURL(c.href)}))},10:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.solveGrid=void 0;const n=r(12),o=r(296),i=r(945),a=r(393),s=r(828);e.solveGrid=()=>{console.log("the solve button was pressed.");const t=(0,n.getCurrentGrid)(),e=new a.Grid(t),r=(0,s.solveSudoku)(e).toNumberArray();(0,o.deleteBoard)(),(0,i.createBoard)(r)}},410:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.undoStep=e.undoStack=void 0;class r{constructor(){this.storage=[]}size(){return this.storage.length}}const n=new class extends r{constructor(t=1/0){super(),this.capacity=t}push(t){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(t)}pop(){return this.storage.pop()}peek(){return this.storage[this.size()-1]}isFull(){return this.capacity===this.size()}};e.undoStack=n,e.undoStep=()=>{if(null===n.peek()||void 0===n.peek()){const t="undoStack is null or undefined";return alert(t),t}if(0===n.size()){const t="the undoStack is not yet built";return alert(t),t}const t=n.pop();if(3!==t.length){const t="something went wrong with fetching an undoStack-element";return alert(t),t}const e=document.querySelector(`[row="${t[0]}"][column="${t[1]}"]`);return console.log(`undid row ${t[0]+1} column ${t[1]+1} from ${e.innerHTML} to ${t[2]}`),0===t[2]?e.innerHTML="":e.innerHTML=t[2].toString(),"good work mate"}},288:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applyHiddenSingle=void 0,e.applyHiddenSingle=t=>{for(let e=0;e<9;e++)for(let r=0;r<9;r++){const n=t.getCell(e,r);if(!n.isEmpty())continue;let o=!1,i=[];for(let n=0;n<9;n++){const o=t.getCell(e,n);n!==r&&o.isEmpty()&&o.getPossibleValues().forEach((t=>{i.includes(t)||i.push(t)}))}if(n.getPossibleValues().forEach((t=>{i.includes(t)||(n.setValue(t),n.setPossibleValues([]),o=!0)})),o)return t;o=!1;let a=[];for(let n=0;n<9;n++){const o=t.getCell(n,r);n!==e&&o.isEmpty()&&o.getPossibleValues().forEach((t=>{a.includes(t)||a.push(t)}))}if(n.getPossibleValues().forEach((t=>{a.includes(t)||(n.setValue(t),n.setPossibleValues([]),o=!0)})),o)return t;const s=3*Math.floor(e/3),u=3*Math.floor(r/3);let c=[];for(let n=s;n<s+3;n++)for(let o=u;o<u+3;o++){const i=t.getCell(n,o);n===e&&o===r||!i.isEmpty()||i.getPossibleValues().forEach((t=>{c.includes(t)||c.push(t)}))}if(n.getPossibleValues().forEach((t=>{c.includes(t)||(n.setValue(t),n.setPossibleValues([]),o=!0)})),o)return t}return t}},194:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applyNakedSingle=void 0,e.applyNakedSingle=t=>(t.getCells().forEach((function(t){1===t.getPossibleValues().length&&(t.setValue(t.getPossibleValues()[0]),t.setPossibleValues([]))})),t)},677:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applyHiddenPair=void 0,e.applyHiddenPair=t=>{for(let e=0;e<9;e++)for(let r=0;r<9;r++){const n=t.getCell(e,r);if(!n.isEmpty())continue;if(2!==n.getPossibleValues.length)continue;for(let o=0;o<9;o++){const i=t.getCell(e,o);if(o!==r&&2===i.getPossibleValues().length&&n.getPossibleValues()===i.getPossibleValues())for(let r=0;r<9;r++){const o=t.getCell(e,r);o.equals(i)||o.equals(n)||(o.getPossibleValues().includes(n.getPossibleValues()[0])&&o.removePossibleValue(n.getPossibleValues()[0]),o.getPossibleValues().includes(n.getPossibleValues()[1])&&o.removePossibleValue(n.getPossibleValues()[1]))}}for(let o=0;o<9;o++){const i=t.getCell(o,r);if(o!==e&&2===i.getPossibleValues().length&&n.getPossibleValues()===i.getPossibleValues())for(let e=0;e<9;e++){const o=t.getCell(e,r);o.equals(i)||o.equals(n)||(o.getPossibleValues().includes(n.getPossibleValues()[0])&&o.removePossibleValue(n.getPossibleValues()[0]),o.getPossibleValues().includes(n.getPossibleValues()[1])&&o.removePossibleValue(n.getPossibleValues()[1]))}}const o=3*Math.floor(e/3),i=3*Math.floor(r/3);for(let a=o;a<o+3;a++)for(let o=i;o<i+3;o++){const i=t.getCell(a,o);if((a!==e||o!==r)&&2===i.getPossibleValues().length&&n.getPossibleValues()===i.getPossibleValues()){const o=3*Math.floor(e/3),a=3*Math.floor(r/3);for(let e=o;e<o+3;e++)for(let e=a;e<a+3;e++){const e=t.getCell(o,a);e.equals(i)||e.equals(n)||(e.getPossibleValues().includes(n.getPossibleValues()[0])&&e.removePossibleValue(n.getPossibleValues()[0]),e.getPossibleValues().includes(n.getPossibleValues()[1])&&e.removePossibleValue(n.getPossibleValues()[1]))}}}}return t}},517:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applySudokuRules=void 0,e.applySudokuRules=t=>(t.getCells().forEach((e=>{if(0!==e.getValue())return;const r=e.getRow(),n=e.getColumn(),o=e.getBox(),i=e.getPossibleValues();for(let o=0;o<9;o++){const a=t.getCell(r,o).getValue();o!==n&&null!==a&&i.includes(a)&&e.removePossibleValue(a)}for(let o=0;o<9;o++){const a=t.getCell(o,n).getValue();o!==r&&null!==a&&i.includes(a)&&e.removePossibleValue(a)}const a=3*Math.floor(o/3),s=o%3*3;for(let o=a;o<a+3;o++)for(let a=s;a<s+3;a++){const s=t.getCell(o,a).getValue();o===r&&a===n||null===s||!i.includes(s)||e.removePossibleValue(s)}e.setPossibleValues(i)})),t)},828:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.solveSudoku=void 0;const n=r(288),o=r(517),i=r(194),a=r(677);e.solveSudoku=t=>{console.log("inside 'solveSudoku' method.");let e=!1,r=0;do{let s;e=!1;do{e=!1,s=t.copy(),t=(0,o.applySudokuRules)(t),console.log(!t.equals(s)),t.equals(s)||(e=!0),s=t.copy(),(t=(0,i.applyNakedSingle)(t)).equals(s)||(e=!0)}while(!t.isFull()&&e);s=t.copy(),(t=(0,n.applyHiddenSingle)(t)).equals(s)||(e=!0),s=t.copy(),!1===e&&((t=(0,a.applyHiddenPair)(t)).equals(s)||(e=!0),s=t.copy()),r++}while(!t.isFull()&&e&&r<=10);return t}},655:(t,e,r)=>{"use strict";r.d(e,{Jh:()=>u,ZT:()=>o,_T:()=>a,mG:()=>s,pi:()=>i,pr:()=>c});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function o(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var i=function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},i.apply(this,arguments)};function a(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(t);o<n.length;o++)e.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(t,n[o])&&(r[n[o]]=t[n[o]])}return r}function s(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{u(n.next(t))}catch(t){i(t)}}function s(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}u((n=n.apply(t,e||[])).next())}))}function u(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function c(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,s=i.length;a<s;a++,o++)n[o]=i[a];return n}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";const t=r(38),e=r(945),n=r(296),o=r(410),i=r(610),a=r(10),s=r(600),u=document.getElementById("clear");null!==u?u.addEventListener("click",n.clearBoard):alert("we've got a problem with the check button :/");const c=document.getElementById("check");null!==c?c.addEventListener("click",t.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(t){"z"===t.key&&!0===t.ctrlKey&&(t.preventDefault(),(0,o.undoStep)())}));const l=document.getElementById("undo");null!==l?l.addEventListener("click",o.undoStep):alert("we've got a problem with the undo button");const d=document.getElementById("solve");null!==d||void 0!==d?d.addEventListener("click",a.solveGrid):alert("we've got a problem with the undo button");const h=document.getElementById("download");null!==h?h.addEventListener("click",s.generateSudokuPDF):alert("we've got a problem with downloading the grid"),(0,e.createBoard)(i.getRandomMediumGrid())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUMvRCxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQy9ELE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDL0QsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMs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RUFBRyxHQUN6QixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN6QixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN6QixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN6QixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQWtCekIsRUFBQUMsVUFmYyxDQUNkLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3pCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLHFJQ0l6QixFQUFBQyxpQkEzQnFCLEVBNEJyQixFQUFBQyxZQTFCZ0IsQ0FDaEIsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekIsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekIsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekIsQ0FBQyxFQUFHLEVBQUUs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RyxFQUFpQnJKLFNBQVNPLGVBQWUsWUFDekIsT0FBbkI4SSxFQUNDQSxFQUFleEksaUJBQWlCLFFBQVMsRUFBQWdELG1CQUN0Q3BCLE1BQU0sa0RBT2IsSUFBQXBDLGFBQVlpSixFQUFXbEgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL2VzL3V0aWxzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvZXMvRm9udC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL2VzL0VuY29kaW5nLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL2RlZmxhdGUuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi9pbmZsYXRlLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvc3RyaW5ncy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZ3poZWFkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmZhc3QuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmxhdGUuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvdHJlZXMuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9yb3RhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9vYmplY3RzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvb3BlcmF0b3JzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvY29sb3JzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvdGV4dC9hbGlnbm1lbnQuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9zdmdQYXRoLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvb3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL3RleHQvbGF5b3V0LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvZm9ybS9hcHBlYXJhbmNlcy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL1BERkVtYmVkZGVkUGFnZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL1BERkZvbnQuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9QREZJbWFnZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2ltYWdlL2FsaWdubWVudC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Zvcm0vUERGRmllbGQuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9mb3JtL1BERkNoZWNrQm94LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvZm9ybS9QREZEcm9wZG93bi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Zvcm0vUERGT3B0aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Zvcm0vUERGUmFkaW9Hcm91cC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Zvcm0vUERGU2lnbmF0dXJlLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvZm9ybS9QREZUZXh0RmllbGQuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9TdGFuZGFyZEZvbnRzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvZm9ybS9QREZGb3JtLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvUERGRG9jdW1lbnRPcHRpb25zLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvc2l6ZXMuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9QREZFbWJlZGRlZEZpbGUuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9QREZKYXZhU2NyaXB0LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2VtYmVkZGVycy9KYXZhU2NyaXB0RW1iZWRkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2FwaS9QREZEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL1BERlBhZ2VPcHRpb25zLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9hcGkvUERGUGFnZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvYXBpL2Zvcm0vUERGQnV0dG9uLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2VtYmVkZGVycy9GaWxlRW1iZWRkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvZXJyb3JzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2RvY3VtZW50L1BERkhlYWRlci5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9vYmplY3RzL1BERk51bWJlci5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9vYmplY3RzL1BERkFycmF5LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29iamVjdHMvUERGQm9vbC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zeW50YXgvRGVsaW1pdGVycy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zeW50YXgvV2hpdGVzcGFjZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zeW50YXgvSXJyZWd1bGFyLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29iamVjdHMvUERGTmFtZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9vYmplY3RzL1BERk51bGwuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvb2JqZWN0cy9QREZEaWN0LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29iamVjdHMvUERGU3RyZWFtLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29iamVjdHMvUERGUmF3U3RyZWFtLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29iamVjdHMvUERGUmVmLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL29wZXJhdG9ycy9QREZPcGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9vcGVyYXRvcnMvUERGT3BlcmF0b3JOYW1lcy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zdHJ1Y3R1cmVzL1BERkZsYXRlU3RyZWFtLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL3N0cnVjdHVyZXMvUERGQ29udGVudFN0cmVhbS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvcm5nLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL1BERkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RydWN0dXJlcy9QREZQYWdlTGVhZi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9QREZPYmplY3RDb3BpZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvZG9jdW1lbnQvUERGQ3Jvc3NSZWZTZWN0aW9uLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2RvY3VtZW50L1BERlRyYWlsZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvZG9jdW1lbnQvUERGVHJhaWxlckRpY3QuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RydWN0dXJlcy9QREZPYmplY3RTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvd3JpdGVycy9QREZXcml0ZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvb2JqZWN0cy9QREZJbnZhbGlkT2JqZWN0LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL3N0cnVjdHVyZXMvUERGQ3Jvc3NSZWZTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvd3JpdGVycy9QREZTdHJlYW1Xcml0ZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvZW1iZWRkZXJzL1N0YW5kYXJkRm9udEVtYmVkZGVyLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2VtYmVkZGVycy9DTWFwLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2VtYmVkZGVycy9DdXN0b21Gb250RW1iZWRkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvZW1iZWRkZXJzL0ZvbnRGbGFncy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9lbWJlZGRlcnMvQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2VtYmVkZGVycy9KcGVnRW1iZWRkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL1VQTkcuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL3V0aWxzL3BuZy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9lbWJlZGRlcnMvUG5nRW1iZWRkZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RyZWFtcy9TdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RyZWFtcy9EZWNvZGVTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RyZWFtcy9Bc2NpaTg1U3RyZWFtLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL3N0cmVhbXMvQXNjaWlIZXhTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RyZWFtcy9GbGF0ZVN0cmVhbS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zdHJlYW1zL0xaV1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zdHJlYW1zL1J1bkxlbmd0aFN0cmVhbS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9zdHJlYW1zL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9lbWJlZGRlcnMvUERGUGFnZUVtYmVkZGVyLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2ludGVyYWN0aXZlL1ZpZXdlclByZWZlcmVuY2VzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fjcm9mb3JtL1BERkFjcm9GaWVsZC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hbm5vdGF0aW9uL0JvcmRlclN0eWxlLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fubm90YXRpb24vUERGQW5ub3RhdGlvbi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hbm5vdGF0aW9uL0FwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvYW5ub3RhdGlvbi9QREZXaWRnZXRBbm5vdGF0aW9uLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fjcm9mb3JtL1BERkFjcm9UZXJtaW5hbC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvQnV0dG9uLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fjcm9mb3JtL1BERkFjcm9DaGVja0JveC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9mbGFncy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvQ2hvaWNlLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fjcm9mb3JtL1BERkFjcm9Db21ib0JveC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvTm9uVGVybWluYWwuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvYWNyb2Zvcm0vUERGQWNyb1NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvVGV4dC5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvUHVzaEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9hY3JvZm9ybS9QREZBY3JvUmFkaW9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvYWNyb2Zvcm0vUERGQWNyb0xpc3RCb3guanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvYWNyb2Zvcm0vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvYWNyb2Zvcm0vUERGQWNyb0Zvcm0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3RydWN0dXJlcy9QREZDYXRhbG9nLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL3N0cnVjdHVyZXMvUERGUGFnZVRyZWUuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3ludGF4L051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvcGFyc2VyL0Jhc2VQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvcGFyc2VyL0J5dGVTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3ludGF4L0tleXdvcmRzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL3BhcnNlci9QREZPYmplY3RQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvcGFyc2VyL1BERk9iamVjdFN0cmVhbVBhcnNlci5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9wYXJzZXIvUERGWFJlZlN0cmVhbVBhcnNlci5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvY29yZS9wYXJzZXIvUERGUGFyc2VyLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy9jb3JlL2Fubm90YXRpb24vZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvb2JqZWN0cy9QREZIZXhTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvb2JqZWN0cy9QREZPYmplY3QuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvb2JqZWN0cy9QREZTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL25vZGVfbW9kdWxlcy9wZGYtbGliL2VzL2NvcmUvc3ludGF4L0NoYXJDb2Rlcy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvYmFzZTY0LmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy91dGlscy9wZGZEb2NFbmNvZGluZy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvYXJyYXlzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy91dGlscy9hc3luYy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvbnVtYmVycy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvZXJyb3JzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy91dGlscy9vYmplY3RzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy91dGlscy92YWxpZGF0b3JzLmpzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9ub2RlX21vZHVsZXMvcGRmLWxpYi9lcy91dGlscy9DYWNoZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvc3RyaW5ncy5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3BkZi1saWIvZXMvdXRpbHMvdW5pY29kZS5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL0VudGl0aWVzL0NlbGwudHMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL3NyYy9FbnRpdGllcy9HcmlkLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvR2V0dGVyL2dldEdyaWQudHMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL3NyYy9NYW5hZ2luZ0dyaWQvY3JlYXRlLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvUmVwb3NpdG9yeS9FYXN5R3JpZHMvZ3JpZHNFYXN5LnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvUmVwb3NpdG9yeS9IYXJkR3JpZHMvZ3JpZHNIYXJkLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvUmVwb3NpdG9yeS9NZWRpdW1Hcmlkcy9ncmlkc01lZGl1bS50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL1JlcG9zaXRvcnkvZ2V0dGluZ1JhbmRvbUdyaWQudHMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL3NyYy9idXR0b24vY2hlY2tpbmdHcmlkLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvYnV0dG9uL2NsZWFyLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvYnV0dG9uL2Rvd25sb2FkR3JpZC50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL2J1dHRvbi9zb2x2ZS50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL2J1dHRvbi91bmRvLnRzIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svLi9zcmMvc29sdmVHcmlkL2ZpbmROdW1iZXJzL2hpZGRlblNpbmdsZS50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL3NvbHZlR3JpZC9maW5kTnVtYmVycy9uYWtlZFNpbmdsZS50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL3NvbHZlR3JpZC9yZWR1Y2VQb3NzaWJpbGl0aWVzL2hpZGRlblBhaXIudHMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay8uL3NyYy9zb2x2ZUdyaWQvcmVkdWNlUG9zc2liaWxpdGllcy9zdWRva3VSdWxlcy50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL3NvbHZlR3JpZC9zb2x2ZVN1ZG9rdS50cyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3Vkb2t1d2VicGFjay93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3N1ZG9rdXdlYnBhY2svd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9zdWRva3V3ZWJwYWNrLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUaGUgYGNoYXJzYCwgYGxvb2t1cGAsIGFuZCBgZGVjb2RlRnJvbUJhc2U2NGAgbWVtYmVycyBvZiB0aGlzIGZpbGUgYXJlXG4gKiBsaWNlbnNlZCB1bmRlciB0aGUgZm9sbG93aW5nOlxuICpcbiAqICAgICBiYXNlNjQtYXJyYXlidWZmZXJcbiAqICAgICBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogICAgIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqICAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICovXG5pbXBvcnQgcGFrbyBmcm9tICdwYWtvJztcbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbi8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbnZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG59XG5leHBvcnQgdmFyIGRlY29kZUZyb21CYXNlNjQgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1O1xuICAgIHZhciBsZW4gPSBiYXNlNjQubGVuZ3RoO1xuICAgIHZhciBpO1xuICAgIHZhciBwID0gMDtcbiAgICB2YXIgZW5jb2RlZDE7XG4gICAgdmFyIGVuY29kZWQyO1xuICAgIHZhciBlbmNvZGVkMztcbiAgICB2YXIgZW5jb2RlZDQ7XG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09ICc9Jykge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09ICc9Jykge1xuICAgICAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMildO1xuICAgICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufTtcbnZhciBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyYXlbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcbmV4cG9ydCB2YXIgZGVjb21wcmVzc0pzb24gPSBmdW5jdGlvbiAoY29tcHJlc3NlZEpzb24pIHtcbiAgICByZXR1cm4gYXJyYXlUb1N0cmluZyhwYWtvLmluZmxhdGUoZGVjb2RlRnJvbUJhc2U2NChjb21wcmVzc2VkSnNvbikpKTtcbn07XG5leHBvcnQgdmFyIHBhZFN0YXJ0ID0gZnVuY3Rpb24gKHZhbHVlLCBsZW5ndGgsIHBhZENoYXIpIHtcbiAgICB2YXIgcGFkZGluZyA9ICcnO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGxlbmd0aCAtIHZhbHVlLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBwYWRkaW5nICs9IHBhZENoYXI7XG4gICAgfVxuICAgIHJldHVybiBwYWRkaW5nICsgdmFsdWU7XG59O1xuIiwiaW1wb3J0IHsgZGVjb21wcmVzc0pzb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBDb3VyaWVyQm9sZENvbXByZXNzZWQgZnJvbSAnLi9Db3VyaWVyLUJvbGQuY29tcHJlc3NlZC5qc29uJztcbmltcG9ydCBDb3VyaWVyQm9sZE9ibGlxdWVDb21wcmVzc2VkIGZyb20gJy4vQ291cmllci1Cb2xkT2JsaXF1ZS5jb21wcmVzc2VkLmpzb24nO1xuaW1wb3J0IENvdXJpZXJPYmxpcXVlQ29tcHJlc3NlZCBmcm9tICcuL0NvdXJpZXItT2JsaXF1ZS5jb21wcmVzc2VkLmpzb24nO1xuaW1wb3J0IENvdXJpZXJDb21wcmVzc2VkIGZyb20gJy4vQ291cmllci5jb21wcmVzc2VkLmpzb24nO1xuaW1wb3J0IEhlbHZldGljYUJvbGRDb21wcmVzc2VkIGZyb20gJy4vSGVsdmV0aWNhLUJvbGQuY29tcHJlc3NlZC5qc29uJztcbmltcG9ydCBIZWx2ZXRpY2FCb2xkT2JsaXF1ZUNvbXByZXNzZWQgZnJvbSAnLi9IZWx2ZXRpY2EtQm9sZE9ibGlxdWUuY29tcHJlc3NlZC5qc29uJztcbmltcG9ydCBIZWx2ZXRpY2FPYmxpcXVlQ29tcHJlc3NlZCBmcm9tICcuL0hlbHZldGljYS1PYmxpcXVlLmNvbXByZXNzZWQuanNvbic7XG5pbXBvcnQgSGVsdmV0aWNhQ29tcHJlc3NlZCBmcm9tICcuL0hlbHZldGljYS5jb21wcmVzc2VkLmpzb24nO1xuaW1wb3J0IFRpbWVzQm9sZENvbXByZXNzZWQgZnJvbSAnLi9UaW1lcy1Cb2xkLmNvbXByZXNzZWQuanNvbic7XG5pbXBvcnQgVGltZXNCb2xkSXRhbGljQ29tcHJlc3NlZCBmcm9tICcuL1RpbWVzLUJvbGRJdGFsaWMuY29tcHJlc3NlZC5qc29uJztcbmltcG9ydCBUaW1lc0l0YWxpY0NvbXByZXNzZWQgZnJvbSAnLi9UaW1lcy1JdGFsaWMuY29tcHJlc3NlZC5qc29uJztcbmltcG9ydCBUaW1lc1JvbWFuQ29tcHJlc3NlZCBmcm9tICcuL1RpbWVzLVJvbWFuLmNvbXByZXNzZWQuanNvbic7XG5pbXBvcnQgU3ltYm9sQ29tcHJlc3NlZCBmcm9tICcuL1N5bWJvbC5jb21wcmVzc2VkLmpzb24nO1xuaW1wb3J0IFphcGZEaW5nYmF0c0NvbXByZXNzZWQgZnJvbSAnLi9aYXBmRGluZ2JhdHMuY29tcHJlc3NlZC5qc29uJztcbi8vIHByZXR0aWVyLWlnbm9yZVxudmFyIGNvbXByZXNzZWRKc29uRm9yRm9udE5hbWUgPSB7XG4gICAgJ0NvdXJpZXInOiBDb3VyaWVyQ29tcHJlc3NlZCxcbiAgICAnQ291cmllci1Cb2xkJzogQ291cmllckJvbGRDb21wcmVzc2VkLFxuICAgICdDb3VyaWVyLU9ibGlxdWUnOiBDb3VyaWVyT2JsaXF1ZUNvbXByZXNzZWQsXG4gICAgJ0NvdXJpZXItQm9sZE9ibGlxdWUnOiBDb3VyaWVyQm9sZE9ibGlxdWVDb21wcmVzc2VkLFxuICAgICdIZWx2ZXRpY2EnOiBIZWx2ZXRpY2FDb21wcmVzc2VkLFxuICAgICdIZWx2ZXRpY2EtQm9sZCc6IEhlbHZldGljYUJvbGRDb21wcmVzc2VkLFxuICAgICdIZWx2ZXRpY2EtT2JsaXF1ZSc6IEhlbHZldGljYU9ibGlxdWVDb21wcmVzc2VkLFxuICAgICdIZWx2ZXRpY2EtQm9sZE9ibGlxdWUnOiBIZWx2ZXRpY2FCb2xkT2JsaXF1ZUNvbXByZXNzZWQsXG4gICAgJ1RpbWVzLVJvbWFuJzogVGltZXNSb21hbkNvbXByZXNzZWQsXG4gICAgJ1RpbWVzLUJvbGQnOiBUaW1lc0JvbGRDb21wcmVzc2VkLFxuICAgICdUaW1lcy1JdGFsaWMnOiBUaW1lc0l0YWxpY0NvbXByZXNzZWQsXG4gICAgJ1RpbWVzLUJvbGRJdGFsaWMnOiBUaW1lc0JvbGRJdGFsaWNDb21wcmVzc2VkLFxuICAgICdTeW1ib2wnOiBTeW1ib2xDb21wcmVzc2VkLFxuICAgICdaYXBmRGluZ2JhdHMnOiBaYXBmRGluZ2JhdHNDb21wcmVzc2VkLFxufTtcbmV4cG9ydCB2YXIgRm9udE5hbWVzO1xuKGZ1bmN0aW9uIChGb250TmFtZXMpIHtcbiAgICBGb250TmFtZXNbXCJDb3VyaWVyXCJdID0gXCJDb3VyaWVyXCI7XG4gICAgRm9udE5hbWVzW1wiQ291cmllckJvbGRcIl0gPSBcIkNvdXJpZXItQm9sZFwiO1xuICAgIEZvbnROYW1lc1tcIkNvdXJpZXJPYmxpcXVlXCJdID0gXCJDb3VyaWVyLU9ibGlxdWVcIjtcbiAgICBGb250TmFtZXNbXCJDb3VyaWVyQm9sZE9ibGlxdWVcIl0gPSBcIkNvdXJpZXItQm9sZE9ibGlxdWVcIjtcbiAgICBGb250TmFtZXNbXCJIZWx2ZXRpY2FcIl0gPSBcIkhlbHZldGljYVwiO1xuICAgIEZvbnROYW1lc1tcIkhlbHZldGljYUJvbGRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gICAgRm9udE5hbWVzW1wiSGVsdmV0aWNhT2JsaXF1ZVwiXSA9IFwiSGVsdmV0aWNhLU9ibGlxdWVcIjtcbiAgICBGb250TmFtZXNbXCJIZWx2ZXRpY2FCb2xkT2JsaXF1ZVwiXSA9IFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCI7XG4gICAgRm9udE5hbWVzW1wiVGltZXNSb21hblwiXSA9IFwiVGltZXMtUm9tYW5cIjtcbiAgICBGb250TmFtZXNbXCJUaW1lc1JvbWFuQm9sZFwiXSA9IFwiVGltZXMtQm9sZFwiO1xuICAgIEZvbnROYW1lc1tcIlRpbWVzUm9tYW5JdGFsaWNcIl0gPSBcIlRpbWVzLUl0YWxpY1wiO1xuICAgIEZvbnROYW1lc1tcIlRpbWVzUm9tYW5Cb2xkSXRhbGljXCJdID0gXCJUaW1lcy1Cb2xkSXRhbGljXCI7XG4gICAgRm9udE5hbWVzW1wiU3ltYm9sXCJdID0gXCJTeW1ib2xcIjtcbiAgICBGb250TmFtZXNbXCJaYXBmRGluZ2JhdHNcIl0gPSBcIlphcGZEaW5nYmF0c1wiO1xufSkoRm9udE5hbWVzIHx8IChGb250TmFtZXMgPSB7fSkpO1xudmFyIGZvbnRDYWNoZSA9IHt9O1xudmFyIEZvbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRm9udCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5nZXRXaWR0aE9mR2x5cGggPSBmdW5jdGlvbiAoZ2x5cGhOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuQ2hhcldpZHRoc1tnbHlwaE5hbWVdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFhBeGlzS2VybmluZ0ZvclBhaXIgPSBmdW5jdGlvbiAobGVmdEdseXBoTmFtZSwgcmlnaHRHbHlwaE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoX3RoaXMuS2VyblBhaXJYQW1vdW50c1tsZWZ0R2x5cGhOYW1lXSB8fCB7fSlbcmlnaHRHbHlwaE5hbWVdO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBGb250LmxvYWQgPSBmdW5jdGlvbiAoZm9udE5hbWUpIHtcbiAgICAgICAgdmFyIGNhY2hlZEZvbnQgPSBmb250Q2FjaGVbZm9udE5hbWVdO1xuICAgICAgICBpZiAoY2FjaGVkRm9udClcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRGb250O1xuICAgICAgICB2YXIganNvbiA9IGRlY29tcHJlc3NKc29uKGNvbXByZXNzZWRKc29uRm9yRm9udE5hbWVbZm9udE5hbWVdKTtcbiAgICAgICAgdmFyIGZvbnQgPSBPYmplY3QuYXNzaWduKG5ldyBGb250KCksIEpTT04ucGFyc2UoanNvbikpO1xuICAgICAgICBmb250LkNoYXJXaWR0aHMgPSBmb250LkNoYXJNZXRyaWNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtZXRyaWMpIHtcbiAgICAgICAgICAgIGFjY1ttZXRyaWMuTl0gPSBtZXRyaWMuV1g7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIGZvbnQuS2VyblBhaXJYQW1vdW50cyA9IGZvbnQuS2VyblBhaXJzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBfYSkge1xuICAgICAgICAgICAgdmFyIG5hbWUxID0gX2FbMF0sIG5hbWUyID0gX2FbMV0sIHdpZHRoID0gX2FbMl07XG4gICAgICAgICAgICBpZiAoIWFjY1tuYW1lMV0pXG4gICAgICAgICAgICAgICAgYWNjW25hbWUxXSA9IHt9O1xuICAgICAgICAgICAgYWNjW25hbWUxXVtuYW1lMl0gPSB3aWR0aDtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgZm9udENhY2hlW2ZvbnROYW1lXSA9IGZvbnQ7XG4gICAgICAgIHJldHVybiBmb250O1xuICAgIH07XG4gICAgcmV0dXJuIEZvbnQ7XG59KCkpO1xuZXhwb3J0IHsgRm9udCB9O1xuIiwiLyogdHNsaW50OmRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbmltcG9ydCB7IGRlY29tcHJlc3NKc29uLCBwYWRTdGFydCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEFsbEVuY29kaW5nc0NvbXByZXNzZWQgZnJvbSAnLi9hbGwtZW5jb2RpbmdzLmNvbXByZXNzZWQuanNvbic7XG52YXIgZGVjb21wcmVzc2VkRW5jb2RpbmdzID0gZGVjb21wcmVzc0pzb24oQWxsRW5jb2RpbmdzQ29tcHJlc3NlZCk7XG52YXIgYWxsVW5pY29kZU1hcHBpbmdzID0gSlNPTi5wYXJzZShkZWNvbXByZXNzZWRFbmNvZGluZ3MpO1xudmFyIEVuY29kaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVuY29kaW5nKG5hbWUsIHVuaWNvZGVNYXBwaW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNhbkVuY29kZVVuaWNvZGVDb2RlUG9pbnQgPSBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZVBvaW50IGluIF90aGlzLnVuaWNvZGVNYXBwaW5ncztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbmNvZGVVbmljb2RlQ29kZVBvaW50ID0gZnVuY3Rpb24gKGNvZGVQb2ludCkge1xuICAgICAgICAgICAgdmFyIG1hcHBlZCA9IF90aGlzLnVuaWNvZGVNYXBwaW5nc1tjb2RlUG9pbnRdO1xuICAgICAgICAgICAgaWYgKCFtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgICAgICAgICAgICAgIHZhciBoZXhDb2RlID0gXCIweFwiICsgcGFkU3RhcnQoY29kZVBvaW50LnRvU3RyaW5nKDE2KSwgNCwgJzAnKTtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gX3RoaXMubmFtZSArIFwiIGNhbm5vdCBlbmNvZGUgXFxcIlwiICsgc3RyICsgXCJcXFwiIChcIiArIGhleENvZGUgKyBcIilcIjtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGNvZGU6IG1hcHBlZFswXSwgbmFtZTogbWFwcGVkWzFdIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydGVkQ29kZVBvaW50cyA9IE9iamVjdC5rZXlzKHVuaWNvZGVNYXBwaW5ncylcbiAgICAgICAgICAgIC5tYXAoTnVtYmVyKVxuICAgICAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcbiAgICAgICAgdGhpcy51bmljb2RlTWFwcGluZ3MgPSB1bmljb2RlTWFwcGluZ3M7XG4gICAgfVxuICAgIHJldHVybiBFbmNvZGluZztcbn0oKSk7XG5leHBvcnQgdmFyIEVuY29kaW5ncyA9IHtcbiAgICBTeW1ib2w6IG5ldyBFbmNvZGluZygnU3ltYm9sJywgYWxsVW5pY29kZU1hcHBpbmdzLnN5bWJvbCksXG4gICAgWmFwZkRpbmdiYXRzOiBuZXcgRW5jb2RpbmcoJ1phcGZEaW5nYmF0cycsIGFsbFVuaWNvZGVNYXBwaW5ncy56YXBmZGluZ2JhdHMpLFxuICAgIFdpbkFuc2k6IG5ldyBFbmNvZGluZygnV2luQW5zaScsIGFsbFVuaWNvZGVNYXBwaW5ncy53aW4xMjUyKSxcbn07XG4iLCIvLyBUb3AgbGV2ZWwgZmlsZSBpcyBqdXN0IGEgbWl4aW4gb2Ygc3VibW9kdWxlcyAmIGNvbnN0YW50c1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduICAgID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvY29tbW9uJykuYXNzaWduO1xuXG52YXIgZGVmbGF0ZSAgID0gcmVxdWlyZSgnLi9saWIvZGVmbGF0ZScpO1xudmFyIGluZmxhdGUgICA9IHJlcXVpcmUoJy4vbGliL2luZmxhdGUnKTtcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2xpYi96bGliL2NvbnN0YW50cycpO1xuXG52YXIgcGFrbyA9IHt9O1xuXG5hc3NpZ24ocGFrbywgZGVmbGF0ZSwgaW5mbGF0ZSwgY29uc3RhbnRzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYWtvO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6bGliX2RlZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvZGVmbGF0ZScpO1xudmFyIHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG52YXIgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG52YXIgbXNnICAgICAgICAgID0gcmVxdWlyZSgnLi96bGliL21lc3NhZ2VzJyk7XG52YXIgWlN0cmVhbSAgICAgID0gcmVxdWlyZSgnLi96bGliL3pzdHJlYW0nKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbnZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG5cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG52YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcblxudmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG52YXIgWl9ERUZBVUxUX1NUUkFURUdZICAgID0gMDtcblxudmFyIFpfREVGTEFURUQgID0gODtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKipcbiAqIGNsYXNzIERlZmxhdGVcbiAqXG4gKiBHZW5lcmljIEpTLXN0eWxlIHdyYXBwZXIgZm9yIHpsaWIgY2FsbHMuIElmIHlvdSBkb24ndCBuZWVkXG4gKiBzdHJlYW1pbmcgYmVoYXZpb3VyIC0gdXNlIG1vcmUgc2ltcGxlIGZ1bmN0aW9uczogW1tkZWZsYXRlXV0sXG4gKiBbW2RlZmxhdGVSYXddXSBhbmQgW1tnemlwXV0uXG4gKiovXG5cbi8qIGludGVybmFsXG4gKiBEZWZsYXRlLmNodW5rcyAtPiBBcnJheVxuICpcbiAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tEZWZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZGVuLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXlcbiAqXG4gKiBDb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tEZWZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0RlZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkgIG9yIGlmIHlvdVxuICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoXG4gKiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogWW91IHdpbGwgbm90IG5lZWQgaXQgaW4gcmVhbCBsaWZlLCBiZWNhdXNlIGRlZmxhdGUgZXJyb3JzXG4gKiBhcmUgcG9zc2libGUgb25seSBvbiB3cm9uZyBvcHRpb25zIG9yIGJhZCBgb25EYXRhYCAvIGBvbkVuZGBcbiAqIGN1c3RvbSBoYW5kbGVycy5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLm1zZyAtPiBTdHJpbmdcbiAqXG4gKiBFcnJvciBtZXNzYWdlLCBpZiBbW0RlZmxhdGUuZXJyXV0gIT0gMFxuICoqL1xuXG5cbi8qKlxuICogbmV3IERlZmxhdGUob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ3JlYXRlcyBuZXcgZGVmbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcbiAqXG4gKiAtIGBsZXZlbGBcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBtZW1MZXZlbGBcbiAqIC0gYHN0cmF0ZWd5YFxuICogLSBgZGljdGlvbmFyeWBcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAqXG4gKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KVxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgZGVmbGF0ZVxuICogLSBgZ3ppcGAgKEJvb2xlYW4pIC0gY3JlYXRlIGd6aXAgd3JhcHBlclxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgXCJiaW5hcnkgc3RyaW5nXCJcbiAqICAgIChlYWNoIGNoYXIgY29kZSBbMC4uMjU1XSlcbiAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwXG4gKiAgIC0gYHRleHRgIChCb29sZWFuKSAtIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHRcbiAqICAgLSBgdGltZWAgKE51bWJlcikgLSBtb2RpZmljYXRpb24gdGltZSwgdW5peCB0aW1lc3RhbXBcbiAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlXG4gKiAgIC0gYGV4dHJhYCAoQXJyYXkpIC0gYXJyYXkgb2YgYnl0ZXMgd2l0aCBleHRyYSBkYXRhIChtYXggNjU1MzYpXG4gKiAgIC0gYG5hbWVgIChTdHJpbmcpIC0gZmlsZSBuYW1lIChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGhjcmNgIChCb29sZWFuKSAtIHRydWUgaWYgaGVhZGVyIGNyYyBzaG91bGQgYmUgYWRkZWRcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgY2h1bmsxID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogdmFyIGRlZmxhdGUgPSBuZXcgcGFrby5EZWZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBkZWZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coZGVmbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBEZWZsYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlZmxhdGUpKSByZXR1cm4gbmV3IERlZmxhdGUob3B0aW9ucyk7XG5cbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBsZXZlbDogWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICAgIG1ldGhvZDogWl9ERUZMQVRFRCxcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDE1LFxuICAgIG1lbUxldmVsOiA4LFxuICAgIHN0cmF0ZWd5OiBaX0RFRkFVTFRfU1RSQVRFR1ksXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKG9wdC5nemlwICYmIChvcHQud2luZG93Qml0cyA+IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtID0gbmV3IFpTdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgdmFyIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC5sZXZlbCxcbiAgICBvcHQubWV0aG9kLFxuICAgIG9wdC53aW5kb3dCaXRzLFxuICAgIG9wdC5tZW1MZXZlbCxcbiAgICBvcHQuc3RyYXRlZ3lcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIGlmIChvcHQuaGVhZGVyKSB7XG4gICAgemxpYl9kZWZsYXRlLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLCBvcHQuaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChvcHQuZGljdGlvbmFyeSkge1xuICAgIHZhciBkaWN0O1xuICAgIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIG9wdC5kaWN0aW9uYXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC5cbiAgICAgIGRpY3QgPSBzdHJpbmdzLnN0cmluZzJidWYob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChvcHQuZGljdGlvbmFyeSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICAgIGRpY3QgPSBuZXcgVWludDhBcnJheShvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpY3QgPSBvcHQuZGljdGlvbmFyeTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBkaWN0KTtcblxuICAgIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGljdF9zZXQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogRGVmbGF0ZSNwdXNoKGRhdGFbLCBtb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGEuIFN0cmluZ3Mgd2lsbCBiZVxuICogICBjb252ZXJ0ZWQgdG8gdXRmOCBieXRlIHNlcXVlbmNlLlxuICogLSBtb2RlIChOdW1iZXJ8Qm9vbGVhbik6IDAuLjYgZm9yIGNvcnJlc3BvbmRpbmcgWl9OT19GTFVTSC4uWl9UUkVFIG1vZGVzLlxuICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zIFpfRklOSVNILlxuICpcbiAqIFNlbmRzIGlucHV0IGRhdGEgdG8gZGVmbGF0ZSBwaXBlLCBnZW5lcmF0aW5nIFtbRGVmbGF0ZSNvbkRhdGFdXSBjYWxscyB3aXRoXG4gKiBuZXcgY29tcHJlc3NlZCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG4gKiBtb2RlIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG4gKiBbW0RlZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91XG4gKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBrZWVwaW5nIHRoZSBjb21wcmVzc2lvbiBjb250ZXh0LlxuICpcbiAqIE9uIGZhaWwgY2FsbCBbW0RlZmxhdGUjb25FbmRdXSB3aXRoIGVycm9yIGNvZGUgYW5kIHJldHVybiBmYWxzZS5cbiAqXG4gKiBXZSBzdHJvbmdseSByZWNvbW1lbmQgdG8gdXNlIGBVaW50OEFycmF5YCBvbiBpbnB1dCBmb3IgYmVzdCBzcGVlZCAob3V0cHV0XG4gKiBhcnJheSBmb3JtYXQgaXMgZGV0ZWN0ZWQgYXV0b21hdGljYWxseSkuIEFsc28sIGRvbid0IHNraXAgbGFzdCBwYXJhbSBhbmQgYWx3YXlzXG4gKiB1c2UgdGhlIHNhbWUgdHlwZSBpbiB5b3VyIGNvZGUgKGJvb2xlYW4gb3IgbnVtYmVyKS4gVGhhdCB3aWxsIGltcHJvdmUgSlMgc3BlZWQuXG4gKlxuICogRm9yIHJlZ3VsYXIgYEFycmF5YC1zIG1ha2Ugc3VyZSBhbGwgZWxlbWVudHMgYXJlIFswLi4yNTVdLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gKiAuLi5cbiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG4gKiBgYGBcbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgbW9kZSkge1xuICB2YXIgc3RybSA9IHRoaXMuc3RybTtcbiAgdmFyIGNodW5rU2l6ZSA9IHRoaXMub3B0aW9ucy5jaHVua1NpemU7XG4gIHZhciBzdGF0dXMsIF9tb2RlO1xuXG4gIGlmICh0aGlzLmVuZGVkKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIF9tb2RlID0gKG1vZGUgPT09IH5+bW9kZSkgPyBtb2RlIDogKChtb2RlID09PSB0cnVlKSA/IFpfRklOSVNIIDogWl9OT19GTFVTSCk7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC5cbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgZG8ge1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgc3RybS5vdXRwdXQgPSBuZXcgdXRpbHMuQnVmOChjaHVua1NpemUpO1xuICAgICAgc3RybS5uZXh0X291dCA9IDA7XG4gICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTtcbiAgICB9XG4gICAgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGUoc3RybSwgX21vZGUpOyAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovXG5cbiAgICBpZiAoc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IChzdHJtLmF2YWlsX2luID09PSAwICYmIChfbW9kZSA9PT0gWl9GSU5JU0ggfHwgX21vZGUgPT09IFpfU1lOQ19GTFVTSCkpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLm9uRGF0YShzdHJpbmdzLmJ1ZjJiaW5zdHJpbmcodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkRhdGEodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlICgoc3RybS5hdmFpbF9pbiA+IDAgfHwgc3RybS5hdmFpbF9vdXQgPT09IDApICYmIHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EKTtcblxuICAvLyBGaW5hbGl6ZSBvbiB0aGUgbGFzdCBjaHVuay5cbiAgaWYgKF9tb2RlID09PSBaX0ZJTklTSCkge1xuICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlRW5kKHRoaXMuc3RybSk7XG4gICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0dXMgPT09IFpfT0s7XG4gIH1cblxuICAvLyBjYWxsYmFjayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILlxuICBpZiAoX21vZGUgPT09IFpfU1lOQ19GTFVTSCkge1xuICAgIHRoaXMub25FbmQoWl9PSyk7XG4gICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogb3V0cHV0IGRhdGEuIFR5cGUgb2YgYXJyYXkgZGVwZW5kc1xuICogICBvbiBqcyBlbmdpbmUgc3VwcG9ydC4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCwgZWFjaCBjaHVua1xuICogICB3aWxsIGJlIHN0cmluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBEZWZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGRlZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIG9uY2UgYWZ0ZXIgeW91IHRlbGwgZGVmbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkgb3Igc2hvdWxkIGJlIGZsdXNoZWQgKFpfU1lOQ19GTFVTSClcbiAqIG9yIGlmIGFuIGVycm9yIGhhcHBlbmVkLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogZGVmbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSBsZXZlbFxuICogLSB3aW5kb3dCaXRzXG4gKiAtIG1lbUxldmVsXG4gKiAtIHN0cmF0ZWd5XG4gKiAtIGRpY3Rpb25hcnlcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBTdWdhciAob3B0aW9ucyk6XG4gKlxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICogICBuZWdhdGl2ZSB3aW5kb3dCaXRzIGltcGxpY2l0bHkuXG4gKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBcImJpbmFyeSBzdHJpbmdcIlxuICogICAgKGVhY2ggY2hhciBjb2RlIFswLi4yNTVdKVxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBkYXRhID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhwYWtvLmRlZmxhdGUoZGF0YSkpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkZWZsYXRvciA9IG5ldyBEZWZsYXRlKG9wdGlvbnMpO1xuXG4gIGRlZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChkZWZsYXRvci5lcnIpIHsgdGhyb3cgZGVmbGF0b3IubXNnIHx8IG1zZ1tkZWZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGRlZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGRlZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwgd2l0aG91dCB3cmFwcGVyXG4gKiAoaGVhZGVyIGFuZCBhZGxlcjMyIGNyYykuXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlUmF3KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnJhdyA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIGd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkIG9mXG4gKiBkZWZsYXRlIG9uZS5cbiAqKi9cbmZ1bmN0aW9uIGd6aXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuZ3ppcCA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZVJhdyA9IGRlZmxhdGVSYXc7XG5leHBvcnRzLmd6aXAgPSBnemlwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvaW5mbGF0ZScpO1xudmFyIHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG52YXIgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG52YXIgYyAgICAgICAgICAgID0gcmVxdWlyZSgnLi96bGliL2NvbnN0YW50cycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG52YXIgR1poZWFkZXIgICAgID0gcmVxdWlyZSgnLi96bGliL2d6aGVhZGVyJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICpcbiAqIFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbSW5mbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pIG9yIGlmIHlvdVxuICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoXG4gKiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBpbmZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogU2hvdWxkIGJlIGNoZWNrZWQgaWYgYnJva2VuIGRhdGEgcG9zc2libGUuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tJbmZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBJbmZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGluZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgd2luZG93Qml0c2BcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGluZmxhdGVcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gKiB3cmFwcGVyIGhlYWRlci5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgY2h1bmsxID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogdmFyIGluZmxhdGUgPSBuZXcgcGFrby5JbmZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBpbmZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBpbmZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChpbmZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoaW5mbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coaW5mbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBJbmZsYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDAsXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksXG4gIC8vIGJlY2F1c2Ugd2UgaGF2ZSBubyBoZWFkZXIgZm9yIGF1dG9kZXRlY3QuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsgb3B0LndpbmRvd0JpdHMgPSAtMTU7IH1cbiAgfVxuXG4gIC8vIElmIGB3aW5kb3dCaXRzYCBub3QgZGVmaW5lZCAoYW5kIG1vZGUgbm90IHJhdykgLSBzZXQgYXV0b2RldGVjdCBmbGFnIGZvciBnemlwL2RlZmxhdGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikgJiZcbiAgICAgICEob3B0aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7XG4gIH1cblxuICAvLyBHemlwIGhlYWRlciBoYXMgbm8gaW5mbyBhYm91dCB3aW5kb3dzIHNpemUsIHdlIGNhbiBkbyBhdXRvZGV0ZWN0IG9ubHlcbiAgLy8gZm9yIGRlZmxhdGUuIFNvLCBpZiB3aW5kb3cgc2l6ZSBub3Qgc2V0LCBmb3JjZSBpdCB0byBtYXggd2hlbiBnemlwIHBvc3NpYmxlXG4gIGlmICgob3B0LndpbmRvd0JpdHMgPiAxNSkgJiYgKG9wdC53aW5kb3dCaXRzIDwgNDgpKSB7XG4gICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRhdGFcbiAgICAvLyBiaXQgNCAoMzIpIC0+IGF1dG9kZXRlY3QgZ3ppcC9kZWZsYXRlXG4gICAgaWYgKChvcHQud2luZG93Qml0cyAmIDE1KSA9PT0gMCkge1xuICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtICAgPSBuZXcgWlN0cmVhbSgpO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuICB2YXIgc3RhdHVzICA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC53aW5kb3dCaXRzXG4gICk7XG5cbiAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIHRoaXMuaGVhZGVyID0gbmV3IEdaaGVhZGVyKCk7XG5cbiAgemxpYl9pbmZsYXRlLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9XG4gICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5mbGF0ZSNwdXNoKGRhdGFbLCBtb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGFcbiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG4gKiBtb2RlIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG4gKiBbW0luZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91XG4gKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBrZWVwaW5nIHRoZSBkZWNvbXByZXNzaW9uIGNvbnRleHQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXRcbiAqIGZvcm1hdCBpcyBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KS4gQWxzbywgZG9uJ3Qgc2tpcCBsYXN0IHBhcmFtIGFuZCBhbHdheXNcbiAqIHVzZSB0aGUgc2FtZSB0eXBlIGluIHlvdXIgY29kZSAoYm9vbGVhbiBvciBudW1iZXIpLiBUaGF0IHdpbGwgaW1wcm92ZSBKUyBzcGVlZC5cbiAqXG4gKiBGb3IgcmVndWxhciBgQXJyYXlgLXMgbWFrZSBzdXJlIGFsbCBlbGVtZW50cyBhcmUgWzAuLjI1NV0uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuSW5mbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChkYXRhLCBtb2RlKSB7XG4gIHZhciBzdHJtID0gdGhpcy5zdHJtO1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgdmFyIGRpY3Rpb25hcnkgPSB0aGlzLm9wdGlvbnMuZGljdGlvbmFyeTtcbiAgdmFyIHN0YXR1cywgX21vZGU7XG4gIHZhciBuZXh0X291dF91dGY4LCB0YWlsLCB1dGY4c3RyO1xuXG4gIC8vIEZsYWcgdG8gcHJvcGVybHkgcHJvY2VzcyBaX0JVRl9FUlJPUiBvbiB0ZXN0aW5nIGluZmxhdGUgY2FsbFxuICAvLyB3aGVuIHdlIGNoZWNrIHRoYXQgYWxsIG91dHB1dCBkYXRhIHdhcyBmbHVzaGVkLlxuICB2YXIgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLmVuZGVkKSB7IHJldHVybiBmYWxzZTsgfVxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBjLlpfRklOSVNIIDogYy5aX05PX0ZMVVNIKTtcblxuICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBPbmx5IGJpbmFyeSBzdHJpbmdzIGNhbiBiZSBkZWNvbXByZXNzZWQgb24gcHJhY3RpY2VcbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5iaW5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgZG8ge1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgc3RybS5vdXRwdXQgPSBuZXcgdXRpbHMuQnVmOChjaHVua1NpemUpO1xuICAgICAgc3RybS5uZXh0X291dCA9IDA7XG4gICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBjLlpfTk9fRkxVU0gpOyAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovXG5cbiAgICBpZiAoc3RhdHVzID09PSBjLlpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHtcbiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3Rpb25hcnkpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IGMuWl9CVUZfRVJST1IgJiYgYWxsb3dCdWZFcnJvciA9PT0gdHJ1ZSkge1xuICAgICAgc3RhdHVzID0gYy5aX09LO1xuICAgICAgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5uZXh0X291dCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gYy5aX1NUUkVBTV9FTkQgfHwgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgKF9tb2RlID09PSBjLlpfRklOSVNIIHx8IF9tb2RlID09PSBjLlpfU1lOQ19GTFVTSCkpKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgIG5leHRfb3V0X3V0ZjggPSBzdHJpbmdzLnV0Zjhib3JkZXIoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpO1xuXG4gICAgICAgICAgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgIHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpO1xuXG4gICAgICAgICAgLy8gbW92ZSB0YWlsXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemUgLSB0YWlsO1xuICAgICAgICAgIGlmICh0YWlsKSB7IHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCwgdGFpbCwgMCk7IH1cblxuICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXaGVuIG5vIG1vcmUgaW5wdXQgZGF0YSwgd2Ugc2hvdWxkIGNoZWNrIHRoYXQgaW50ZXJuYWwgaW5mbGF0ZSBidWZmZXJzXG4gICAgLy8gYXJlIGZsdXNoZWQuIFRoZSBvbmx5IHdheSB0byBkbyBpdCB3aGVuIGF2YWlsX291dCA9IDAgLSBydW4gb25lIG1vcmVcbiAgICAvLyBpbmZsYXRlIHBhc3MuIEJ1dCBpZiBvdXRwdXQgZGF0YSBub3QgZXhpc3RzLCBpbmZsYXRlIHJldHVybiBaX0JVRl9FUlJPUi5cbiAgICAvLyBIZXJlIHdlIHNldCBmbGFnIHRvIHByb2Nlc3MgdGhpcyBlcnJvciBwcm9wZXJseS5cbiAgICAvL1xuICAgIC8vIE5PVEUuIERlZmxhdGUgZG9lcyBub3QgcmV0dXJuIGVycm9yIGluIHRoaXMgY2FzZSBhbmQgZG9lcyBub3QgbmVlZHMgc3VjaFxuICAgIC8vIGxvZ2ljLlxuICAgIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBhbGxvd0J1ZkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EKTtcblxuICBpZiAoc3RhdHVzID09PSBjLlpfU1RSRUFNX0VORCkge1xuICAgIF9tb2RlID0gYy5aX0ZJTklTSDtcbiAgfVxuXG4gIC8vIEZpbmFsaXplIG9uIHRoZSBsYXN0IGNodW5rLlxuICBpZiAoX21vZGUgPT09IGMuWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBjLlpfT0s7XG4gIH1cblxuICAvLyBjYWxsYmFjayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILlxuICBpZiAoX21vZGUgPT09IGMuWl9TWU5DX0ZMVVNIKSB7XG4gICAgdGhpcy5vbkVuZChjLlpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIEluZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91dHB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcbiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmtcbiAqICAgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogSW5mbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBpbmZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBlaXRoZXIgYWZ0ZXIgeW91IHRlbGwgaW5mbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkgb3Igc2hvdWxkIGJlIGZsdXNoZWQgKFpfU1lOQ19GTFVTSClcbiAqIG9yIGlmIGFuIGVycm9yIGhhcHBlbmVkLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBjLlpfT0spIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gR2x1ZSAmIGNvbnZlcnQgaGVyZSwgdW50aWwgd2UgdGVhY2ggcGFrbyB0byBzZW5kXG4gICAgICAvLyB1dGY4IGFsaWduZWQgc3RyaW5ncyB0byBvbkRhdGFcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogaW5mbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBpbnB1dCA9IHBha28uZGVmbGF0ZShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIG91dHB1dDtcbiAqXG4gKiB0cnkge1xuICogICBvdXRwdXQgPSBwYWtvLmluZmxhdGUoaW5wdXQpO1xuICogfSBjYXRjaCAoZXJyKVxuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfVxuICogYGBgXG4gKiovXG5mdW5jdGlvbiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBpbmZsYXRvciA9IG5ldyBJbmZsYXRlKG9wdGlvbnMpO1xuXG4gIGluZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChpbmZsYXRvci5lcnIpIHsgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tpbmZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGluZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMucmF3ID0gdHJ1ZTtcbiAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG4gKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gKiovXG5cblxuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3O1xuZXhwb3J0cy51bmd6aXAgID0gaW5mbGF0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKTtcblxuZnVuY3Rpb24gX2hhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoX2hhcyhzb3VyY2UsIHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IHNpemUpIHsgcmV0dXJuIGJ1ZjsgfVxuICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cbiAgYnVmLmxlbmd0aCA9IHNpemU7XG4gIHJldHVybiBidWY7XG59O1xuXG5cbnZhciBmblR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG4gICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjX29mZnMsIHNyY19vZmZzICsgbGVuKSwgZGVzdF9vZmZzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07XG4gICAgfVxuICB9LFxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgZGF0YSBsZW5ndGhcbiAgICBsZW4gPSAwO1xuICAgIGZvciAoaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgcG9zID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZm5VbnR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTtcbiAgfVxufTtcblxuXG4vLyBFbmFibGUvRGlzYWJsZSB0eXBlZCBhcnJheXMgdXNlLCBmb3IgdGVzdGluZ1xuLy9cbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcbiAgaWYgKG9uKSB7XG4gICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBJbnQzMkFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVW50eXBlZCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spO1xuIiwiLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuLy8gUXVpY2sgY2hlY2sgaWYgd2UgY2FuIHVzZSBmYXN0IGFycmF5IHRvIGJpbiBzdHJpbmcgY29udmVyc2lvblxuLy9cbi8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yXG4vLyAtIGFwcGx5KFVpbnQ4QXJyYXkpIGNhbiBmYWlsIG9uIGlPUyA1LjEgU2FmYXJpXG4vL1xudmFyIFNUUl9BUFBMWV9PSyA9IHRydWU7XG52YXIgU1RSX0FQUExZX1VJQV9PSyA9IHRydWU7XG5cbnRyeSB7IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgWyAwIF0pOyB9IGNhdGNoIChfXykgeyBTVFJfQVBQTFlfT0sgPSBmYWxzZTsgfVxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxudmFyIF91dGY4bGVuID0gbmV3IHV0aWxzLkJ1ZjgoMjU2KTtcbmZvciAodmFyIHEgPSAwOyBxIDwgMjU2OyBxKyspIHtcbiAgX3V0ZjhsZW5bcV0gPSAocSA+PSAyNTIgPyA2IDogcSA+PSAyNDggPyA1IDogcSA+PSAyNDAgPyA0IDogcSA+PSAyMjQgPyAzIDogcSA+PSAxOTIgPyAyIDogMSk7XG59XG5fdXRmOGxlblsyNTRdID0gX3V0ZjhsZW5bMjU0XSA9IDE7IC8vIEludmFsaWQgc2VxdWVuY2Ugc3RhcnRcblxuXG4vLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5leHBvcnRzLnN0cmluZzJidWYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHZhciBidWYsIGMsIGMyLCBtX3BvcywgaSwgc3RyX2xlbiA9IHN0ci5sZW5ndGgsIGJ1Zl9sZW4gPSAwO1xuXG4gIC8vIGNvdW50IGJpbmFyeSBzaXplXG4gIGZvciAobV9wb3MgPSAwOyBtX3BvcyA8IHN0cl9sZW47IG1fcG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MgKyAxIDwgc3RyX2xlbikpIHtcbiAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgIG1fcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1Zl9sZW4gKz0gYyA8IDB4ODAgPyAxIDogYyA8IDB4ODAwID8gMiA6IGMgPCAweDEwMDAwID8gMyA6IDQ7XG4gIH1cblxuICAvLyBhbGxvY2F0ZSBidWZmZXJcbiAgYnVmID0gbmV3IHV0aWxzLkJ1ZjgoYnVmX2xlbik7XG5cbiAgLy8gY29udmVydFxuICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIC8qIG9uZSBieXRlICovXG4gICAgICBidWZbaSsrXSA9IGM7XG4gICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIC8qIHR3byBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEMwIHwgKGMgPj4+IDYpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2UgaWYgKGMgPCAweDEwMDAwKSB7XG4gICAgICAvKiB0aHJlZSBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEUwIHwgKGMgPj4+IDEyKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBmb3VyIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4ZjAgfCAoYyA+Pj4gMTgpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDEyICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmO1xufTtcblxuLy8gSGVscGVyICh1c2VkIGluIDIgcGxhY2VzKVxuZnVuY3Rpb24gYnVmMmJpbnN0cmluZyhidWYsIGxlbikge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmICgoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHx8ICghYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9PSykpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHV0aWxzLnNocmlua0J1ZihidWYsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG4vLyBDb252ZXJ0IGJ5dGUgYXJyYXkgdG8gYmluYXJ5IHN0cmluZ1xuZXhwb3J0cy5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24gKGJ1Zikge1xuICByZXR1cm4gYnVmMmJpbnN0cmluZyhidWYsIGJ1Zi5sZW5ndGgpO1xufTtcblxuXG4vLyBDb252ZXJ0IGJpbmFyeSBzdHJpbmcgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuZXhwb3J0cy5iaW5zdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgYnVmID0gbmV3IHV0aWxzLkJ1Zjgoc3RyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufTtcblxuXG4vLyBjb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuZXhwb3J0cy5idWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1ZiwgbWF4KSB7XG4gIHZhciBpLCBvdXQsIGMsIGNfbGVuO1xuICB2YXIgbGVuID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG5cbiAgLy8gUmVzZXJ2ZSBtYXggcG9zc2libGUgbGVuZ3RoICgyIHdvcmRzIHBlciBjaGFyKVxuICAvLyBOQjogYnkgdW5rbm93biByZWFzb25zLCBBcnJheSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciBmb3JcbiAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cbiAgdmFyIHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgYyA9IGJ1ZltpKytdO1xuICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcbiAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbmV4cG9ydHMudXRmOGJvcmRlciA9IGZ1bmN0aW9uIChidWYsIG1heCkge1xuICB2YXIgcG9zO1xuXG4gIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgeyBtYXggPSBidWYubGVuZ3RoOyB9XG5cbiAgLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kXG4gIHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIFZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcbiAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcbiAgWl9CTE9DSzogICAgICAgICAgICA1LFxuICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAgKi9cbiAgWl9PSzogICAgICAgICAgICAgICAwLFxuICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgWl9FUlJOTzogICAgICAgICAgIC0xLFxuICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgLy9aX01FTV9FUlJPUjogICAgIC00LFxuICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gIFpfQkVTVF9DT01QUkVTU0lPTjogICAgICAgOSxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICBaX0hVRkZNQU5fT05MWTogICAgICAgICAgIDIsXG4gIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6ICAgICAgIDAsXG5cbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gIFpfVEVYVDogICAgICAgICAgICAgICAgICAgMSxcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcbiAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xuICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcbiAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcbiAgdmFyIGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcblxuXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHQgPSBjcmNUYWJsZSxcbiAgICAgIGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyYzMyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG52YXIgdHJlZXMgICA9IHJlcXVpcmUoJy4vdHJlZXMnKTtcbnZhciBhZGxlcjMyID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7XG52YXIgY3JjMzIgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcbnZhciBtc2cgICAgID0gcmVxdWlyZSgnLi9tZXNzYWdlcycpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG52YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbnZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbnZhciBaX0ZVTExfRkxVU0ggICAgPSAzO1xudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG52YXIgWl9CTE9DSyAgICAgICAgID0gNTtcbi8vdmFyIFpfVFJFRVMgICAgICAgICA9IDY7XG5cblxuLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICovXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xuLy92YXIgWl9ORUVEX0RJQ1QgICAgID0gMjtcbi8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xudmFyIFpfU1RSRUFNX0VSUk9SICA9IC0yO1xudmFyIFpfREFUQV9FUlJPUiAgICA9IC0zO1xuLy92YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XG4vL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjtcblxuXG4vKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbi8vdmFyIFpfTk9fQ09NUFJFU1NJT04gICAgICA9IDA7XG4vL3ZhciBaX0JFU1RfU1BFRUQgICAgICAgICAgPSAxO1xuLy92YXIgWl9CRVNUX0NPTVBSRVNTSU9OICAgID0gOTtcbnZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxuXG52YXIgWl9GSUxURVJFRCAgICAgICAgICAgID0gMTtcbnZhciBaX0hVRkZNQU5fT05MWSAgICAgICAgPSAyO1xudmFyIFpfUkxFICAgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbnZhciBaX0RFRkFVTFRfU1RSQVRFR1kgICAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4vL3ZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xuLy92YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcbi8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuXG4vKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxudmFyIE1BWF9NRU1fTEVWRUwgPSA5O1xuLyogTWF4aW11bSB2YWx1ZSBmb3IgbWVtTGV2ZWwgaW4gZGVmbGF0ZUluaXQyICovXG52YXIgTUFYX1dCSVRTID0gMTU7XG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cbnZhciBERUZfTUVNX0xFVkVMID0gODtcblxuXG52YXIgTEVOR1RIX0NPREVTICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xudmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cbnZhciBEX0NPREVTICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cbnZhciBIRUFQX1NJWkUgICAgID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cbnZhciBNQVhfQklUUyAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG52YXIgTUlOX01BVENIID0gMztcbnZhciBNQVhfTUFUQ0ggPSAyNTg7XG52YXIgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcblxudmFyIFBSRVNFVF9ESUNUID0gMHgyMDtcblxudmFyIElOSVRfU1RBVEUgPSA0MjtcbnZhciBFWFRSQV9TVEFURSA9IDY5O1xudmFyIE5BTUVfU1RBVEUgPSA3MztcbnZhciBDT01NRU5UX1NUQVRFID0gOTE7XG52YXIgSENSQ19TVEFURSA9IDEwMztcbnZhciBCVVNZX1NUQVRFID0gMTEzO1xudmFyIEZJTklTSF9TVEFURSA9IDY2NjtcblxudmFyIEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXG52YXIgQlNfQkxPQ0tfRE9ORSAgICAgPSAyOyAvKiBibG9jayBmbHVzaCBwZXJmb3JtZWQgKi9cbnZhciBCU19GSU5JU0hfU1RBUlRFRCA9IDM7IC8qIGZpbmlzaCBzdGFydGVkLCBuZWVkIG9ubHkgbW9yZSBvdXRwdXQgYXQgbmV4dCBkZWZsYXRlICovXG52YXIgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbnZhciBPU19DT0RFID0gMHgwMzsgLy8gVW5peCA6KSAuIERvbid0IGRldGVjdCwgdXNlIHRoaXMgZGVmYXVsdC5cblxuZnVuY3Rpb24gZXJyKHN0cm0sIGVycm9yQ29kZSkge1xuICBzdHJtLm1zZyA9IG1zZ1tlcnJvckNvZGVdO1xuICByZXR1cm4gZXJyb3JDb2RlO1xufVxuXG5mdW5jdGlvbiByYW5rKGYpIHtcbiAgcmV0dXJuICgoZikgPDwgMSkgLSAoKGYpID4gNCA/IDkgOiAwKTtcbn1cblxuZnVuY3Rpb24gemVybyhidWYpIHsgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdFxuICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cbiAqIChTZWUgYWxzbyByZWFkX2J1ZigpKS5cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcGVuZGluZyhzdHJtKSB7XG4gIHZhciBzID0gc3RybS5zdGF0ZTtcblxuICAvL190cl9mbHVzaF9iaXRzKHMpO1xuICB2YXIgbGVuID0gcy5wZW5kaW5nO1xuICBpZiAobGVuID4gc3RybS5hdmFpbF9vdXQpIHtcbiAgICBsZW4gPSBzdHJtLmF2YWlsX291dDtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybjsgfVxuXG4gIHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmdfb3V0LCBsZW4sIHN0cm0ubmV4dF9vdXQpO1xuICBzdHJtLm5leHRfb3V0ICs9IGxlbjtcbiAgcy5wZW5kaW5nX291dCArPSBsZW47XG4gIHN0cm0udG90YWxfb3V0ICs9IGxlbjtcbiAgc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xuICBzLnBlbmRpbmcgLT0gbGVuO1xuICBpZiAocy5wZW5kaW5nID09PSAwKSB7XG4gICAgcy5wZW5kaW5nX291dCA9IDA7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBmbHVzaF9ibG9ja19vbmx5KHMsIGxhc3QpIHtcbiAgdHJlZXMuX3RyX2ZsdXNoX2Jsb2NrKHMsIChzLmJsb2NrX3N0YXJ0ID49IDAgPyBzLmJsb2NrX3N0YXJ0IDogLTEpLCBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCwgbGFzdCk7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBmbHVzaF9wZW5kaW5nKHMuc3RybSk7XG59XG5cblxuZnVuY3Rpb24gcHV0X2J5dGUocywgYikge1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGI7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cbiAqIHBlbmRpbmdfYnVmLlxuICovXG5mdW5jdGlvbiBwdXRTaG9ydE1TQihzLCBiKSB7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgPj4gOCkpO1xuLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiICYgMHhmZikpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IChiID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYiAmIDB4ZmY7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyXG4gKiBhbmQgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuICBBbGwgZGVmbGF0ZSgpIGlucHV0IGdvZXMgdGhyb3VnaFxuICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcbiAqIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5pbnB1dCBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC5cbiAqIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuICovXG5mdW5jdGlvbiByZWFkX2J1ZihzdHJtLCBidWYsIHN0YXJ0LCBzaXplKSB7XG4gIHZhciBsZW4gPSBzdHJtLmF2YWlsX2luO1xuXG4gIGlmIChsZW4gPiBzaXplKSB7IGxlbiA9IHNpemU7IH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm4gMDsgfVxuXG4gIHN0cm0uYXZhaWxfaW4gLT0gbGVuO1xuXG4gIC8vIHptZW1jcHkoYnVmLCBzdHJtLT5uZXh0X2luLCBsZW4pO1xuICB1dGlscy5hcnJheVNldChidWYsIHN0cm0uaW5wdXQsIHN0cm0ubmV4dF9pbiwgbGVuLCBzdGFydCk7XG4gIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDEpIHtcbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7XG4gICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gKz0gbGVuO1xuICBzdHJtLnRvdGFsX2luICs9IGxlbjtcblxuICByZXR1cm4gbGVuO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2V0IG1hdGNoX3N0YXJ0IHRvIHRoZSBsb25nZXN0IG1hdGNoIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBzdHJpbmcgYW5kXG4gKiByZXR1cm4gaXRzIGxlbmd0aC4gTWF0Y2hlcyBzaG9ydGVyIG9yIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFyZSBkaXNjYXJkZWQsXG4gKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzXG4gKiBnYXJiYWdlLlxuICogSU4gYXNzZXJ0aW9uczogY3VyX21hdGNoIGlzIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluIGZvciB0aGUgY3VycmVudFxuICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMVxuICogT1VUIGFzc2VydGlvbjogdGhlIG1hdGNoIGxlbmd0aCBpcyBub3QgZ3JlYXRlciB0aGFuIHMtPmxvb2thaGVhZC5cbiAqL1xuZnVuY3Rpb24gbG9uZ2VzdF9tYXRjaChzLCBjdXJfbWF0Y2gpIHtcbiAgdmFyIGNoYWluX2xlbmd0aCA9IHMubWF4X2NoYWluX2xlbmd0aDsgICAgICAvKiBtYXggaGFzaCBjaGFpbiBsZW5ndGggKi9cbiAgdmFyIHNjYW4gPSBzLnN0cnN0YXJ0OyAvKiBjdXJyZW50IHN0cmluZyAqL1xuICB2YXIgbWF0Y2g7ICAgICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaGVkIHN0cmluZyAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoICovXG4gIHZhciBiZXN0X2xlbiA9IHMucHJldl9sZW5ndGg7ICAgICAgICAgICAgICAvKiBiZXN0IG1hdGNoIGxlbmd0aCBzbyBmYXIgKi9cbiAgdmFyIG5pY2VfbWF0Y2ggPSBzLm5pY2VfbWF0Y2g7ICAgICAgICAgICAgIC8qIHN0b3AgaWYgbWF0Y2ggbG9uZyBlbm91Z2ggKi9cbiAgdmFyIGxpbWl0ID0gKHMuc3Ryc3RhcnQgPiAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkgP1xuICAgICAgcy5zdHJzdGFydCAtIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMC8qTklMKi87XG5cbiAgdmFyIF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcblxuICB2YXIgd21hc2sgPSBzLndfbWFzaztcbiAgdmFyIHByZXYgID0gcy5wcmV2O1xuXG4gIC8qIFN0b3Agd2hlbiBjdXJfbWF0Y2ggYmVjb21lcyA8PSBsaW1pdC4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsXG4gICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuXG4gICAqL1xuXG4gIHZhciBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICB2YXIgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIHZhciBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuXG4gIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXG4gIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkge1xuICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcbiAgfVxuICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXMgbmVjZXNzYXJ5XG4gICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgaWYgKG5pY2VfbWF0Y2ggPiBzLmxvb2thaGVhZCkgeyBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7IH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcbiAgICAgICAgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fFxuICAgICAgICBfd2luW21hdGNoXSAgICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG4gICAgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXG4gICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0g7XG5cbiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHtcbiAgICAgIHMubWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7XG4gICAgICBiZXN0X2xlbiA9IGxlbjtcbiAgICAgIGlmIChsZW4gPj0gbmljZV9tYXRjaCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuICAgICAgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcbiAgICB9XG4gIH0gd2hpbGUgKChjdXJfbWF0Y2ggPSBwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XG5cbiAgaWYgKGJlc3RfbGVuIDw9IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIGJlc3RfbGVuO1xuICB9XG4gIHJldHVybiBzLmxvb2thaGVhZDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZpbGwgdGhlIHdpbmRvdyB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuXG4gKiBVcGRhdGVzIHN0cnN0YXJ0IGFuZCBsb29rYWhlYWQuXG4gKlxuICogSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEXG4gKiBPVVQgYXNzZXJ0aW9uczogc3Ryc3RhcnQgPD0gd2luZG93X3NpemUtTUlOX0xPT0tBSEVBRFxuICogICAgQXQgbGVhc3Qgb25lIGJ5dGUgaGFzIGJlZW4gcmVhZCwgb3IgYXZhaWxfaW4gPT0gMDsgcmVhZHMgYXJlXG4gKiAgICBwZXJmb3JtZWQgZm9yIGF0IGxlYXN0IHR3byBieXRlcyAocmVxdWlyZWQgZm9yIHRoZSB6aXAgdHJhbnNsYXRlX2VvbFxuICogICAgb3B0aW9uIC0tIG5vdCBzdXBwb3J0ZWQgaGVyZSkuXG4gKi9cbmZ1bmN0aW9uIGZpbGxfd2luZG93KHMpIHtcbiAgdmFyIF93X3NpemUgPSBzLndfc2l6ZTtcbiAgdmFyIHAsIG4sIG0sIG1vcmUsIHN0cjtcblxuICAvL0Fzc2VydChzLT5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFELCBcImFscmVhZHkgZW5vdWdoIGxvb2thaGVhZFwiKTtcblxuICBkbyB7XG4gICAgbW9yZSA9IHMud2luZG93X3NpemUgLSBzLmxvb2thaGVhZCAtIHMuc3Ryc3RhcnQ7XG5cbiAgICAvLyBKUyBpbnRzIGhhdmUgMzIgYml0LCBibG9jayBiZWxvdyBub3QgbmVlZGVkXG4gICAgLyogRGVhbCB3aXRoICFAIyQlIDY0SyBsaW1pdDogKi9cbiAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7XG4gICAgLy8gICAgaWYgKG1vcmUgPT0gMCAmJiBzLT5zdHJzdGFydCA9PSAwICYmIHMtPmxvb2thaGVhZCA9PSAwKSB7XG4gICAgLy8gICAgICAgIG1vcmUgPSB3c2l6ZTtcbiAgICAvL1xuICAgIC8vICB9IGVsc2UgaWYgKG1vcmUgPT0gKHVuc2lnbmVkKSgtMSkpIHtcbiAgICAvLyAgICAgICAgLyogVmVyeSB1bmxpa2VseSwgYnV0IHBvc3NpYmxlIG9uIDE2IGJpdCBtYWNoaW5lIGlmXG4gICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpXG4gICAgLy8gICAgICAgICAqL1xuICAgIC8vICAgICAgICBtb3JlLS07XG4gICAgLy8gICAgfVxuICAgIC8vfVxuXG5cbiAgICAvKiBJZiB0aGUgd2luZG93IGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnQgbG9va2FoZWFkLFxuICAgICAqIG1vdmUgdGhlIHVwcGVyIGhhbGYgdG8gdGhlIGxvd2VyIG9uZSB0byBtYWtlIHJvb20gaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICovXG4gICAgaWYgKHMuc3Ryc3RhcnQgPj0gX3dfc2l6ZSArIChfd19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcblxuICAgICAgdXRpbHMuYXJyYXlTZXQocy53aW5kb3csIHMud2luZG93LCBfd19zaXplLCBfd19zaXplLCAwKTtcbiAgICAgIHMubWF0Y2hfc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovXG4gICAgICBzLmJsb2NrX3N0YXJ0IC09IF93X3NpemU7XG5cbiAgICAgIC8qIFNsaWRlIHRoZSBoYXNoIHRhYmxlIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzIgYml0IHZhbHVlc1xuICAgICAgIGF0IHRoZSBleHBlbnNlIG9mIG1lbW9yeSB1c2FnZSkuIFdlIHNsaWRlIGV2ZW4gd2hlbiBsZXZlbCA9PSAwXG4gICAgICAgdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsID4gMFxuICAgICAgIGxhdGVyLiAoVXNpbmcgbGV2ZWwgMCBwZXJtYW5lbnRseSBpcyBub3QgYW4gb3B0aW1hbCB1c2FnZSBvZlxuICAgICAgIHpsaWIsIHNvIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhpcyBwYXRob2xvZ2ljYWwgY2FzZS4pXG4gICAgICAgKi9cblxuICAgICAgbiA9IHMuaGFzaF9zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLmhlYWRbLS1wXTtcbiAgICAgICAgcy5oZWFkW3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgICBuID0gX3dfc2l6ZTtcbiAgICAgIHAgPSBuO1xuICAgICAgZG8ge1xuICAgICAgICBtID0gcy5wcmV2Wy0tcF07XG4gICAgICAgIHMucHJldltwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApO1xuICAgICAgICAvKiBJZiBuIGlzIG5vdCBvbiBhbnkgaGFzaCBjaGFpbiwgcHJldltuXSBpcyBnYXJiYWdlIGJ1dFxuICAgICAgICAgKiBpdHMgdmFsdWUgd2lsbCBuZXZlciBiZSB1c2VkLlxuICAgICAgICAgKi9cbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG1vcmUgKz0gX3dfc2l6ZTtcbiAgICB9XG4gICAgaWYgKHMuc3RybS5hdmFpbF9pbiA9PT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogSWYgdGhlcmUgd2FzIG5vIHNsaWRpbmc6XG4gICAgICogICAgc3Ryc3RhcnQgPD0gV1NJWkUrTUFYX0RJU1QtMSAmJiBsb29rYWhlYWQgPD0gTUlOX0xPT0tBSEVBRCAtIDEgJiZcbiAgICAgKiAgICBtb3JlID09IHdpbmRvd19zaXplIC0gbG9va2FoZWFkIC0gc3Ryc3RhcnRcbiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gKE1JTl9MT09LQUhFQUQtMSArIFdTSVpFICsgTUFYX0RJU1QtMSlcbiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gMipXU0laRSArIDJcbiAgICAgKiBJbiB0aGUgQklHX01FTSBvciBNTUFQIGNhc2UgKG5vdCB5ZXQgc3VwcG9ydGVkKSxcbiAgICAgKiAgIHdpbmRvd19zaXplID09IGlucHV0X3NpemUgKyBNSU5fTE9PS0FIRUFEICAmJlxuICAgICAqICAgc3Ryc3RhcnQgKyBzLT5sb29rYWhlYWQgPD0gaW5wdXRfc2l6ZSA9PiBtb3JlID49IE1JTl9MT09LQUhFQUQuXG4gICAgICogT3RoZXJ3aXNlLCB3aW5kb3dfc2l6ZSA9PSAyKldTSVpFIHNvIG1vcmUgPj0gMi5cbiAgICAgKiBJZiB0aGVyZSB3YXMgc2xpZGluZywgbW9yZSA+PSBXU0laRS4gU28gaW4gYWxsIGNhc2VzLCBtb3JlID49IDIuXG4gICAgICovXG4gICAgLy9Bc3NlcnQobW9yZSA+PSAyLCBcIm1vcmUgPCAyXCIpO1xuICAgIG4gPSByZWFkX2J1ZihzLnN0cm0sIHMud2luZG93LCBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQsIG1vcmUpO1xuICAgIHMubG9va2FoZWFkICs9IG47XG5cbiAgICAvKiBJbml0aWFsaXplIHRoZSBoYXNoIHZhbHVlIG5vdyB0aGF0IHdlIGhhdmUgc29tZSBpbnB1dDogKi9cbiAgICBpZiAocy5sb29rYWhlYWQgKyBzLmluc2VydCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIHN0ciA9IHMuc3Ryc3RhcnQgLSBzLmluc2VydDtcbiAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzdHJdO1xuXG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIDFdKTsgKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIDFdKSAmIHMuaGFzaF9tYXNrO1xuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICBDYWxsIHVwZGF0ZV9oYXNoKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgIHdoaWxlIChzLmluc2VydCkge1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4gICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgICAgc3RyKys7XG4gICAgICAgIHMuaW5zZXJ0LS07XG4gICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpcyBnYXJiYWdlLFxuICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC5cbiAgICAgKi9cblxuICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcblxuICAvKiBJZiB0aGUgV0lOX0lOSVQgYnl0ZXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBkYXRhIGhhdmUgbmV2ZXIgYmVlblxuICAgKiB3cml0dGVuLCB0aGVuIHplcm8gdGhvc2UgYnl0ZXMgaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHJlcG9ydHMgb2ZcbiAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5XG4gICAqIHRoZSBsb25nZXN0IG1hdGNoIHJvdXRpbmVzLiAgVXBkYXRlIHRoZSBoaWdoIHdhdGVyIG1hcmsgZm9yIHRoZSBuZXh0XG4gICAqIHRpbWUgdGhyb3VnaCBoZXJlLiAgV0lOX0lOSVQgaXMgc2V0IHRvIE1BWF9NQVRDSCBzaW5jZSB0aGUgbG9uZ2VzdCBtYXRjaFxuICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLlxuICAgKi9cbi8vICBpZiAocy5oaWdoX3dhdGVyIDwgcy53aW5kb3dfc2l6ZSkge1xuLy8gICAgdmFyIGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG4vLyAgICB2YXIgaW5pdCA9IDA7XG4vL1xuLy8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcbi8vICAgICAgLyogUHJldmlvdXMgaGlnaCB3YXRlciBtYXJrIGJlbG93IGN1cnJlbnQgZGF0YSAtLSB6ZXJvIFdJTl9JTklUXG4vLyAgICAgICAqIGJ5dGVzIG9yIHVwIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9IHMud2luZG93X3NpemUgLSBjdXJyO1xuLy8gICAgICBpZiAoaW5pdCA+IFdJTl9JTklUKVxuLy8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgY3VyciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyID0gY3VyciArIGluaXQ7XG4vLyAgICB9XG4vLyAgICBlbHNlIGlmIChzLT5oaWdoX3dhdGVyIDwgKHVsZyljdXJyICsgV0lOX0lOSVQpIHtcbi8vICAgICAgLyogSGlnaCB3YXRlciBtYXJrIGF0IG9yIGFib3ZlIGN1cnJlbnQgZGF0YSwgYnV0IGJlbG93IGN1cnJlbnQgZGF0YVxuLy8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuLy8gICAgICAgKiB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbi8vICAgICAgICovXG4vLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIGlmIChpbml0ID4gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyKVxuLy8gICAgICAgIGluaXQgPSBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcbi8vICAgICAgcy0+aGlnaF93YXRlciArPSBpbml0O1xuLy8gICAgfVxuLy8gIH1cbi8vXG4vLyAgQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUgLSBNSU5fTE9PS0FIRUFELFxuLy8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZVxuICogdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcbiAqIG9ubHkgZm9yIHRoZSBsZXZlbD0wIGNvbXByZXNzaW9uIG9wdGlvbi5cbiAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb21cbiAqIHdpbmRvdyB0byBwZW5kaW5nX2J1Zi5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9zdG9yZWQocywgZmx1c2gpIHtcbiAgLyogU3RvcmVkIGJsb2NrcyBhcmUgbGltaXRlZCB0byAweGZmZmYgYnl0ZXMsIHBlbmRpbmdfYnVmIGlzIGxpbWl0ZWRcbiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XG4gICAqL1xuICB2YXIgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cbiAgaWYgKG1heF9ibG9ja19zaXplID4gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNSkge1xuICAgIG1heF9ibG9ja19zaXplID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNTtcbiAgfVxuXG4gIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSAxKSB7XG5cbiAgICAgIC8vQXNzZXJ0KHMtPnN0cnN0YXJ0IDwgcy0+d19zaXplK01BWF9ESVNUKHMpIHx8XG4gICAgICAvLyAgcy0+YmxvY2tfc3RhcnQgPj0gKGxvbmcpcy0+d19zaXplLCBcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fFxuLy8gICAgICAgIHMuYmxvY2tfc3RhcnQgPj0gcy53X3NpemUpKSB7XG4vLyAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICB9XG5cbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCBcImJsb2NrIGdvbmVcIik7XG4vLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcihcImJsb2NrIGdvbmVcIik7XG5cbiAgICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xuICAgIHMubG9va2FoZWFkID0gMDtcblxuICAgIC8qIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOiAqL1xuICAgIHZhciBtYXhfc3RhcnQgPSBzLmJsb2NrX3N0YXJ0ICsgbWF4X2Jsb2NrX3NpemU7XG5cbiAgICBpZiAocy5zdHJzdGFydCA9PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkge1xuICAgICAgLyogc3Ryc3RhcnQgPT0gMCBpcyBwb3NzaWJsZSB3aGVuIHdyYXBhcm91bmQgb24gMTYtYml0IG1hY2hpbmUgKi9cbiAgICAgIHMubG9va2FoZWFkID0gcy5zdHJzdGFydCAtIG1heF9zdGFydDtcbiAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuXG5cbiAgICB9XG4gICAgLyogRmx1c2ggaWYgd2UgbWF5IGhhdmUgdG8gc2xpZGUsIG90aGVyd2lzZSBibG9ja19zdGFydCBtYXkgYmVjb21lXG4gICAgICogbmVnYXRpdmUgYW5kIHRoZSBkYXRhIHdpbGwgYmUgZ29uZTpcbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQgPj0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG5cbiAgcy5pbnNlcnQgPSAwO1xuXG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuXG4gIGlmIChzLnN0cnN0YXJ0ID4gcy5ibG9ja19zdGFydCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19ORUVEX01PUkU7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuICogYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVzc2lvbiBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX2Zhc3QocywgZmx1c2gpIHtcbiAgdmFyIGhhc2hfaGVhZDsgICAgICAgIC8qIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAvKioqL1xuICAgIH1cblxuICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG4gICAgICogQXQgdGhpcyBwb2ludCB3ZSBoYXZlIGFsd2F5cyBtYXRjaF9sZW5ndGggPCBNSU5fTUFUQ0hcbiAgICAgKi9cbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiAoKHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQpIDw9IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSkge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG4gICAgfVxuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vIGNoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoKTsgLy8gZm9yIGRlYnVnIG9ubHlcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG5cbiAgICAgIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGhcbiAgICAgICAqIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSBzLm1heF9sYXp5X21hdGNoLyptYXhfaW5zZXJ0X2xlbmd0aCovICYmIHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqL1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZVxuICAgICAge1xuICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzLnN0cnN0YXJ0XTtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSkgJiBzLmhhc2hfbWFzaztcblxuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgICAvKiBJZiBsb29rYWhlYWQgPCBNSU5fTUFUQ0gsIGluc19oIGlzIGdhcmJhZ2UsIGJ1dCBpdCBkb2VzIG5vdFxuICAgICAgICAgKiBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9ICgocy5zdHJzdGFydCA8IChNSU5fTUFUQ0ggLSAxKSkgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMSk7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTYW1lIGFzIGFib3ZlLCBidXQgYWNoaWV2ZXMgYmV0dGVyIGNvbXByZXNzaW9uLiBXZSB1c2UgYSBsYXp5XG4gKiBldmFsdWF0aW9uIGZvciBtYXRjaGVzOiBhIG1hdGNoIGlzIGZpbmFsbHkgYWRvcHRlZCBvbmx5IGlmIHRoZXJlIGlzXG4gKiBubyBiZXR0ZXIgbWF0Y2ggYXQgdGhlIG5leHQgd2luZG93IHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3Nsb3cocywgZmx1c2gpIHtcbiAgdmFyIGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICB2YXIgbWF4X2luc2VydDtcblxuICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqL1xuICAgIHMucHJldl9sZW5ndGggPSBzLm1hdGNoX2xlbmd0aDtcbiAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblxuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmIHMucHJldl9sZW5ndGggPCBzLm1heF9sYXp5X21hdGNoICYmXG4gICAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkvKk1BWF9ESVNUKHMpKi8pIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gNSAmJlxuICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xuXG4gICAgICAgIC8qIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2VcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cbiAgICAgICAgICovXG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcbiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxlIGJleW9uZCB0aGlzLiAqL1xuXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuICAgICAgLyoqKl90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG4gICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG4gICAgICAgKiB0aGUgaGFzaCB0YWJsZS5cbiAgICAgICAqL1xuICAgICAgcy5sb29rYWhlYWQgLT0gcy5wcmV2X2xlbmd0aCAtIDE7XG4gICAgICBzLnByZXZfbGVuZ3RoIC09IDI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoLS1zLnByZXZfbGVuZ3RoICE9PSAwKTtcbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqKi9cbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAgIC8qIElmIHRoZXJlIHdhcyBubyBtYXRjaCBhdCB0aGUgcHJldmlvdXMgcG9zaXRpb24sIG91dHB1dCBhXG4gICAgICAgKiBzaW5nbGUgbGl0ZXJhbC4gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYnV0IHRoZSBjdXJyZW50IG1hdGNoXG4gICAgICAgKiBpcyBsb25nZXIsIHRydW5jYXRlIHRoZSBwcmV2aW91cyBtYXRjaCB0byBhIHNpbmdsZSBsaXRlcmFsLlxuICAgICAgICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0tfT05MWShzLCAwKSAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICAvKioqL1xuICAgICAgfVxuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3JcbiAgICAgICAqIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZmx1c2ggIT0gWl9OT19GTFVTSCwgXCJubyBmbHVzaD9cIik7XG4gIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgfVxuICBzLmluc2VydCA9IHMuc3Ryc3RhcnQgPCBNSU5fTUFUQ0ggLSAxID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDE7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfUkxFLCBzaW1wbHkgbG9vayBmb3IgcnVucyBvZiBieXRlcywgZ2VuZXJhdGUgbWF0Y2hlcyBvbmx5IG9mIGRpc3RhbmNlXG4gKiBvbmUuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLiAgKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2ZcbiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLilcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9ybGUocywgZmx1c2gpIHtcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cbiAgdmFyIHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICB2YXIgc2Nhbiwgc3RyZW5kOyAgICAgIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi9cblxuICB2YXIgX3dpbiA9IHMud2luZG93O1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbG9uZ2VzdCBydW4sIHBsdXMgb25lIGZvciB0aGUgdW5yb2xsZWQgbG9vcC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0ggJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIFNlZSBob3cgbWFueSB0aW1lcyB0aGUgcHJldmlvdXMgYnl0ZSByZXBlYXRzICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCA+IDApIHtcbiAgICAgIHNjYW4gPSBzLnN0cnN0YXJ0IC0gMTtcbiAgICAgIHByZXYgPSBfd2luW3NjYW5dO1xuICAgICAgaWYgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dKSB7XG4gICAgICAgIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICAgICAgfSB3aGlsZSAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBzY2FuIDwgc3RyZW5kKTtcbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+IHMubG9va2FoZWFkKSB7XG4gICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBzLmxvb2thaGVhZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVJbnQpKHMtPndpbmRvd19zaXplLTEpLCBcIndpbGQgc2NhblwiKTtcbiAgICB9XG5cbiAgICAvKiBFbWl0IG1hdGNoIGlmIGhhdmUgcnVuIG9mIE1JTl9NQVRDSCBvciBsb25nZXIsIGVsc2UgZW1pdCBsaXRlcmFsICovXG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLnN0cnN0YXJ0IC0gMSwgcy5tYXRjaF9sZW5ndGgpO1xuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9IDA7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9IVUZGTUFOX09OTFksIGRvIG5vdCBsb29rIGZvciBtYXRjaGVzLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS5cbiAqIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIEh1ZmZtYW4uKVxuICovXG5mdW5jdGlvbiBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIHtcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYSBsaXRlcmFsIHRvIHdyaXRlLiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICBicmVhazsgICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuICAgIHMubG9va2FoZWFkLS07XG4gICAgcy5zdHJzdGFydCsrO1xuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiBWYWx1ZXMgZm9yIG1heF9sYXp5X21hdGNoLCBnb29kX21hdGNoIGFuZCBtYXhfY2hhaW5fbGVuZ3RoLCBkZXBlbmRpbmcgb25cbiAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0b1xuICogZXhjbHVkZSB3b3JzdCBjYXNlIHBlcmZvcm1hbmNlIGZvciBwYXRob2xvZ2ljYWwgZmlsZXMuIEJldHRlciB2YWx1ZXMgbWF5IGJlXG4gKiBmb3VuZCBmb3Igc3BlY2lmaWMgZmlsZXMuXG4gKi9cbmZ1bmN0aW9uIENvbmZpZyhnb29kX2xlbmd0aCwgbWF4X2xhenksIG5pY2VfbGVuZ3RoLCBtYXhfY2hhaW4sIGZ1bmMpIHtcbiAgdGhpcy5nb29kX2xlbmd0aCA9IGdvb2RfbGVuZ3RoO1xuICB0aGlzLm1heF9sYXp5ID0gbWF4X2xhenk7XG4gIHRoaXMubmljZV9sZW5ndGggPSBuaWNlX2xlbmd0aDtcbiAgdGhpcy5tYXhfY2hhaW4gPSBtYXhfY2hhaW47XG4gIHRoaXMuZnVuYyA9IGZ1bmM7XG59XG5cbnZhciBjb25maWd1cmF0aW9uX3RhYmxlO1xuXG5jb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmZ1bmN0aW9uIGxtX2luaXQocykge1xuICBzLndpbmRvd19zaXplID0gMiAqIHMud19zaXplO1xuXG4gIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cbiAgLyogU2V0IHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyczpcbiAgICovXG4gIHMubWF4X2xhenlfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9sYXp5O1xuICBzLmdvb2RfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmdvb2RfbGVuZ3RoO1xuICBzLm5pY2VfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm5pY2VfbGVuZ3RoO1xuICBzLm1heF9jaGFpbl9sZW5ndGggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9jaGFpbjtcblxuICBzLnN0cnN0YXJ0ID0gMDtcbiAgcy5ibG9ja19zdGFydCA9IDA7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5pbnNlcnQgPSAwO1xuICBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHMuaW5zX2ggPSAwO1xufVxuXG5cbmZ1bmN0aW9uIERlZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7ICAgICAgICAgICAgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbDsgICAgICAvKiBvdXRwdXQgc3RpbGwgcGVuZGluZyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgICAgICAgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi9cbiAgdGhpcy5wZW5kaW5nID0gMDsgICAgICAgICAgIC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmd6aGVhZCA9IG51bGw7ICAgICAgICAgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgICAgICAgICAgIC8qIHdoZXJlIGluIGV4dHJhLCBuYW1lLCBvciBjb21tZW50ICovXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi9cbiAgdGhpcy5sYXN0X2ZsdXNoID0gLTE7ICAgLyogdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbCAqL1xuXG4gIHRoaXMud19zaXplID0gMDsgIC8qIExaNzcgd2luZG93IHNpemUgKDMySyBieSBkZWZhdWx0KSAqL1xuICB0aGlzLndfYml0cyA9IDA7ICAvKiBsb2cyKHdfc2l6ZSkgICg4Li4xNikgKi9cbiAgdGhpcy53X21hc2sgPSAwOyAgLyogd19zaXplIC0gMSAqL1xuXG4gIHRoaXMud2luZG93ID0gbnVsbDtcbiAgLyogU2xpZGluZyB3aW5kb3cuIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW5kb3csXG4gICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXG4gICAqIGJ5dGVzLiBXaXRoIHRoaXMgb3JnYW5pemF0aW9uLCBtYXRjaGVzIGFyZSBsaW1pdGVkIHRvIGEgZGlzdGFuY2Ugb2ZcbiAgICogd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG4gICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLlxuICAgKi9cblxuICB0aGlzLndpbmRvd19zaXplID0gMDtcbiAgLyogQWN0dWFsIHNpemUgb2Ygd2luZG93OiAyKndTaXplLCBleGNlcHQgd2hlbiB0aGUgdXNlciBpbnB1dCBidWZmZXJcbiAgICogaXMgZGlyZWN0bHkgdXNlZCBhcyBzbGlkaW5nIHdpbmRvdy5cbiAgICovXG5cbiAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXNcbiAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy5cbiAgICogQW4gaW5kZXggaW4gdGhpcyBhcnJheSBpcyB0aHVzIGEgd2luZG93IGluZGV4IG1vZHVsbyAzMksuXG4gICAqL1xuXG4gIHRoaXMuaGVhZCA9IG51bGw7ICAgLyogSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC4gKi9cblxuICB0aGlzLmluc19oID0gMDsgICAgICAgLyogaGFzaCBpbmRleCBvZiBzdHJpbmcgdG8gYmUgaW5zZXJ0ZWQgKi9cbiAgdGhpcy5oYXNoX3NpemUgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiBoYXNoIHRhYmxlICovXG4gIHRoaXMuaGFzaF9iaXRzID0gMDsgICAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cbiAgdGhpcy5oYXNoX21hc2sgPSAwOyAgIC8qIGhhc2hfc2l6ZS0xICovXG5cbiAgdGhpcy5oYXNoX3NoaWZ0ID0gMDtcbiAgLyogTnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggaW5zX2ggbXVzdCBiZSBzaGlmdGVkIGF0IGVhY2ggaW5wdXRcbiAgICogc3RlcC4gSXQgbXVzdCBiZSBzdWNoIHRoYXQgYWZ0ZXIgTUlOX01BVENIIHN0ZXBzLCB0aGUgb2xkZXN0XG4gICAqIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOlxuICAgKiAgIGhhc2hfc2hpZnQgKiBNSU5fTUFUQ0ggPj0gaGFzaF9iaXRzXG4gICAqL1xuXG4gIHRoaXMuYmxvY2tfc3RhcnQgPSAwO1xuICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHNcbiAgICogbmVnYXRpdmUgd2hlbiB0aGUgd2luZG93IGlzIG1vdmVkIGJhY2t3YXJkcy5cbiAgICovXG5cbiAgdGhpcy5tYXRjaF9sZW5ndGggPSAwOyAgICAgIC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovXG4gIHRoaXMucHJldl9tYXRjaCA9IDA7ICAgICAgICAvKiBwcmV2aW91cyBtYXRjaCAqL1xuICB0aGlzLm1hdGNoX2F2YWlsYWJsZSA9IDA7ICAgLyogc2V0IGlmIHByZXZpb3VzIG1hdGNoIGV4aXN0cyAqL1xuICB0aGlzLnN0cnN0YXJ0ID0gMDsgICAgICAgICAgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqL1xuICB0aGlzLm1hdGNoX3N0YXJ0ID0gMDsgICAgICAgLyogc3RhcnQgb2YgbWF0Y2hpbmcgc3RyaW5nICovXG4gIHRoaXMubG9va2FoZWFkID0gMDsgICAgICAgICAvKiBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luZG93ICovXG5cbiAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7XG4gIC8qIExlbmd0aCBvZiB0aGUgYmVzdCBtYXRjaCBhdCBwcmV2aW91cyBzdGVwLiBNYXRjaGVzIG5vdCBncmVhdGVyIHRoYW4gdGhpc1xuICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi5cbiAgICovXG5cbiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDtcbiAgLyogVG8gc3BlZWQgdXAgZGVmbGF0aW9uLCBoYXNoIGNoYWlucyBhcmUgbmV2ZXIgc2VhcmNoZWQgYmV5b25kIHRoaXNcbiAgICogbGVuZ3RoLiAgQSBoaWdoZXIgbGltaXQgaW1wcm92ZXMgY29tcHJlc3Npb24gcmF0aW8gYnV0IGRlZ3JhZGVzIHRoZVxuICAgKiBzcGVlZC5cbiAgICovXG5cbiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XG4gIC8qIEF0dGVtcHQgdG8gZmluZCBhIGJldHRlciBtYXRjaCBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgbWF0Y2ggaXMgc3RyaWN0bHlcbiAgICogc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb25cbiAgICogbGV2ZWxzID49IDQuXG4gICAqL1xuICAvLyBUaGF0J3MgYWxpYXMgdG8gbWF4X2xhenlfbWF0Y2gsIGRvbid0IHVzZSBkaXJlY3RseVxuICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xuICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdFxuICAgKiBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG4gICAqL1xuXG4gIHRoaXMubGV2ZWwgPSAwOyAgICAgLyogY29tcHJlc3Npb24gbGV2ZWwgKDEuLjkpICovXG4gIHRoaXMuc3RyYXRlZ3kgPSAwOyAgLyogZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmcqL1xuXG4gIHRoaXMuZ29vZF9tYXRjaCA9IDA7XG4gIC8qIFVzZSBhIGZhc3RlciBzZWFyY2ggd2hlbiB0aGUgcHJldmlvdXMgbWF0Y2ggaXMgbG9uZ2VyIHRoYW4gdGhpcyAqL1xuXG4gIHRoaXMubmljZV9tYXRjaCA9IDA7IC8qIFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi9cblxuICAgICAgICAgICAgICAvKiB1c2VkIGJ5IHRyZWVzLmM6ICovXG5cbiAgLyogRGlkbid0IHVzZSBjdF9kYXRhIHR5cGVkZWYgYmVsb3cgdG8gc3VwcHJlc3MgY29tcGlsZXIgd2FybmluZyAqL1xuXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2x0cmVlW0hFQVBfU0laRV07ICAgLyogbGl0ZXJhbCBhbmQgbGVuZ3RoIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fZHRyZWVbMipEX0NPREVTKzFdOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgYmxfdHJlZVsyKkJMX0NPREVTKzFdOyAgLyogSHVmZm1hbiB0cmVlIGZvciBiaXQgbGVuZ3RocyAqL1xuXG4gIC8vIFVzZSBmbGF0IGFycmF5IG9mIERPVUJMRSBzaXplLCB3aXRoIGludGVybGVhdmVkIGZhdGEsXG4gIC8vIGJlY2F1c2UgSlMgZG9lcyBub3Qgc3VwcG9ydCBlZmZlY3RpdmVcbiAgdGhpcy5keW5fbHRyZWUgID0gbmV3IHV0aWxzLkJ1ZjE2KEhFQVBfU0laRSAqIDIpO1xuICB0aGlzLmR5bl9kdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoKDIgKiBEX0NPREVTICsgMSkgKiAyKTtcbiAgdGhpcy5ibF90cmVlICAgID0gbmV3IHV0aWxzLkJ1ZjE2KCgyICogQkxfQ09ERVMgKyAxKSAqIDIpO1xuICB6ZXJvKHRoaXMuZHluX2x0cmVlKTtcbiAgemVybyh0aGlzLmR5bl9kdHJlZSk7XG4gIHplcm8odGhpcy5ibF90cmVlKTtcblxuICB0aGlzLmxfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgbGl0ZXJhbCB0cmVlICovXG4gIHRoaXMuZF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBkaXN0YW5jZSB0cmVlICovXG4gIHRoaXMuYmxfZGVzYyAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cblxuICAvL3VzaCBibF9jb3VudFtNQVhfQklUUysxXTtcbiAgdGhpcy5ibF9jb3VudCA9IG5ldyB1dGlscy5CdWYxNihNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgdGhpcy5oZWFwID0gbmV3IHV0aWxzLkJ1ZjE2KDIgKiBMX0NPREVTICsgMSk7ICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgemVybyh0aGlzLmhlYXApO1xuXG4gIHRoaXMuaGVhcF9sZW4gPSAwOyAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcCAqL1xuICB0aGlzLmhlYXBfbWF4ID0gMDsgICAgICAgICAgICAgICAvKiBlbGVtZW50IG9mIGxhcmdlc3QgZnJlcXVlbmN5ICovXG4gIC8qIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqIFRoZSBzYW1lIGhlYXAgYXJyYXkgaXMgdXNlZCB0byBidWlsZCBhbGwgdHJlZXMuXG4gICAqL1xuXG4gIHRoaXMuZGVwdGggPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgLy91Y2ggZGVwdGhbMipMX0NPREVTKzFdO1xuICB6ZXJvKHRoaXMuZGVwdGgpO1xuICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG4gICAqL1xuXG4gIHRoaXMubF9idWYgPSAwOyAgICAgICAgICAvKiBidWZmZXIgaW5kZXggZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHMgKi9cblxuICB0aGlzLmxpdF9idWZzaXplID0gMDtcbiAgLyogU2l6ZSBvZiBtYXRjaCBidWZmZXIgZm9yIGxpdGVyYWxzL2xlbmd0aHMuICBUaGVyZSBhcmUgNCByZWFzb25zIGZvclxuICAgKiBsaW1pdGluZyBsaXRfYnVmc2l6ZSB0byA2NEs6XG4gICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnNcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZmlyc3QgYmxvY2ssIGFsbCBpbnB1dFxuICAgKiAgICAgZGF0YSBpcyBzdGlsbCBpbiB0aGUgd2luZG93IHNvIHdlIGNhbiBzdGlsbCBlbWl0IGEgc3RvcmVkIGJsb2NrIGV2ZW5cbiAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yXG4gICAqICAgICBhbGwgYmxvY2tzIGlmIGxpdF9idWZzaXplIGlzIG5vdCBncmVhdGVyIHRoYW4gMzJLLilcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciBhIGZpbGUgc21hbGxlciB0aGFuIDY0Sywgd2UgY2FuXG4gICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuXG4gICAqICAgICBUaGlzIGlzIGFwcGxpY2FibGUgb25seSBmb3IgemlwIChub3QgZ3ppcCBvciB6bGliKS5cbiAgICogICAtIGNyZWF0aW5nIG5ldyBIdWZmbWFuIHRyZWVzIGxlc3MgZnJlcXVlbnRseSBtYXkgbm90IHByb3ZpZGUgZmFzdFxuICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvclxuICAgKiAgICAgZXhhbXBsZSBhIGJpbmFyeSBmaWxlIHdpdGggcG9vcmx5IGNvbXByZXNzaWJsZSBjb2RlIGZvbGxvd2VkIGJ5XG4gICAqICAgICBhIGhpZ2hseSBjb21wcmVzc2libGUgc3RyaW5nIHRhYmxlLikgU21hbGxlciBidWZmZXIgc2l6ZXMgZ2l2ZVxuICAgKiAgICAgZmFzdCBhZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nXG4gICAqICAgICB0cmVlcyBtb3JlIGZyZXF1ZW50bHkuXG4gICAqICAgLSBJIGNhbid0IGNvdW50IGFib3ZlIDRcbiAgICovXG5cbiAgdGhpcy5sYXN0X2xpdCA9IDA7ICAgICAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqL1xuXG4gIHRoaXMuZF9idWYgPSAwO1xuICAvKiBCdWZmZXIgaW5kZXggZm9yIGRpc3RhbmNlcy4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIGRfYnVmIGFuZCBsX2J1ZiBoYXZlXG4gICAqIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy4gVG8gdXNlIGRpZmZlcmVudCBsZW5ndGhzLCBhbiBleHRyYSBmbGFnXG4gICAqIGFycmF5IHdvdWxkIGJlIG5lY2Vzc2FyeS5cbiAgICovXG5cbiAgdGhpcy5vcHRfbGVuID0gMDsgICAgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggb3B0aW1hbCB0cmVlcyAqL1xuICB0aGlzLnN0YXRpY19sZW4gPSAwOyAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBzdGF0aWMgdHJlZXMgKi9cbiAgdGhpcy5tYXRjaGVzID0gMDsgICAgICAgLyogbnVtYmVyIG9mIHN0cmluZyBtYXRjaGVzIGluIGN1cnJlbnQgYmxvY2sgKi9cbiAgdGhpcy5pbnNlcnQgPSAwOyAgICAgICAgLyogYnl0ZXMgYXQgZW5kIG9mIHdpbmRvdyBsZWZ0IHRvIGluc2VydCAqL1xuXG5cbiAgdGhpcy5iaV9idWYgPSAwO1xuICAvKiBPdXRwdXQgYnVmZmVyLiBiaXRzIGFyZSBpbnNlcnRlZCBzdGFydGluZyBhdCB0aGUgYm90dG9tIChsZWFzdFxuICAgKiBzaWduaWZpY2FudCBiaXRzKS5cbiAgICovXG4gIHRoaXMuYmlfdmFsaWQgPSAwO1xuICAvKiBOdW1iZXIgb2YgdmFsaWQgYml0cyBpbiBiaV9idWYuICBBbGwgYml0cyBhYm92ZSB0aGUgbGFzdCB2YWxpZCBiaXRcbiAgICogYXJlIGFsd2F5cyB6ZXJvLlxuICAgKi9cblxuICAvLyBVc2VkIGZvciB3aW5kb3cgbWVtb3J5IGluaXQuIFdlIHNhZmVseSBpZ25vcmUgaXQgZm9yIEpTLiBUaGF0IG1ha2VzXG4gIC8vIHNlbnNlIG9ubHkgZm9yIHBvaW50ZXJzIGFuZCBtZW1vcnkgY2hlY2sgdG9vbHMuXG4gIC8vdGhpcy5oaWdoX3dhdGVyID0gMDtcbiAgLyogSGlnaCB3YXRlciBtYXJrIG9mZnNldCBpbiB3aW5kb3cgZm9yIGluaXRpYWxpemVkIGJ5dGVzIC0tIGJ5dGVzIGFib3ZlXG4gICAqIHRoaXMgYXJlIHNldCB0byB6ZXJvIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayB3YXJuaW5ncyB3aGVuXG4gICAqIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMgYWNjZXNzIGJ5dGVzIHBhc3QgdGhlIGlucHV0LiAgVGhpcyBpcyB0aGVuXG4gICAqIHVwZGF0ZWQgdG8gdGhlIG5ldyBoaWdoIHdhdGVyIG1hcmsuXG4gICAqL1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVSZXNldEtlZXAoc3RybSkge1xuICB2YXIgcztcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG4gIHN0cm0uZGF0YV90eXBlID0gWl9VTktOT1dOO1xuXG4gIHMgPSBzdHJtLnN0YXRlO1xuICBzLnBlbmRpbmcgPSAwO1xuICBzLnBlbmRpbmdfb3V0ID0gMDtcblxuICBpZiAocy53cmFwIDwgMCkge1xuICAgIHMud3JhcCA9IC1zLndyYXA7XG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cbiAgfVxuICBzLnN0YXR1cyA9IChzLndyYXAgPyBJTklUX1NUQVRFIDogQlVTWV9TVEFURSk7XG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XG4gICAgMCAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICA6XG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXG4gIHMubGFzdF9mbHVzaCA9IFpfTk9fRkxVU0g7XG4gIHRyZWVzLl90cl9pbml0KHMpO1xuICByZXR1cm4gWl9PSztcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSykge1xuICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlU2V0SGVhZGVyKHN0cm0sIGhlYWQpIHtcbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBpZiAoc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdHJtLnN0YXRlLmd6aGVhZCA9IGhlYWQ7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgbWV0aG9kLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3kpIHtcbiAgaWYgKCFzdHJtKSB7IC8vID09PSBaX05VTExcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgdmFyIHdyYXAgPSAxO1xuXG4gIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XG4gICAgbGV2ZWwgPSA2O1xuICB9XG5cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKHdpbmRvd0JpdHMgPiAxNSkge1xuICAgIHdyYXAgPSAyOyAgICAgICAgICAgLyogd3JpdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgKi9cbiAgICB3aW5kb3dCaXRzIC09IDE2O1xuICB9XG5cblxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHxcbiAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuICAgIHN0cmF0ZWd5IDwgMCB8fCBzdHJhdGVneSA+IFpfRklYRUQpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG5cbiAgaWYgKHdpbmRvd0JpdHMgPT09IDgpIHtcbiAgICB3aW5kb3dCaXRzID0gOTtcbiAgfVxuICAvKiB1bnRpbCAyNTYtYnl0ZSB3aW5kb3cgYnVnIGZpeGVkICovXG5cbiAgdmFyIHMgPSBuZXcgRGVmbGF0ZVN0YXRlKCk7XG5cbiAgc3RybS5zdGF0ZSA9IHM7XG4gIHMuc3RybSA9IHN0cm07XG5cbiAgcy53cmFwID0gd3JhcDtcbiAgcy5nemhlYWQgPSBudWxsO1xuICBzLndfYml0cyA9IHdpbmRvd0JpdHM7XG4gIHMud19zaXplID0gMSA8PCBzLndfYml0cztcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cbiAgcy5oYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcbiAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG4gIHMuaGFzaF9zaGlmdCA9IH5+KChzLmhhc2hfYml0cyArIE1JTl9NQVRDSCAtIDEpIC8gTUlOX01BVENIKTtcblxuICBzLndpbmRvdyA9IG5ldyB1dGlscy5CdWY4KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyB1dGlscy5CdWYxNihzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyB1dGlscy5CdWYxNihzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG5cbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcbiAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgdXRpbHMuQnVmOChzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPmRfYnVmID0gb3ZlcmxheSArIHMtPmxpdF9idWZzaXplL3NpemVvZih1c2gpO1xuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplO1xuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59XG5cbmZ1bmN0aW9uIGRlZmxhdGVJbml0KHN0cm0sIGxldmVsKSB7XG4gIHJldHVybiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIFpfREVGTEFURUQsIE1BWF9XQklUUywgREVGX01FTV9MRVZFTCwgWl9ERUZBVUxUX1NUUkFURUdZKTtcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlKHN0cm0sIGZsdXNoKSB7XG4gIHZhciBvbGRfZmx1c2gsIHM7XG4gIHZhciBiZWcsIHZhbDsgLy8gZm9yIGd6aXAgaGVhZGVyIHdyaXRlIG9ubHlcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHxcbiAgICBmbHVzaCA+IFpfQkxPQ0sgfHwgZmx1c2ggPCAwKSB7XG4gICAgcmV0dXJuIHN0cm0gPyBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpIDogWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzID0gc3RybS5zdGF0ZTtcblxuICBpZiAoIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgfHxcbiAgICAgIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9PSBaX0ZJTklTSCkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIChzdHJtLmF2YWlsX291dCA9PT0gMCkgPyBaX0JVRl9FUlJPUiA6IFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHMuc3RybSA9IHN0cm07IC8qIGp1c3QgaW4gY2FzZSAqL1xuICBvbGRfZmx1c2ggPSBzLmxhc3RfZmx1c2g7XG4gIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xuXG4gIC8qIFdyaXRlIHRoZSBoZWFkZXIgKi9cbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFKSB7XG5cbiAgICBpZiAocy53cmFwID09PSAyKSB7IC8vIEdaSVAgaGVhZGVyXG4gICAgICBzdHJtLmFkbGVyID0gMDsgIC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAzMSk7XG4gICAgICBwdXRfYnl0ZShzLCAxMzkpO1xuICAgICAgcHV0X2J5dGUocywgOCk7XG4gICAgICBpZiAoIXMuZ3poZWFkKSB7IC8vIHMtPmd6aGVhZCA9PSBaX05VTExcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIE9TX0NPREUpO1xuICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuZXh0cmEgPyAwIDogNCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpXG4gICAgICAgICk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLnRpbWUgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMTYpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLm9zICYgMHhmZik7XG4gICAgICAgIGlmIChzLmd6aGVhZC5leHRyYSAmJiBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmKTtcbiAgICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDgpICYgMHhmZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IEVYVFJBX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIC8vIERFRkxBVEUgaGVhZGVyXG4gICAge1xuICAgICAgdmFyIGhlYWRlciA9IChaX0RFRkxBVEVEICsgKChzLndfYml0cyAtIDgpIDw8IDQpKSA8PCA4O1xuICAgICAgdmFyIGxldmVsX2ZsYWdzID0gLTE7XG5cbiAgICAgIGlmIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyKSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA8IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMztcbiAgICAgIH1cbiAgICAgIGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgeyBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7IH1cbiAgICAgIGhlYWRlciArPSAzMSAtIChoZWFkZXIgJSAzMSk7XG5cbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIHB1dFNob3J0TVNCKHMsIGhlYWRlcik7XG5cbiAgICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgICAgIH1cbiAgICAgIHN0cm0uYWRsZXIgPSAxOyAvLyBhZGxlcjMyKDBMLCBaX05VTEwsIDApO1xuICAgIH1cbiAgfVxuXG4vLyNpZmRlZiBHWklQXG4gIGlmIChzLnN0YXR1cyA9PT0gRVhUUkFfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuZXh0cmEvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuXG4gICAgICB3aGlsZSAocy5nemluZGV4IDwgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikpIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYVtzLmd6aW5kZXhdICYgMHhmZik7XG4gICAgICAgIHMuZ3ppbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAocy5nemluZGV4ID09PSBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBOQU1FX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLm5hbWUvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5uYW1lLmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IENPTU1FTlRfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuY29tbWVudC8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICAvL2ludCB2YWw7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLmNvbW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gSENSQ19TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgfVxuICAgICAgaWYgKHMucGVuZGluZyArIDIgPD0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgfVxuICB9XG4vLyNlbmRpZlxuXG4gIC8qIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUgKi9cbiAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoXG4gICAgICAgKiBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxuICAgICAgICogYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG4gICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICogcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxuICAgICAgICovXG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LO1xuICAgIH1cblxuICAgIC8qIE1ha2Ugc3VyZSB0aGVyZSBpcyBzb21ldGhpbmcgdG8gZG8gYW5kIGF2b2lkIGR1cGxpY2F0ZSBjb25zZWN1dGl2ZVxuICAgICAqIGZsdXNoZXMuIEZvciByZXBlYXRlZCBhbmQgdXNlbGVzcyBjYWxscyB3aXRoIFpfRklOSVNILCB3ZSBrZWVwXG4gICAgICogcmV0dXJuaW5nIFpfU1RSRUFNX0VORCBpbnN0ZWFkIG9mIFpfQlVGX0VSUk9SLlxuICAgICAqL1xuICB9IGVsc2UgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgcmFuayhmbHVzaCkgPD0gcmFuayhvbGRfZmx1c2gpICYmXG4gICAgZmx1c2ggIT09IFpfRklOSVNIKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7XG4gIH1cblxuICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xuICBpZiAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7XG4gIH1cblxuICAvKiBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuXG4gICAqL1xuICBpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBzLmxvb2thaGVhZCAhPT0gMCB8fFxuICAgIChmbHVzaCAhPT0gWl9OT19GTFVTSCAmJiBzLnN0YXR1cyAhPT0gRklOSVNIX1NUQVRFKSkge1xuICAgIHZhciBic3RhdGUgPSAocy5zdHJhdGVneSA9PT0gWl9IVUZGTUFOX09OTFkpID8gZGVmbGF0ZV9odWZmKHMsIGZsdXNoKSA6XG4gICAgICAocy5zdHJhdGVneSA9PT0gWl9STEUgPyBkZWZsYXRlX3JsZShzLCBmbHVzaCkgOlxuICAgICAgICBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmZ1bmMocywgZmx1c2gpKTtcblxuICAgIGlmIChic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX0RPTkUpIHtcbiAgICAgIHMuc3RhdHVzID0gRklOSVNIX1NUQVRFO1xuICAgIH1cbiAgICBpZiAoYnN0YXRlID09PSBCU19ORUVEX01PUkUgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgICAvKiBhdm9pZCBCVUZfRVJST1IgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi9cbiAgICAgIH1cbiAgICAgIHJldHVybiBaX09LO1xuICAgICAgLyogSWYgZmx1c2ggIT0gWl9OT19GTFVTSCAmJiBhdmFpbF9vdXQgPT0gMCwgdGhlIG5leHQgY2FsbFxuICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmVcbiAgICAgICAqIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxuICAgICAgICogZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc29cbiAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdFxuICAgICAgICogb25lIGVtcHR5IGJsb2NrLlxuICAgICAgICovXG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHtcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9QQVJUSUFMX0ZMVVNIKSB7XG4gICAgICAgIHRyZWVzLl90cl9hbGlnbihzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZsdXNoICE9PSBaX0JMT0NLKSB7IC8qIEZVTExfRkxVU0ggb3IgU1lOQ19GTFVTSCAqL1xuXG4gICAgICAgIHRyZWVzLl90cl9zdG9yZWRfYmxvY2socywgMCwgMCwgZmFsc2UpO1xuICAgICAgICAvKiBGb3IgYSBmdWxsIGZsdXNoLCB0aGlzIGVtcHR5IGJsb2NrIHdpbGwgYmUgcmVjb2duaXplZFxuICAgICAgICAgKiBhcyBhIHNwZWNpYWwgbWFya2VyIGJ5IGluZmxhdGVfc3luYygpLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGZsdXNoID09PSBaX0ZVTExfRkxVU0gpIHtcbiAgICAgICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8gICAgICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi9cbiAgICAgICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cbiAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgICAgIHMuc3Ryc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG4gICAgICAgICAgICBzLmluc2VydCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xOyAvKiBhdm9pZCBCVUZfRVJST1IgYXQgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi9cbiAgICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0KHN0cm0tPmF2YWlsX291dCA+IDAsIFwiYnVnMlwiKTtcbiAgLy9pZiAoc3RybS5hdmFpbF9vdXQgPD0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJidWcyXCIpO31cblxuICBpZiAoZmx1c2ggIT09IFpfRklOSVNIKSB7IHJldHVybiBaX09LOyB9XG4gIGlmIChzLndyYXAgPD0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRU5EOyB9XG5cbiAgLyogV3JpdGUgdGhlIHRyYWlsZXIgKi9cbiAgaWYgKHMud3JhcCA9PT0gMikge1xuICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDI0KSAmIDB4ZmYpO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgfVxuXG4gIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gIC8qIElmIGF2YWlsX291dCBpcyB6ZXJvLCB0aGUgYXBwbGljYXRpb24gd2lsbCBjYWxsIGRlZmxhdGUgYWdhaW5cbiAgICogdG8gZmx1c2ggdGhlIHJlc3QuXG4gICAqL1xuICBpZiAocy53cmFwID4gMCkgeyBzLndyYXAgPSAtcy53cmFwOyB9XG4gIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi9cbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7XG59XG5cbmZ1bmN0aW9uIGRlZmxhdGVFbmQoc3RybSkge1xuICB2YXIgc3RhdHVzO1xuXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgc3RhdHVzID0gc3RybS5zdGF0ZS5zdGF0dXM7XG4gIGlmIChzdGF0dXMgIT09IElOSVRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBOQU1FX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBDT01NRU5UX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBCVVNZX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBGSU5JU0hfU1RBVEVcbiAgKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzdHJtLnN0YXRlID0gbnVsbDtcblxuICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemVzIHRoZSBjb21wcmVzc2lvbiBkaWN0aW9uYXJ5IGZyb20gdGhlIGdpdmVuIGJ5dGVcbiAqIHNlcXVlbmNlIHdpdGhvdXQgcHJvZHVjaW5nIGFueSBjb21wcmVzc2VkIG91dHB1dC5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSkge1xuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIHZhciBzO1xuICB2YXIgc3RyLCBuO1xuICB2YXIgd3JhcDtcbiAgdmFyIGF2YWlsO1xuICB2YXIgbmV4dDtcbiAgdmFyIGlucHV0O1xuICB2YXIgdG1wRGljdDtcblxuICBpZiAoIXN0cm0vKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlLyo9PSBaX05VTEwqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuICB3cmFwID0gcy53cmFwO1xuXG4gIGlmICh3cmFwID09PSAyIHx8ICh3cmFwID09PSAxICYmIHMuc3RhdHVzICE9PSBJTklUX1NUQVRFKSB8fCBzLmxvb2thaGVhZCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIC8qIHdoZW4gdXNpbmcgemxpYiB3cmFwcGVycywgY29tcHV0ZSBBZGxlci0zMiBmb3IgcHJvdmlkZWQgZGljdGlvbmFyeSAqL1xuICBpZiAod3JhcCA9PT0gMSkge1xuICAgIC8qIGFkbGVyMzIoc3RybS0+YWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICB9XG5cbiAgcy53cmFwID0gMDsgICAvKiBhdm9pZCBjb21wdXRpbmcgQWRsZXItMzIgaW4gcmVhZF9idWYgKi9cblxuICAvKiBpZiBkaWN0aW9uYXJ5IHdvdWxkIGZpbGwgd2luZG93LCBqdXN0IHJlcGxhY2UgdGhlIGhpc3RvcnkgKi9cbiAgaWYgKGRpY3RMZW5ndGggPj0gcy53X3NpemUpIHtcbiAgICBpZiAod3JhcCA9PT0gMCkgeyAgICAgICAgICAgIC8qIGFscmVhZHkgZW1wdHkgb3RoZXJ3aXNlICovXG4gICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi9cbiAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcbiAgICAgIHMuc3Ryc3RhcnQgPSAwO1xuICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG4gICAgICBzLmluc2VydCA9IDA7XG4gICAgfVxuICAgIC8qIHVzZSB0aGUgdGFpbCAqL1xuICAgIC8vIGRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5LnNsaWNlKGRpY3RMZW5ndGggLSBzLndfc2l6ZSk7XG4gICAgdG1wRGljdCA9IG5ldyB1dGlscy5CdWY4KHMud19zaXplKTtcbiAgICB1dGlscy5hcnJheVNldCh0bXBEaWN0LCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoIC0gcy53X3NpemUsIHMud19zaXplLCAwKTtcbiAgICBkaWN0aW9uYXJ5ID0gdG1wRGljdDtcbiAgICBkaWN0TGVuZ3RoID0gcy53X3NpemU7XG4gIH1cbiAgLyogaW5zZXJ0IGRpY3Rpb25hcnkgaW50byB3aW5kb3cgYW5kIGhhc2ggKi9cbiAgYXZhaWwgPSBzdHJtLmF2YWlsX2luO1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBkaWN0TGVuZ3RoO1xuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmlucHV0ID0gZGljdGlvbmFyeTtcbiAgZmlsbF93aW5kb3cocyk7XG4gIHdoaWxlIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICBzdHIgPSBzLnN0cnN0YXJ0O1xuICAgIG4gPSBzLmxvb2thaGVhZCAtIChNSU5fTUFUQ0ggLSAxKTtcbiAgICBkbyB7XG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcblxuICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcblxuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgc3RyKys7XG4gICAgfSB3aGlsZSAoLS1uKTtcbiAgICBzLnN0cnN0YXJ0ID0gc3RyO1xuICAgIHMubG9va2FoZWFkID0gTUlOX01BVENIIC0gMTtcbiAgICBmaWxsX3dpbmRvdyhzKTtcbiAgfVxuICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgcy5pbnNlcnQgPSBzLmxvb2thaGVhZDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gIHN0cm0uaW5wdXQgPSBpbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGF2YWlsO1xuICBzLndyYXAgPSB3cmFwO1xuICByZXR1cm4gWl9PSztcbn1cblxuXG5leHBvcnRzLmRlZmxhdGVJbml0ID0gZGVmbGF0ZUluaXQ7XG5leHBvcnRzLmRlZmxhdGVJbml0MiA9IGRlZmxhdGVJbml0MjtcbmV4cG9ydHMuZGVmbGF0ZVJlc2V0ID0gZGVmbGF0ZVJlc2V0O1xuZXhwb3J0cy5kZWZsYXRlUmVzZXRLZWVwID0gZGVmbGF0ZVJlc2V0S2VlcDtcbmV4cG9ydHMuZGVmbGF0ZVNldEhlYWRlciA9IGRlZmxhdGVTZXRIZWFkZXI7XG5leHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlO1xuZXhwb3J0cy5kZWZsYXRlRW5kID0gZGVmbGF0ZUVuZDtcbmV4cG9ydHMuZGVmbGF0ZVNldERpY3Rpb25hcnkgPSBkZWZsYXRlU2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuZGVmbGF0ZUluZm8gPSAncGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxuZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7XG5leHBvcnRzLmRlZmxhdGVDb3B5ID0gZGVmbGF0ZUNvcHk7XG5leHBvcnRzLmRlZmxhdGVQYXJhbXMgPSBkZWZsYXRlUGFyYW1zO1xuZXhwb3J0cy5kZWZsYXRlUGVuZGluZyA9IGRlZmxhdGVQZW5kaW5nO1xuZXhwb3J0cy5kZWZsYXRlUHJpbWUgPSBkZWZsYXRlUHJpbWU7XG5leHBvcnRzLmRlZmxhdGVUdW5lID0gZGVmbGF0ZVR1bmU7XG4qL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIEdaaGVhZGVyKCkge1xuICAvKiB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0ICovXG4gIHRoaXMudGV4dCAgICAgICA9IDA7XG4gIC8qIG1vZGlmaWNhdGlvbiB0aW1lICovXG4gIHRoaXMudGltZSAgICAgICA9IDA7XG4gIC8qIGV4dHJhIGZsYWdzIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMueGZsYWdzICAgICA9IDA7XG4gIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi9cbiAgdGhpcy5vcyAgICAgICAgID0gMDtcbiAgLyogcG9pbnRlciB0byBleHRyYSBmaWVsZCBvciBaX05VTEwgaWYgbm9uZSAqL1xuICB0aGlzLmV4dHJhICAgICAgPSBudWxsO1xuICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi9cbiAgdGhpcy5leHRyYV9sZW4gID0gMDsgLy8gQWN0dWFsbHksIHdlIGRvbid0IG5lZWQgaXQgaW4gSlMsXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBsZWF2ZSBmb3IgZmV3IGNvZGUgbW9kaWZpY2F0aW9uc1xuXG4gIC8vXG4gIC8vIFNldHVwIGxpbWl0cyBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnlcbiAgLy8gZm9yIGluZmxhdGUgdXNlIGNvbnN0YW50IGxpbWl0IGluIDY1NTM2IGJ5dGVzXG4gIC8vXG5cbiAgLyogc3BhY2UgYXQgZXh0cmEgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5leHRyYV9tYXggID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgZmlsZSBuYW1lIG9yIFpfTlVMTCAqL1xuICB0aGlzLm5hbWUgICAgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLm5hbWVfbWF4ICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBjb21tZW50IG9yIFpfTlVMTCAqL1xuICB0aGlzLmNvbW1lbnQgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgY29tbWVudCAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmNvbW1fbWF4ICAgPSAwO1xuICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqL1xuICB0aGlzLmhjcmMgICAgICAgPSAwO1xuICAvKiB0cnVlIHdoZW4gZG9uZSByZWFkaW5nIGd6aXAgaGVhZGVyIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMuZG9uZSAgICAgICA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdaaGVhZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xudmFyIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cblxuLypcbiAgIERlY29kZSBsaXRlcmFsLCBsZW5ndGgsIGFuZCBkaXN0YW5jZSBjb2RlcyBhbmQgd3JpdGUgb3V0IHRoZSByZXN1bHRpbmdcbiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpc1xuICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAgIFdoZW4gbGFyZ2UgZW5vdWdoIGlucHV0IGFuZCBvdXRwdXQgYnVmZmVycyBhcmUgc3VwcGxpZWQgdG8gaW5mbGF0ZSgpLCBmb3JcbiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGVcbiAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG4gICBFbnRyeSBhc3N1bXB0aW9uczpcblxuICAgICAgICBzdGF0ZS5tb2RlID09PSBMRU5cbiAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID49IDI1OFxuICAgICAgICBzdGFydCA+PSBzdHJtLmF2YWlsX291dFxuICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG4gICBPbiByZXR1cm4sIHN0YXRlLm1vZGUgaXMgb25lIG9mOlxuXG4gICAgICAgIExFTiAtLSByYW4gb3V0IG9mIGVub3VnaCBvdXRwdXQgc3BhY2Ugb3IgZW5vdWdoIGF2YWlsYWJsZSBpbnB1dFxuICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YVxuXG4gICBOb3RlczpcblxuICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG4gICAgICBsZW5ndGggY29kZSwgNSBiaXRzIGZvciB0aGUgbGVuZ3RoIGV4dHJhLCAxNSBiaXRzIGZvciB0aGUgZGlzdGFuY2UgY29kZSxcbiAgICAgIGFuZCAxMyBiaXRzIGZvciB0aGUgZGlzdGFuY2UgZXh0cmEuICBUaGlzIHRvdGFscyA0OCBiaXRzLCBvciBzaXggYnl0ZXMuXG4gICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuICAgICAgY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBpbnB1dCB3aGlsZSBkZWNvZGluZy5cblxuICAgIC0gVGhlIG1heGltdW0gYnl0ZXMgdGhhdCBhIHNpbmdsZSBsZW5ndGgvZGlzdGFuY2UgcGFpciBjYW4gb3V0cHV0IGlzIDI1OFxuICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG4gICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3JcbiAgICAgIG91dHB1dCBzcGFjZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX2Zhc3Qoc3RybSwgc3RhcnQpIHtcbiAgdmFyIHN0YXRlO1xuICB2YXIgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuICB2YXIgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogaGF2ZSBlbm91Z2ggaW5wdXQgd2hpbGUgaW4gPCBsYXN0ICovXG4gIHZhciBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICB2YXIgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlICovXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICB2YXIgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG4vLyNlbmRpZlxuICB2YXIgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHZhciB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHZhciB3bmV4dDsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgdmFyIHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqL1xuICB2YXIgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgdmFyIGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqL1xuICB2YXIgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuICB2YXIgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gIHZhciBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuICB2YXIgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG4gIHZhciBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuICB2YXIgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqL1xuICB2YXIgZnJvbV9zb3VyY2U7XG5cblxuICB2YXIgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgX2luID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICBfb3V0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpO1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgZG1heCA9IHN0YXRlLmRtYXg7XG4vLyNlbmRpZlxuICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICB3bmV4dCA9IHN0YXRlLnduZXh0O1xuICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7XG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxO1xuICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7XG5cblxuICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cblxuICB0b3A6XG4gIGRvIHtcbiAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgYml0cyArPSA4O1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICB9XG5cbiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTtcblxuICAgIGRvbGVuOlxuICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xuICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgYml0cyAtPSBvcDtcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcbiAgICAgIGlmIChvcCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIGJhc2UgKi9cbiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgaWYgKG9wKSB7XG4gICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgbGVuKSk7XG4gICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICBkb2Rpc3Q6XG4gICAgICAgIGZvciAoOzspIHsgLy8gZ290byBlbXVsYXRpb25cbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZGlzdGFuY2UgJXVcXG5cIiwgZGlzdCkpO1xuICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovXG4gICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7ICAgICAgICAgICAgICAgIC8qIHNlZSBpZiBjb3B5IGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgIG9wID0gZGlzdCAtIG9wOyAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcbiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICAgICAgfVxuXG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICAgICAgICBpZiAobGVuIDw9IG9wIC0gd2hhdmUpIHtcbi8vICAgICAgICAgICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICBsZW4gLT0gb3AgLSB3aGF2ZTtcbi8vICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xuLy8gICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCA+IHdoYXZlKTtcbi8vICAgICAgICAgICAgICAgIGlmIChvcCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XG4vLyAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHRvcDtcbi8vICAgICAgICAgICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZnJvbSA9IDA7IC8vIHdpbmRvdyBpbmRleFxuICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93O1xuICAgICAgICAgICAgICBpZiAod25leHQgPT09IDApIHsgICAgICAgICAgIC8qIHZlcnkgY29tbW9uIGNhc2UgKi9cbiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSArIHduZXh0IC0gb3A7XG4gICAgICAgICAgICAgICAgb3AgLT0gd25leHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gMDtcbiAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICBvcCA9IHduZXh0O1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnRpZ3VvdXMgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgICAgICAvKiBjb3B5IGRpcmVjdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICBkbyB7ICAgICAgICAgICAgICAgICAgICAgICAgLyogbWluaW11bSBsZW5ndGggaXMgdGhyZWUgKi9cbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7XG4gICAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgICAgIGhlcmUgPSBkY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICAgICAgY29udGludWUgZG9kaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgeyAgICAgICAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7IC8vIG5lZWQgdG8gZW11bGF0ZSBnb3RvIHZpYSBcImNvbnRpbnVlXCJcbiAgICB9XG4gIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7XG5cbiAgLyogcmV0dXJuIHVudXNlZCBieXRlcyAob24gZW50cnksIGJpdHMgPCA4LCBzbyBpbiB3b24ndCBnbyB0b28gZmFyIGJhY2spICovXG4gIGxlbiA9IGJpdHMgPj4gMztcbiAgX2luIC09IGxlbjtcbiAgYml0cyAtPSBsZW4gPDwgMztcbiAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi9cbiAgc3RybS5uZXh0X2luID0gX2luO1xuICBzdHJtLm5leHRfb3V0ID0gX291dDtcbiAgc3RybS5hdmFpbF9pbiA9IChfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCkpO1xuICBzdHJtLmF2YWlsX291dCA9IChfb3V0IDwgZW5kID8gMjU3ICsgKGVuZCAtIF9vdXQpIDogMjU3IC0gKF9vdXQgLSBlbmQpKTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICByZXR1cm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyAgICAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG52YXIgYWRsZXIzMiAgICAgICA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xudmFyIGNyYzMyICAgICAgICAgPSByZXF1aXJlKCcuL2NyYzMyJyk7XG52YXIgaW5mbGF0ZV9mYXN0ICA9IHJlcXVpcmUoJy4vaW5mZmFzdCcpO1xudmFyIGluZmxhdGVfdGFibGUgPSByZXF1aXJlKCcuL2luZnRyZWVzJyk7XG5cbnZhciBDT0RFUyA9IDA7XG52YXIgTEVOUyA9IDE7XG52YXIgRElTVFMgPSAyO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4vL3ZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xuLy92YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTtcbi8vdmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG4vL3ZhciBaX0ZVTExfRkxVU0ggICAgPSAzO1xudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG52YXIgWl9CTE9DSyAgICAgICAgID0gNTtcbnZhciBaX1RSRUVTICAgICAgICAgPSA2O1xuXG5cbi8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAqL1xudmFyIFpfT0sgICAgICAgICAgICA9IDA7XG52YXIgWl9TVFJFQU1fRU5EICAgID0gMTtcbnZhciBaX05FRURfRElDVCAgICAgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XG52YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XG4vL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjtcblxuLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG52YXIgWl9ERUZMQVRFRCAgPSA4O1xuXG5cbi8qIFNUQVRFUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbnZhciAgICBIRUFEID0gMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbWFnaWMgaGVhZGVyICovXG52YXIgICAgRkxBR1MgPSAyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovXG52YXIgICAgVElNRSA9IDM7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqL1xudmFyICAgIE9TID0gNDsgICAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBmbGFncyBhbmQgb3BlcmF0aW5nIHN5c3RlbSAoZ3ppcCkgKi9cbnZhciAgICBFWExFTiA9IDU7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgbGVuZ3RoIChnemlwKSAqL1xudmFyICAgIEVYVFJBID0gNjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi9cbnZhciAgICBOQU1FID0gNzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi9cbnZhciAgICBDT01NRU5UID0gODsgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICovXG52YXIgICAgSENSQyA9IDk7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovXG52YXIgICAgRElDVElEID0gMTA7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbnZhciAgICBESUNUID0gMTE7ICAgICAgLyogd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBjYWxsICovXG52YXIgICAgICAgIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG52YXIgICAgICAgIFRZUEVETyA9IDEzOyAgICAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG52YXIgICAgICAgIFNUT1JFRCA9IDE0OyAgICAvKiBpOiB3YWl0aW5nIGZvciBzdG9yZWQgc2l6ZSAobGVuZ3RoIGFuZCBjb21wbGVtZW50KSAqL1xudmFyICAgICAgICBDT1BZXyA9IDE1OyAgICAgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbnZhciAgICAgICAgQ09QWSA9IDE2OyAgICAgIC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG52YXIgICAgICAgIFRBQkxFID0gMTc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciBkeW5hbWljIGJsb2NrIHRhYmxlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgTEVOTEVOUyA9IDE4OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xudmFyICAgICAgICBDT0RFTEVOUyA9IDE5OyAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG52YXIgICAgICAgICAgICBMRU5fID0gMjA7ICAgICAgLyogaTogc2FtZSBhcyBMRU4gYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbnZhciAgICAgICAgICAgIExFTiA9IDIxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovXG52YXIgICAgICAgICAgICBMRU5FWFQgPSAyMjsgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbnZhciAgICAgICAgICAgIERJU1QgPSAyMzsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBjb2RlICovXG52YXIgICAgICAgICAgICBESVNURVhUID0gMjQ7ICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgZXh0cmEgYml0cyAqL1xudmFyICAgICAgICAgICAgTUFUQ0ggPSAyNTsgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xudmFyICAgICAgICAgICAgTElUID0gMjY7ICAgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byB3cml0ZSBsaXRlcmFsICovXG52YXIgICAgQ0hFQ0sgPSAyNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xudmFyICAgIExFTkdUSCA9IDI4OyAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqL1xudmFyICAgIERPTkUgPSAyOTsgICAgICAvKiBmaW5pc2hlZCBjaGVjaywgZG9uZSAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgTUVNID0gMzE7ICAgICAgIC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgU1lOQyA9IDMyOyAgICAgIC8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblxudmFyIEVOT1VHSF9MRU5TID0gODUyO1xudmFyIEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vdmFyIEVOT1VHSCA9ICAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG52YXIgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmZ1bmN0aW9uIHpzd2FwMzIocSkge1xuICByZXR1cm4gICgoKHEgPj4+IDI0KSAmIDB4ZmYpICtcbiAgICAgICAgICAoKHEgPj4+IDgpICYgMHhmZjAwKSArXG4gICAgICAgICAgKChxICYgMHhmZjAwKSA8PCA4KSArXG4gICAgICAgICAgKChxICYgMHhmZikgPDwgMjQpKTtcbn1cblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXG4gIHRoaXMubGFzdCA9IGZhbHNlOyAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXG4gIHRoaXMuZG1heCA9IDA7ICAgICAgICAgICAgICAvKiB6bGliIGhlYWRlciBtYXggZGlzdGFuY2UgKElORkxBVEVfU1RSSUNUKSAqL1xuICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cbiAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xuICAvLyBUT0RPOiBtYXkgYmUge31cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cbiAgdGhpcy53c2l6ZSA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB0aGlzLndoYXZlID0gMDsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xuXG4gIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmhvbGQgPSAwOyAgICAgICAgICAgICAgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuYml0cyA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgYml0cyBpbiBcImluXCIgKi9cblxuICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xuICB0aGlzLmxlbmd0aCA9IDA7ICAgICAgICAgICAgLyogbGl0ZXJhbCBvciBsZW5ndGggb2YgZGF0YSB0byBjb3B5ICovXG4gIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cblxuICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi9cbiAgdGhpcy5leHRyYSA9IDA7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgbmVlZGVkICovXG5cbiAgLyogZml4ZWQgYW5kIGR5bmFtaWMgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXG4gIHRoaXMuZGlzdGNvZGUgPSBudWxsOyAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xuICB0aGlzLmxlbmJpdHMgPSAwOyAgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgbGVuY29kZSAqL1xuICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cblxuICAvKiBkeW5hbWljIHRhYmxlIGJ1aWxkaW5nICovXG4gIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5kaXN0ID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cbiAgdGhpcy5uZXh0ID0gbnVsbDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cblxuICB0aGlzLmxlbnMgPSBuZXcgdXRpbHMuQnVmMTYoMzIwKTsgLyogdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLndvcmsgPSBuZXcgdXRpbHMuQnVmMTYoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXG5cbiAgLypcbiAgIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBwb2ludGVycyBpbiBqcywgd2UgdXNlIGxlbmNvZGUgYW5kIGRpc3Rjb2RlIGRpcmVjdGx5XG4gICBhcyBidWZmZXJzIHNvIHdlIGRvbid0IG5lZWQgY29kZXNcbiAgKi9cbiAgLy90aGlzLmNvZGVzID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSCk7ICAgICAgIC8qIHNwYWNlIGZvciBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmR5biA9IG51bGw7ICAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuZGlzdGR5biA9IG51bGw7ICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5zYW5lID0gMDsgICAgICAgICAgICAgICAgICAgLyogaWYgZmFsc2UsIGFsbG93IGludmFsaWQgZGlzdGFuY2UgdG9vIGZhciAqL1xuICB0aGlzLmJhY2sgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3NlZCBsZW5ndGgvbGl0ICovXG4gIHRoaXMud2FzID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIGluaXRpYWwgbGVuZ3RoIG9mIG1hdGNoICovXG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldEtlZXAoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IHN0YXRlLnRvdGFsID0gMDtcbiAgc3RybS5tc2cgPSAnJzsgLypaX05VTEwqL1xuICBpZiAoc3RhdGUud3JhcCkgeyAgICAgICAvKiB0byBzdXBwb3J0IGlsbC1jb25jZWl2ZWQgSmF2YSB0ZXN0IHN1aXRlICovXG4gICAgc3RybS5hZGxlciA9IHN0YXRlLndyYXAgJiAxO1xuICB9XG4gIHN0YXRlLm1vZGUgPSBIRUFEO1xuICBzdGF0ZS5sYXN0ID0gMDtcbiAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xuICBzdGF0ZS5kbWF4ID0gMzI3Njg7XG4gIHN0YXRlLmhlYWQgPSBudWxsLypaX05VTEwqLztcbiAgc3RhdGUuaG9sZCA9IDA7XG4gIHN0YXRlLmJpdHMgPSAwO1xuICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfTEVOUyk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfRElTVFMpO1xuXG4gIHN0YXRlLnNhbmUgPSAxO1xuICBzdGF0ZS5iYWNrID0gLTE7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogcmVzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0KHN0cm0pIHtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdGF0ZS53c2l6ZSA9IDA7XG4gIHN0YXRlLndoYXZlID0gMDtcbiAgc3RhdGUud25leHQgPSAwO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTtcblxufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcbiAgdmFyIHdyYXA7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBnZXQgdGhlIHN0YXRlICovXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGV4dHJhY3Qgd3JhcCByZXF1ZXN0IGZyb20gd2luZG93Qml0cyBwYXJhbWV0ZXIgKi9cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHdyYXAgPSAod2luZG93Qml0cyA+PiA0KSArIDE7XG4gICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xuICAgICAgd2luZG93Qml0cyAmPSAxNTtcbiAgICB9XG4gIH1cblxuICAvKiBzZXQgbnVtYmVyIG9mIHdpbmRvdyBiaXRzLCBmcmVlIHdpbmRvdyBpZiBkaWZmZXJlbnQgKi9cbiAgaWYgKHdpbmRvd0JpdHMgJiYgKHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cblxuICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovXG4gIHN0YXRlLndyYXAgPSB3cmFwO1xuICBzdGF0ZS53Yml0cyA9IHdpbmRvd0JpdHM7XG4gIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVJbml0MihzdHJtLCB3aW5kb3dCaXRzKSB7XG4gIHZhciByZXQ7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIC8vc3RybS5tc2cgPSBaX05VTEw7ICAgICAgICAgICAgICAgICAvKiBpbiBjYXNlIHdlIHJldHVybiBhbiBlcnJvciAqL1xuXG4gIHN0YXRlID0gbmV3IEluZmxhdGVTdGF0ZSgpO1xuXG4gIC8vaWYgKHN0YXRlID09PSBaX05VTEwpIHJldHVybiBaX01FTV9FUlJPUjtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiBhbGxvY2F0ZWRcXG5cIikpO1xuICBzdHJtLnN0YXRlID0gc3RhdGU7XG4gIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICByZXQgPSBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpO1xuICBpZiAocmV0ICE9PSBaX09LKSB7XG4gICAgc3RybS5zdGF0ZSA9IG51bGwvKlpfTlVMTCovO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVJbml0KHN0cm0pIHtcbiAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpO1xufVxuXG5cbi8qXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuIGZpeGVkIGNvZGUgZGVjb2RpbmcuICBOb3JtYWxseSB0aGlzIHJldHVybnMgZml4ZWQgdGFibGVzIGZyb20gaW5mZml4ZWQuaC5cbiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuIHRoZXJlYWZ0ZXIuICBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgdGhlIGNvZGUgYnkgYWJvdXQgMksgYnl0ZXMsIGluXG4gZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuIG1heSBub3QgYmUgdGhyZWFkLXNhZmUuXG4gKi9cbnZhciB2aXJnaW4gPSB0cnVlO1xuXG52YXIgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZVxuXG5mdW5jdGlvbiBmaXhlZHRhYmxlcyhzdGF0ZSkge1xuICAvKiBidWlsZCBmaXhlZCBodWZmbWFuIHRhYmxlcyBpZiBmaXJzdCBjYWxsIChtYXkgbm90IGJlIHRocmVhZCBzYWZlKSAqL1xuICBpZiAodmlyZ2luKSB7XG4gICAgdmFyIHN5bTtcblxuICAgIGxlbmZpeCA9IG5ldyB1dGlscy5CdWYzMig1MTIpO1xuICAgIGRpc3RmaXggPSBuZXcgdXRpbHMuQnVmMzIoMzIpO1xuXG4gICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cbiAgICBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAxNDQpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI1NikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDk7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjgwKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNzsgfVxuICAgIHdoaWxlIChzeW0gPCAyODgpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKExFTlMsICBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgICAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDkgfSk7XG5cbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDMyKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNTsgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgMCwgMzIsICAgZGlzdGZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA1IH0pO1xuXG4gICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi9cbiAgICB2aXJnaW4gPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmxlbmNvZGUgPSBsZW5maXg7XG4gIHN0YXRlLmxlbmJpdHMgPSA5O1xuICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7XG4gIHN0YXRlLmRpc3RiaXRzID0gNTtcbn1cblxuXG4vKlxuIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmVcbiByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkXG4gd2hlbiBhIHdpbmRvdyBpcyBhbHJlYWR5IGluIHVzZSwgb3Igd2hlbiBvdXRwdXQgaGFzIGJlZW4gd3JpdHRlbiBkdXJpbmcgdGhpc1xuIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC5cbiBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeVxuIGlzIGxvYWRlZC5cblxuIFByb3ZpZGluZyBvdXRwdXQgYnVmZmVycyBsYXJnZXIgdGhhbiAzMksgdG8gaW5mbGF0ZSgpIHNob3VsZCBwcm92aWRlIGEgc3BlZWRcbiBhZHZhbnRhZ2UsIHNpbmNlIG9ubHkgdGhlIGxhc3QgMzJLIG9mIG91dHB1dCBpcyBjb3BpZWQgdG8gdGhlIHNsaWRpbmcgd2luZG93XG4gdXBvbiByZXR1cm4gZnJvbSBpbmZsYXRlKCksIGFuZCBzaW5jZSBhbGwgZGlzdGFuY2VzIGFmdGVyIHRoZSBmaXJzdCAzMksgb2ZcbiBvdXRwdXQgd2lsbCBmYWxsIGluIHRoZSBvdXRwdXQgZGF0YSwgbWFraW5nIG1hdGNoIGNvcGllcyBzaW1wbGVyIGFuZCBmYXN0ZXIuXG4gVGhlIGFkdmFudGFnZSBtYXkgYmUgZGVwZW5kZW50IG9uIHRoZSBzaXplIG9mIHRoZSBwcm9jZXNzb3IncyBkYXRhIGNhY2hlcy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRld2luZG93KHN0cm0sIHNyYywgZW5kLCBjb3B5KSB7XG4gIHZhciBkaXN0O1xuICB2YXIgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYWxyZWFkeSwgYWxsb2NhdGUgc3BhY2UgZm9yIHRoZSB3aW5kb3cgKi9cbiAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xuICAgIHN0YXRlLndzaXplID0gMSA8PCBzdGF0ZS53Yml0cztcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSAwO1xuXG4gICAgc3RhdGUud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgoc3RhdGUud3NpemUpO1xuICB9XG5cbiAgLyogY29weSBzdGF0ZS0+d3NpemUgb3IgbGVzcyBvdXRwdXQgYnl0ZXMgaW50byB0aGUgY2lyY3VsYXIgd2luZG93ICovXG4gIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7XG4gICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIHN0YXRlLndzaXplLCBzdGF0ZS53c2l6ZSwgMCk7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7XG4gICAgaWYgKGRpc3QgPiBjb3B5KSB7XG4gICAgICBkaXN0ID0gY29weTtcbiAgICB9XG4gICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpO1xuICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBjb3B5LCBkaXN0LCBzdGF0ZS53bmV4dCk7XG4gICAgY29weSAtPSBkaXN0O1xuICAgIGlmIChjb3B5KSB7XG4gICAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdywgZW5kIC0gY29weSwgY29weSk7XG4gICAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgY29weSwgMCk7XG4gICAgICBzdGF0ZS53bmV4dCA9IGNvcHk7XG4gICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG4gICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7IHN0YXRlLnduZXh0ID0gMDsgfVxuICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsgc3RhdGUud2hhdmUgKz0gZGlzdDsgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZShzdHJtLCBmbHVzaCkge1xuICB2YXIgc3RhdGU7XG4gIHZhciBpbnB1dCwgb3V0cHV0OyAgICAgICAgICAvLyBpbnB1dC9vdXRwdXQgYnVmZmVyc1xuICB2YXIgbmV4dDsgICAgICAgICAgICAgICAgICAgLyogbmV4dCBpbnB1dCBJTkRFWCAqL1xuICB2YXIgcHV0OyAgICAgICAgICAgICAgICAgICAgLyogbmV4dCBvdXRwdXQgSU5ERVggKi9cbiAgdmFyIGhhdmUsIGxlZnQ7ICAgICAgICAgICAgIC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIHZhciBob2xkOyAgICAgICAgICAgICAgICAgICAvKiBiaXQgYnVmZmVyICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBiaXRzIGluIGJpdCBidWZmZXIgKi9cbiAgdmFyIF9pbiwgX291dDsgICAgICAgICAgICAgIC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgdmFyIGNvcHk7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBzdG9yZWQgb3IgbWF0Y2ggYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgZnJvbTsgICAgICAgICAgICAgICAgICAgLyogd2hlcmUgdG8gY29weSBtYXRjaCBieXRlcyBmcm9tICovXG4gIHZhciBmcm9tX3NvdXJjZTtcbiAgdmFyIGhlcmUgPSAwOyAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgZGVjb2RpbmcgdGFibGUgZW50cnkgKi9cbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7IC8vIHBha2VkIFwiaGVyZVwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIC8vdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIHBhcmVudCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgbGFzdF9iaXRzLCBsYXN0X29wLCBsYXN0X3ZhbDsgLy8gcGFrZWQgXCJsYXN0XCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgdmFyIGxlbjsgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCB0byBjb3B5IGZvciByZXBlYXRzLCBiaXRzIHRvIGRyb3AgKi9cbiAgdmFyIHJldDsgICAgICAgICAgICAgICAgICAgIC8qIHJldHVybiBjb2RlICovXG4gIHZhciBoYnVmID0gbmV3IHV0aWxzLkJ1ZjgoNCk7ICAgIC8qIGJ1ZmZlciBmb3IgZ3ppcCBoZWFkZXIgY3JjIGNhbGN1bGF0aW9uICovXG4gIHZhciBvcHRzO1xuXG4gIHZhciBuOyAvLyB0ZW1wb3JhcnkgdmFyIGZvciBORUVEX0JJVFNcblxuICB2YXIgb3JkZXIgPSAvKiBwZXJtdXRhdGlvbiBvZiBjb2RlIGxlbmd0aHMgKi9cbiAgICBbIDE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTUgXTtcblxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fCAhc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHsgc3RhdGUubW9kZSA9IFRZUEVETzsgfSAgICAvKiBza2lwIGNoZWNrICovXG5cblxuICAvLy0tLSBMT0FEKCkgLS0tXG4gIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgLy8tLS1cblxuICBfaW4gPSBoYXZlO1xuICBfb3V0ID0gbGVmdDtcbiAgcmV0ID0gWl9PSztcblxuICBpbmZfbGVhdmU6IC8vIGdvdG8gZW11bGF0aW9uXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcbiAgICAgIGNhc2UgSEVBRDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiAyKSAmJiBob2xkID09PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG5cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRkxBR1M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSAwOyAgICAgICAgICAgLyogZXhwZWN0IHpsaWIgaGVhZGVyICovXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8ICAgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xuICAgICAgICAgICgoKGhvbGQgJiAweGZmKS8qQklUUyg4KSovIDw8IDgpICsgKGhvbGQgPj4gOCkpICUgMzEpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgaGVhZGVyIGNoZWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIGxlbiA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDg7XG4gICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLndiaXRzID0gbGVuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbiA+IHN0YXRlLndiaXRzKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCB3aW5kb3cgc2l6ZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICB6bGliIGhlYWRlciBva1xcblwiKSk7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgc3RhdGUubW9kZSA9IGhvbGQgJiAweDIwMCA/IERJQ1RJRCA6IFRZUEU7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRkxBR1M6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7XG4gICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweGZmKSAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4ZTAwMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gaGVhZGVyIGZsYWdzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGV4dCA9ICgoaG9sZCA+PiA4KSAmIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRJTUU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhidWZbM10gPSAoaG9sZCA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTtcbiAgICAgICAgICAvLz09PVxuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gT1M7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgT1M6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQueGZsYWdzID0gKGhvbGQgJiAweGZmKTtcbiAgICAgICAgICBzdGF0ZS5oZWFkLm9zID0gKGhvbGQgPj4gOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYTEVOOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbC8qWl9OVUxMKi87XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYVFJBOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXRpbHMuYXJyYXlTZXQoXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcbiAgICAgICAgICAgICAgICAvLyAtIG5vIG5lZWQgZm9yIGFkZGl0aW9uYWwgc2l6ZSBjaGVja1xuICAgICAgICAgICAgICAgIGNvcHksXG4gICAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi9cbiAgICAgICAgICAgICAgICBsZW5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsXG4gICAgICAgICAgICAgIC8vICAgICAgICBsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggP1xuICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBOQU1FOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPTU1FTlQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgxMDAwKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gSENSQztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBIQ1JDOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIGlmIChob2xkICE9PSAoc3RhdGUuY2hlY2sgJiAweGZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSAoKHN0YXRlLmZsYWdzID4+IDkpICYgMSk7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJQ1RJRDpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESUNUOlxuICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIHJldHVybiBaX05FRURfRElDVDtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEU6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFRE86XG4gICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7XG4gICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5sYXN0ID0gKGhvbGQgJiAweDAxKS8qQklUUygxKSovO1xuICAgICAgICAvLy0tLSBEUk9QQklUUygxKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMTtcbiAgICAgICAgYml0cyAtPSAxO1xuICAgICAgICAvLy0tLS8vXG5cbiAgICAgICAgc3dpdGNoICgoaG9sZCAmIDB4MDMpLypCSVRTKDIpKi8pIHtcbiAgICAgICAgICBjYXNlIDA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovXG4gICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87ICAgICAgICAgICAgIC8qIGRlY29kZSBjb2RlcyAqL1xuICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RPUkVEOlxuICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi9cbiAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKGhvbGQgJiAweGZmZmYpICE9PSAoKGhvbGQgPj4+IDE2KSBeIDB4ZmZmZikpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxcblwiLFxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWTpcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICBpZiAoY29weSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvLy0tLSB6bWVtY3B5KHB1dCwgbmV4dCwgY29weSk7IC0tLVxuICAgICAgICAgIHV0aWxzLmFycmF5U2V0KG91dHB1dCwgaW5wdXQsIG5leHQsIGNvcHksIHB1dCk7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICAgIHB1dCArPSBjb3B5O1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGVuZFxcblwiKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVEFCTEU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE0KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMjU3O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5kaXN0ID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMTtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDQ7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbi8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxuICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgdGFibGUgc2l6ZXMgb2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOTEVOUzpcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5uY29kZSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCAxOSkge1xuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzO1xuICAgICAgICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5bjtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDc7XG5cbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUubGVuYml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09ERUxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAyKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOy8vQklUUygyKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsvL0JJVFMoNyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xuICAgICAgICAgICAgICBiaXRzIC09IDc7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY29weS0tKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG4gICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBCQUQpIHsgYnJlYWs7IH1cblxuICAgICAgICAvKiBjaGVjayBmb3IgZW5kLW9mLWJsb2NrIGNvZGUgKGJldHRlciBoYXZlIG9uZSkgKi9cbiAgICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGJ1aWxkIGNvZGUgdGFibGVzIC0tIG5vdGU6IGRvIG5vdCBjaGFuZ2UgdGhlIGxlbmJpdHMgb3IgZGlzdGJpdHNcbiAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShMRU5TLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IDY7XG4gICAgICAgIC8vc3RhdGUuZGlzdGNvZGUuY29weShzdGF0ZS5jb2Rlcyk7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW47XG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmRpc3RiaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIHN0YXRlLm5sZW4sIHN0YXRlLm5kaXN0LCBzdGF0ZS5kaXN0Y29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IG9wdHMuYml0cztcbiAgICAgICAgLy8gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlcyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgJ2luZmxhdGU6ICAgICAgIGNvZGVzIG9rXFxuJykpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXztcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTl86XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOOlxuICAgICAgICBpZiAoaGF2ZSA+PSA2ICYmIGxlZnQgPj0gMjU4KSB7XG4gICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgLy8tLS1cbiAgICAgICAgICBpbmZsYXRlX2Zhc3Qoc3RybSwgX291dCk7XG4gICAgICAgICAgLy8tLS0gTE9BRCgpIC0tLVxuICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gICAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICAgICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAgICAgICAgIC8vLS0tXG5cbiAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5iYWNrID0gMDtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07ICAvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3ZiA/XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiAzMikge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5leHRyYSA9IGhlcmVfb3AgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5FWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIHN0YXRlLndhcyA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVDpcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUuZGlzdGJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5vZmZzZXQgPSBoZXJlX3ZhbDtcbiAgICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVEVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5vZmZzZXQgKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE1BVENIOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgXCJpbmZsYXRlLmMgdG9vIGZhclxcblwiKSk7XG4vLyAgICAgICAgICBjb3B5IC09IHN0YXRlLndoYXZlO1xuLy8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4vLyAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4vLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbi8vICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IDA7XG4vLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4vLyAgICAgICAgICBicmVhaztcbi8vI2VuZGlmXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHtcbiAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjb3B5IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTElUOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgbGVmdC0tO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ0hFQ0s6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgLy8gVXNlICd8JyBpbnN0ZWFkIG9mICcrJyB0byBtYWtlIHN1cmUgdGhhdCByZXN1bHQgaXMgc2lnbmVkXG4gICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIF9vdXQgLT0gbGVmdDtcbiAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gICAgICAgICAgaWYgKF9vdXQpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XG4gICAgICAgICAgICAgICAgLypVUERBVEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOR1RIOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGxlbmd0aCBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBET05FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERPTkU6XG4gICAgICAgIHJldCA9IFpfU1RSRUFNX0VORDtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBCQUQ6XG4gICAgICAgIHJldCA9IFpfREFUQV9FUlJPUjtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBNRU06XG4gICAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICAgIGNhc2UgU1lOQzpcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIH1cbiAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCkpKSB7XG4gICAgaWYgKHVwZGF0ZXdpbmRvdyhzdHJtLCBzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCwgX291dCAtIHN0cm0uYXZhaWxfb3V0KSkge1xuICAgICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgX2luIC09IHN0cm0uYXZhaWxfaW47XG4gIF9vdXQgLT0gc3RybS5hdmFpbF9vdXQ7XG4gIHN0cm0udG90YWxfaW4gKz0gX2luO1xuICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICBpZiAoc3RhdGUud3JhcCAmJiBfb3V0KSB7XG4gICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEUoc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICB9XG4gIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09IFpfT0spIHtcbiAgICByZXQgPSBaX0JVRl9FUlJPUjtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlRW5kKHN0cm0pIHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgLyp8fCBzdHJtLT56ZnJlZSA9PSAoZnJlZV9mdW5jKTAqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS53aW5kb3cpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG5cbiAgLyogc2F2ZSBoZWFkZXIgc3RydWN0dXJlICovXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xuICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICB2YXIgc3RhdGU7XG4gIHZhciBkaWN0aWQ7XG4gIHZhciByZXQ7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIC8qID09IFpfTlVMTCAqLyB8fCAhc3RybS5zdGF0ZSAvKiA9PSBaX05VTEwgKi8pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICBpZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgLyogY29weSBkaWN0aW9uYXJ5IHRvIHdpbmRvdyB1c2luZyB1cGRhdGV3aW5kb3coKSwgd2hpY2ggd2lsbCBhbWVuZCB0aGVcbiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cbiAgcmV0ID0gdXBkYXRld2luZG93KHN0cm0sIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIGRpY3RMZW5ndGgpO1xuICBpZiAocmV0KSB7XG4gICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmV4cG9ydHMuaW5mbGF0ZVJlc2V0ID0gaW5mbGF0ZVJlc2V0O1xuZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjtcbmV4cG9ydHMuaW5mbGF0ZVJlc2V0S2VlcCA9IGluZmxhdGVSZXNldEtlZXA7XG5leHBvcnRzLmluZmxhdGVJbml0ID0gaW5mbGF0ZUluaXQ7XG5leHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0MjtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVFbmQgPSBpbmZsYXRlRW5kO1xuZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjtcbmV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuaW5mbGF0ZUluZm8gPSAncGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxuZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5O1xuZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5pbmZsYXRlTWFyayA9IGluZmxhdGVNYXJrO1xuZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7XG5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XG5leHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xuZXhwb3J0cy5pbmZsYXRlVW5kZXJtaW5lID0gaW5mbGF0ZVVuZGVybWluZTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG5cbnZhciBNQVhCSVRTID0gMTU7XG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy92YXIgRU5PVUdIID0gKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbnZhciBDT0RFUyA9IDA7XG52YXIgTEVOUyA9IDE7XG52YXIgRElTVFMgPSAyO1xuXG52YXIgbGJhc2UgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovXG4gIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXG5dO1xuXG52YXIgbGV4dCA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LFxuICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4XG5dO1xuXG52YXIgZGJhc2UgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi9cbiAgMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLFxuICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG4gIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBcbl07XG5cbnZhciBkZXh0ID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMixcbiAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXG4gIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV90YWJsZSh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKVxue1xuICB2YXIgYml0cyA9IG9wdHMuYml0cztcbiAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgdmFyIGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cbiAgdmFyIHN5bSA9IDA7ICAgICAgICAgICAgICAgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIHZhciBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICB2YXIgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuICB2YXIgY3VyciA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICB2YXIgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gIHZhciBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cbiAgdmFyIHVzZWQgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi9cbiAgdmFyIGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuICB2YXIgZmlsbDsgICAgICAgICAgICAgIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovXG4gIHZhciBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cbiAgdmFyIG5leHQ7ICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXG4gIHZhciBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gIHZhciBiYXNlX2luZGV4ID0gMDtcbi8vICB2YXIgc2hvZXh0cmE7ICAgIC8qIGV4dHJhIGJpdHMgdGFibGUgdG8gdXNlICovXG4gIHZhciBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB1c2UgYmFzZSBhbmQgZXh0cmEgZm9yIHN5bWJvbCA+IGVuZCAqL1xuICB2YXIgY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cbiAgdmFyIG9mZnMgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cbiAgdmFyIGV4dHJhID0gbnVsbDtcbiAgdmFyIGV4dHJhX2luZGV4ID0gMDtcblxuICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDtcblxuICAvKlxuICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXG4gICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcbiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG4gICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xuICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXG5cbiAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcbiAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cbiAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgIGNyZWF0aW5nIGZyb20gdGhhdCBhIHRhYmxlIG9mIHN0YXJ0aW5nIGluZGljZXMgZm9yIGVhY2ggbGVuZ3RoIGluIHRoZVxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG4gICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgIHRoZSBjYWxsZXIuXG5cbiAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcbiAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcbiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzLlxuICAgKi9cblxuICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBjb3VudFtsZW5dID0gMDtcbiAgfVxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7XG4gIH1cblxuICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICByb290ID0gYml0cztcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcbiAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290ID4gbWF4KSB7XG4gICAgcm9vdCA9IG1heDtcbiAgfVxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7ICAgLy9oZXJlLmJpdHMgPSAodmFyIGNoYXIpMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDtcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cbiAgICBvcHRzLmJpdHMgPSAxO1xuICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICB9XG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPCBtaW4pIHtcbiAgICByb290ID0gbWluO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG4gIGxlZnQgPSAxO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGxlZnQgPDw9IDE7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgZW5kID0gMTk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7XG4gICAgYmFzZSA9IGxiYXNlO1xuICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuICAgIGV4dHJhID0gbGV4dDtcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XG4gICAgZW5kID0gMjU2O1xuXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgIGJhc2UgPSBkYmFzZTtcbiAgICBleHRyYSA9IGRleHQ7XG4gICAgZW5kID0gLTE7XG4gIH1cblxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cbiAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgc3ltID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xuICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgY3VyciA9IHJvb3Q7ICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqL1xuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xuICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICB1c2VkID0gMSA8PCByb290OyAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXG5cbiAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBjcmVhdGUgdGFibGUgZW50cnkgKi9cbiAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSAwO1xuICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIC8qIHBvaW50IGVudHJ5IGluIHJvb3QgdGFibGUgdG8gc3ViLXRhYmxlICovXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG4gICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290O1xuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwwO1xuICAgIH1cbiAgfVxuXG4gIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXG4gICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxuICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xuICBpZiAoaHVmZiAhPT0gMCkge1xuICAgIC8vdGFibGUub3BbbmV4dCArIGh1ZmZdID0gNjQ7ICAgICAgICAgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wO1xuICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7XG4gICAgdGFibGVbbmV4dCArIGh1ZmZdID0gKChsZW4gLSBkcm9wKSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwwO1xuICB9XG5cbiAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXG4gIC8vb3B0cy50YWJsZV9pbmRleCArPSB1c2VkO1xuICBvcHRzLmJpdHMgPSByb290O1xuICByZXR1cm4gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIDI6ICAgICAgJ25lZWQgZGljdGlvbmFyeScsICAgICAvKiBaX05FRURfRElDVCAgICAgICAyICAqL1xuICAxOiAgICAgICdzdHJlYW0gZW5kJywgICAgICAgICAgLyogWl9TVFJFQU1fRU5EICAgICAgMSAgKi9cbiAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXG4gICctMSc6ICAgJ2ZpbGUgZXJyb3InLCAgICAgICAgICAvKiBaX0VSUk5PICAgICAgICAgKC0xKSAqL1xuICAnLTInOiAgICdzdHJlYW0gZXJyb3InLCAgICAgICAgLyogWl9TVFJFQU1fRVJST1IgICgtMikgKi9cbiAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXG4gICctNCc6ICAgJ2luc3VmZmljaWVudCBtZW1vcnknLCAvKiBaX01FTV9FUlJPUiAgICAgKC00KSAqL1xuICAnLTUnOiAgICdidWZmZXIgZXJyb3InLCAgICAgICAgLyogWl9CVUZfRVJST1IgICAgICgtNSkgKi9cbiAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLXVuYXJ5LW9wcyAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy92YXIgWl9GSUxURVJFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjtcbi8vdmFyIFpfUkxFICAgICAgICAgICAgICAgPSAzO1xudmFyIFpfRklYRUQgICAgICAgICAgICAgICA9IDQ7XG4vL3ZhciBaX0RFRkFVTFRfU1RSQVRFR1kgID0gMDtcblxuLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xudmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG52YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcbi8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxudmFyIFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuZnVuY3Rpb24gemVybyhidWYpIHsgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cbi8vIEZyb20genV0aWwuaFxuXG52YXIgU1RPUkVEX0JMT0NLID0gMDtcbnZhciBTVEFUSUNfVFJFRVMgPSAxO1xudmFyIERZTl9UUkVFUyAgICA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG52YXIgTUlOX01BVENIICAgID0gMztcbnZhciBNQVhfTUFUQ0ggICAgPSAyNTg7XG4vKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXG5cbi8vIEZyb20gZGVmbGF0ZS5oXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLlxuICovXG5cbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxudmFyIExJVEVSQUxTICAgICAgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cblxudmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cblxudmFyIERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG52YXIgQkxfQ09ERVMgICAgICA9IDE5O1xuLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG5cbnZhciBIRUFQX1NJWkUgICAgID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cblxudmFyIE1BWF9CSVRTICAgICAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG52YXIgQnVmX3NpemUgICAgICA9IDE2O1xuLyogc2l6ZSBvZiBiaXQgYnVmZmVyIGluIGJpX2J1ZiAqL1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RhbnRzXG4gKi9cblxudmFyIE1BWF9CTF9CSVRTID0gNztcbi8qIEJpdCBsZW5ndGggY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CTF9CSVRTIGJpdHMgKi9cblxudmFyIEVORF9CTE9DSyAgID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG52YXIgUkVQXzNfNiAgICAgPSAxNjtcbi8qIHJlcGVhdCBwcmV2aW91cyBiaXQgbGVuZ3RoIDMtNiB0aW1lcyAoMiBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxudmFyIFJFUFpfM18xMCAgID0gMTc7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAzLTEwIHRpbWVzICAoMyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxudmFyIFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xudmFyIGV4dHJhX2xiaXRzID0gICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGxlbmd0aCBjb2RlICovXG4gIFswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdO1xuXG52YXIgZXh0cmFfZGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZSAqL1xuICBbMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM107XG5cbnZhciBleHRyYV9ibGJpdHMgPSAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBiaXQgbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddO1xuXG52YXIgYmxfb3JkZXIgPVxuICBbMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV07XG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG5cbi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cbiAqL1xuXG4vLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2Fwc1xuXG52YXIgRElTVF9DT0RFX0xFTiA9IDUxMjsgLyogc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93ICovXG5cbi8vICEhISEgVXNlIGZsYXQgYXJyYXkgaW5zdGVhZCBvZiBzdHJ1Y3R1cmUsIEZyZXEgPSBpKjIsIExlbiA9IGkqMisxXG52YXIgc3RhdGljX2x0cmVlICA9IG5ldyBBcnJheSgoTF9DT0RFUyArIDIpICogMik7XG56ZXJvKHN0YXRpY19sdHJlZSk7XG4vKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBub1xuICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXJcbiAqIFRoZSBjb2RlcyAyODYgYW5kIDI4NyBhcmUgbmVlZGVkIHRvIGJ1aWxkIGEgY2Fub25pY2FsIHRyZWUgKHNlZSBfdHJfaW5pdFxuICogYmVsb3cpLlxuICovXG5cbnZhciBzdGF0aWNfZHRyZWUgID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTtcbnplcm8oc3RhdGljX2R0cmVlKTtcbi8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZS4gKEFjdHVhbGx5IGEgdHJpdmlhbCB0cmVlIHNpbmNlIGFsbCBjb2RlcyB1c2VcbiAqIDUgYml0cy4pXG4gKi9cblxudmFyIF9kaXN0X2NvZGUgICAgPSBuZXcgQXJyYXkoRElTVF9DT0RFX0xFTik7XG56ZXJvKF9kaXN0X2NvZGUpO1xuLyogRGlzdGFuY2UgY29kZXMuIFRoZSBmaXJzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIGRpc3RhbmNlc1xuICogMyAuLiAyNTgsIHRoZSBsYXN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgdG9wIDggYml0cyBvZlxuICogdGhlIDE1IGJpdCBkaXN0YW5jZXMuXG4gKi9cblxudmFyIF9sZW5ndGhfY29kZSAgPSBuZXcgQXJyYXkoTUFYX01BVENIIC0gTUlOX01BVENIICsgMSk7XG56ZXJvKF9sZW5ndGhfY29kZSk7XG4vKiBsZW5ndGggY29kZSBmb3IgZWFjaCBub3JtYWxpemVkIG1hdGNoIGxlbmd0aCAoMCA9PSBNSU5fTUFUQ0gpICovXG5cbnZhciBiYXNlX2xlbmd0aCAgID0gbmV3IEFycmF5KExFTkdUSF9DT0RFUyk7XG56ZXJvKGJhc2VfbGVuZ3RoKTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXG5cbnZhciBiYXNlX2Rpc3QgICAgID0gbmV3IEFycmF5KERfQ09ERVMpO1xuemVybyhiYXNlX2Rpc3QpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBkaXN0YW5jZSBmb3IgZWFjaCBjb2RlICgwID0gZGlzdGFuY2Ugb2YgMSkgKi9cblxuXG5mdW5jdGlvbiBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfdHJlZSwgZXh0cmFfYml0cywgZXh0cmFfYmFzZSwgZWxlbXMsIG1heF9sZW5ndGgpIHtcblxuICB0aGlzLnN0YXRpY190cmVlICA9IHN0YXRpY190cmVlOyAgLyogc3RhdGljIHRyZWUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2JpdHMgICA9IGV4dHJhX2JpdHM7ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBjb2RlIG9yIE5VTEwgKi9cbiAgdGhpcy5leHRyYV9iYXNlICAgPSBleHRyYV9iYXNlOyAgIC8qIGJhc2UgaW5kZXggZm9yIGV4dHJhX2JpdHMgKi9cbiAgdGhpcy5lbGVtcyAgICAgICAgPSBlbGVtczsgICAgICAgIC8qIG1heCBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRyZWUgKi9cbiAgdGhpcy5tYXhfbGVuZ3RoICAgPSBtYXhfbGVuZ3RoOyAgIC8qIG1heCBiaXQgbGVuZ3RoIGZvciB0aGUgY29kZXMgKi9cblxuICAvLyBzaG93IGlmIGBzdGF0aWNfdHJlZWAgaGFzIGRhdGEgb3IgZHVtbXkgLSBuZWVkZWQgZm9yIG1vbm9tb3JwaGljIG9iamVjdHNcbiAgdGhpcy5oYXNfc3RyZWUgICAgPSBzdGF0aWNfdHJlZSAmJiBzdGF0aWNfdHJlZS5sZW5ndGg7XG59XG5cblxudmFyIHN0YXRpY19sX2Rlc2M7XG52YXIgc3RhdGljX2RfZGVzYztcbnZhciBzdGF0aWNfYmxfZGVzYztcblxuXG5mdW5jdGlvbiBUcmVlRGVzYyhkeW5fdHJlZSwgc3RhdF9kZXNjKSB7XG4gIHRoaXMuZHluX3RyZWUgPSBkeW5fdHJlZTsgICAgIC8qIHRoZSBkeW5hbWljIHRyZWUgKi9cbiAgdGhpcy5tYXhfY29kZSA9IDA7ICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAgIC8qIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRpYyB0cmVlICovXG59XG5cblxuXG5mdW5jdGlvbiBkX2NvZGUoZGlzdCkge1xuICByZXR1cm4gZGlzdCA8IDI1NiA/IF9kaXN0X2NvZGVbZGlzdF0gOiBfZGlzdF9jb2RlWzI1NiArIChkaXN0ID4+PiA3KV07XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBPdXRwdXQgYSBzaG9ydCBMU0IgZmlyc3Qgb24gdGhlIHN0cmVhbS5cbiAqIElOIGFzc2VydGlvbjogdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4gcGVuZGluZ0J1Zi5cbiAqL1xuZnVuY3Rpb24gcHV0X3Nob3J0KHMsIHcpIHtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh3KSAmIDB4ZmYpKTtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh1c2gpKHcpID4+IDgpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodykgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3ID4+PiA4KSAmIDB4ZmY7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cbiAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuICovXG5mdW5jdGlvbiBzZW5kX2JpdHMocywgdmFsdWUsIGxlbmd0aCkge1xuICBpZiAocy5iaV92YWxpZCA+IChCdWZfc2l6ZSAtIGxlbmd0aCkpIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgICBzLmJpX2J1ZiA9IHZhbHVlID4+IChCdWZfc2l6ZSAtIHMuYmlfdmFsaWQpO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoIC0gQnVmX3NpemU7XG4gIH0gZWxzZSB7XG4gICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc2VuZF9jb2RlKHMsIGMsIHRyZWUpIHtcbiAgc2VuZF9iaXRzKHMsIHRyZWVbYyAqIDJdLyouQ29kZSovLCB0cmVlW2MgKiAyICsgMV0vKi5MZW4qLyk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5mdW5jdGlvbiBiaV9yZXZlcnNlKGNvZGUsIGxlbikge1xuICB2YXIgcmVzID0gMDtcbiAgZG8ge1xuICAgIHJlcyB8PSBjb2RlICYgMTtcbiAgICBjb2RlID4+Pj0gMTtcbiAgICByZXMgPDw9IDE7XG4gIH0gd2hpbGUgKC0tbGVuID4gMCk7XG4gIHJldHVybiByZXMgPj4+IDE7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuZnVuY3Rpb24gYmlfZmx1c2gocykge1xuICBpZiAocy5iaV92YWxpZCA9PT0gMTYpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gMDtcbiAgICBzLmJpX3ZhbGlkID0gMDtcblxuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPj0gOCkge1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmO1xuICAgIHMuYmlfYnVmID4+PSA4O1xuICAgIHMuYmlfdmFsaWQgLT0gODtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5mdW5jdGlvbiBnZW5fYml0bGVuKHMsIGRlc2MpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIHZhciB0cmVlICAgICAgICAgICAgPSBkZXNjLmR5bl90cmVlO1xuICB2YXIgbWF4X2NvZGUgICAgICAgID0gZGVzYy5tYXhfY29kZTtcbiAgdmFyIHN0cmVlICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICB2YXIgaGFzX3N0cmVlICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICB2YXIgZXh0cmEgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcbiAgdmFyIGJhc2UgICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2Jhc2U7XG4gIHZhciBtYXhfbGVuZ3RoICAgICAgPSBkZXNjLnN0YXRfZGVzYy5tYXhfbGVuZ3RoO1xuICB2YXIgaDsgICAgICAgICAgICAgIC8qIGhlYXAgaW5kZXggKi9cbiAgdmFyIG4sIG07ICAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAvKiBiaXQgbGVuZ3RoICovXG4gIHZhciB4Yml0czsgICAgICAgICAgLyogZXh0cmEgYml0cyAqL1xuICB2YXIgZjsgICAgICAgICAgICAgIC8qIGZyZXF1ZW5jeSAqL1xuICB2YXIgb3ZlcmZsb3cgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyB3aXRoIGJpdCBsZW5ndGggdG9vIGxhcmdlICovXG5cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgcy5ibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICAvKiBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS5cbiAgICovXG4gIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovXG5cbiAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykge1xuICAgIG4gPSBzLmhlYXBbaF07XG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdLyouRGFkKi8gKiAyICsgMV0vKi5MZW4qLyArIDE7XG4gICAgaWYgKGJpdHMgPiBtYXhfbGVuZ3RoKSB7XG4gICAgICBiaXRzID0gbWF4X2xlbmd0aDtcbiAgICAgIG92ZXJmbG93Kys7XG4gICAgfVxuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG4gICAgaWYgKG4gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfSAvKiBub3QgYSBsZWFmIG5vZGUgKi9cblxuICAgIHMuYmxfY291bnRbYml0c10rKztcbiAgICB4Yml0cyA9IDA7XG4gICAgaWYgKG4gPj0gYmFzZSkge1xuICAgICAgeGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG4gICAgfVxuICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcbiAgICBzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpO1xuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0vKi5MZW4qLyArIHhiaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7IHJldHVybjsgfVxuXG4gIC8vIFRyYWNlKChzdGRlcnIsXCJcXG5iaXQgbGVuZ3RoIG92ZXJmbG93XFxuXCIpKTtcbiAgLyogVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXMgKi9cblxuICAvKiBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOiAqL1xuICBkbyB7XG4gICAgYml0cyA9IG1heF9sZW5ndGggLSAxO1xuICAgIHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKSB7IGJpdHMtLTsgfVxuICAgIHMuYmxfY291bnRbYml0c10tLTsgICAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cbiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovXG4gICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXG4gICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG4gICAgICovXG4gICAgb3ZlcmZsb3cgLT0gMjtcbiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTtcblxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gICAqIGggaXMgc3RpbGwgZXF1YWwgdG8gSEVBUF9TSVpFLiAoSXQgaXMgc2ltcGxlciB0byByZWNvbnN0cnVjdCBhbGxcbiAgICogbGVuZ3RocyBpbnN0ZWFkIG9mIGZpeGluZyBvbmx5IHRoZSB3cm9uZyBvbmVzLiBUaGlzIGlkZWEgaXMgdGFrZW5cbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG4gICAqL1xuICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcbiAgICB3aGlsZSAobiAhPT0gMCkge1xuICAgICAgbSA9IHMuaGVhcFstLWhdO1xuICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovICE9PSBiaXRzKSB7XG4gICAgICAgIC8vIFRyYWNlKChzdGRlcnIsXCJjb2RlICVkIGJpdHMgJWQtPiVkXFxuXCIsIG0sIHRyZWVbbV0uTGVuLCBiaXRzKSk7XG4gICAgICAgIHMub3B0X2xlbiArPSAoYml0cyAtIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovKSAqIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgICAgICB0cmVlW20gKiAyICsgMV0vKi5MZW4qLyA9IGJpdHM7XG4gICAgICB9XG4gICAgICBuLS07XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcbiAqIG9wdGltYWwpLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3JcbiAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgZmllbGQgY29kZSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzIG9mIG5vblxuICogICAgIHplcm8gY29kZSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgYmxfY291bnQpXG4vLyAgICBjdF9kYXRhICp0cmVlOyAgICAgICAgICAgICAvKiB0aGUgdHJlZSB0byBkZWNvcmF0ZSAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4vLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovXG57XG4gIHZhciBuZXh0X2NvZGUgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTsgLyogbmV4dCBjb2RlIHZhbHVlIGZvciBlYWNoIGJpdCBsZW5ndGggKi9cbiAgdmFyIGNvZGUgPSAwOyAgICAgICAgICAgICAgLyogcnVubmluZyBjb2RlIHZhbHVlICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgIC8qIGJpdCBpbmRleCAqL1xuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGluZGV4ICovXG5cbiAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG4gICAqIHdpdGhvdXQgYml0IHJldmVyc2FsLlxuICAgKi9cbiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgbmV4dF9jb2RlW2JpdHNdID0gY29kZSA9IChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxO1xuICB9XG4gIC8qIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGVcbiAgICogbXVzdCBiZSBhbGwgb25lcy5cbiAgICovXG4gIC8vQXNzZXJ0IChjb2RlICsgYmxfY291bnRbTUFYX0JJVFNdLTEgPT0gKDE8PE1BWF9CSVRTKS0xLFxuICAvLyAgICAgICAgXCJpbmNvbnNpc3RlbnQgYml0IGNvdW50c1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmdlbl9jb2RlczogbWF4X2NvZGUgJWQgXCIsIG1heF9jb2RlKSk7XG5cbiAgZm9yIChuID0gMDsgIG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIHZhciBsZW4gPSB0cmVlW24gKiAyICsgMV0vKi5MZW4qLztcbiAgICBpZiAobGVuID09PSAwKSB7IGNvbnRpbnVlOyB9XG4gICAgLyogTm93IHJldmVyc2UgdGhlIGJpdHMgKi9cbiAgICB0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobmV4dF9jb2RlW2xlbl0rKywgbGVuKTtcblxuICAgIC8vVHJhY2Vjdih0cmVlICE9IHN0YXRpY19sdHJlZSwgKHN0ZGVycixcIlxcbm4gJTNkICVjIGwgJTJkIGMgJTR4ICgleCkgXCIsXG4gICAgLy8gICAgIG4sIChpc2dyYXBoKG4pID8gbiA6ICcgJyksIGxlbiwgdHJlZVtuXS5Db2RlLCBuZXh0X2NvZGVbbGVuXS0xKSk7XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHZhcmlvdXMgJ2NvbnN0YW50JyB0YWJsZXMuXG4gKi9cbmZ1bmN0aW9uIHRyX3N0YXRpY19pbml0KCkge1xuICB2YXIgbjsgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgIC8qIGJpdCBjb3VudGVyICovXG4gIHZhciBsZW5ndGg7ICAgLyogbGVuZ3RoIHZhbHVlICovXG4gIHZhciBjb2RlOyAgICAgLyogY29kZSB2YWx1ZSAqL1xuICB2YXIgZGlzdDsgICAgIC8qIGRpc3RhbmNlIGluZGV4ICovXG4gIHZhciBibF9jb3VudCA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvLyBkbyBjaGVjayBpbiBfdHJfaW5pdCgpXG4gIC8vaWYgKHN0YXRpY19pbml0X2RvbmUpIHJldHVybjtcblxuICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovXG4vKiNpZmRlZiBOT19JTklUX0dMT0JBTF9QT0lOVEVSU1xuICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlO1xuICBzdGF0aWNfbF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9sYml0cztcbiAgc3RhdGljX2RfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19kdHJlZTtcbiAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7XG4gIHN0YXRpY19ibF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9ibGJpdHM7XG4jZW5kaWYqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgbGVuZ3RoICgwLi4yNTUpIC0+IGxlbmd0aCBjb2RlICgwLi4yOCkgKi9cbiAgbGVuZ3RoID0gMDtcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IExFTkdUSF9DT0RFUyAtIDE7IGNvZGUrKykge1xuICAgIGJhc2VfbGVuZ3RoW2NvZGVdID0gbGVuZ3RoO1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCBleHRyYV9sYml0c1tjb2RlXSk7IG4rKykge1xuICAgICAgX2xlbmd0aF9jb2RlW2xlbmd0aCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChsZW5ndGggPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBsZW5ndGggIT0gMjU2XCIpO1xuICAvKiBOb3RlIHRoYXQgdGhlIGxlbmd0aCAyNTUgKG1hdGNoIGxlbmd0aCAyNTgpIGNhbiBiZSByZXByZXNlbnRlZFxuICAgKiBpbiB0d28gZGlmZmVyZW50IHdheXM6IGNvZGUgMjg0ICsgNSBiaXRzIG9yIGNvZGUgMjg1LCBzbyB3ZVxuICAgKiBvdmVyd3JpdGUgbGVuZ3RoX2NvZGVbMjU1XSB0byB1c2UgdGhlIGJlc3QgZW5jb2Rpbmc6XG4gICAqL1xuICBfbGVuZ3RoX2NvZGVbbGVuZ3RoIC0gMV0gPSBjb2RlO1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgZGlzdCAoMC4uMzJLKSAtPiBkaXN0IGNvZGUgKDAuLjI5KSAqL1xuICBkaXN0ID0gMDtcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IDE2OyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0O1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCBleHRyYV9kYml0c1tjb2RlXSk7IG4rKykge1xuICAgICAgX2Rpc3RfY29kZVtkaXN0KytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBkaXN0ICE9IDI1NlwiKTtcbiAgZGlzdCA+Pj0gNzsgLyogZnJvbSBub3cgb24sIGFsbCBkaXN0YW5jZXMgYXJlIGRpdmlkZWQgYnkgMTI4ICovXG4gIGZvciAoOyBjb2RlIDwgRF9DT0RFUzsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdCA8PCA3O1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCAoZXh0cmFfZGJpdHNbY29kZV0gLSA3KSk7IG4rKykge1xuICAgICAgX2Rpc3RfY29kZVsyNTYgKyBkaXN0KytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTJcIik7XG5cbiAgLyogQ29uc3RydWN0IHRoZSBjb2RlcyBvZiB0aGUgc3RhdGljIGxpdGVyYWwgdHJlZSAqL1xuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICBuID0gMDtcbiAgd2hpbGUgKG4gPD0gMTQzKSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjU1KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDk7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzldKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjc5KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDc7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzddKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjg3KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgLyogQ29kZXMgMjg2IGFuZCAyODcgZG8gbm90IGV4aXN0LCBidXQgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlXG4gICAqIHRyZWUgY29uc3RydWN0aW9uIHRvIGdldCBhIGNhbm9uaWNhbCBIdWZmbWFuIHRyZWUgKGxvbmdlc3QgY29kZVxuICAgKiBhbGwgb25lcylcbiAgICovXG4gIGdlbl9jb2RlcyhzdGF0aWNfbHRyZWUsIExfQ09ERVMgKyAxLCBibF9jb3VudCk7XG5cbiAgLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlIGlzIHRyaXZpYWw6ICovXG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyBuKyspIHtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNTtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTtcbiAgfVxuXG4gIC8vIE5vdyBkYXRhIHJlYWR5IGFuZCB3ZSBjYW4gaW5pdCBzdGF0aWMgdHJlZXNcbiAgc3RhdGljX2xfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfbHRyZWUsIGV4dHJhX2xiaXRzLCBMSVRFUkFMUyArIDEsIExfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCAgICAgICAgICBEX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19ibF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKG5ldyBBcnJheSgwKSwgZXh0cmFfYmxiaXRzLCAwLCAgICAgICAgIEJMX0NPREVTLCBNQVhfQkxfQklUUyk7XG5cbiAgLy9zdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgYSBuZXcgYmxvY2suXG4gKi9cbmZ1bmN0aW9uIGluaXRfYmxvY2socykge1xuICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgdHJlZXMuICovXG4gIGZvciAobiA9IDA7IG4gPCBMX0NPREVTOyAgbisrKSB7IHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7ICBuKyspIHsgcy5keW5fZHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgQkxfQ09ERVM7IG4rKykgeyBzLmJsX3RyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuXG4gIHMuZHluX2x0cmVlW0VORF9CTE9DSyAqIDJdLyouRnJlcSovID0gMTtcbiAgcy5vcHRfbGVuID0gcy5zdGF0aWNfbGVuID0gMDtcbiAgcy5sYXN0X2xpdCA9IHMubWF0Y2hlcyA9IDA7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciBhbmQgYWxpZ24gdGhlIG91dHB1dCBvbiBhIGJ5dGUgYm91bmRhcnlcbiAqL1xuZnVuY3Rpb24gYmlfd2luZHVwKHMpXG57XG4gIGlmIChzLmJpX3ZhbGlkID4gOCkge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHtcbiAgICAvL3B1dF9ieXRlKHMsIChCeXRlKXMtPmJpX2J1Zik7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZjtcbiAgfVxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXG4gKiBvbmUncyBjb21wbGVtZW50IGlmIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gY29weV9ibG9jayhzLCBidWYsIGxlbiwgaGVhZGVyKVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICAgICpidWY7ICAgIC8qIHRoZSBpbnB1dCBkYXRhICovXG4vL3Vuc2lnbmVkIGxlbjsgICAgIC8qIGl0cyBsZW5ndGggKi9cbi8vaW50ICAgICAgaGVhZGVyOyAgLyogdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0dGVuICovXG57XG4gIGJpX3dpbmR1cChzKTsgICAgICAgIC8qIGFsaWduIG9uIGJ5dGUgYm91bmRhcnkgKi9cblxuICBpZiAoaGVhZGVyKSB7XG4gICAgcHV0X3Nob3J0KHMsIGxlbik7XG4gICAgcHV0X3Nob3J0KHMsIH5sZW4pO1xuICB9XG4vLyAgd2hpbGUgKGxlbi0tKSB7XG4vLyAgICBwdXRfYnl0ZShzLCAqYnVmKyspO1xuLy8gIH1cbiAgdXRpbHMuYXJyYXlTZXQocy5wZW5kaW5nX2J1Ziwgcy53aW5kb3csIGJ1ZiwgbGVuLCBzLnBlbmRpbmcpO1xuICBzLnBlbmRpbmcgKz0gbGVuO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gc21hbGxlcih0cmVlLCBuLCBtLCBkZXB0aCkge1xuICB2YXIgX24yID0gbiAqIDI7XG4gIHZhciBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlc3RvcmUgdGhlIGhlYXAgcHJvcGVydHkgYnkgbW92aW5nIGRvd24gdGhlIHRyZWUgc3RhcnRpbmcgYXQgbm9kZSBrLFxuICogZXhjaGFuZ2luZyBhIG5vZGUgd2l0aCB0aGUgc21hbGxlc3Qgb2YgaXRzIHR3byBzb25zIGlmIG5lY2Vzc2FyeSwgc3RvcHBpbmdcbiAqIHdoZW4gdGhlIGhlYXAgcHJvcGVydHkgaXMgcmUtZXN0YWJsaXNoZWQgKGVhY2ggZmF0aGVyIHNtYWxsZXIgdGhhbiBpdHNcbiAqIHR3byBzb25zKS5cbiAqL1xuZnVuY3Rpb24gcHFkb3duaGVhcChzLCB0cmVlLCBrKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAvKiB0aGUgdHJlZSB0byByZXN0b3JlICovXG4vLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xue1xuICB2YXIgdiA9IHMuaGVhcFtrXTtcbiAgdmFyIGogPSBrIDw8IDE7ICAvKiBsZWZ0IHNvbiBvZiBrICovXG4gIHdoaWxlIChqIDw9IHMuaGVhcF9sZW4pIHtcbiAgICAvKiBTZXQgaiB0byB0aGUgc21hbGxlc3Qgb2YgdGhlIHR3byBzb25zOiAqL1xuICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJlxuICAgICAgc21hbGxlcih0cmVlLCBzLmhlYXBbaiArIDFdLCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7XG4gICAgICBqKys7XG4gICAgfVxuICAgIC8qIEV4aXQgaWYgdiBpcyBzbWFsbGVyIHRoYW4gYm90aCBzb25zICovXG4gICAgaWYgKHNtYWxsZXIodHJlZSwgdiwgcy5oZWFwW2pdLCBzLmRlcHRoKSkgeyBicmVhazsgfVxuXG4gICAgLyogRXhjaGFuZ2UgdiB3aXRoIHRoZSBzbWFsbGVzdCBzb24gKi9cbiAgICBzLmhlYXBba10gPSBzLmhlYXBbal07XG4gICAgayA9IGo7XG5cbiAgICAvKiBBbmQgY29udGludWUgZG93biB0aGUgdHJlZSwgc2V0dGluZyBqIHRvIHRoZSBsZWZ0IHNvbiBvZiBrICovXG4gICAgaiA8PD0gMTtcbiAgfVxuICBzLmhlYXBba10gPSB2O1xufVxuXG5cbi8vIGlubGluZWQgbWFudWFsbHlcbi8vIHZhciBTTUFMTEVTVCA9IDE7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgYmxvY2sgZGF0YSBjb21wcmVzc2VkIHVzaW5nIHRoZSBnaXZlbiBIdWZmbWFuIHRyZWVzXG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzX2Jsb2NrKHMsIGx0cmVlLCBkdHJlZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xue1xuICB2YXIgZGlzdDsgICAgICAgICAgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsYzsgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXG4gIHZhciBseCA9IDA7ICAgICAgICAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqL1xuICB2YXIgY29kZTsgICAgICAgICAgIC8qIHRoZSBjb2RlIHRvIHNlbmQgKi9cbiAgdmFyIGV4dHJhOyAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXG5cbiAgaWYgKHMubGFzdF9saXQgIT09IDApIHtcbiAgICBkbyB7XG4gICAgICBkaXN0ID0gKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMl0gPDwgOCkgfCAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyICsgMV0pO1xuICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07XG4gICAgICBseCsrO1xuXG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7IC8qIHNlbmQgdGhlIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGxjIC09IGJhc2VfbGVuZ3RoW2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAgICAgICAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xuICAgICAgICB9XG4gICAgICAgIGRpc3QtLTsgLyogZGlzdCBpcyBub3cgdGhlIG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xuICAgICAgICAvL0Fzc2VydCAoY29kZSA8IERfQ09ERVMsIFwiYmFkIGRfY29kZVwiKTtcblxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSwgZHRyZWUpOyAgICAgICAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGRpc3QgLT0gYmFzZV9kaXN0W2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7ICAgLyogc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0cyAqL1xuICAgICAgICB9XG4gICAgICB9IC8qIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/ICovXG5cbiAgICAgIC8qIENoZWNrIHRoYXQgdGhlIG92ZXJsYXkgYmV0d2VlbiBwZW5kaW5nX2J1ZiBhbmQgZF9idWYrbF9idWYgaXMgb2s6ICovXG4gICAgICAvL0Fzc2VydCgodUludCkocy0+cGVuZGluZykgPCBzLT5saXRfYnVmc2l6ZSArIDIqbHgsXG4gICAgICAvLyAgICAgICBcInBlbmRpbmdCdWYgb3ZlcmZsb3dcIik7XG5cbiAgICB9IHdoaWxlIChseCA8IHMubGFzdF9saXQpO1xuICB9XG5cbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgbHRyZWUpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IG9uZSBIdWZmbWFuIHRyZWUgYW5kIGFzc2lnbnMgdGhlIGNvZGUgYml0IHN0cmluZ3MgYW5kIGxlbmd0aHMuXG4gKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGQgZnJlcSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZHMgbGVuIGFuZCBjb2RlIGFyZSBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aFxuICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXG4gKiAgICAgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzIG5vdCBudWxsLiBUaGUgZmllbGQgbWF4X2NvZGUgaXMgc2V0LlxuICovXG5mdW5jdGlvbiBidWlsZF90cmVlKHMsIGRlc2MpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIHZhciB0cmVlICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBzdHJlZSAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICB2YXIgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICB2YXIgZWxlbXMgICAgPSBkZXNjLnN0YXRfZGVzYy5lbGVtcztcbiAgdmFyIG4sIG07ICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciBoZWFwIGVsZW1lbnRzICovXG4gIHZhciBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdmFyIG5vZGU7ICAgICAgICAgIC8qIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWQgKi9cblxuICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluXG4gICAqIGhlYXBbU01BTExFU1RdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuICAgKiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKi9cbiAgcy5oZWFwX2xlbiA9IDA7XG4gIHMuaGVhcF9tYXggPSBIRUFQX1NJWkU7XG5cbiAgZm9yIChuID0gMDsgbiA8IGVsZW1zOyBuKyspIHtcbiAgICBpZiAodHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gbWF4X2NvZGUgPSBuO1xuICAgICAgcy5kZXB0aFtuXSA9IDA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRoZSBwa3ppcCBmb3JtYXQgcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCBvbmUgZGlzdGFuY2UgY29kZSBleGlzdHMsXG4gICAqIGFuZCB0aGF0IGF0IGxlYXN0IG9uZSBiaXQgc2hvdWxkIGJlIHNlbnQgZXZlbiBpZiB0aGVyZSBpcyBvbmx5IG9uZVxuICAgKiBwb3NzaWJsZSBjb2RlLiBTbyB0byBhdm9pZCBzcGVjaWFsIGNoZWNrcyBsYXRlciBvbiB3ZSBmb3JjZSBhdCBsZWFzdFxuICAgKiB0d28gY29kZXMgb2Ygbm9uIHplcm8gZnJlcXVlbmN5LlxuICAgKi9cbiAgd2hpbGUgKHMuaGVhcF9sZW4gPCAyKSB7XG4gICAgbm9kZSA9IHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gKG1heF9jb2RlIDwgMiA/ICsrbWF4X2NvZGUgOiAwKTtcbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IDE7XG4gICAgcy5kZXB0aFtub2RlXSA9IDA7XG4gICAgcy5vcHRfbGVuLS07XG5cbiAgICBpZiAoaGFzX3N0cmVlKSB7XG4gICAgICBzLnN0YXRpY19sZW4gLT0gc3RyZWVbbm9kZSAqIDIgKyAxXS8qLkxlbiovO1xuICAgIH1cbiAgICAvKiBub2RlIGlzIDAgb3IgMSBzbyBpdCBkb2VzIG5vdCBoYXZlIGV4dHJhIGJpdHMgKi9cbiAgfVxuICBkZXNjLm1heF9jb2RlID0gbWF4X2NvZGU7XG5cbiAgLyogVGhlIGVsZW1lbnRzIGhlYXBbaGVhcF9sZW4vMisxIC4uIGhlYXBfbGVuXSBhcmUgbGVhdmVzIG9mIHRoZSB0cmVlLFxuICAgKiBlc3RhYmxpc2ggc3ViLWhlYXBzIG9mIGluY3JlYXNpbmcgbGVuZ3RoczpcbiAgICovXG4gIGZvciAobiA9IChzLmhlYXBfbGVuID4+IDEvKmludCAvMiovKTsgbiA+PSAxOyBuLS0pIHsgcHFkb3duaGVhcChzLCB0cmVlLCBuKTsgfVxuXG4gIC8qIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGJ5IHJlcGVhdGVkbHkgY29tYmluaW5nIHRoZSBsZWFzdCB0d29cbiAgICogZnJlcXVlbnQgbm9kZXMuXG4gICAqL1xuICBub2RlID0gZWxlbXM7ICAgICAgICAgICAgICAvKiBuZXh0IGludGVybmFsIG5vZGUgb2YgdGhlIHRyZWUgKi9cbiAgZG8ge1xuICAgIC8vcHFyZW1vdmUocywgdHJlZSwgbik7ICAvKiBuID0gbm9kZSBvZiBsZWFzdCBmcmVxdWVuY3kgKi9cbiAgICAvKioqIHBxcmVtb3ZlICoqKi9cbiAgICBuID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG4gICAgLyoqKi9cblxuICAgIG0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107IC8qIG0gPSBub2RlIG9mIG5leHQgbGVhc3QgZnJlcXVlbmN5ICovXG5cbiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG47IC8qIGtlZXAgdGhlIG5vZGVzIHNvcnRlZCBieSBmcmVxdWVuY3kgKi9cbiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG07XG5cbiAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqL1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gdHJlZVtuICogMl0vKi5GcmVxKi8gKyB0cmVlW20gKiAyXS8qLkZyZXEqLztcbiAgICBzLmRlcHRoW25vZGVdID0gKHMuZGVwdGhbbl0gPj0gcy5kZXB0aFttXSA/IHMuZGVwdGhbbl0gOiBzLmRlcHRoW21dKSArIDE7XG4gICAgdHJlZVtuICogMiArIDFdLyouRGFkKi8gPSB0cmVlW20gKiAyICsgMV0vKi5EYWQqLyA9IG5vZGU7XG5cbiAgICAvKiBhbmQgaW5zZXJ0IHRoZSBuZXcgbm9kZSBpbiB0aGUgaGVhcCAqL1xuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IG5vZGUrKztcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuXG4gIH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7XG5cbiAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG5cbiAgLyogQXQgdGhpcyBwb2ludCwgdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldC4gV2UgY2FuIG5vd1xuICAgKiBnZW5lcmF0ZSB0aGUgYml0IGxlbmd0aHMuXG4gICAqL1xuICBnZW5fYml0bGVuKHMsIGRlc2MpO1xuXG4gIC8qIFRoZSBmaWVsZCBsZW4gaXMgbm93IHNldCwgd2UgY2FuIGdlbmVyYXRlIHRoZSBiaXQgY29kZXMgKi9cbiAgZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBzLmJsX2NvdW50KTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcbiAqIGluIHRoZSBiaXQgbGVuZ3RoIHRyZWUuXG4gKi9cbmZ1bmN0aW9uIHNjYW5fdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgIC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgbWF4X2NvdW50ID0gMTM4O1xuICAgIG1pbl9jb3VudCA9IDM7XG4gIH1cbiAgdHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXS8qLkxlbiovID0gMHhmZmZmOyAvKiBndWFyZCAqL1xuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLyArPSBjb3VudDtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG5cbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHsgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovKys7IH1cbiAgICAgIHMuYmxfdHJlZVtSRVBfM182ICogMl0vKi5GcmVxKi8rKztcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzNfMTAgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzExXzEzOCAqIDJdLyouRnJlcSovKys7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG5cbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cbiAqIGJsX3RyZWUuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgdmFyIGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIHZhciBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICB2YXIgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICB2YXIgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIHZhciBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIGRvIHsgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTsgfSB3aGlsZSAoLS1jb3VudCAhPT0gMCk7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikge1xuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzNfMTAsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAxMSwgNyk7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBmb3IgdGhlIGJpdCBsZW5ndGhzIGFuZCByZXR1cm4gdGhlIGluZGV4IGluXG4gKiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRfYmxfdHJlZShzKSB7XG4gIHZhciBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTtcblxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xuICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG4gIC8qIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cbiAgICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XG4gICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG4gICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LilcbiAgICovXG4gIGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyAtIDE7IG1heF9ibGluZGV4ID49IDM7IG1heF9ibGluZGV4LS0pIHtcbiAgICBpZiAocy5ibF90cmVlW2JsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXS8qLkxlbiovICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyogVXBkYXRlIG9wdF9sZW4gdG8gaW5jbHVkZSB0aGUgYml0IGxlbmd0aCB0cmVlIGFuZCBjb3VudHMgKi9cbiAgcy5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5keW4gdHJlZXM6IGR5biAlbGQsIHN0YXQgJWxkXCIsXG4gIC8vICAgICAgICBzLT5vcHRfbGVuLCBzLT5zdGF0aWNfbGVuKSk7XG5cbiAgcmV0dXJuIG1heF9ibGluZGV4O1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG4gKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cbiAqL1xuZnVuY3Rpb24gc2VuZF9hbGxfdHJlZXMocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgaW50IGxjb2RlcywgZGNvZGVzLCBibGNvZGVzOyAvKiBudW1iZXIgb2YgY29kZXMgZm9yIGVhY2ggdHJlZSAqL1xue1xuICB2YXIgcmFuazsgICAgICAgICAgICAgICAgICAgIC8qIGluZGV4IGluIGJsX29yZGVyICovXG5cbiAgLy9Bc3NlcnQgKGxjb2RlcyA+PSAyNTcgJiYgZGNvZGVzID49IDEgJiYgYmxjb2RlcyA+PSA0LCBcIm5vdCBlbm91Z2ggY29kZXNcIik7XG4gIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLFxuICAvLyAgICAgICAgXCJ0b28gbWFueSBjb2Rlc1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb3VudHM6IFwiKSk7XG4gIHNlbmRfYml0cyhzLCBsY29kZXMgLSAyNTcsIDUpOyAvKiBub3QgKzI1NSBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgc2VuZF9iaXRzKHMsIGRjb2RlcyAtIDEsICAgNSk7XG4gIHNlbmRfYml0cyhzLCBibGNvZGVzIC0gNCwgIDQpOyAvKiBub3QgLTMgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcbiAgICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvZGUgJTJkIFwiLCBibF9vcmRlcltyYW5rXSkpO1xuICAgIHNlbmRfYml0cyhzLCBzLmJsX3RyZWVbYmxfb3JkZXJbcmFua10gKiAyICsgMV0vKi5MZW4qLywgMyk7XG4gIH1cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fbHRyZWUsIGxjb2RlcyAtIDEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2R0cmVlLCBkY29kZXMgLSAxKTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDaGVjayBpZiB0aGUgZGF0YSB0eXBlIGlzIFRFWFQgb3IgQklOQVJZLCB1c2luZyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobTpcbiAqIC0gVEVYVCBpZiB0aGUgdHdvIGNvbmRpdGlvbnMgYmVsb3cgYXJlIHNhdGlzZmllZDpcbiAqICAgIGEpIFRoZXJlIGFyZSBubyBub24tcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwiYmxhY2sgbGlzdFwiICgwLi42LCAxNC4uMjUsIDI4Li4zMSkuXG4gKiAgICBiKSBUaGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJpbnRhYmxlIGNoYXJhY3RlciBiZWxvbmdpbmcgdG8gdGhlXG4gKiAgICAgICBcIndoaXRlIGxpc3RcIiAoOSB7VEFCfSwgMTAge0xGfSwgMTMge0NSfSwgMzIuLjI1NSkuXG4gKiAtIEJJTkFSWSBvdGhlcndpc2UuXG4gKiAtIFRoZSBmb2xsb3dpbmcgcGFydGlhbGx5LXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBmb3JtIGFcbiAqICAgXCJncmF5IGxpc3RcIiB0aGF0IGlzIGlnbm9yZWQgaW4gdGhpcyBkZXRlY3Rpb24gYWxnb3JpdGhtOlxuICogICAoNyB7QkVMfSwgOCB7QlN9LCAxMSB7VlR9LCAxMiB7RkZ9LCAyNiB7U1VCfSwgMjcge0VTQ30pLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIEZyZXEgb2YgZHluX2x0cmVlIGFyZSBzZXQuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdF9kYXRhX3R5cGUocykge1xuICAvKiBibGFja19tYXNrIGlzIHRoZSBiaXQgbWFzayBvZiBibGFjay1saXN0ZWQgYnl0ZXNcbiAgICogc2V0IGJpdHMgMC4uNiwgMTQuLjI1LCBhbmQgMjguLjMxXG4gICAqIDB4ZjNmZmMwN2YgPSBiaW5hcnkgMTExMTAwMTExMTExMTExMTExMDAwMDAwMDExMTExMTFcbiAgICovXG4gIHZhciBibGFja19tYXNrID0gMHhmM2ZmYzA3ZjtcbiAgdmFyIG47XG5cbiAgLyogQ2hlY2sgZm9yIG5vbi10ZXh0dWFsIChcImJsYWNrLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8PSAzMTsgbisrLCBibGFja19tYXNrID4+Pj0gMSkge1xuICAgIGlmICgoYmxhY2tfbWFzayAmIDEpICYmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApKSB7XG4gICAgICByZXR1cm4gWl9CSU5BUlk7XG4gICAgfVxuICB9XG5cbiAgLyogQ2hlY2sgZm9yIHRleHR1YWwgKFwid2hpdGUtbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBpZiAocy5keW5fbHRyZWVbOSAqIDJdLyouRnJlcSovICE9PSAwIHx8IHMuZHluX2x0cmVlWzEwICogMl0vKi5GcmVxKi8gIT09IDAgfHxcbiAgICAgIHMuZHluX2x0cmVlWzEzICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICByZXR1cm4gWl9URVhUO1xuICB9XG4gIGZvciAobiA9IDMyOyBuIDwgTElURVJBTFM7IG4rKykge1xuICAgIGlmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHJldHVybiBaX1RFWFQ7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlcmUgYXJlIG5vIFwiYmxhY2stbGlzdGVkXCIgb3IgXCJ3aGl0ZS1saXN0ZWRcIiBieXRlczpcbiAgICogdGhpcyBzdHJlYW0gZWl0aGVyIGlzIGVtcHR5IG9yIGhhcyB0b2xlcmF0ZWQgKFwiZ3JheS1saXN0ZWRcIikgYnl0ZXMgb25seS5cbiAgICovXG4gIHJldHVybiBaX0JJTkFSWTtcbn1cblxuXG52YXIgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cbiAqL1xuZnVuY3Rpb24gX3RyX2luaXQocylcbntcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcbiAgcy5kX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTtcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xuXG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6ICovXG4gIGluaXRfYmxvY2socyk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgc3RvcmVkIGJsb2NrXG4gKi9cbmZ1bmN0aW9uIF90cl9zdG9yZWRfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG57XG4gIHNlbmRfYml0cyhzLCAoU1RPUkVEX0JMT0NLIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOyAgICAvKiBzZW5kIGJsb2NrIHR5cGUgKi9cbiAgY29weV9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIHRydWUpOyAvKiB3aXRoIGhlYWRlciAqL1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBvbmUgZW1wdHkgc3RhdGljIGJsb2NrIHRvIGdpdmUgZW5vdWdoIGxvb2thaGVhZCBmb3IgaW5mbGF0ZS5cbiAqIFRoaXMgdGFrZXMgMTAgYml0cywgb2Ygd2hpY2ggNyBtYXkgcmVtYWluIGluIHRoZSBiaXQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBfdHJfYWxpZ24ocykge1xuICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpO1xuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xuICBiaV9mbHVzaChzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xuICogdHJlZXMgb3Igc3RvcmUsIGFuZCBvdXRwdXQgdGhlIGVuY29kZWQgYmxvY2sgdG8gdGhlIHppcCBmaWxlLlxuICovXG5mdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrLCBvciBOVUxMIGlmIHRvbyBvbGQgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgdmFyIG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgdmFyIG1heF9ibGluZGV4ID0gMDsgICAgICAgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXG4gIGlmIChzLmxldmVsID4gMCkge1xuXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cbiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOKSB7XG4gICAgICBzLnN0cm0uZGF0YV90eXBlID0gZGV0ZWN0X2RhdGFfdHlwZShzKTtcbiAgICB9XG5cbiAgICAvKiBDb25zdHJ1Y3QgdGhlIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gICAgYnVpbGRfdHJlZShzLCBzLmxfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkXCIsIHMtPm9wdF9sZW4sXG4gICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTtcblxuICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpO1xuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZlxuICAgICAqIHRoZSBjb21wcmVzc2VkIGJsb2NrIGRhdGEsIGV4Y2x1ZGluZyB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMuXG4gICAgICovXG5cbiAgICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlIGZvciB0aGUgYWJvdmUgdHdvIHRyZWVzLCBhbmQgZ2V0IHRoZSBpbmRleFxuICAgICAqIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICAgICAqL1xuICAgIG1heF9ibGluZGV4ID0gYnVpbGRfYmxfdHJlZShzKTtcblxuICAgIC8qIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZy4gQ29tcHV0ZSB0aGUgYmxvY2sgbGVuZ3RocyBpbiBieXRlcy4gKi9cbiAgICBvcHRfbGVuYiA9IChzLm9wdF9sZW4gKyAzICsgNykgPj4+IDM7XG4gICAgc3RhdGljX2xlbmIgPSAocy5zdGF0aWNfbGVuICsgMyArIDcpID4+PiAzO1xuXG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxub3B0ICVsdSglbHUpIHN0YXQgJWx1KCVsdSkgc3RvcmVkICVsdSBsaXQgJXUgXCIsXG4gICAgLy8gICAgICAgIG9wdF9sZW5iLCBzLT5vcHRfbGVuLCBzdGF0aWNfbGVuYiwgcy0+c3RhdGljX2xlbiwgc3RvcmVkX2xlbixcbiAgICAvLyAgICAgICAgcy0+bGFzdF9saXQpKTtcblxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xuICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cbiAgfVxuXG4gIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkge1xuICAgIC8qIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHMgKi9cblxuICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG4gICAgICogT3RoZXJ3aXNlIHdlIGNhbid0IGhhdmUgcHJvY2Vzc2VkIG1vcmUgdGhhbiBXU0laRSBpbnB1dCBieXRlcyBzaW5jZVxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuICAgICAqIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG4gICAgICovXG4gICAgX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpO1xuXG4gIH0gZWxzZSBpZiAocy5zdHJhdGVneSA9PT0gWl9GSVhFRCB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcblxuICAgIHNlbmRfYml0cyhzLCAoU1RBVElDX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcblxuICB9IGVsc2Uge1xuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIHNlbmRfYWxsX3RyZWVzKHMsIHMubF9kZXNjLm1heF9jb2RlICsgMSwgcy5kX2Rlc2MubWF4X2NvZGUgKyAxLCBtYXhfYmxpbmRleCArIDEpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHMuZHluX2x0cmVlLCBzLmR5bl9kdHJlZSk7XG4gIH1cbiAgLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQsIFwiYmFkIGNvbXByZXNzZWQgc2l6ZVwiKTtcbiAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG4gICAqL1xuICBpbml0X2Jsb2NrKHMpO1xuXG4gIGlmIChsYXN0KSB7XG4gICAgYmlfd2luZHVwKHMpO1xuICB9XG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuICAvLyAgICAgICBzLT5jb21wcmVzc2VkX2xlbi03Kmxhc3QpKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWZcbiAqIHRoZSBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gX3RyX3RhbGx5KHMsIGRpc3QsIGxjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG57XG4gIC8vdmFyIG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDJdICAgICA9IChkaXN0ID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5kX2J1ZiArIHMubGFzdF9saXQgKiAyICsgMV0gPSBkaXN0ICYgMHhmZjtcblxuICBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBzLmxhc3RfbGl0XSA9IGxjICYgMHhmZjtcbiAgcy5sYXN0X2xpdCsrO1xuXG4gIGlmIChkaXN0ID09PSAwKSB7XG4gICAgLyogbGMgaXMgdGhlIHVubWF0Y2hlZCBjaGFyICovXG4gICAgcy5keW5fbHRyZWVbbGMgKiAyXS8qLkZyZXEqLysrO1xuICB9IGVsc2Uge1xuICAgIHMubWF0Y2hlcysrO1xuICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICBkaXN0LS07ICAgICAgICAgICAgIC8qIGRpc3QgPSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cbiAgICAvL0Fzc2VydCgodXNoKWRpc3QgPCAodXNoKU1BWF9ESVNUKHMpICYmXG4gICAgLy8gICAgICAgKHVzaClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJlxuICAgIC8vICAgICAgICh1c2gpZF9jb2RlKGRpc3QpIDwgKHVzaClEX0NPREVTLCAgXCJfdHJfdGFsbHk6IGJhZCBtYXRjaFwiKTtcblxuICAgIHMuZHluX2x0cmVlWyhfbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMgKyAxKSAqIDJdLyouRnJlcSovKys7XG4gICAgcy5keW5fZHRyZWVbZF9jb2RlKGRpc3QpICogMl0vKi5GcmVxKi8rKztcbiAgfVxuXG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuXG4vLyNpZmRlZiBUUlVOQ0FURV9CTE9DS1xuLy8gIC8qIFRyeSB0byBndWVzcyBpZiBpdCBpcyBwcm9maXRhYmxlIHRvIHN0b3AgdGhlIGN1cnJlbnQgYmxvY2sgaGVyZSAqL1xuLy8gIGlmICgocy5sYXN0X2xpdCAmIDB4MWZmZikgPT09IDAgJiYgcy5sZXZlbCA+IDIpIHtcbi8vICAgIC8qIENvbXB1dGUgYW4gdXBwZXIgYm91bmQgZm9yIHRoZSBjb21wcmVzc2VkIGxlbmd0aCAqL1xuLy8gICAgb3V0X2xlbmd0aCA9IHMubGFzdF9saXQqODtcbi8vICAgIGluX2xlbmd0aCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0O1xuLy9cbi8vICAgIGZvciAoZGNvZGUgPSAwOyBkY29kZSA8IERfQ09ERVM7IGRjb2RlKyspIHtcbi8vICAgICAgb3V0X2xlbmd0aCArPSBzLmR5bl9kdHJlZVtkY29kZSoyXS8qLkZyZXEqLyAqICg1ICsgZXh0cmFfZGJpdHNbZGNvZGVdKTtcbi8vICAgIH1cbi8vICAgIG91dF9sZW5ndGggPj4+PSAzO1xuLy8gICAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmxhc3RfbGl0ICV1LCBpbiAlbGQsIG91dCB+JWxkKCVsZCUlKSBcIixcbi8vICAgIC8vICAgICAgIHMtPmxhc3RfbGl0LCBpbl9sZW5ndGgsIG91dF9sZW5ndGgsXG4vLyAgICAvLyAgICAgICAxMDBMIC0gb3V0X2xlbmd0aCoxMDBML2luX2xlbmd0aCkpO1xuLy8gICAgaWYgKHMubWF0Y2hlcyA8IChzLmxhc3RfbGl0Pj4xKS8qaW50IC8yKi8gJiYgb3V0X2xlbmd0aCA8IChpbl9sZW5ndGg+PjEpLyppbnQgLzIqLykge1xuLy8gICAgICByZXR1cm4gdHJ1ZTtcbi8vICAgIH1cbi8vICB9XG4vLyNlbmRpZlxuXG4gIHJldHVybiAocy5sYXN0X2xpdCA9PT0gcy5saXRfYnVmc2l6ZSAtIDEpO1xuICAvKiBXZSBhdm9pZCBlcXVhbGl0eSB3aXRoIGxpdF9idWZzaXplIGJlY2F1c2Ugb2Ygd3JhcGFyb3VuZCBhdCA2NEtcbiAgICogb24gMTYgYml0IG1hY2hpbmVzIGFuZCBiZWNhdXNlIHN0b3JlZCBibG9ja3MgYXJlIHJlc3RyaWN0ZWQgdG9cbiAgICogNjRLLTEgYnl0ZXMuXG4gICAqL1xufVxuXG5leHBvcnRzLl90cl9pbml0ICA9IF90cl9pbml0O1xuZXhwb3J0cy5fdHJfc3RvcmVkX2Jsb2NrID0gX3RyX3N0b3JlZF9ibG9jaztcbmV4cG9ydHMuX3RyX2ZsdXNoX2Jsb2NrICA9IF90cl9mbHVzaF9ibG9jaztcbmV4cG9ydHMuX3RyX3RhbGx5ID0gX3RyX3RhbGx5O1xuZXhwb3J0cy5fdHJfYWxpZ24gPSBfdHJfYWxpZ247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtO1xuIiwiaW1wb3J0IHsgYXNzZXJ0SXMsIGVycm9yIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5leHBvcnQgdmFyIFJvdGF0aW9uVHlwZXM7XG4oZnVuY3Rpb24gKFJvdGF0aW9uVHlwZXMpIHtcbiAgICBSb3RhdGlvblR5cGVzW1wiRGVncmVlc1wiXSA9IFwiZGVncmVlc1wiO1xuICAgIFJvdGF0aW9uVHlwZXNbXCJSYWRpYW5zXCJdID0gXCJyYWRpYW5zXCI7XG59KShSb3RhdGlvblR5cGVzIHx8IChSb3RhdGlvblR5cGVzID0ge30pKTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IGZ1bmN0aW9uIChyYWRpYW5BbmdsZSkge1xuICAgIGFzc2VydElzKHJhZGlhbkFuZ2xlLCAncmFkaWFuQW5nbGUnLCBbJ251bWJlciddKTtcbiAgICByZXR1cm4geyB0eXBlOiBSb3RhdGlvblR5cGVzLlJhZGlhbnMsIGFuZ2xlOiByYWRpYW5BbmdsZSB9O1xufTtcbmV4cG9ydCB2YXIgZGVncmVlcyA9IGZ1bmN0aW9uIChkZWdyZWVBbmdsZSkge1xuICAgIGFzc2VydElzKGRlZ3JlZUFuZ2xlLCAnZGVncmVlQW5nbGUnLCBbJ251bWJlciddKTtcbiAgICByZXR1cm4geyB0eXBlOiBSb3RhdGlvblR5cGVzLkRlZ3JlZXMsIGFuZ2xlOiBkZWdyZWVBbmdsZSB9O1xufTtcbnZhciBSYWRpYW5zID0gUm90YXRpb25UeXBlcy5SYWRpYW5zLCBEZWdyZWVzID0gUm90YXRpb25UeXBlcy5EZWdyZWVzO1xuZXhwb3J0IHZhciBkZWdyZWVzVG9SYWRpYW5zID0gZnVuY3Rpb24gKGRlZ3JlZSkgeyByZXR1cm4gKGRlZ3JlZSAqIE1hdGguUEkpIC8gMTgwOyB9O1xuZXhwb3J0IHZhciByYWRpYW5zVG9EZWdyZWVzID0gZnVuY3Rpb24gKHJhZGlhbikgeyByZXR1cm4gKHJhZGlhbiAqIDE4MCkgLyBNYXRoLlBJOyB9O1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgdmFyIHRvUmFkaWFucyA9IGZ1bmN0aW9uIChyb3RhdGlvbikge1xuICAgIHJldHVybiByb3RhdGlvbi50eXBlID09PSBSYWRpYW5zID8gcm90YXRpb24uYW5nbGVcbiAgICAgICAgOiByb3RhdGlvbi50eXBlID09PSBEZWdyZWVzID8gZGVncmVlc1RvUmFkaWFucyhyb3RhdGlvbi5hbmdsZSlcbiAgICAgICAgICAgIDogZXJyb3IoXCJJbnZhbGlkIHJvdGF0aW9uOiBcIiArIEpTT04uc3RyaW5naWZ5KHJvdGF0aW9uKSk7XG59O1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgdmFyIHRvRGVncmVlcyA9IGZ1bmN0aW9uIChyb3RhdGlvbikge1xuICAgIHJldHVybiByb3RhdGlvbi50eXBlID09PSBSYWRpYW5zID8gcmFkaWFuc1RvRGVncmVlcyhyb3RhdGlvbi5hbmdsZSlcbiAgICAgICAgOiByb3RhdGlvbi50eXBlID09PSBEZWdyZWVzID8gcm90YXRpb24uYW5nbGVcbiAgICAgICAgICAgIDogZXJyb3IoXCJJbnZhbGlkIHJvdGF0aW9uOiBcIiArIEpTT04uc3RyaW5naWZ5KHJvdGF0aW9uKSk7XG59O1xuZXhwb3J0IHZhciByZWR1Y2VSb3RhdGlvbiA9IGZ1bmN0aW9uIChkZWdyZWVBbmdsZSkge1xuICAgIGlmIChkZWdyZWVBbmdsZSA9PT0gdm9pZCAwKSB7IGRlZ3JlZUFuZ2xlID0gMDsgfVxuICAgIHZhciBxdWFkcmFudHMgPSAoZGVncmVlQW5nbGUgLyA5MCkgJSA0O1xuICAgIGlmIChxdWFkcmFudHMgPT09IDApXG4gICAgICAgIHJldHVybiAwO1xuICAgIGlmIChxdWFkcmFudHMgPT09IDEpXG4gICAgICAgIHJldHVybiA5MDtcbiAgICBpZiAocXVhZHJhbnRzID09PSAyKVxuICAgICAgICByZXR1cm4gMTgwO1xuICAgIGlmIChxdWFkcmFudHMgPT09IDMpXG4gICAgICAgIHJldHVybiAyNzA7XG4gICAgcmV0dXJuIDA7IC8vIGBkZWdyZWVBbmdsZWAgaXMgbm90IGEgbXVsdGlwbGUgb2YgOTBcbn07XG5leHBvcnQgdmFyIGFkanVzdERpbXNGb3JSb3RhdGlvbiA9IGZ1bmN0aW9uIChkaW1zLCBkZWdyZWVBbmdsZSkge1xuICAgIGlmIChkZWdyZWVBbmdsZSA9PT0gdm9pZCAwKSB7IGRlZ3JlZUFuZ2xlID0gMDsgfVxuICAgIHZhciByb3RhdGlvbiA9IHJlZHVjZVJvdGF0aW9uKGRlZ3JlZUFuZ2xlKTtcbiAgICByZXR1cm4gcm90YXRpb24gPT09IDkwIHx8IHJvdGF0aW9uID09PSAyNzBcbiAgICAgICAgPyB7IHdpZHRoOiBkaW1zLmhlaWdodCwgaGVpZ2h0OiBkaW1zLndpZHRoIH1cbiAgICAgICAgOiB7IHdpZHRoOiBkaW1zLndpZHRoLCBoZWlnaHQ6IGRpbXMuaGVpZ2h0IH07XG59O1xuZXhwb3J0IHZhciByb3RhdGVSZWN0YW5nbGUgPSBmdW5jdGlvbiAocmVjdGFuZ2xlLCBib3JkZXJXaWR0aCwgZGVncmVlQW5nbGUpIHtcbiAgICBpZiAoYm9yZGVyV2lkdGggPT09IHZvaWQgMCkgeyBib3JkZXJXaWR0aCA9IDA7IH1cbiAgICBpZiAoZGVncmVlQW5nbGUgPT09IHZvaWQgMCkgeyBkZWdyZWVBbmdsZSA9IDA7IH1cbiAgICB2YXIgeCA9IHJlY3RhbmdsZS54LCB5ID0gcmVjdGFuZ2xlLnksIHcgPSByZWN0YW5nbGUud2lkdGgsIGggPSByZWN0YW5nbGUuaGVpZ2h0O1xuICAgIHZhciByID0gcmVkdWNlUm90YXRpb24oZGVncmVlQW5nbGUpO1xuICAgIHZhciBiID0gYm9yZGVyV2lkdGggLyAyO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGlmIChyID09PSAwKVxuICAgICAgICByZXR1cm4geyB4OiB4IC0gYiwgeTogeSAtIGIsIHdpZHRoOiB3LCBoZWlnaHQ6IGggfTtcbiAgICBlbHNlIGlmIChyID09PSA5MClcbiAgICAgICAgcmV0dXJuIHsgeDogeCAtIGggKyBiLCB5OiB5IC0gYiwgd2lkdGg6IGgsIGhlaWdodDogdyB9O1xuICAgIGVsc2UgaWYgKHIgPT09IDE4MClcbiAgICAgICAgcmV0dXJuIHsgeDogeCAtIHcgKyBiLCB5OiB5IC0gaCArIGIsIHdpZHRoOiB3LCBoZWlnaHQ6IGggfTtcbiAgICBlbHNlIGlmIChyID09PSAyNzApXG4gICAgICAgIHJldHVybiB7IHg6IHggLSBiLCB5OiB5IC0gdyArIGIsIHdpZHRoOiBoLCBoZWlnaHQ6IHcgfTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiB7IHg6IHggLSBiLCB5OiB5IC0gYiwgd2lkdGg6IHcsIGhlaWdodDogaCB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdGF0aW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBQREZOYW1lLCBQREZOdW1iZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xuZXhwb3J0IHZhciBhc1BERk5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBuYW1lIGluc3RhbmNlb2YgUERGTmFtZSA/IG5hbWUgOiBQREZOYW1lLm9mKG5hbWUpO1xufTtcbmV4cG9ydCB2YXIgYXNQREZOdW1iZXIgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIG51bSBpbnN0YW5jZW9mIFBERk51bWJlciA/IG51bSA6IFBERk51bWJlci5vZihudW0pO1xufTtcbmV4cG9ydCB2YXIgYXNOdW1iZXIgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIG51bSBpbnN0YW5jZW9mIFBERk51bWJlciA/IG51bS5hc051bWJlcigpIDogbnVtO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdHMuanMubWFwIiwiaW1wb3J0IHsgYXNOdW1iZXIsIGFzUERGTmFtZSwgYXNQREZOdW1iZXIgfSBmcm9tIFwiLi9vYmplY3RzXCI7XG5pbXBvcnQgeyBkZWdyZWVzVG9SYWRpYW5zIH0gZnJvbSBcIi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBQREZPcGVyYXRvciwgUERGT3BlcmF0b3JOYW1lcyBhcyBPcHMsIH0gZnJvbSBcIi4uL2NvcmVcIjtcbi8qID09PT09PT09PT09PT09PT09PT09IENsaXBwaW5nIFBhdGggT3BlcmF0b3JzID09PT09PT09PT09PT09PT09PT09ICovXG5leHBvcnQgdmFyIGNsaXAgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuQ2xpcE5vblplcm8pOyB9O1xuZXhwb3J0IHZhciBjbGlwRXZlbk9kZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5DbGlwRXZlbk9kZCk7IH07XG4vKiA9PT09PT09PT09PT09PT09PT09PSBHcmFwaGljcyBTdGF0ZSBPcGVyYXRvcnMgPT09PT09PT09PT09PT09PT09PT0gKi9cbnZhciBjb3MgPSBNYXRoLmNvcywgc2luID0gTWF0aC5zaW4sIHRhbiA9IE1hdGgudGFuO1xuZXhwb3J0IHZhciBjb25jYXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5Db25jYXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCwgW1xuICAgICAgICBhc1BERk51bWJlcihhKSxcbiAgICAgICAgYXNQREZOdW1iZXIoYiksXG4gICAgICAgIGFzUERGTnVtYmVyKGMpLFxuICAgICAgICBhc1BERk51bWJlcihkKSxcbiAgICAgICAgYXNQREZOdW1iZXIoZSksXG4gICAgICAgIGFzUERGTnVtYmVyKGYpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgdHJhbnNsYXRlID0gZnVuY3Rpb24gKHhQb3MsIHlQb3MpIHtcbiAgICByZXR1cm4gY29uY2F0VHJhbnNmb3JtYXRpb25NYXRyaXgoMSwgMCwgMCwgMSwgeFBvcywgeVBvcyk7XG59O1xuZXhwb3J0IHZhciBzY2FsZSA9IGZ1bmN0aW9uICh4UG9zLCB5UG9zKSB7XG4gICAgcmV0dXJuIGNvbmNhdFRyYW5zZm9ybWF0aW9uTWF0cml4KHhQb3MsIDAsIDAsIHlQb3MsIDAsIDApO1xufTtcbmV4cG9ydCB2YXIgcm90YXRlUmFkaWFucyA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHJldHVybiBjb25jYXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChjb3MoYXNOdW1iZXIoYW5nbGUpKSwgc2luKGFzTnVtYmVyKGFuZ2xlKSksIC1zaW4oYXNOdW1iZXIoYW5nbGUpKSwgY29zKGFzTnVtYmVyKGFuZ2xlKSksIDAsIDApO1xufTtcbmV4cG9ydCB2YXIgcm90YXRlRGVncmVlcyA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHJldHVybiByb3RhdGVSYWRpYW5zKGRlZ3JlZXNUb1JhZGlhbnMoYXNOdW1iZXIoYW5nbGUpKSk7XG59O1xuZXhwb3J0IHZhciBza2V3UmFkaWFucyA9IGZ1bmN0aW9uICh4U2tld0FuZ2xlLCB5U2tld0FuZ2xlKSB7XG4gICAgcmV0dXJuIGNvbmNhdFRyYW5zZm9ybWF0aW9uTWF0cml4KDEsIHRhbihhc051bWJlcih4U2tld0FuZ2xlKSksIHRhbihhc051bWJlcih5U2tld0FuZ2xlKSksIDEsIDAsIDApO1xufTtcbmV4cG9ydCB2YXIgc2tld0RlZ3JlZXMgPSBmdW5jdGlvbiAoeFNrZXdBbmdsZSwgeVNrZXdBbmdsZSkge1xuICAgIHJldHVybiBza2V3UmFkaWFucyhkZWdyZWVzVG9SYWRpYW5zKGFzTnVtYmVyKHhTa2V3QW5nbGUpKSwgZGVncmVlc1RvUmFkaWFucyhhc051bWJlcih5U2tld0FuZ2xlKSkpO1xufTtcbmV4cG9ydCB2YXIgc2V0RGFzaFBhdHRlcm4gPSBmdW5jdGlvbiAoZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlNldExpbmVEYXNoUGF0dGVybiwgW1xuICAgICAgICBcIltcIiArIGRhc2hBcnJheS5tYXAoYXNQREZOdW1iZXIpLmpvaW4oJyAnKSArIFwiXVwiLFxuICAgICAgICBhc1BERk51bWJlcihkYXNoUGhhc2UpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgcmVzdG9yZURhc2hQYXR0ZXJuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0RGFzaFBhdHRlcm4oW10sIDApOyB9O1xuZXhwb3J0IHZhciBMaW5lQ2FwU3R5bGU7XG4oZnVuY3Rpb24gKExpbmVDYXBTdHlsZSkge1xuICAgIExpbmVDYXBTdHlsZVtMaW5lQ2FwU3R5bGVbXCJCdXR0XCJdID0gMF0gPSBcIkJ1dHRcIjtcbiAgICBMaW5lQ2FwU3R5bGVbTGluZUNhcFN0eWxlW1wiUm91bmRcIl0gPSAxXSA9IFwiUm91bmRcIjtcbiAgICBMaW5lQ2FwU3R5bGVbTGluZUNhcFN0eWxlW1wiUHJvamVjdGluZ1wiXSA9IDJdID0gXCJQcm9qZWN0aW5nXCI7XG59KShMaW5lQ2FwU3R5bGUgfHwgKExpbmVDYXBTdHlsZSA9IHt9KSk7XG5leHBvcnQgdmFyIHNldExpbmVDYXAgPSBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlNldExpbmVDYXBTdHlsZSwgW2FzUERGTnVtYmVyKHN0eWxlKV0pO1xufTtcbmV4cG9ydCB2YXIgTGluZUpvaW5TdHlsZTtcbihmdW5jdGlvbiAoTGluZUpvaW5TdHlsZSkge1xuICAgIExpbmVKb2luU3R5bGVbTGluZUpvaW5TdHlsZVtcIk1pdGVyXCJdID0gMF0gPSBcIk1pdGVyXCI7XG4gICAgTGluZUpvaW5TdHlsZVtMaW5lSm9pblN0eWxlW1wiUm91bmRcIl0gPSAxXSA9IFwiUm91bmRcIjtcbiAgICBMaW5lSm9pblN0eWxlW0xpbmVKb2luU3R5bGVbXCJCZXZlbFwiXSA9IDJdID0gXCJCZXZlbFwiO1xufSkoTGluZUpvaW5TdHlsZSB8fCAoTGluZUpvaW5TdHlsZSA9IHt9KSk7XG5leHBvcnQgdmFyIHNldExpbmVKb2luID0gZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRMaW5lSm9pblN0eWxlLCBbYXNQREZOdW1iZXIoc3R5bGUpXSk7XG59O1xuZXhwb3J0IHZhciBzZXRHcmFwaGljc1N0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRHcmFwaGljc1N0YXRlUGFyYW1zLCBbYXNQREZOYW1lKHN0YXRlKV0pO1xufTtcbmV4cG9ydCB2YXIgcHVzaEdyYXBoaWNzU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuUHVzaEdyYXBoaWNzU3RhdGUpOyB9O1xuZXhwb3J0IHZhciBwb3BHcmFwaGljc1N0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlBvcEdyYXBoaWNzU3RhdGUpOyB9O1xuZXhwb3J0IHZhciBzZXRMaW5lV2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlNldExpbmVXaWR0aCwgW2FzUERGTnVtYmVyKHdpZHRoKV0pO1xufTtcbi8qID09PT09PT09PT09PT09PT09PT09IFBhdGggQ29uc3RydWN0aW9uIE9wZXJhdG9ycyA9PT09PT09PT09PT09PT09PT09PSAqL1xuZXhwb3J0IHZhciBhcHBlbmRCZXppZXJDdXJ2ZSA9IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5BcHBlbmRCZXppZXJDdXJ2ZSwgW1xuICAgICAgICBhc1BERk51bWJlcih4MSksXG4gICAgICAgIGFzUERGTnVtYmVyKHkxKSxcbiAgICAgICAgYXNQREZOdW1iZXIoeDIpLFxuICAgICAgICBhc1BERk51bWJlcih5MiksXG4gICAgICAgIGFzUERGTnVtYmVyKHgzKSxcbiAgICAgICAgYXNQREZOdW1iZXIoeTMpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgYXBwZW5kUXVhZHJhdGljQ3VydmUgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLkN1cnZlVG9SZXBsaWNhdGVJbml0aWFsUG9pbnQsIFtcbiAgICAgICAgYXNQREZOdW1iZXIoeDEpLFxuICAgICAgICBhc1BERk51bWJlcih5MSksXG4gICAgICAgIGFzUERGTnVtYmVyKHgyKSxcbiAgICAgICAgYXNQREZOdW1iZXIoeTIpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgY2xvc2VQYXRoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLkNsb3NlUGF0aCk7IH07XG5leHBvcnQgdmFyIG1vdmVUbyA9IGZ1bmN0aW9uICh4UG9zLCB5UG9zKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5Nb3ZlVG8sIFthc1BERk51bWJlcih4UG9zKSwgYXNQREZOdW1iZXIoeVBvcyldKTtcbn07XG5leHBvcnQgdmFyIGxpbmVUbyA9IGZ1bmN0aW9uICh4UG9zLCB5UG9zKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5MaW5lVG8sIFthc1BERk51bWJlcih4UG9zKSwgYXNQREZOdW1iZXIoeVBvcyldKTtcbn07XG4vKipcbiAqIEBwYXJhbSB4UG9zIHggY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSByZWN0YW5nbGVcbiAqIEBwYXJhbSB5UG9zIHkgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSByZWN0YW5nbGVcbiAqIEBwYXJhbSB3aWR0aCB3aWR0aCBvZiB0aGUgcmVjdGFuZ2xlXG4gKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB0aGUgcmVjdGFuZ2xlXG4gKi9cbmV4cG9ydCB2YXIgcmVjdGFuZ2xlID0gZnVuY3Rpb24gKHhQb3MsIHlQb3MsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLkFwcGVuZFJlY3RhbmdsZSwgW1xuICAgICAgICBhc1BERk51bWJlcih4UG9zKSxcbiAgICAgICAgYXNQREZOdW1iZXIoeVBvcyksXG4gICAgICAgIGFzUERGTnVtYmVyKHdpZHRoKSxcbiAgICAgICAgYXNQREZOdW1iZXIoaGVpZ2h0KSxcbiAgICBdKTtcbn07XG4vKipcbiAqIEBwYXJhbSB4UG9zIHggY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBzcXVhcmVcbiAqIEBwYXJhbSB5UG9zIHkgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBzcXVhcmVcbiAqIEBwYXJhbSBzaXplIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHNxdWFyZVxuICovXG5leHBvcnQgdmFyIHNxdWFyZSA9IGZ1bmN0aW9uICh4UG9zLCB5UG9zLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlY3RhbmdsZSh4UG9zLCB5UG9zLCBzaXplLCBzaXplKTtcbn07XG4vKiA9PT09PT09PT09PT09PT09PT09PSBQYXRoIFBhaW50aW5nIE9wZXJhdG9ycyA9PT09PT09PT09PT09PT09PT09PSAqL1xuZXhwb3J0IHZhciBzdHJva2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuU3Ryb2tlUGF0aCk7IH07XG5leHBvcnQgdmFyIGZpbGwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuRmlsbE5vblplcm8pOyB9O1xuZXhwb3J0IHZhciBmaWxsQW5kU3Ryb2tlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLkZpbGxOb25aZXJvQW5kU3Ryb2tlKTsgfTtcbmV4cG9ydCB2YXIgZW5kUGF0aCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5FbmRQYXRoKTsgfTtcbi8qID09PT09PT09PT09PT09PT09PT09IFRleHQgUG9zaXRpb25pbmcgT3BlcmF0b3JzID09PT09PT09PT09PT09PT09PT09ICovXG5leHBvcnQgdmFyIG5leHRMaW5lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLk5leHRMaW5lKTsgfTtcbmV4cG9ydCB2YXIgbW92ZVRleHQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuTW92ZVRleHQsIFthc1BERk51bWJlcih4KSwgYXNQREZOdW1iZXIoeSldKTtcbn07XG4vKiA9PT09PT09PT09PT09PT09PT09PSBUZXh0IFNob3dpbmcgT3BlcmF0b3JzID09PT09PT09PT09PT09PT09PT09ICovXG5leHBvcnQgdmFyIHNob3dUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlNob3dUZXh0LCBbdGV4dF0pO1xufTtcbi8qID09PT09PT09PT09PT09PT09PT09IFRleHQgU3RhdGUgT3BlcmF0b3JzID09PT09PT09PT09PT09PT09PT09ICovXG5leHBvcnQgdmFyIGJlZ2luVGV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5CZWdpblRleHQpOyB9O1xuZXhwb3J0IHZhciBlbmRUZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLkVuZFRleHQpOyB9O1xuZXhwb3J0IHZhciBzZXRGb250QW5kU2l6ZSA9IGZ1bmN0aW9uIChuYW1lLCBzaXplKSB7IHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuU2V0Rm9udEFuZFNpemUsIFthc1BERk5hbWUobmFtZSksIGFzUERGTnVtYmVyKHNpemUpXSk7IH07XG5leHBvcnQgdmFyIHNldENoYXJhY3RlclNwYWNpbmcgPSBmdW5jdGlvbiAoc3BhY2luZykge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuU2V0Q2hhcmFjdGVyU3BhY2luZywgW2FzUERGTnVtYmVyKHNwYWNpbmcpXSk7XG59O1xuZXhwb3J0IHZhciBzZXRXb3JkU3BhY2luZyA9IGZ1bmN0aW9uIChzcGFjaW5nKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRXb3JkU3BhY2luZywgW2FzUERGTnVtYmVyKHNwYWNpbmcpXSk7XG59O1xuLyoqIEBwYXJhbSBzcXVlZXplIGhvcml6b250YWwgY2hhcmFjdGVyIHNwYWNpbmcgKi9cbmV4cG9ydCB2YXIgc2V0Q2hhcmFjdGVyU3F1ZWV6ZSA9IGZ1bmN0aW9uIChzcXVlZXplKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRUZXh0SG9yaXpvbnRhbFNjYWxpbmcsIFthc1BERk51bWJlcihzcXVlZXplKV0pO1xufTtcbmV4cG9ydCB2YXIgc2V0TGluZUhlaWdodCA9IGZ1bmN0aW9uIChsaW5lSGVpZ2h0KSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRUZXh0TGluZUhlaWdodCwgW2FzUERGTnVtYmVyKGxpbmVIZWlnaHQpXSk7XG59O1xuZXhwb3J0IHZhciBzZXRUZXh0UmlzZSA9IGZ1bmN0aW9uIChyaXNlKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TZXRUZXh0UmlzZSwgW2FzUERGTnVtYmVyKHJpc2UpXSk7XG59O1xuZXhwb3J0IHZhciBUZXh0UmVuZGVyaW5nTW9kZTtcbihmdW5jdGlvbiAoVGV4dFJlbmRlcmluZ01vZGUpIHtcbiAgICBUZXh0UmVuZGVyaW5nTW9kZVtUZXh0UmVuZGVyaW5nTW9kZVtcIkZpbGxcIl0gPSAwXSA9IFwiRmlsbFwiO1xuICAgIFRleHRSZW5kZXJpbmdNb2RlW1RleHRSZW5kZXJpbmdNb2RlW1wiT3V0bGluZVwiXSA9IDFdID0gXCJPdXRsaW5lXCI7XG4gICAgVGV4dFJlbmRlcmluZ01vZGVbVGV4dFJlbmRlcmluZ01vZGVbXCJGaWxsQW5kT3V0bGluZVwiXSA9IDJdID0gXCJGaWxsQW5kT3V0bGluZVwiO1xuICAgIFRleHRSZW5kZXJpbmdNb2RlW1RleHRSZW5kZXJpbmdNb2RlW1wiSW52aXNpYmxlXCJdID0gM10gPSBcIkludmlzaWJsZVwiO1xuICAgIFRleHRSZW5kZXJpbmdNb2RlW1RleHRSZW5kZXJpbmdNb2RlW1wiRmlsbEFuZENsaXBcIl0gPSA0XSA9IFwiRmlsbEFuZENsaXBcIjtcbiAgICBUZXh0UmVuZGVyaW5nTW9kZVtUZXh0UmVuZGVyaW5nTW9kZVtcIk91dGxpbmVBbmRDbGlwXCJdID0gNV0gPSBcIk91dGxpbmVBbmRDbGlwXCI7XG4gICAgVGV4dFJlbmRlcmluZ01vZGVbVGV4dFJlbmRlcmluZ01vZGVbXCJGaWxsQW5kT3V0bGluZUFuZENsaXBcIl0gPSA2XSA9IFwiRmlsbEFuZE91dGxpbmVBbmRDbGlwXCI7XG4gICAgVGV4dFJlbmRlcmluZ01vZGVbVGV4dFJlbmRlcmluZ01vZGVbXCJDbGlwXCJdID0gN10gPSBcIkNsaXBcIjtcbn0pKFRleHRSZW5kZXJpbmdNb2RlIHx8IChUZXh0UmVuZGVyaW5nTW9kZSA9IHt9KSk7XG5leHBvcnQgdmFyIHNldFRleHRSZW5kZXJpbmdNb2RlID0gZnVuY3Rpb24gKG1vZGUpIHtcbiAgICByZXR1cm4gUERGT3BlcmF0b3Iub2YoT3BzLlNldFRleHRSZW5kZXJpbmdNb2RlLCBbYXNQREZOdW1iZXIobW9kZSldKTtcbn07XG5leHBvcnQgdmFyIHNldFRleHRNYXRyaXggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSwgZikge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuU2V0VGV4dE1hdHJpeCwgW1xuICAgICAgICBhc1BERk51bWJlcihhKSxcbiAgICAgICAgYXNQREZOdW1iZXIoYiksXG4gICAgICAgIGFzUERGTnVtYmVyKGMpLFxuICAgICAgICBhc1BERk51bWJlcihkKSxcbiAgICAgICAgYXNQREZOdW1iZXIoZSksXG4gICAgICAgIGFzUERGTnVtYmVyKGYpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgcm90YXRlQW5kU2tld1RleHRSYWRpYW5zQW5kVHJhbnNsYXRlID0gZnVuY3Rpb24gKHJvdGF0aW9uQW5nbGUsIHhTa2V3QW5nbGUsIHlTa2V3QW5nbGUsIHgsIHkpIHtcbiAgICByZXR1cm4gc2V0VGV4dE1hdHJpeChjb3MoYXNOdW1iZXIocm90YXRpb25BbmdsZSkpLCBzaW4oYXNOdW1iZXIocm90YXRpb25BbmdsZSkpICsgdGFuKGFzTnVtYmVyKHhTa2V3QW5nbGUpKSwgLXNpbihhc051bWJlcihyb3RhdGlvbkFuZ2xlKSkgKyB0YW4oYXNOdW1iZXIoeVNrZXdBbmdsZSkpLCBjb3MoYXNOdW1iZXIocm90YXRpb25BbmdsZSkpLCB4LCB5KTtcbn07XG5leHBvcnQgdmFyIHJvdGF0ZUFuZFNrZXdUZXh0RGVncmVlc0FuZFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChyb3RhdGlvbkFuZ2xlLCB4U2tld0FuZ2xlLCB5U2tld0FuZ2xlLCB4LCB5KSB7XG4gICAgcmV0dXJuIHJvdGF0ZUFuZFNrZXdUZXh0UmFkaWFuc0FuZFRyYW5zbGF0ZShkZWdyZWVzVG9SYWRpYW5zKGFzTnVtYmVyKHJvdGF0aW9uQW5nbGUpKSwgZGVncmVlc1RvUmFkaWFucyhhc051bWJlcih4U2tld0FuZ2xlKSksIGRlZ3JlZXNUb1JhZGlhbnMoYXNOdW1iZXIoeVNrZXdBbmdsZSkpLCB4LCB5KTtcbn07XG4vKiA9PT09PT09PT09PT09PT09PT09PSBYT2JqZWN0IE9wZXJhdG9yID09PT09PT09PT09PT09PT09PT09ICovXG5leHBvcnQgdmFyIGRyYXdPYmplY3QgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuRHJhd09iamVjdCwgW2FzUERGTmFtZShuYW1lKV0pO1xufTtcbi8qID09PT09PT09PT09PT09PT09PT09IENvbG9yIE9wZXJhdG9ycyA9PT09PT09PT09PT09PT09PT09PSAqL1xuZXhwb3J0IHZhciBzZXRGaWxsaW5nR3JheXNjYWxlQ29sb3IgPSBmdW5jdGlvbiAoZ3JheSkge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuTm9uU3Ryb2tpbmdDb2xvckdyYXksIFthc1BERk51bWJlcihncmF5KV0pO1xufTtcbmV4cG9ydCB2YXIgc2V0U3Ryb2tpbmdHcmF5c2NhbGVDb2xvciA9IGZ1bmN0aW9uIChncmF5KSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TdHJva2luZ0NvbG9yR3JheSwgW2FzUERGTnVtYmVyKGdyYXkpXSk7XG59O1xuZXhwb3J0IHZhciBzZXRGaWxsaW5nUmdiQ29sb3IgPSBmdW5jdGlvbiAocmVkLCBncmVlbiwgYmx1ZSkge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuTm9uU3Ryb2tpbmdDb2xvclJnYiwgW1xuICAgICAgICBhc1BERk51bWJlcihyZWQpLFxuICAgICAgICBhc1BERk51bWJlcihncmVlbiksXG4gICAgICAgIGFzUERGTnVtYmVyKGJsdWUpLFxuICAgIF0pO1xufTtcbmV4cG9ydCB2YXIgc2V0U3Ryb2tpbmdSZ2JDb2xvciA9IGZ1bmN0aW9uIChyZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5TdHJva2luZ0NvbG9yUmdiLCBbXG4gICAgICAgIGFzUERGTnVtYmVyKHJlZCksXG4gICAgICAgIGFzUERGTnVtYmVyKGdyZWVuKSxcbiAgICAgICAgYXNQREZOdW1iZXIoYmx1ZSksXG4gICAgXSk7XG59O1xuZXhwb3J0IHZhciBzZXRGaWxsaW5nQ215a0NvbG9yID0gZnVuY3Rpb24gKGN5YW4sIG1hZ2VudGEsIHllbGxvdywga2V5KSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5Ob25TdHJva2luZ0NvbG9yQ215aywgW1xuICAgICAgICBhc1BERk51bWJlcihjeWFuKSxcbiAgICAgICAgYXNQREZOdW1iZXIobWFnZW50YSksXG4gICAgICAgIGFzUERGTnVtYmVyKHllbGxvdyksXG4gICAgICAgIGFzUERGTnVtYmVyKGtleSksXG4gICAgXSk7XG59O1xuZXhwb3J0IHZhciBzZXRTdHJva2luZ0NteWtDb2xvciA9IGZ1bmN0aW9uIChjeWFuLCBtYWdlbnRhLCB5ZWxsb3csIGtleSkge1xuICAgIHJldHVybiBQREZPcGVyYXRvci5vZihPcHMuU3Ryb2tpbmdDb2xvckNteWssIFtcbiAgICAgICAgYXNQREZOdW1iZXIoY3lhbiksXG4gICAgICAgIGFzUERGTnVtYmVyKG1hZ2VudGEpLFxuICAgICAgICBhc1BERk51bWJlcih5ZWxsb3cpLFxuICAgICAgICBhc1BERk51bWJlcihrZXkpLFxuICAgIF0pO1xufTtcbi8qID09PT09PT09PT09PT09PT09PT09IE1hcmtlZCBDb250ZW50IE9wZXJhdG9ycyA9PT09PT09PT09PT09PT09PT09PSAqL1xuZXhwb3J0IHZhciBiZWdpbk1hcmtlZENvbnRlbnQgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5CZWdpbk1hcmtlZENvbnRlbnQsIFthc1BERk5hbWUodGFnKV0pO1xufTtcbmV4cG9ydCB2YXIgZW5kTWFya2VkQ29udGVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBERk9wZXJhdG9yLm9mKE9wcy5FbmRNYXJrZWRDb250ZW50KTsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdG9ycy5qcy5tYXAiLCJpbXBvcnQgeyBzZXRGaWxsaW5nQ215a0NvbG9yLCBzZXRGaWxsaW5nR3JheXNjYWxlQ29sb3IsIHNldEZpbGxpbmdSZ2JDb2xvciwgc2V0U3Ryb2tpbmdDbXlrQ29sb3IsIHNldFN0cm9raW5nR3JheXNjYWxlQ29sb3IsIHNldFN0cm9raW5nUmdiQ29sb3IsIH0gZnJvbSBcIi4vb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBhc3NlcnRSYW5nZSwgZXJyb3IgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmV4cG9ydCB2YXIgQ29sb3JUeXBlcztcbihmdW5jdGlvbiAoQ29sb3JUeXBlcykge1xuICAgIENvbG9yVHlwZXNbXCJHcmF5c2NhbGVcIl0gPSBcIkdyYXlzY2FsZVwiO1xuICAgIENvbG9yVHlwZXNbXCJSR0JcIl0gPSBcIlJHQlwiO1xuICAgIENvbG9yVHlwZXNbXCJDTVlLXCJdID0gXCJDTVlLXCI7XG59KShDb2xvclR5cGVzIHx8IChDb2xvclR5cGVzID0ge30pKTtcbmV4cG9ydCB2YXIgZ3JheXNjYWxlID0gZnVuY3Rpb24gKGdyYXkpIHtcbiAgICBhc3NlcnRSYW5nZShncmF5LCAnZ3JheScsIDAuMCwgMS4wKTtcbiAgICByZXR1cm4geyB0eXBlOiBDb2xvclR5cGVzLkdyYXlzY2FsZSwgZ3JheTogZ3JheSB9O1xufTtcbmV4cG9ydCB2YXIgcmdiID0gZnVuY3Rpb24gKHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICBhc3NlcnRSYW5nZShyZWQsICdyZWQnLCAwLCAxKTtcbiAgICBhc3NlcnRSYW5nZShncmVlbiwgJ2dyZWVuJywgMCwgMSk7XG4gICAgYXNzZXJ0UmFuZ2UoYmx1ZSwgJ2JsdWUnLCAwLCAxKTtcbiAgICByZXR1cm4geyB0eXBlOiBDb2xvclR5cGVzLlJHQiwgcmVkOiByZWQsIGdyZWVuOiBncmVlbiwgYmx1ZTogYmx1ZSB9O1xufTtcbmV4cG9ydCB2YXIgY215ayA9IGZ1bmN0aW9uIChjeWFuLCBtYWdlbnRhLCB5ZWxsb3csIGtleSkge1xuICAgIGFzc2VydFJhbmdlKGN5YW4sICdjeWFuJywgMCwgMSk7XG4gICAgYXNzZXJ0UmFuZ2UobWFnZW50YSwgJ21hZ2VudGEnLCAwLCAxKTtcbiAgICBhc3NlcnRSYW5nZSh5ZWxsb3csICd5ZWxsb3cnLCAwLCAxKTtcbiAgICBhc3NlcnRSYW5nZShrZXksICdrZXknLCAwLCAxKTtcbiAgICByZXR1cm4geyB0eXBlOiBDb2xvclR5cGVzLkNNWUssIGN5YW46IGN5YW4sIG1hZ2VudGE6IG1hZ2VudGEsIHllbGxvdzogeWVsbG93LCBrZXk6IGtleSB9O1xufTtcbnZhciBHcmF5c2NhbGUgPSBDb2xvclR5cGVzLkdyYXlzY2FsZSwgUkdCID0gQ29sb3JUeXBlcy5SR0IsIENNWUsgPSBDb2xvclR5cGVzLkNNWUs7XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCB2YXIgc2V0RmlsbGluZ0NvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNvbG9yLnR5cGUgPT09IEdyYXlzY2FsZSA/IHNldEZpbGxpbmdHcmF5c2NhbGVDb2xvcihjb2xvci5ncmF5KVxuICAgICAgICA6IGNvbG9yLnR5cGUgPT09IFJHQiA/IHNldEZpbGxpbmdSZ2JDb2xvcihjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlKVxuICAgICAgICAgICAgOiBjb2xvci50eXBlID09PSBDTVlLID8gc2V0RmlsbGluZ0NteWtDb2xvcihjb2xvci5jeWFuLCBjb2xvci5tYWdlbnRhLCBjb2xvci55ZWxsb3csIGNvbG9yLmtleSlcbiAgICAgICAgICAgICAgICA6IGVycm9yKFwiSW52YWxpZCBjb2xvcjogXCIgKyBKU09OLnN0cmluZ2lmeShjb2xvcikpO1xufTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHZhciBzZXRTdHJva2luZ0NvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNvbG9yLnR5cGUgPT09IEdyYXlzY2FsZSA/IHNldFN0cm9raW5nR3JheXNjYWxlQ29sb3IoY29sb3IuZ3JheSlcbiAgICAgICAgOiBjb2xvci50eXBlID09PSBSR0IgPyBzZXRTdHJva2luZ1JnYkNvbG9yKGNvbG9yLnJlZCwgY29sb3IuZ3JlZW4sIGNvbG9yLmJsdWUpXG4gICAgICAgICAgICA6IGNvbG9yLnR5cGUgPT09IENNWUsgPyBzZXRTdHJva2luZ0NteWtDb2xvcihjb2xvci5jeWFuLCBjb2xvci5tYWdlbnRhLCBjb2xvci55ZWxsb3csIGNvbG9yLmtleSlcbiAgICAgICAgICAgICAgICA6IGVycm9yKFwiSW52YWxpZCBjb2xvcjogXCIgKyBKU09OLnN0cmluZ2lmeShjb2xvcikpO1xufTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHZhciBjb21wb25lbnRzVG9Db2xvciA9IGZ1bmN0aW9uIChjb21wcywgc2NhbGUpIHtcbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICByZXR1cm4gKChjb21wcyA9PT0gbnVsbCB8fCBjb21wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcHMubGVuZ3RoKSA9PT0gMSA/IGdyYXlzY2FsZShjb21wc1swXSAqIHNjYWxlKVxuICAgICAgICA6IChjb21wcyA9PT0gbnVsbCB8fCBjb21wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcHMubGVuZ3RoKSA9PT0gMyA/IHJnYihjb21wc1swXSAqIHNjYWxlLCBjb21wc1sxXSAqIHNjYWxlLCBjb21wc1syXSAqIHNjYWxlKVxuICAgICAgICAgICAgOiAoY29tcHMgPT09IG51bGwgfHwgY29tcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBzLmxlbmd0aCkgPT09IDQgPyBjbXlrKGNvbXBzWzBdICogc2NhbGUsIGNvbXBzWzFdICogc2NhbGUsIGNvbXBzWzJdICogc2NhbGUsIGNvbXBzWzNdICogc2NhbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xufTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHZhciBjb2xvclRvQ29tcG9uZW50cyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiBjb2xvci50eXBlID09PSBHcmF5c2NhbGUgPyBbY29sb3IuZ3JheV1cbiAgICAgICAgOiBjb2xvci50eXBlID09PSBSR0IgPyBbY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZV1cbiAgICAgICAgICAgIDogY29sb3IudHlwZSA9PT0gQ01ZSyA/IFtjb2xvci5jeWFuLCBjb2xvci5tYWdlbnRhLCBjb2xvci55ZWxsb3csIGNvbG9yLmtleV1cbiAgICAgICAgICAgICAgICA6IGVycm9yKFwiSW52YWxpZCBjb2xvcjogXCIgKyBKU09OLnN0cmluZ2lmeShjb2xvcikpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbG9ycy5qcy5tYXAiLCJleHBvcnQgdmFyIFRleHRBbGlnbm1lbnQ7XG4oZnVuY3Rpb24gKFRleHRBbGlnbm1lbnQpIHtcbiAgICBUZXh0QWxpZ25tZW50W1RleHRBbGlnbm1lbnRbXCJMZWZ0XCJdID0gMF0gPSBcIkxlZnRcIjtcbiAgICBUZXh0QWxpZ25tZW50W1RleHRBbGlnbm1lbnRbXCJDZW50ZXJcIl0gPSAxXSA9IFwiQ2VudGVyXCI7XG4gICAgVGV4dEFsaWdubWVudFtUZXh0QWxpZ25tZW50W1wiUmlnaHRcIl0gPSAyXSA9IFwiUmlnaHRcIjtcbn0pKFRleHRBbGlnbm1lbnQgfHwgKFRleHRBbGlnbm1lbnQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxpZ25tZW50LmpzLm1hcCIsIi8vIE9yaWdpbmF0ZWQgZnJvbSBwZGZraXQgQ29weXJpZ2h0IChjKSAyMDE0IERldm9uIEdvdmV0dFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZvbGlvanMvcGRma2l0L2Jsb2IvMWU2MmU2ZmZlMjRiMzc4ZWI4OTBkZjUwN2E0NzYxMGY0YzRhN2IyNC9saWIvcGF0aC5qc1xuLy8gTUlUIExJQ0VOU0Vcbi8vIFVwZGF0ZWQgZm9yIHBkZi1saWIgJiBUeXBlU2NyaXB0IGJ5IEplcmVteSBNZXNzZW5nZXJcbmltcG9ydCB7IGFwcGVuZEJlemllckN1cnZlLCBhcHBlbmRRdWFkcmF0aWNDdXJ2ZSwgY2xvc2VQYXRoLCBsaW5lVG8sIG1vdmVUbywgfSBmcm9tIFwiLi9vcGVyYXRvcnNcIjtcbnZhciBjeCA9IDA7XG52YXIgY3kgPSAwO1xudmFyIHB4ID0gMDtcbnZhciBweSA9IDA7XG52YXIgc3ggPSAwO1xudmFyIHN5ID0gMDtcbnZhciBwYXJhbWV0ZXJzID0gbmV3IE1hcChbXG4gICAgWydBJywgN10sXG4gICAgWydhJywgN10sXG4gICAgWydDJywgNl0sXG4gICAgWydjJywgNl0sXG4gICAgWydIJywgMV0sXG4gICAgWydoJywgMV0sXG4gICAgWydMJywgMl0sXG4gICAgWydsJywgMl0sXG4gICAgWydNJywgMl0sXG4gICAgWydtJywgMl0sXG4gICAgWydRJywgNF0sXG4gICAgWydxJywgNF0sXG4gICAgWydTJywgNF0sXG4gICAgWydzJywgNF0sXG4gICAgWydUJywgMl0sXG4gICAgWyd0JywgMl0sXG4gICAgWydWJywgMV0sXG4gICAgWyd2JywgMV0sXG4gICAgWydaJywgMF0sXG4gICAgWyd6JywgMF0sXG5dKTtcbnZhciBwYXJzZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgdmFyIGNtZDtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgY3VyQXJnID0gJyc7XG4gICAgdmFyIGZvdW5kRGVjaW1hbCA9IGZhbHNlO1xuICAgIHZhciBwYXJhbXMgPSAwO1xuICAgIGZvciAodmFyIF9pID0gMCwgcGF0aF8xID0gcGF0aDsgX2kgPCBwYXRoXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjID0gcGF0aF8xW19pXTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuaGFzKGMpKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbWV0ZXJzLmdldChjKTtcbiAgICAgICAgICAgIGlmIChjbWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzYXZlIGV4aXN0aW5nIGNvbW1hbmRcbiAgICAgICAgICAgICAgICBpZiAoY3VyQXJnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1thcmdzLmxlbmd0aF0gPSArY3VyQXJnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRbcmV0Lmxlbmd0aF0gPSB7IGNtZDogY21kLCBhcmdzOiBhcmdzIH07XG4gICAgICAgICAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGN1ckFyZyA9ICcnO1xuICAgICAgICAgICAgICAgIGZvdW5kRGVjaW1hbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY21kID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChbJyAnLCAnLCddLmluY2x1ZGVzKGMpIHx8XG4gICAgICAgICAgICAoYyA9PT0gJy0nICYmIGN1ckFyZy5sZW5ndGggPiAwICYmIGN1ckFyZ1tjdXJBcmcubGVuZ3RoIC0gMV0gIT09ICdlJykgfHxcbiAgICAgICAgICAgIChjID09PSAnLicgJiYgZm91bmREZWNpbWFsKSkge1xuICAgICAgICAgICAgaWYgKGN1ckFyZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHJldXNlZCBjb21tYW5kc1xuICAgICAgICAgICAgICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kOiBjbWQsIGFyZ3M6IGFyZ3MgfTtcbiAgICAgICAgICAgICAgICBhcmdzID0gWytjdXJBcmddO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBhc3N1bWVkIGNvbW1hbmRzXG4gICAgICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ00nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtZCA9ICdMJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ20nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtZCA9ICdsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcmdzW2FyZ3MubGVuZ3RoXSA9ICtjdXJBcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3VuZERlY2ltYWwgPSBjID09PSAnLic7XG4gICAgICAgICAgICAvLyBmaXggZm9yIG5lZ2F0aXZlIG51bWJlcnMgb3IgcmVwZWF0ZWQgZGVjaW1hbHMgd2l0aCBubyBkZWxpbWV0ZXIgYmV0d2VlbiBjb21tYW5kc1xuICAgICAgICAgICAgY3VyQXJnID0gWyctJywgJy4nXS5pbmNsdWRlcyhjKSA/IGMgOiAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1ckFyZyArPSBjO1xuICAgICAgICAgICAgaWYgKGMgPT09ICcuJykge1xuICAgICAgICAgICAgICAgIGZvdW5kRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIHRoZSBsYXN0IGNvbW1hbmRcbiAgICBpZiAoY3VyQXJnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSBwYXJhbXMpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSByZXVzZWQgY29tbWFuZHNcbiAgICAgICAgICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kOiBjbWQsIGFyZ3M6IGFyZ3MgfTtcbiAgICAgICAgICAgIGFyZ3MgPSBbK2N1ckFyZ107XG4gICAgICAgICAgICAvLyBoYW5kbGUgYXNzdW1lZCBjb21tYW5kc1xuICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ00nKSB7XG4gICAgICAgICAgICAgICAgY21kID0gJ0wnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ20nKSB7XG4gICAgICAgICAgICAgICAgY21kID0gJ2wnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXJnc1thcmdzLmxlbmd0aF0gPSArY3VyQXJnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kOiBjbWQsIGFyZ3M6IGFyZ3MgfTtcbiAgICByZXR1cm4gcmV0O1xufTtcbnZhciBhcHBseSA9IGZ1bmN0aW9uIChjb21tYW5kcykge1xuICAgIC8vIGN1cnJlbnQgcG9pbnQsIGNvbnRyb2wgcG9pbnQsIGFuZCBzdWJwYXRoIHN0YXJ0aW5nIHBvaW50XG4gICAgY3ggPSBjeSA9IHB4ID0gcHkgPSBzeCA9IHN5ID0gMDtcbiAgICAvLyBydW4gdGhlIGNvbW1hbmRzXG4gICAgdmFyIGNtZHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gY29tbWFuZHNbaV07XG4gICAgICAgIGlmIChjLmNtZCAmJiB0eXBlb2YgcnVubmVyc1tjLmNtZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBjbWQgPSBydW5uZXJzW2MuY21kXShjLmFyZ3MpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgICAgIGNtZHMgPSBjbWRzLmNvbmNhdChjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY21kcy5wdXNoKGNtZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNtZHM7XG59O1xudmFyIHJ1bm5lcnMgPSB7XG4gICAgTTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY3ggPSBhWzBdO1xuICAgICAgICBjeSA9IGFbMV07XG4gICAgICAgIHB4ID0gcHkgPSBudWxsO1xuICAgICAgICBzeCA9IGN4O1xuICAgICAgICBzeSA9IGN5O1xuICAgICAgICByZXR1cm4gbW92ZVRvKGN4LCBjeSk7XG4gICAgfSxcbiAgICBtOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBjeCArPSBhWzBdO1xuICAgICAgICBjeSArPSBhWzFdO1xuICAgICAgICBweCA9IHB5ID0gbnVsbDtcbiAgICAgICAgc3ggPSBjeDtcbiAgICAgICAgc3kgPSBjeTtcbiAgICAgICAgcmV0dXJuIG1vdmVUbyhjeCwgY3kpO1xuICAgIH0sXG4gICAgQzogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY3ggPSBhWzRdO1xuICAgICAgICBjeSA9IGFbNV07XG4gICAgICAgIHB4ID0gYVsyXTtcbiAgICAgICAgcHkgPSBhWzNdO1xuICAgICAgICByZXR1cm4gYXBwZW5kQmV6aWVyQ3VydmUoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSk7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgY21kID0gYXBwZW5kQmV6aWVyQ3VydmUoYVswXSArIGN4LCBhWzFdICsgY3ksIGFbMl0gKyBjeCwgYVszXSArIGN5LCBhWzRdICsgY3gsIGFbNV0gKyBjeSk7XG4gICAgICAgIHB4ID0gY3ggKyBhWzJdO1xuICAgICAgICBweSA9IGN5ICsgYVszXTtcbiAgICAgICAgY3ggKz0gYVs0XTtcbiAgICAgICAgY3kgKz0gYVs1XTtcbiAgICAgICAgcmV0dXJuIGNtZDtcbiAgICB9LFxuICAgIFM6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmIChweCA9PT0gbnVsbCB8fCBweSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHggPSBjeDtcbiAgICAgICAgICAgIHB5ID0gY3k7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNtZCA9IGFwcGVuZEJlemllckN1cnZlKGN4IC0gKHB4IC0gY3gpLCBjeSAtIChweSAtIGN5KSwgYVswXSwgYVsxXSwgYVsyXSwgYVszXSk7XG4gICAgICAgIHB4ID0gYVswXTtcbiAgICAgICAgcHkgPSBhWzFdO1xuICAgICAgICBjeCA9IGFbMl07XG4gICAgICAgIGN5ID0gYVszXTtcbiAgICAgICAgcmV0dXJuIGNtZDtcbiAgICB9LFxuICAgIHM6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmIChweCA9PT0gbnVsbCB8fCBweSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHggPSBjeDtcbiAgICAgICAgICAgIHB5ID0gY3k7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNtZCA9IGFwcGVuZEJlemllckN1cnZlKGN4IC0gKHB4IC0gY3gpLCBjeSAtIChweSAtIGN5KSwgY3ggKyBhWzBdLCBjeSArIGFbMV0sIGN4ICsgYVsyXSwgY3kgKyBhWzNdKTtcbiAgICAgICAgcHggPSBjeCArIGFbMF07XG4gICAgICAgIHB5ID0gY3kgKyBhWzFdO1xuICAgICAgICBjeCArPSBhWzJdO1xuICAgICAgICBjeSArPSBhWzNdO1xuICAgICAgICByZXR1cm4gY21kO1xuICAgIH0sXG4gICAgUTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcHggPSBhWzBdO1xuICAgICAgICBweSA9IGFbMV07XG4gICAgICAgIGN4ID0gYVsyXTtcbiAgICAgICAgY3kgPSBhWzNdO1xuICAgICAgICByZXR1cm4gYXBwZW5kUXVhZHJhdGljQ3VydmUoYVswXSwgYVsxXSwgY3gsIGN5KTtcbiAgICB9LFxuICAgIHE6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBjbWQgPSBhcHBlbmRRdWFkcmF0aWNDdXJ2ZShhWzBdICsgY3gsIGFbMV0gKyBjeSwgYVsyXSArIGN4LCBhWzNdICsgY3kpO1xuICAgICAgICBweCA9IGN4ICsgYVswXTtcbiAgICAgICAgcHkgPSBjeSArIGFbMV07XG4gICAgICAgIGN4ICs9IGFbMl07XG4gICAgICAgIGN5ICs9IGFbM107XG4gICAgICAgIHJldHVybiBjbWQ7XG4gICAgfSxcbiAgICBUOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBpZiAocHggPT09IG51bGwgfHwgcHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHB4ID0gY3g7XG4gICAgICAgICAgICBweSA9IGN5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHggPSBjeCAtIChweCAtIGN4KTtcbiAgICAgICAgICAgIHB5ID0gY3kgLSAocHkgLSBjeSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNtZCA9IGFwcGVuZFF1YWRyYXRpY0N1cnZlKHB4LCBweSwgYVswXSwgYVsxXSk7XG4gICAgICAgIHB4ID0gY3ggLSAocHggLSBjeCk7XG4gICAgICAgIHB5ID0gY3kgLSAocHkgLSBjeSk7XG4gICAgICAgIGN4ID0gYVswXTtcbiAgICAgICAgY3kgPSBhWzFdO1xuICAgICAgICByZXR1cm4gY21kO1xuICAgIH0sXG4gICAgdDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgaWYgKHB4ID09PSBudWxsIHx8IHB5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBweCA9IGN4O1xuICAgICAgICAgICAgcHkgPSBjeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHB4ID0gY3ggLSAocHggLSBjeCk7XG4gICAgICAgICAgICBweSA9IGN5IC0gKHB5IC0gY3kpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbWQgPSBhcHBlbmRRdWFkcmF0aWNDdXJ2ZShweCwgcHksIGN4ICsgYVswXSwgY3kgKyBhWzFdKTtcbiAgICAgICAgY3ggKz0gYVswXTtcbiAgICAgICAgY3kgKz0gYVsxXTtcbiAgICAgICAgcmV0dXJuIGNtZDtcbiAgICB9LFxuICAgIEE6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBjbWRzID0gc29sdmVBcmMoY3gsIGN5LCBhKTtcbiAgICAgICAgY3ggPSBhWzVdO1xuICAgICAgICBjeSA9IGFbNl07XG4gICAgICAgIHJldHVybiBjbWRzO1xuICAgIH0sXG4gICAgYTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgYVs1XSArPSBjeDtcbiAgICAgICAgYVs2XSArPSBjeTtcbiAgICAgICAgdmFyIGNtZHMgPSBzb2x2ZUFyYyhjeCwgY3ksIGEpO1xuICAgICAgICBjeCA9IGFbNV07XG4gICAgICAgIGN5ID0gYVs2XTtcbiAgICAgICAgcmV0dXJuIGNtZHM7XG4gICAgfSxcbiAgICBMOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBjeCA9IGFbMF07XG4gICAgICAgIGN5ID0gYVsxXTtcbiAgICAgICAgcHggPSBweSA9IG51bGw7XG4gICAgICAgIHJldHVybiBsaW5lVG8oY3gsIGN5KTtcbiAgICB9LFxuICAgIGw6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGN4ICs9IGFbMF07XG4gICAgICAgIGN5ICs9IGFbMV07XG4gICAgICAgIHB4ID0gcHkgPSBudWxsO1xuICAgICAgICByZXR1cm4gbGluZVRvKGN4LCBjeSk7XG4gICAgfSxcbiAgICBIOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBjeCA9IGFbMF07XG4gICAgICAgIHB4ID0gcHkgPSBudWxsO1xuICAgICAgICByZXR1cm4gbGluZVRvKGN4LCBjeSk7XG4gICAgfSxcbiAgICBoOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBjeCArPSBhWzBdO1xuICAgICAgICBweCA9IHB5ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGxpbmVUbyhjeCwgY3kpO1xuICAgIH0sXG4gICAgVjogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY3kgPSBhWzBdO1xuICAgICAgICBweCA9IHB5ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGxpbmVUbyhjeCwgY3kpO1xuICAgIH0sXG4gICAgdjogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY3kgKz0gYVswXTtcbiAgICAgICAgcHggPSBweSA9IG51bGw7XG4gICAgICAgIHJldHVybiBsaW5lVG8oY3gsIGN5KTtcbiAgICB9LFxuICAgIFo6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNtZCA9IGNsb3NlUGF0aCgpO1xuICAgICAgICBjeCA9IHN4O1xuICAgICAgICBjeSA9IHN5O1xuICAgICAgICByZXR1cm4gY21kO1xuICAgIH0sXG4gICAgejogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY21kID0gY2xvc2VQYXRoKCk7XG4gICAgICAgIGN4ID0gc3g7XG4gICAgICAgIGN5ID0gc3k7XG4gICAgICAgIHJldHVybiBjbWQ7XG4gICAgfSxcbn07XG52YXIgc29sdmVBcmMgPSBmdW5jdGlvbiAoeCwgeSwgY29vcmRzKSB7XG4gICAgdmFyIHJ4ID0gY29vcmRzWzBdLCByeSA9IGNvb3Jkc1sxXSwgcm90ID0gY29vcmRzWzJdLCBsYXJnZSA9IGNvb3Jkc1szXSwgc3dlZXAgPSBjb29yZHNbNF0sIGV4ID0gY29vcmRzWzVdLCBleSA9IGNvb3Jkc1s2XTtcbiAgICB2YXIgc2VncyA9IGFyY1RvU2VnbWVudHMoZXgsIGV5LCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90LCB4LCB5KTtcbiAgICB2YXIgY21kcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18xID0gc2VnczsgX2kgPCBzZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2ldO1xuICAgICAgICB2YXIgYmV6ID0gc2VnbWVudFRvQmV6aWVyLmFwcGx5KHZvaWQgMCwgc2VnKTtcbiAgICAgICAgY21kcy5wdXNoKGFwcGVuZEJlemllckN1cnZlLmFwcGx5KHZvaWQgMCwgYmV6KSk7XG4gICAgfVxuICAgIHJldHVybiBjbWRzO1xufTtcbi8vIGZyb20gSW5rc2NhcGUgc3ZndG9wZGYsIHRoYW5rcyFcbnZhciBhcmNUb1NlZ21lbnRzID0gZnVuY3Rpb24gKHgsIHksIHJ4LCByeSwgbGFyZ2UsIHN3ZWVwLCByb3RhdGVYLCBveCwgb3kpIHtcbiAgICB2YXIgdGggPSByb3RhdGVYICogKE1hdGguUEkgLyAxODApO1xuICAgIHZhciBzaW5UaCA9IE1hdGguc2luKHRoKTtcbiAgICB2YXIgY29zVGggPSBNYXRoLmNvcyh0aCk7XG4gICAgcnggPSBNYXRoLmFicyhyeCk7XG4gICAgcnkgPSBNYXRoLmFicyhyeSk7XG4gICAgcHggPSBjb3NUaCAqIChveCAtIHgpICogMC41ICsgc2luVGggKiAob3kgLSB5KSAqIDAuNTtcbiAgICBweSA9IGNvc1RoICogKG95IC0geSkgKiAwLjUgLSBzaW5UaCAqIChveCAtIHgpICogMC41O1xuICAgIHZhciBwbCA9IChweCAqIHB4KSAvIChyeCAqIHJ4KSArIChweSAqIHB5KSAvIChyeSAqIHJ5KTtcbiAgICBpZiAocGwgPiAxKSB7XG4gICAgICAgIHBsID0gTWF0aC5zcXJ0KHBsKTtcbiAgICAgICAgcnggKj0gcGw7XG4gICAgICAgIHJ5ICo9IHBsO1xuICAgIH1cbiAgICB2YXIgYTAwID0gY29zVGggLyByeDtcbiAgICB2YXIgYTAxID0gc2luVGggLyByeDtcbiAgICB2YXIgYTEwID0gLXNpblRoIC8gcnk7XG4gICAgdmFyIGExMSA9IGNvc1RoIC8gcnk7XG4gICAgdmFyIHgwID0gYTAwICogb3ggKyBhMDEgKiBveTtcbiAgICB2YXIgeTAgPSBhMTAgKiBveCArIGExMSAqIG95O1xuICAgIHZhciB4MSA9IGEwMCAqIHggKyBhMDEgKiB5O1xuICAgIHZhciB5MSA9IGExMCAqIHggKyBhMTEgKiB5O1xuICAgIHZhciBkID0gKHgxIC0geDApICogKHgxIC0geDApICsgKHkxIC0geTApICogKHkxIC0geTApO1xuICAgIHZhciBzZmFjdG9yU3EgPSAxIC8gZCAtIDAuMjU7XG4gICAgaWYgKHNmYWN0b3JTcSA8IDApIHtcbiAgICAgICAgc2ZhY3RvclNxID0gMDtcbiAgICB9XG4gICAgdmFyIHNmYWN0b3IgPSBNYXRoLnNxcnQoc2ZhY3RvclNxKTtcbiAgICBpZiAoc3dlZXAgPT09IGxhcmdlKSB7XG4gICAgICAgIHNmYWN0b3IgPSAtc2ZhY3RvcjtcbiAgICB9XG4gICAgdmFyIHhjID0gMC41ICogKHgwICsgeDEpIC0gc2ZhY3RvciAqICh5MSAtIHkwKTtcbiAgICB2YXIgeWMgPSAwLjUgKiAoeTAgKyB5MSkgKyBzZmFjdG9yICogKHgxIC0geDApO1xuICAgIHZhciB0aDAgPSBNYXRoLmF0YW4yKHkwIC0geWMsIHgwIC0geGMpO1xuICAgIHZhciB0aDEgPSBNYXRoLmF0YW4yKHkxIC0geWMsIHgxIC0geGMpO1xuICAgIHZhciB0aEFyYyA9IHRoMSAtIHRoMDtcbiAgICBpZiAodGhBcmMgPCAwICYmIHN3ZWVwID09PSAxKSB7XG4gICAgICAgIHRoQXJjICs9IDIgKiBNYXRoLlBJO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aEFyYyA+IDAgJiYgc3dlZXAgPT09IDApIHtcbiAgICAgICAgdGhBcmMgLT0gMiAqIE1hdGguUEk7XG4gICAgfVxuICAgIHZhciBzZWdtZW50cyA9IE1hdGguY2VpbChNYXRoLmFicyh0aEFyYyAvIChNYXRoLlBJICogMC41ICsgMC4wMDEpKSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHM7IGkrKykge1xuICAgICAgICB2YXIgdGgyID0gdGgwICsgKGkgKiB0aEFyYykgLyBzZWdtZW50cztcbiAgICAgICAgdmFyIHRoMyA9IHRoMCArICgoaSArIDEpICogdGhBcmMpIC8gc2VnbWVudHM7XG4gICAgICAgIHJlc3VsdFtpXSA9IFt4YywgeWMsIHRoMiwgdGgzLCByeCwgcnksIHNpblRoLCBjb3NUaF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIHNlZ21lbnRUb0JlemllciA9IGZ1bmN0aW9uIChjeDEsIGN5MSwgdGgwLCB0aDEsIHJ4LCByeSwgc2luVGgsIGNvc1RoKSB7XG4gICAgdmFyIGEwMCA9IGNvc1RoICogcng7XG4gICAgdmFyIGEwMSA9IC1zaW5UaCAqIHJ5O1xuICAgIHZhciBhMTAgPSBzaW5UaCAqIHJ4O1xuICAgIHZhciBhMTEgPSBjb3NUaCAqIHJ5O1xuICAgIHZhciB0aEhhbGYgPSAwLjUgKiAodGgxIC0gdGgwKTtcbiAgICB2YXIgdCA9ICgoOCAvIDMpICogTWF0aC5zaW4odGhIYWxmICogMC41KSAqIE1hdGguc2luKHRoSGFsZiAqIDAuNSkpIC9cbiAgICAgICAgTWF0aC5zaW4odGhIYWxmKTtcbiAgICB2YXIgeDEgPSBjeDEgKyBNYXRoLmNvcyh0aDApIC0gdCAqIE1hdGguc2luKHRoMCk7XG4gICAgdmFyIHkxID0gY3kxICsgTWF0aC5zaW4odGgwKSArIHQgKiBNYXRoLmNvcyh0aDApO1xuICAgIHZhciB4MyA9IGN4MSArIE1hdGguY29zKHRoMSk7XG4gICAgdmFyIHkzID0gY3kxICsgTWF0aC5zaW4odGgxKTtcbiAgICB2YXIgeDIgPSB4MyArIHQgKiBNYXRoLnNpbih0aDEpO1xuICAgIHZhciB5MiA9IHkzIC0gdCAqIE1hdGguY29zKHRoMSk7XG4gICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgYTAwICogeDEgKyBhMDEgKiB5MSxcbiAgICAgICAgYTEwICogeDEgKyBhMTEgKiB5MSxcbiAgICAgICAgYTAwICogeDIgKyBhMDEgKiB5MixcbiAgICAgICAgYTEwICogeDIgKyBhMTEgKiB5MixcbiAgICAgICAgYTAwICogeDMgKyBhMDEgKiB5MyxcbiAgICAgICAgYTEwICogeDMgKyBhMTEgKiB5MyxcbiAgICBdO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IHZhciBzdmdQYXRoVG9PcGVyYXRvcnMgPSBmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gYXBwbHkocGFyc2UocGF0aCkpOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3ZnUGF0aC5qcy5tYXAiLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgc2V0RmlsbGluZ0NvbG9yLCBzZXRTdHJva2luZ0NvbG9yIH0gZnJvbSBcIi4vY29sb3JzXCI7XG5pbXBvcnQgeyBiZWdpblRleHQsIGNsb3NlUGF0aCwgZHJhd09iamVjdCwgZW5kVGV4dCwgZmlsbCwgZmlsbEFuZFN0cm9rZSwgbGluZVRvLCBtb3ZlVG8sIG5leHRMaW5lLCBwb3BHcmFwaGljc1N0YXRlLCBwdXNoR3JhcGhpY3NTdGF0ZSwgcm90YXRlQW5kU2tld1RleHRSYWRpYW5zQW5kVHJhbnNsYXRlLCByb3RhdGVSYWRpYW5zLCBzY2FsZSwgc2V0Rm9udEFuZFNpemUsIHNldExpbmVIZWlnaHQsIHNldExpbmVXaWR0aCwgc2hvd1RleHQsIHNrZXdSYWRpYW5zLCBzdHJva2UsIHRyYW5zbGF0ZSwgc2V0TGluZUNhcCwgcm90YXRlRGVncmVlcywgc2V0R3JhcGhpY3NTdGF0ZSwgc2V0RGFzaFBhdHRlcm4sIGJlZ2luTWFya2VkQ29udGVudCwgZW5kTWFya2VkQ29udGVudCwgY2xpcCwgZW5kUGF0aCwgYXBwZW5kQmV6aWVyQ3VydmUsIH0gZnJvbSBcIi4vb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBkZWdyZWVzLCB0b1JhZGlhbnMgfSBmcm9tIFwiLi9yb3RhdGlvbnNcIjtcbmltcG9ydCB7IHN2Z1BhdGhUb09wZXJhdG9ycyB9IGZyb20gXCIuL3N2Z1BhdGhcIjtcbmltcG9ydCB7IGFzTnVtYmVyIH0gZnJvbSBcIi4vb2JqZWN0c1wiO1xuZXhwb3J0IHZhciBkcmF3VGV4dCA9IGZ1bmN0aW9uIChsaW5lLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcHVzaEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgICAgb3B0aW9ucy5ncmFwaGljc1N0YXRlICYmIHNldEdyYXBoaWNzU3RhdGUob3B0aW9ucy5ncmFwaGljc1N0YXRlKSxcbiAgICAgICAgYmVnaW5UZXh0KCksXG4gICAgICAgIHNldEZpbGxpbmdDb2xvcihvcHRpb25zLmNvbG9yKSxcbiAgICAgICAgc2V0Rm9udEFuZFNpemUob3B0aW9ucy5mb250LCBvcHRpb25zLnNpemUpLFxuICAgICAgICByb3RhdGVBbmRTa2V3VGV4dFJhZGlhbnNBbmRUcmFuc2xhdGUodG9SYWRpYW5zKG9wdGlvbnMucm90YXRlKSwgdG9SYWRpYW5zKG9wdGlvbnMueFNrZXcpLCB0b1JhZGlhbnMob3B0aW9ucy55U2tldyksIG9wdGlvbnMueCwgb3B0aW9ucy55KSxcbiAgICAgICAgc2hvd1RleHQobGluZSksXG4gICAgICAgIGVuZFRleHQoKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xufTtcbmV4cG9ydCB2YXIgZHJhd0xpbmVzT2ZUZXh0ID0gZnVuY3Rpb24gKGxpbmVzLCBvcHRpb25zKSB7XG4gICAgdmFyIG9wZXJhdG9ycyA9IFtcbiAgICAgICAgcHVzaEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgICAgb3B0aW9ucy5ncmFwaGljc1N0YXRlICYmIHNldEdyYXBoaWNzU3RhdGUob3B0aW9ucy5ncmFwaGljc1N0YXRlKSxcbiAgICAgICAgYmVnaW5UZXh0KCksXG4gICAgICAgIHNldEZpbGxpbmdDb2xvcihvcHRpb25zLmNvbG9yKSxcbiAgICAgICAgc2V0Rm9udEFuZFNpemUob3B0aW9ucy5mb250LCBvcHRpb25zLnNpemUpLFxuICAgICAgICBzZXRMaW5lSGVpZ2h0KG9wdGlvbnMubGluZUhlaWdodCksXG4gICAgICAgIHJvdGF0ZUFuZFNrZXdUZXh0UmFkaWFuc0FuZFRyYW5zbGF0ZSh0b1JhZGlhbnMob3B0aW9ucy5yb3RhdGUpLCB0b1JhZGlhbnMob3B0aW9ucy54U2tldyksIHRvUmFkaWFucyhvcHRpb25zLnlTa2V3KSwgb3B0aW9ucy54LCBvcHRpb25zLnkpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBvcGVyYXRvcnMucHVzaChzaG93VGV4dChsaW5lc1tpZHhdKSwgbmV4dExpbmUoKSk7XG4gICAgfVxuICAgIG9wZXJhdG9ycy5wdXNoKGVuZFRleHQoKSwgcG9wR3JhcGhpY3NTdGF0ZSgpKTtcbiAgICByZXR1cm4gb3BlcmF0b3JzO1xufTtcbmV4cG9ydCB2YXIgZHJhd0ltYWdlID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBwdXNoR3JhcGhpY3NTdGF0ZSgpLFxuICAgICAgICBvcHRpb25zLmdyYXBoaWNzU3RhdGUgJiYgc2V0R3JhcGhpY3NTdGF0ZShvcHRpb25zLmdyYXBoaWNzU3RhdGUpLFxuICAgICAgICB0cmFuc2xhdGUob3B0aW9ucy54LCBvcHRpb25zLnkpLFxuICAgICAgICByb3RhdGVSYWRpYW5zKHRvUmFkaWFucyhvcHRpb25zLnJvdGF0ZSkpLFxuICAgICAgICBzY2FsZShvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCksXG4gICAgICAgIHNrZXdSYWRpYW5zKHRvUmFkaWFucyhvcHRpb25zLnhTa2V3KSwgdG9SYWRpYW5zKG9wdGlvbnMueVNrZXcpKSxcbiAgICAgICAgZHJhd09iamVjdChuYW1lKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xufTtcbmV4cG9ydCB2YXIgZHJhd1BhZ2UgPSBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBbXG4gICAgICAgIHB1c2hHcmFwaGljc1N0YXRlKCksXG4gICAgICAgIG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSAmJiBzZXRHcmFwaGljc1N0YXRlKG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSksXG4gICAgICAgIHRyYW5zbGF0ZShvcHRpb25zLngsIG9wdGlvbnMueSksXG4gICAgICAgIHJvdGF0ZVJhZGlhbnModG9SYWRpYW5zKG9wdGlvbnMucm90YXRlKSksXG4gICAgICAgIHNjYWxlKG9wdGlvbnMueFNjYWxlLCBvcHRpb25zLnlTY2FsZSksXG4gICAgICAgIHNrZXdSYWRpYW5zKHRvUmFkaWFucyhvcHRpb25zLnhTa2V3KSwgdG9SYWRpYW5zKG9wdGlvbnMueVNrZXcpKSxcbiAgICAgICAgZHJhd09iamVjdChuYW1lKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xufTtcbmV4cG9ydCB2YXIgZHJhd0xpbmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcHVzaEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgICAgb3B0aW9ucy5ncmFwaGljc1N0YXRlICYmIHNldEdyYXBoaWNzU3RhdGUob3B0aW9ucy5ncmFwaGljc1N0YXRlKSxcbiAgICAgICAgb3B0aW9ucy5jb2xvciAmJiBzZXRTdHJva2luZ0NvbG9yKG9wdGlvbnMuY29sb3IpLFxuICAgICAgICBzZXRMaW5lV2lkdGgob3B0aW9ucy50aGlja25lc3MpLFxuICAgICAgICBzZXREYXNoUGF0dGVybigoX2EgPSBvcHRpb25zLmRhc2hBcnJheSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10sIChfYiA9IG9wdGlvbnMuZGFzaFBoYXNlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSxcbiAgICAgICAgbW92ZVRvKG9wdGlvbnMuc3RhcnQueCwgb3B0aW9ucy5zdGFydC55KSxcbiAgICAgICAgb3B0aW9ucy5saW5lQ2FwICYmIHNldExpbmVDYXAob3B0aW9ucy5saW5lQ2FwKSxcbiAgICAgICAgbW92ZVRvKG9wdGlvbnMuc3RhcnQueCwgb3B0aW9ucy5zdGFydC55KSxcbiAgICAgICAgbGluZVRvKG9wdGlvbnMuZW5kLngsIG9wdGlvbnMuZW5kLnkpLFxuICAgICAgICBzdHJva2UoKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xufTtcbmV4cG9ydCB2YXIgZHJhd1JlY3RhbmdsZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gW1xuICAgICAgICBwdXNoR3JhcGhpY3NTdGF0ZSgpLFxuICAgICAgICBvcHRpb25zLmdyYXBoaWNzU3RhdGUgJiYgc2V0R3JhcGhpY3NTdGF0ZShvcHRpb25zLmdyYXBoaWNzU3RhdGUpLFxuICAgICAgICBvcHRpb25zLmNvbG9yICYmIHNldEZpbGxpbmdDb2xvcihvcHRpb25zLmNvbG9yKSxcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJDb2xvciAmJiBzZXRTdHJva2luZ0NvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpLFxuICAgICAgICBzZXRMaW5lV2lkdGgob3B0aW9ucy5ib3JkZXJXaWR0aCksXG4gICAgICAgIG9wdGlvbnMuYm9yZGVyTGluZUNhcCAmJiBzZXRMaW5lQ2FwKG9wdGlvbnMuYm9yZGVyTGluZUNhcCksXG4gICAgICAgIHNldERhc2hQYXR0ZXJuKChfYSA9IG9wdGlvbnMuYm9yZGVyRGFzaEFycmF5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSwgKF9iID0gb3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApLFxuICAgICAgICB0cmFuc2xhdGUob3B0aW9ucy54LCBvcHRpb25zLnkpLFxuICAgICAgICByb3RhdGVSYWRpYW5zKHRvUmFkaWFucyhvcHRpb25zLnJvdGF0ZSkpLFxuICAgICAgICBza2V3UmFkaWFucyh0b1JhZGlhbnMob3B0aW9ucy54U2tldyksIHRvUmFkaWFucyhvcHRpb25zLnlTa2V3KSksXG4gICAgICAgIG1vdmVUbygwLCAwKSxcbiAgICAgICAgbGluZVRvKDAsIG9wdGlvbnMuaGVpZ2h0KSxcbiAgICAgICAgbGluZVRvKG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KSxcbiAgICAgICAgbGluZVRvKG9wdGlvbnMud2lkdGgsIDApLFxuICAgICAgICBjbG9zZVBhdGgoKSxcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIG9wdGlvbnMuY29sb3IgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCA/IGZpbGxBbmRTdHJva2UoKVxuICAgICAgICAgICAgOiBvcHRpb25zLmNvbG9yID8gZmlsbCgpXG4gICAgICAgICAgICAgICAgOiBvcHRpb25zLmJvcmRlckNvbG9yID8gc3Ryb2tlKClcbiAgICAgICAgICAgICAgICAgICAgOiBjbG9zZVBhdGgoKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xufTtcbnZhciBLQVBQQSA9IDQuMCAqICgoTWF0aC5zcXJ0KDIpIC0gMS4wKSAvIDMuMCk7XG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCB2YXIgZHJhd0VsbGlwc2VQYXRoID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHZhciB4ID0gYXNOdW1iZXIoY29uZmlnLngpO1xuICAgIHZhciB5ID0gYXNOdW1iZXIoY29uZmlnLnkpO1xuICAgIHZhciB4U2NhbGUgPSBhc051bWJlcihjb25maWcueFNjYWxlKTtcbiAgICB2YXIgeVNjYWxlID0gYXNOdW1iZXIoY29uZmlnLnlTY2FsZSk7XG4gICAgeCAtPSB4U2NhbGU7XG4gICAgeSAtPSB5U2NhbGU7XG4gICAgdmFyIG94ID0geFNjYWxlICogS0FQUEE7XG4gICAgdmFyIG95ID0geVNjYWxlICogS0FQUEE7XG4gICAgdmFyIHhlID0geCArIHhTY2FsZSAqIDI7XG4gICAgdmFyIHllID0geSArIHlTY2FsZSAqIDI7XG4gICAgdmFyIHhtID0geCArIHhTY2FsZTtcbiAgICB2YXIgeW0gPSB5ICsgeVNjYWxlO1xuICAgIHJldHVybiBbXG4gICAgICAgIHB1c2hHcmFwaGljc1N0YXRlKCksXG4gICAgICAgIG1vdmVUbyh4LCB5bSksXG4gICAgICAgIGFwcGVuZEJlemllckN1cnZlKHgsIHltIC0gb3ksIHhtIC0gb3gsIHksIHhtLCB5KSxcbiAgICAgICAgYXBwZW5kQmV6aWVyQ3VydmUoeG0gKyBveCwgeSwgeGUsIHltIC0gb3ksIHhlLCB5bSksXG4gICAgICAgIGFwcGVuZEJlemllckN1cnZlKHhlLCB5bSArIG95LCB4bSArIG94LCB5ZSwgeG0sIHllKSxcbiAgICAgICAgYXBwZW5kQmV6aWVyQ3VydmUoeG0gLSBveCwgeWUsIHgsIHltICsgb3ksIHgsIHltKSxcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgIF07XG59O1xudmFyIGRyYXdFbGxpcHNlQ3VydmVzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHZhciBjZW50ZXJYID0gYXNOdW1iZXIoY29uZmlnLngpO1xuICAgIHZhciBjZW50ZXJZID0gYXNOdW1iZXIoY29uZmlnLnkpO1xuICAgIHZhciB4U2NhbGUgPSBhc051bWJlcihjb25maWcueFNjYWxlKTtcbiAgICB2YXIgeVNjYWxlID0gYXNOdW1iZXIoY29uZmlnLnlTY2FsZSk7XG4gICAgdmFyIHggPSAteFNjYWxlO1xuICAgIHZhciB5ID0gLXlTY2FsZTtcbiAgICB2YXIgb3ggPSB4U2NhbGUgKiBLQVBQQTtcbiAgICB2YXIgb3kgPSB5U2NhbGUgKiBLQVBQQTtcbiAgICB2YXIgeGUgPSB4ICsgeFNjYWxlICogMjtcbiAgICB2YXIgeWUgPSB5ICsgeVNjYWxlICogMjtcbiAgICB2YXIgeG0gPSB4ICsgeFNjYWxlO1xuICAgIHZhciB5bSA9IHkgKyB5U2NhbGU7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdHJhbnNsYXRlKGNlbnRlclgsIGNlbnRlclkpLFxuICAgICAgICByb3RhdGVSYWRpYW5zKHRvUmFkaWFucyhjb25maWcucm90YXRlKSksXG4gICAgICAgIG1vdmVUbyh4LCB5bSksXG4gICAgICAgIGFwcGVuZEJlemllckN1cnZlKHgsIHltIC0gb3ksIHhtIC0gb3gsIHksIHhtLCB5KSxcbiAgICAgICAgYXBwZW5kQmV6aWVyQ3VydmUoeG0gKyBveCwgeSwgeGUsIHltIC0gb3ksIHhlLCB5bSksXG4gICAgICAgIGFwcGVuZEJlemllckN1cnZlKHhlLCB5bSArIG95LCB4bSArIG94LCB5ZSwgeG0sIHllKSxcbiAgICAgICAgYXBwZW5kQmV6aWVyQ3VydmUoeG0gLSBveCwgeWUsIHgsIHltICsgb3ksIHgsIHltKSxcbiAgICBdO1xufTtcbmV4cG9ydCB2YXIgZHJhd0VsbGlwc2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhbXG4gICAgICAgIHB1c2hHcmFwaGljc1N0YXRlKCksXG4gICAgICAgIG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSAmJiBzZXRHcmFwaGljc1N0YXRlKG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSksXG4gICAgICAgIG9wdGlvbnMuY29sb3IgJiYgc2V0RmlsbGluZ0NvbG9yKG9wdGlvbnMuY29sb3IpLFxuICAgICAgICBvcHRpb25zLmJvcmRlckNvbG9yICYmIHNldFN0cm9raW5nQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvciksXG4gICAgICAgIHNldExpbmVXaWR0aChvcHRpb25zLmJvcmRlcldpZHRoKSxcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJMaW5lQ2FwICYmIHNldExpbmVDYXAob3B0aW9ucy5ib3JkZXJMaW5lQ2FwKSxcbiAgICAgICAgc2V0RGFzaFBhdHRlcm4oKF9hID0gb3B0aW9ucy5ib3JkZXJEYXNoQXJyYXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdLCAoX2IgPSBvcHRpb25zLmJvcmRlckRhc2hQaGFzZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMClcbiAgICBdLCAob3B0aW9ucy5yb3RhdGUgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGRyYXdFbGxpcHNlUGF0aCh7XG4gICAgICAgICAgICB4OiBvcHRpb25zLngsXG4gICAgICAgICAgICB5OiBvcHRpb25zLnksXG4gICAgICAgICAgICB4U2NhbGU6IG9wdGlvbnMueFNjYWxlLFxuICAgICAgICAgICAgeVNjYWxlOiBvcHRpb25zLnlTY2FsZSxcbiAgICAgICAgfSlcbiAgICAgICAgOiBkcmF3RWxsaXBzZUN1cnZlcyh7XG4gICAgICAgICAgICB4OiBvcHRpb25zLngsXG4gICAgICAgICAgICB5OiBvcHRpb25zLnksXG4gICAgICAgICAgICB4U2NhbGU6IG9wdGlvbnMueFNjYWxlLFxuICAgICAgICAgICAgeVNjYWxlOiBvcHRpb25zLnlTY2FsZSxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9jID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGRlZ3JlZXMoMCksXG4gICAgICAgIH0pKSwgW1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgb3B0aW9ucy5jb2xvciAmJiBvcHRpb25zLmJvcmRlcldpZHRoID8gZmlsbEFuZFN0cm9rZSgpXG4gICAgICAgICAgICA6IG9wdGlvbnMuY29sb3IgPyBmaWxsKClcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMuYm9yZGVyQ29sb3IgPyBzdHJva2UoKVxuICAgICAgICAgICAgICAgICAgICA6IGNsb3NlUGF0aCgpLFxuICAgICAgICBwb3BHcmFwaGljc1N0YXRlKCksXG4gICAgXSkuZmlsdGVyKEJvb2xlYW4pO1xufTtcbmV4cG9ydCB2YXIgZHJhd1N2Z1BhdGggPSBmdW5jdGlvbiAocGF0aCwgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhbXG4gICAgICAgIHB1c2hHcmFwaGljc1N0YXRlKCksXG4gICAgICAgIG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSAmJiBzZXRHcmFwaGljc1N0YXRlKG9wdGlvbnMuZ3JhcGhpY3NTdGF0ZSksXG4gICAgICAgIHRyYW5zbGF0ZShvcHRpb25zLngsIG9wdGlvbnMueSksXG4gICAgICAgIHJvdGF0ZVJhZGlhbnModG9SYWRpYW5zKChfYSA9IG9wdGlvbnMucm90YXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZWdyZWVzKDApKSksXG4gICAgICAgIC8vIFNWRyBwYXRoIFkgYXhpcyBpcyBvcHBvc2l0ZSBwZGYtbGliJ3NcbiAgICAgICAgb3B0aW9ucy5zY2FsZSA/IHNjYWxlKG9wdGlvbnMuc2NhbGUsIC1vcHRpb25zLnNjYWxlKSA6IHNjYWxlKDEsIC0xKSxcbiAgICAgICAgb3B0aW9ucy5jb2xvciAmJiBzZXRGaWxsaW5nQ29sb3Iob3B0aW9ucy5jb2xvciksXG4gICAgICAgIG9wdGlvbnMuYm9yZGVyQ29sb3IgJiYgc2V0U3Ryb2tpbmdDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKSxcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCAmJiBzZXRMaW5lV2lkdGgob3B0aW9ucy5ib3JkZXJXaWR0aCksXG4gICAgICAgIG9wdGlvbnMuYm9yZGVyTGluZUNhcCAmJiBzZXRMaW5lQ2FwKG9wdGlvbnMuYm9yZGVyTGluZUNhcCksXG4gICAgICAgIHNldERhc2hQYXR0ZXJuKChfYiA9IG9wdGlvbnMuYm9yZGVyRGFzaEFycmF5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSwgKF9jID0gb3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDApXG4gICAgXSwgc3ZnUGF0aFRvT3BlcmF0b3JzKHBhdGgpLCBbXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBvcHRpb25zLmNvbG9yICYmIG9wdGlvbnMuYm9yZGVyV2lkdGggPyBmaWxsQW5kU3Ryb2tlKClcbiAgICAgICAgICAgIDogb3B0aW9ucy5jb2xvciA/IGZpbGwoKVxuICAgICAgICAgICAgICAgIDogb3B0aW9ucy5ib3JkZXJDb2xvciA/IHN0cm9rZSgpXG4gICAgICAgICAgICAgICAgICAgIDogY2xvc2VQYXRoKCksXG4gICAgICAgIHBvcEdyYXBoaWNzU3RhdGUoKSxcbiAgICBdKS5maWx0ZXIoQm9vbGVhbik7XG59O1xuZXhwb3J0IHZhciBkcmF3Q2hlY2tNYXJrID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgc2l6ZSA9IGFzTnVtYmVyKG9wdGlvbnMuc2l6ZSk7XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqIERlZmluZSBDaGVjayBNYXJrIFBvaW50cyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLy8gQSBjaGVjayBtYXJrIGlzIGRlZmluZWQgYnkgdGhyZWUgcG9pbnRzIGluIHNvbWUgY29vcmRpbmF0ZSBzcGFjZS4gSGVyZSwgd2VcbiAgICAvLyBkZWZpbmUgdGhlc2UgcG9pbnRzIGluIGEgdW5pdCBjb29yZGluYXRlIHN5c3RlbSwgd2hlcmUgdGhlIHJhbmdlIG9mIHRoZSB4XG4gICAgLy8gYW5kIHkgYXhpcyBhcmUgYm90aCBbLTEsIDFdLlxuICAgIC8vXG4gICAgLy8gTm90ZSB0aGF0IHdlIGRvIG5vdCBoYXJkIGNvZGUgYHAxeWAgaW4gY2FzZSB3ZSB3aXNoIHRvIGNoYW5nZSB0aGVcbiAgICAvLyBzaXplL3NoYXBlIG9mIHRoZSBjaGVjayBtYXJrIGluIHRoZSBmdXR1cmUuIFdlIHdhbnQgdGhlIGNoZWNrIG1hcmsgdG9cbiAgICAvLyBhbHdheXMgZm9ybSBhIHJpZ2h0IGFuZ2xlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGRvdCBwcm9kdWN0IGJldHdlZW4gKHAxLXAyKVxuICAgIC8vIGFuZCAocDMtcDIpIHNob3VsZCBiZSB6ZXJvOlxuICAgIC8vXG4gICAgLy8gICAocDF4LXAyeCkgKiAocDN4LXAyeCkgKyAocDF5LXAyeSkgKiAocDN5LXAyeSkgPSAwXG4gICAgLy9cbiAgICAvLyBXZSBjYW4gbm93IHJlamlnZ2VyIHRoaXMgZXF1YXRpb24gdG8gc29sdmUgZm9yIGBwMXlgOlxuICAgIC8vXG4gICAgLy8gICAocDF5LXAyeSkgKiAocDN5LXAyeSkgPSAtKChwMXgtcDJ4KSAqIChwM3gtcDJ4KSlcbiAgICAvLyAgIChwMXktcDJ5KSA9IC0oKHAxeC1wMngpICogKHAzeC1wMngpKSAvIChwM3ktcDJ5KVxuICAgIC8vICAgcDF5ID0gLSgocDF4LXAyeCkgKiAocDN4LXAyeCkpIC8gKHAzeS1wMnkpICsgcDJ5XG4gICAgLy9cbiAgICAvLyBUaGFua3MgdG8gbXkgZnJpZW5kIEpvZWwgV2Fsa2VyIChodHRwczovL2dpdGh1Yi5jb20vSldhbGtlcjE5OTUpIGZvclxuICAgIC8vIGRldmlzaW5nIHRoZSBhYm92ZSBlcXVhdGlvbiBhbmQgdW5pdCBjb29yZGluYXRlIHN5c3RlbSBhcHByb2FjaCFcbiAgICAvLyAoeCwgeSkgY29vcmRzIG9mIHRoZSBjaGVjayBtYXJrJ3MgYm90dG9tbW9zdCBwb2ludFxuICAgIHZhciBwMnggPSAtMSArIDAuNzU7XG4gICAgdmFyIHAyeSA9IC0xICsgMC41MTtcbiAgICAvLyAoeCwgeSkgY29vcmRzIG9mIHRoZSBjaGVjayBtYXJrJ3MgdG9wbW9zdCBwb2ludFxuICAgIHZhciBwM3kgPSAxIC0gMC41MjU7XG4gICAgdmFyIHAzeCA9IDEgLSAwLjMxO1xuICAgIC8vICh4LCB5KSBjb29yZHMgb2YgdGhlIGNoZWNrIG1hcmsncyBjZW50ZXIgKHZlcnRpY2FsbHkpIHBvaW50XG4gICAgdmFyIHAxeCA9IC0xICsgMC4zMjU7XG4gICAgdmFyIHAxeSA9IC0oKHAxeCAtIHAyeCkgKiAocDN4IC0gcDJ4KSkgLyAocDN5IC0gcDJ5KSArIHAyeTtcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICByZXR1cm4gW1xuICAgICAgICBwdXNoR3JhcGhpY3NTdGF0ZSgpLFxuICAgICAgICBvcHRpb25zLmNvbG9yICYmIHNldFN0cm9raW5nQ29sb3Iob3B0aW9ucy5jb2xvciksXG4gICAgICAgIHNldExpbmVXaWR0aChvcHRpb25zLnRoaWNrbmVzcyksXG4gICAgICAgIHRyYW5zbGF0ZShvcHRpb25zLngsIG9wdGlvbnMueSksXG4gICAgICAgIG1vdmVUbyhwMXggKiBzaXplLCBwMXkgKiBzaXplKSxcbiAgICAgICAgbGluZVRvKHAyeCAqIHNpemUsIHAyeSAqIHNpemUpLFxuICAgICAgICBsaW5lVG8ocDN4ICogc2l6ZSwgcDN5ICogc2l6ZSksXG4gICAgICAgIHN0cm9rZSgpLFxuICAgICAgICBwb3BHcmFwaGljc1N0YXRlKCksXG4gICAgXS5maWx0ZXIoQm9vbGVhbik7XG59O1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgdmFyIHJvdGF0ZUluUGxhY2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLnJvdGF0aW9uID09PSAwID8gW1xuICAgICAgICB0cmFuc2xhdGUoMCwgMCksXG4gICAgICAgIHJvdGF0ZURlZ3JlZXMoMClcbiAgICBdXG4gICAgICAgIDogb3B0aW9ucy5yb3RhdGlvbiA9PT0gOTAgPyBbXG4gICAgICAgICAgICB0cmFuc2xhdGUob3B0aW9ucy53aWR0aCwgMCksXG4gICAgICAgICAgICByb3RhdGVEZWdyZWVzKDkwKVxuICAgICAgICBdXG4gICAgICAgICAgICA6IG9wdGlvbnMucm90YXRpb24gPT09IDE4MCA/IFtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUob3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIHJvdGF0ZURlZ3JlZXMoMTgwKVxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDogb3B0aW9ucy5yb3RhdGlvbiA9PT0gMjcwID8gW1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUoMCwgb3B0aW9ucy5oZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGVEZWdyZWVzKDI3MClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW107XG59OyAvLyBJbnZhbGlkIHJvdGF0aW9uIC0gbm9vcFxuZXhwb3J0IHZhciBkcmF3Q2hlY2tCb3ggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBvdXRsaW5lID0gZHJhd1JlY3RhbmdsZSh7XG4gICAgICAgIHg6IG9wdGlvbnMueCxcbiAgICAgICAgeTogb3B0aW9ucy55LFxuICAgICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCxcbiAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgcm90YXRlOiBkZWdyZWVzKDApLFxuICAgICAgICB4U2tldzogZGVncmVlcygwKSxcbiAgICAgICAgeVNrZXc6IGRlZ3JlZXMoMCksXG4gICAgfSk7XG4gICAgaWYgKCFvcHRpb25zLmZpbGxlZClcbiAgICAgICAgcmV0dXJuIG91dGxpbmU7XG4gICAgdmFyIHdpZHRoID0gYXNOdW1iZXIob3B0aW9ucy53aWR0aCk7XG4gICAgdmFyIGhlaWdodCA9IGFzTnVtYmVyKG9wdGlvbnMuaGVpZ2h0KTtcbiAgICB2YXIgY2hlY2tNYXJrU2l6ZSA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gMjtcbiAgICB2YXIgY2hlY2tNYXJrID0gZHJhd0NoZWNrTWFyayh7XG4gICAgICAgIHg6IHdpZHRoIC8gMixcbiAgICAgICAgeTogaGVpZ2h0IC8gMixcbiAgICAgICAgc2l6ZTogY2hlY2tNYXJrU2l6ZSxcbiAgICAgICAgdGhpY2tuZXNzOiBvcHRpb25zLnRoaWNrbmVzcyxcbiAgICAgICAgY29sb3I6IG9wdGlvbnMubWFya0NvbG9yLFxuICAgIH0pO1xuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhbcHVzaEdyYXBoaWNzU3RhdGUoKV0sIG91dGxpbmUsIGNoZWNrTWFyaywgW3BvcEdyYXBoaWNzU3RhdGUoKV0pO1xufTtcbmV4cG9ydCB2YXIgZHJhd1JhZGlvQnV0dG9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgd2lkdGggPSBhc051bWJlcihvcHRpb25zLndpZHRoKTtcbiAgICB2YXIgaGVpZ2h0ID0gYXNOdW1iZXIob3B0aW9ucy5oZWlnaHQpO1xuICAgIHZhciBvdXRsaW5lU2NhbGUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIDI7XG4gICAgdmFyIG91dGxpbmUgPSBkcmF3RWxsaXBzZSh7XG4gICAgICAgIHg6IG9wdGlvbnMueCxcbiAgICAgICAgeTogb3B0aW9ucy55LFxuICAgICAgICB4U2NhbGU6IG91dGxpbmVTY2FsZSxcbiAgICAgICAgeVNjYWxlOiBvdXRsaW5lU2NhbGUsXG4gICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgfSk7XG4gICAgaWYgKCFvcHRpb25zLmZpbGxlZClcbiAgICAgICAgcmV0dXJuIG91dGxpbmU7XG4gICAgdmFyIGRvdCA9IGRyYXdFbGxpcHNlKHtcbiAgICAgICAgeDogb3B0aW9ucy54LFxuICAgICAgICB5OiBvcHRpb25zLnksXG4gICAgICAgIHhTY2FsZTogb3V0bGluZVNjYWxlICogMC40NSxcbiAgICAgICAgeVNjYWxlOiBvdXRsaW5lU2NhbGUgKiAwLjQ1LFxuICAgICAgICBjb2xvcjogb3B0aW9ucy5kb3RDb2xvcixcbiAgICAgICAgYm9yZGVyQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKFtwdXNoR3JhcGhpY3NTdGF0ZSgpXSwgb3V0bGluZSwgZG90LCBbcG9wR3JhcGhpY3NTdGF0ZSgpXSk7XG59O1xuZXhwb3J0IHZhciBkcmF3QnV0dG9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgeCA9IGFzTnVtYmVyKG9wdGlvbnMueCk7XG4gICAgdmFyIHkgPSBhc051bWJlcihvcHRpb25zLnkpO1xuICAgIHZhciB3aWR0aCA9IGFzTnVtYmVyKG9wdGlvbnMud2lkdGgpO1xuICAgIHZhciBoZWlnaHQgPSBhc051bWJlcihvcHRpb25zLmhlaWdodCk7XG4gICAgdmFyIGJhY2tncm91bmQgPSBkcmF3UmVjdGFuZ2xlKHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgcm90YXRlOiBkZWdyZWVzKDApLFxuICAgICAgICB4U2tldzogZGVncmVlcygwKSxcbiAgICAgICAgeVNrZXc6IGRlZ3JlZXMoMCksXG4gICAgfSk7XG4gICAgdmFyIGxpbmVzID0gZHJhd1RleHRMaW5lcyhvcHRpb25zLnRleHRMaW5lcywge1xuICAgICAgICBjb2xvcjogb3B0aW9ucy50ZXh0Q29sb3IsXG4gICAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcbiAgICAgICAgc2l6ZTogb3B0aW9ucy5mb250U2l6ZSxcbiAgICAgICAgcm90YXRlOiBkZWdyZWVzKDApLFxuICAgICAgICB4U2tldzogZGVncmVlcygwKSxcbiAgICAgICAgeVNrZXc6IGRlZ3JlZXMoMCksXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKFtwdXNoR3JhcGhpY3NTdGF0ZSgpXSwgYmFja2dyb3VuZCwgbGluZXMsIFtwb3BHcmFwaGljc1N0YXRlKCldKTtcbn07XG5leHBvcnQgdmFyIGRyYXdUZXh0TGluZXMgPSBmdW5jdGlvbiAobGluZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3BlcmF0b3JzID0gW1xuICAgICAgICBiZWdpblRleHQoKSxcbiAgICAgICAgc2V0RmlsbGluZ0NvbG9yKG9wdGlvbnMuY29sb3IpLFxuICAgICAgICBzZXRGb250QW5kU2l6ZShvcHRpb25zLmZvbnQsIG9wdGlvbnMuc2l6ZSksXG4gICAgXTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIF9hID0gbGluZXNbaWR4XSwgZW5jb2RlZCA9IF9hLmVuY29kZWQsIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgb3BlcmF0b3JzLnB1c2gocm90YXRlQW5kU2tld1RleHRSYWRpYW5zQW5kVHJhbnNsYXRlKHRvUmFkaWFucyhvcHRpb25zLnJvdGF0ZSksIHRvUmFkaWFucyhvcHRpb25zLnhTa2V3KSwgdG9SYWRpYW5zKG9wdGlvbnMueVNrZXcpLCB4LCB5KSwgc2hvd1RleHQoZW5jb2RlZCkpO1xuICAgIH1cbiAgICBvcGVyYXRvcnMucHVzaChlbmRUZXh0KCkpO1xuICAgIHJldHVybiBvcGVyYXRvcnM7XG59O1xuZXhwb3J0IHZhciBkcmF3VGV4dEZpZWxkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgeCA9IGFzTnVtYmVyKG9wdGlvbnMueCk7XG4gICAgdmFyIHkgPSBhc051bWJlcihvcHRpb25zLnkpO1xuICAgIHZhciB3aWR0aCA9IGFzTnVtYmVyKG9wdGlvbnMud2lkdGgpO1xuICAgIHZhciBoZWlnaHQgPSBhc051bWJlcihvcHRpb25zLmhlaWdodCk7XG4gICAgdmFyIGJvcmRlcldpZHRoID0gYXNOdW1iZXIob3B0aW9ucy5ib3JkZXJXaWR0aCk7XG4gICAgdmFyIHBhZGRpbmcgPSBhc051bWJlcihvcHRpb25zLnBhZGRpbmcpO1xuICAgIHZhciBjbGlwWCA9IHggKyBib3JkZXJXaWR0aCAvIDIgKyBwYWRkaW5nO1xuICAgIHZhciBjbGlwWSA9IHkgKyBib3JkZXJXaWR0aCAvIDIgKyBwYWRkaW5nO1xuICAgIHZhciBjbGlwV2lkdGggPSB3aWR0aCAtIChib3JkZXJXaWR0aCAvIDIgKyBwYWRkaW5nKSAqIDI7XG4gICAgdmFyIGNsaXBIZWlnaHQgPSBoZWlnaHQgLSAoYm9yZGVyV2lkdGggLyAyICsgcGFkZGluZykgKiAyO1xuICAgIHZhciBjbGlwcGluZ0FyZWEgPSBbXG4gICAgICAgIG1vdmVUbyhjbGlwWCwgY2xpcFkpLFxuICAgICAgICBsaW5lVG8oY2xpcFgsIGNsaXBZICsgY2xpcEhlaWdodCksXG4gICAgICAgIGxpbmVUbyhjbGlwWCArIGNsaXBXaWR0aCwgY2xpcFkgKyBjbGlwSGVpZ2h0KSxcbiAgICAgICAgbGluZVRvKGNsaXBYICsgY2xpcFdpZHRoLCBjbGlwWSksXG4gICAgICAgIGNsb3NlUGF0aCgpLFxuICAgICAgICBjbGlwKCksXG4gICAgICAgIGVuZFBhdGgoKSxcbiAgICBdO1xuICAgIHZhciBiYWNrZ3JvdW5kID0gZHJhd1JlY3RhbmdsZSh7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHksXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICBjb2xvcjogb3B0aW9ucy5jb2xvcixcbiAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgIHJvdGF0ZTogZGVncmVlcygwKSxcbiAgICAgICAgeFNrZXc6IGRlZ3JlZXMoMCksXG4gICAgICAgIHlTa2V3OiBkZWdyZWVzKDApLFxuICAgIH0pO1xuICAgIHZhciBsaW5lcyA9IGRyYXdUZXh0TGluZXMob3B0aW9ucy50ZXh0TGluZXMsIHtcbiAgICAgICAgY29sb3I6IG9wdGlvbnMudGV4dENvbG9yLFxuICAgICAgICBmb250OiBvcHRpb25zLmZvbnQsXG4gICAgICAgIHNpemU6IG9wdGlvbnMuZm9udFNpemUsXG4gICAgICAgIHJvdGF0ZTogZGVncmVlcygwKSxcbiAgICAgICAgeFNrZXc6IGRlZ3JlZXMoMCksXG4gICAgICAgIHlTa2V3OiBkZWdyZWVzKDApLFxuICAgIH0pO1xuICAgIHZhciBtYXJrZWRDb250ZW50ID0gX19zcHJlYWRBcnJheXMoW1xuICAgICAgICBiZWdpbk1hcmtlZENvbnRlbnQoJ1R4JyksXG4gICAgICAgIHB1c2hHcmFwaGljc1N0YXRlKClcbiAgICBdLCBsaW5lcywgW1xuICAgICAgICBwb3BHcmFwaGljc1N0YXRlKCksXG4gICAgICAgIGVuZE1hcmtlZENvbnRlbnQoKSxcbiAgICBdKTtcbiAgICByZXR1cm4gX19zcHJlYWRBcnJheXMoW1xuICAgICAgICBwdXNoR3JhcGhpY3NTdGF0ZSgpXG4gICAgXSwgYmFja2dyb3VuZCwgY2xpcHBpbmdBcmVhLCBtYXJrZWRDb250ZW50LCBbXG4gICAgICAgIHBvcEdyYXBoaWNzU3RhdGUoKSxcbiAgICBdKTtcbn07XG5leHBvcnQgdmFyIGRyYXdPcHRpb25MaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgeCA9IGFzTnVtYmVyKG9wdGlvbnMueCk7XG4gICAgdmFyIHkgPSBhc051bWJlcihvcHRpb25zLnkpO1xuICAgIHZhciB3aWR0aCA9IGFzTnVtYmVyKG9wdGlvbnMud2lkdGgpO1xuICAgIHZhciBoZWlnaHQgPSBhc051bWJlcihvcHRpb25zLmhlaWdodCk7XG4gICAgdmFyIGxpbmVIZWlnaHQgPSBhc051bWJlcihvcHRpb25zLmxpbmVIZWlnaHQpO1xuICAgIHZhciBib3JkZXJXaWR0aCA9IGFzTnVtYmVyKG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICAgIHZhciBwYWRkaW5nID0gYXNOdW1iZXIob3B0aW9ucy5wYWRkaW5nKTtcbiAgICB2YXIgY2xpcFggPSB4ICsgYm9yZGVyV2lkdGggLyAyICsgcGFkZGluZztcbiAgICB2YXIgY2xpcFkgPSB5ICsgYm9yZGVyV2lkdGggLyAyICsgcGFkZGluZztcbiAgICB2YXIgY2xpcFdpZHRoID0gd2lkdGggLSAoYm9yZGVyV2lkdGggLyAyICsgcGFkZGluZykgKiAyO1xuICAgIHZhciBjbGlwSGVpZ2h0ID0gaGVpZ2h0IC0gKGJvcmRlcldpZHRoIC8gMiArIHBhZGRpbmcpICogMjtcbiAgICB2YXIgY2xpcHBpbmdBcmVhID0gW1xuICAgICAgICBtb3ZlVG8oY2xpcFgsIGNsaXBZKSxcbiAgICAgICAgbGluZVRvKGNsaXBYLCBjbGlwWSArIGNsaXBIZWlnaHQpLFxuICAgICAgICBsaW5lVG8oY2xpcFggKyBjbGlwV2lkdGgsIGNsaXBZICsgY2xpcEhlaWdodCksXG4gICAgICAgIGxpbmVUbyhjbGlwWCArIGNsaXBXaWR0aCwgY2xpcFkpLFxuICAgICAgICBjbG9zZVBhdGgoKSxcbiAgICAgICAgY2xpcCgpLFxuICAgICAgICBlbmRQYXRoKCksXG4gICAgXTtcbiAgICB2YXIgYmFja2dyb3VuZCA9IGRyYXdSZWN0YW5nbGUoe1xuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5LFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuICAgICAgICByb3RhdGU6IGRlZ3JlZXMoMCksXG4gICAgICAgIHhTa2V3OiBkZWdyZWVzKDApLFxuICAgICAgICB5U2tldzogZGVncmVlcygwKSxcbiAgICB9KTtcbiAgICB2YXIgaGlnaGxpZ2h0cyA9IFtdO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnMuc2VsZWN0ZWRMaW5lcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIGxpbmUgPSBvcHRpb25zLnRleHRMaW5lc1tvcHRpb25zLnNlbGVjdGVkTGluZXNbaWR4XV07XG4gICAgICAgIGhpZ2hsaWdodHMucHVzaC5hcHBseShoaWdobGlnaHRzLCBkcmF3UmVjdGFuZ2xlKHtcbiAgICAgICAgICAgIHg6IGxpbmUueCAtIHBhZGRpbmcsXG4gICAgICAgICAgICB5OiBsaW5lLnkgLSAobGluZUhlaWdodCAtIGxpbmUuaGVpZ2h0KSAvIDIsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGggLSBib3JkZXJXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogbGluZS5oZWlnaHQgKyAobGluZUhlaWdodCAtIGxpbmUuaGVpZ2h0KSAvIDIsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLnNlbGVjdGVkQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcm90YXRlOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgeFNrZXc6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICB5U2tldzogZGVncmVlcygwKSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICB2YXIgbGluZXMgPSBkcmF3VGV4dExpbmVzKG9wdGlvbnMudGV4dExpbmVzLCB7XG4gICAgICAgIGNvbG9yOiBvcHRpb25zLnRleHRDb2xvcixcbiAgICAgICAgZm9udDogb3B0aW9ucy5mb250LFxuICAgICAgICBzaXplOiBvcHRpb25zLmZvbnRTaXplLFxuICAgICAgICByb3RhdGU6IGRlZ3JlZXMoMCksXG4gICAgICAgIHhTa2V3OiBkZWdyZWVzKDApLFxuICAgICAgICB5U2tldzogZGVncmVlcygwKSxcbiAgICB9KTtcbiAgICB2YXIgbWFya2VkQ29udGVudCA9IF9fc3ByZWFkQXJyYXlzKFtcbiAgICAgICAgYmVnaW5NYXJrZWRDb250ZW50KCdUeCcpLFxuICAgICAgICBwdXNoR3JhcGhpY3NTdGF0ZSgpXG4gICAgXSwgbGluZXMsIFtcbiAgICAgICAgcG9wR3JhcGhpY3NTdGF0ZSgpLFxuICAgICAgICBlbmRNYXJrZWRDb250ZW50KCksXG4gICAgXSk7XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKFtcbiAgICAgICAgcHVzaEdyYXBoaWNzU3RhdGUoKVxuICAgIF0sIGJhY2tncm91bmQsIGhpZ2hsaWdodHMsIGNsaXBwaW5nQXJlYSwgbWFya2VkQ29udGVudCwgW1xuICAgICAgICBwb3BHcmFwaGljc1N0YXRlKCksXG4gICAgXSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9ucy5qcy5tYXAiLCIvLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWNsYXNzZXMtcGVyLWZpbGVcbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuLy8gVE9ETzogSW5jbHVkZSBsaW5rIHRvIGRvY3VtZW50YXRpb24gd2l0aCBleGFtcGxlXG52YXIgRW5jcnlwdGVkUERGRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVuY3J5cHRlZFBERkVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVuY3J5cHRlZFBERkVycm9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gJ0lucHV0IGRvY3VtZW50IHRvIGBQREZEb2N1bWVudC5sb2FkYCBpcyBlbmNyeXB0ZWQuIFlvdSBjYW4gdXNlIGBQREZEb2N1bWVudC5sb2FkKC4uLiwgeyBpZ25vcmVFbmNyeXB0aW9uOiB0cnVlIH0pYCBpZiB5b3Ugd2lzaCB0byBsb2FkIHRoZSBkb2N1bWVudCBhbnl3YXlzLic7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBFbmNyeXB0ZWRQREZFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEVuY3J5cHRlZFBERkVycm9yIH07XG4vLyBUT0RPOiBJbmNsdWRlIGxpbmsgdG8gZG9jdW1lbnRhdGlvbiB3aXRoIGV4YW1wbGVcbnZhciBGb250a2l0Tm90UmVnaXN0ZXJlZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb250a2l0Tm90UmVnaXN0ZXJlZEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvbnRraXROb3RSZWdpc3RlcmVkRXJyb3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSAnSW5wdXQgdG8gYFBERkRvY3VtZW50LmVtYmVkRm9udGAgd2FzIGEgY3VzdG9tIGZvbnQsIGJ1dCBubyBgZm9udGtpdGAgaW5zdGFuY2Ugd2FzIGZvdW5kLiBZb3UgbXVzdCByZWdpc3RlciBhIGBmb250a2l0YCBpbnN0YW5jZSB3aXRoIGBQREZEb2N1bWVudC5yZWdpc3RlckZvbnRraXQoLi4uKWAgYmVmb3JlIGVtYmVkZGluZyBjdXN0b20gZm9udHMuJztcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEZvbnRraXROb3RSZWdpc3RlcmVkRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBGb250a2l0Tm90UmVnaXN0ZXJlZEVycm9yIH07XG4vLyBUT0RPOiBJbmNsdWRlIGxpbmsgdG8gZG9jdW1lbnRhdGlvbiB3aXRoIGV4YW1wbGVcbnZhciBGb3JlaWduUGFnZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb3JlaWduUGFnZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcmVpZ25QYWdlRXJyb3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSAnQSBgcGFnZWAgcGFzc2VkIHRvIGBQREZEb2N1bWVudC5hZGRQYWdlYCBvciBgUERGRG9jdW1lbnQuaW5zZXJ0UGFnZWAgd2FzIGZyb20gYSBkaWZmZXJlbnQgKGZvcmVpZ24pIFBERiBkb2N1bWVudC4gSWYgeW91IHdhbnQgdG8gY29weSBwYWdlcyBmcm9tIG9uZSBQREZEb2N1bWVudCB0byBhbm90aGVyLCB5b3UgbXVzdCB1c2UgYFBERkRvY3VtZW50LmNvcHlQYWdlcyguLi4pYCB0byBjb3B5IHRoZSBwYWdlcyBiZWZvcmUgYWRkaW5nIG9yIGluc2VydGluZyB0aGVtLic7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBGb3JlaWduUGFnZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgRm9yZWlnblBhZ2VFcnJvciB9O1xuLy8gVE9ETzogSW5jbHVkZSBsaW5rIHRvIGRvY3VtZW50YXRpb24gd2l0aCBleGFtcGxlXG52YXIgUmVtb3ZlUGFnZUZyb21FbXB0eURvY3VtZW50RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlbW92ZVBhZ2VGcm9tRW1wdHlEb2N1bWVudEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlbW92ZVBhZ2VGcm9tRW1wdHlEb2N1bWVudEVycm9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gJ1BERkRvY3VtZW50IGhhcyBubyBwYWdlcyBzbyBgUERGRG9jdW1lbnQucmVtb3ZlUGFnZWAgY2Fubm90IGJlIGNhbGxlZCc7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBSZW1vdmVQYWdlRnJvbUVtcHR5RG9jdW1lbnRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFJlbW92ZVBhZ2VGcm9tRW1wdHlEb2N1bWVudEVycm9yIH07XG52YXIgTm9TdWNoRmllbGRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTm9TdWNoRmllbGRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOb1N1Y2hGaWVsZEVycm9yKG5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiUERGRG9jdW1lbnQgaGFzIG5vIGZvcm0gZmllbGQgd2l0aCB0aGUgbmFtZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBOb1N1Y2hGaWVsZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTm9TdWNoRmllbGRFcnJvciB9O1xudmFyIFVuZXhwZWN0ZWRGaWVsZFR5cGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVW5leHBlY3RlZEZpZWxkVHlwZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVuZXhwZWN0ZWRGaWVsZFR5cGVFcnJvcihuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZCA9PT0gbnVsbCB8fCBleHBlY3RlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXhwZWN0ZWQubmFtZTtcbiAgICAgICAgdmFyIGFjdHVhbFR5cGUgPSAoX2IgPSAoX2EgPSBhY3R1YWwgPT09IG51bGwgfHwgYWN0dWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhY3R1YWwuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBhY3R1YWw7XG4gICAgICAgIHZhciBtc2cgPSBcIkV4cGVjdGVkIGZpZWxkIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgdG8gYmUgb2YgdHlwZSBcIiArIGV4cGVjdGVkVHlwZSArIFwiLCBcIiArXG4gICAgICAgICAgICAoXCJidXQgaXQgaXMgYWN0dWFsbHkgb2YgdHlwZSBcIiArIGFjdHVhbFR5cGUpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVW5leHBlY3RlZEZpZWxkVHlwZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgVW5leHBlY3RlZEZpZWxkVHlwZUVycm9yIH07XG52YXIgTWlzc2luZ09uVmFsdWVDaGVja0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nT25WYWx1ZUNoZWNrRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ09uVmFsdWVDaGVja0Vycm9yKG9uVmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiRmFpbGVkIHRvIHNlbGVjdCBjaGVjayBib3ggZHVlIHRvIG1pc3Npbmcgb25WYWx1ZTogXFxcIlwiICsgb25WYWx1ZSArIFwiXFxcIlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ09uVmFsdWVDaGVja0Vycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ09uVmFsdWVDaGVja0Vycm9yIH07XG52YXIgRmllbGRBbHJlYWR5RXhpc3RzRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZpZWxkQWxyZWFkeUV4aXN0c0Vycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpZWxkQWxyZWFkeUV4aXN0c0Vycm9yKG5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiQSBmaWVsZCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZTogXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRmllbGRBbHJlYWR5RXhpc3RzRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBGaWVsZEFscmVhZHlFeGlzdHNFcnJvciB9O1xudmFyIEludmFsaWRGaWVsZE5hbWVQYXJ0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRGaWVsZE5hbWVQYXJ0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZEZpZWxkTmFtZVBhcnRFcnJvcihuYW1lUGFydCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJGaWVsZCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY29tcG9uZW50OiBcXFwiXCIgKyBuYW1lUGFydCArIFwiXFxcIlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZEZpZWxkTmFtZVBhcnRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRGaWVsZE5hbWVQYXJ0RXJyb3IgfTtcbnZhciBGaWVsZEV4aXN0c0FzTm9uVGVybWluYWxFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmllbGRFeGlzdHNBc05vblRlcm1pbmFsRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmllbGRFeGlzdHNBc05vblRlcm1pbmFsRXJyb3IobmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJBIG5vbi10ZXJtaW5hbCBmaWVsZCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZTogXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRmllbGRFeGlzdHNBc05vblRlcm1pbmFsRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBGaWVsZEV4aXN0c0FzTm9uVGVybWluYWxFcnJvciB9O1xudmFyIFJpY2hUZXh0RmllbGRSZWFkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJpY2hUZXh0RmllbGRSZWFkRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmljaFRleHRGaWVsZFJlYWRFcnJvcihmaWVsZE5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiUmVhZGluZyByaWNoIHRleHQgZmllbGRzIGlzIG5vdCBzdXBwb3J0ZWQ6IEF0dGVtcHRlZCB0byByZWFkIHJpY2ggdGV4dCBmaWVsZDogXCIgKyBmaWVsZE5hbWU7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBSaWNoVGV4dEZpZWxkUmVhZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgUmljaFRleHRGaWVsZFJlYWRFcnJvciB9O1xudmFyIENvbWJlZFRleHRMYXlvdXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tYmVkVGV4dExheW91dEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbWJlZFRleHRMYXlvdXRFcnJvcihsaW5lTGVuZ3RoLCBjZWxsQ291bnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiRmFpbGVkIHRvIGxheW91dCBjb21iZWQgdGV4dCBhcyBsaW5lTGVuZ3RoPVwiICsgbGluZUxlbmd0aCArIFwiIGlzIGdyZWF0ZXIgdGhhbiBjZWxsQ291bnQ9XCIgKyBjZWxsQ291bnQ7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBDb21iZWRUZXh0TGF5b3V0RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBDb21iZWRUZXh0TGF5b3V0RXJyb3IgfTtcbnZhciBFeGNlZWRlZE1heExlbmd0aEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFeGNlZWRlZE1heExlbmd0aEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV4Y2VlZGVkTWF4TGVuZ3RoRXJyb3IodGV4dExlbmd0aCwgbWF4TGVuZ3RoLCBuYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkF0dGVtcHRlZCB0byBzZXQgdGV4dCB3aXRoIGxlbmd0aD1cIiArIHRleHRMZW5ndGggKyBcIiBmb3IgVGV4dEZpZWxkIHdpdGggbWF4TGVuZ3RoPVwiICsgbWF4TGVuZ3RoICsgXCIgYW5kIG5hbWU9XCIgKyBuYW1lO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRXhjZWVkZWRNYXhMZW5ndGhFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEV4Y2VlZGVkTWF4TGVuZ3RoRXJyb3IgfTtcbnZhciBJbnZhbGlkTWF4TGVuZ3RoRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRNYXhMZW5ndGhFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkTWF4TGVuZ3RoRXJyb3IodGV4dExlbmd0aCwgbWF4TGVuZ3RoLCBuYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkF0dGVtcHRlZCB0byBzZXQgbWF4TGVuZ3RoPVwiICsgbWF4TGVuZ3RoICsgXCIsIHdoaWNoIGlzIGxlc3MgdGhhbiBcIiArIHRleHRMZW5ndGggKyBcIiwgdGhlIGxlbmd0aCBvZiB0aGlzIGZpZWxkJ3MgY3VycmVudCB2YWx1ZSAobmFtZT1cIiArIG5hbWUgKyBcIilcIjtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRNYXhMZW5ndGhFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRNYXhMZW5ndGhFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IENvbWJlZFRleHRMYXlvdXRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmltcG9ydCB7IFRleHRBbGlnbm1lbnQgfSBmcm9tIFwiLi9hbGlnbm1lbnRcIjtcbmltcG9ydCB7IGNsZWFuVGV4dCwgbGluZVNwbGl0LCBtZXJnZUxpbmVzLCBjaGFyQXRJbmRleCwgY2hhclNwbGl0LCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIE1JTl9GT05UX1NJWkUgPSA0O1xudmFyIE1BWF9GT05UX1NJWkUgPSA1MDA7XG52YXIgY29tcHV0ZUZvbnRTaXplID0gZnVuY3Rpb24gKGxpbmVzLCBmb250LCBib3VuZHMsIG11bHRpbGluZSkge1xuICAgIGlmIChtdWx0aWxpbmUgPT09IHZvaWQgMCkgeyBtdWx0aWxpbmUgPSBmYWxzZTsgfVxuICAgIHZhciBmb250U2l6ZSA9IE1JTl9GT05UX1NJWkU7XG4gICAgd2hpbGUgKGZvbnRTaXplIDwgTUFYX0ZPTlRfU0laRSkge1xuICAgICAgICB2YXIgbGluZXNVc2VkID0gMDtcbiAgICAgICAgZm9yICh2YXIgbGluZUlkeCA9IDAsIGxpbmVMZW4gPSBsaW5lcy5sZW5ndGg7IGxpbmVJZHggPCBsaW5lTGVuOyBsaW5lSWR4KyspIHtcbiAgICAgICAgICAgIGxpbmVzVXNlZCArPSAxO1xuICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tsaW5lSWR4XTtcbiAgICAgICAgICAgIHZhciB3b3JkcyA9IGxpbmUuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIC8vIExheW91dCB0aGUgd29yZHMgdXNpbmcgdGhlIGN1cnJlbnQgYGZvbnRTaXplYCwgbGluZSB3cmFwcGluZ1xuICAgICAgICAgICAgLy8gd2hlbmV2ZXIgd2UgcmVhY2ggdGhlIGVuZCBvZiB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgICAgICAgdmFyIHNwYWNlSW5MaW5lUmVtYWluaW5nID0gYm91bmRzLndpZHRoO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd29yZHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzTGFzdFdvcmQgPSBpZHggPT09IGxlbiAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHdvcmQgPSBpc0xhc3RXb3JkID8gd29yZHNbaWR4XSA6IHdvcmRzW2lkeF0gKyAnICc7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoT2ZXb3JkID0gZm9udC53aWR0aE9mVGV4dEF0U2l6ZSh3b3JkLCBmb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgc3BhY2VJbkxpbmVSZW1haW5pbmcgLT0gd2lkdGhPZldvcmQ7XG4gICAgICAgICAgICAgICAgaWYgKHNwYWNlSW5MaW5lUmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXNVc2VkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHNwYWNlSW5MaW5lUmVtYWluaW5nID0gYm91bmRzLndpZHRoIC0gd2lkdGhPZldvcmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiBpZiB3ZSBleGNlZWRlZCB0aGUgYWxsb3dlZCB3aWR0aFxuICAgICAgICBpZiAoIW11bHRpbGluZSAmJiBsaW5lc1VzZWQgPiBsaW5lcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZm9udFNpemUgLSAxO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gZm9udC5oZWlnaHRBdFNpemUoZm9udFNpemUpO1xuICAgICAgICB2YXIgbGluZUhlaWdodCA9IGhlaWdodCArIGhlaWdodCAqIDAuMjtcbiAgICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gbGluZUhlaWdodCAqIGxpbmVzVXNlZDtcbiAgICAgICAgLy8gUmV0dXJuIGlmIHdlIGV4Y2VlZGVkIHRoZSBhbGxvd2VkIGhlaWdodFxuICAgICAgICBpZiAodG90YWxIZWlnaHQgPiBNYXRoLmFicyhib3VuZHMuaGVpZ2h0KSlcbiAgICAgICAgICAgIHJldHVybiBmb250U2l6ZSAtIDE7XG4gICAgICAgIGZvbnRTaXplICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBmb250U2l6ZTtcbn07XG52YXIgY29tcHV0ZUNvbWJlZEZvbnRTaXplID0gZnVuY3Rpb24gKGxpbmUsIGZvbnQsIGJvdW5kcywgY2VsbENvdW50KSB7XG4gICAgdmFyIGNlbGxXaWR0aCA9IGJvdW5kcy53aWR0aCAvIGNlbGxDb3VudDtcbiAgICB2YXIgY2VsbEhlaWdodCA9IGJvdW5kcy5oZWlnaHQ7XG4gICAgdmFyIGZvbnRTaXplID0gTUlOX0ZPTlRfU0laRTtcbiAgICB2YXIgY2hhcnMgPSBjaGFyU3BsaXQobGluZSk7XG4gICAgd2hpbGUgKGZvbnRTaXplIDwgTUFYX0ZPTlRfU0laRSkge1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBjaGFycy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBjID0gY2hhcnNbaWR4XTtcbiAgICAgICAgICAgIHZhciB0b29Mb25nID0gZm9udC53aWR0aE9mVGV4dEF0U2l6ZShjLCBmb250U2l6ZSkgPiBjZWxsV2lkdGggKiAwLjc1O1xuICAgICAgICAgICAgaWYgKHRvb0xvbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRTaXplIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVpZ2h0ID0gZm9udC5oZWlnaHRBdFNpemUoZm9udFNpemUsIHsgZGVzY2VuZGVyOiBmYWxzZSB9KTtcbiAgICAgICAgaWYgKGhlaWdodCA+IGNlbGxIZWlnaHQpXG4gICAgICAgICAgICByZXR1cm4gZm9udFNpemUgLSAxO1xuICAgICAgICBmb250U2l6ZSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gZm9udFNpemU7XG59O1xudmFyIGxhc3RJbmRleE9mV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgZm9yICh2YXIgaWR4ID0gbGluZS5sZW5ndGg7IGlkeCA+IDA7IGlkeC0tKSB7XG4gICAgICAgIGlmICgvXFxzLy50ZXN0KGxpbmVbaWR4XSkpXG4gICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbnZhciBzcGxpdE91dExpbmVzID0gZnVuY3Rpb24gKGlucHV0LCBtYXhXaWR0aCwgZm9udCwgZm9udFNpemUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGxhc3RXaGl0ZXNwYWNlSWR4ID0gaW5wdXQubGVuZ3RoO1xuICAgIHdoaWxlIChsYXN0V2hpdGVzcGFjZUlkeCA+IDApIHtcbiAgICAgICAgdmFyIGxpbmUgPSBpbnB1dC5zdWJzdHJpbmcoMCwgbGFzdFdoaXRlc3BhY2VJZHgpO1xuICAgICAgICB2YXIgZW5jb2RlZCA9IGZvbnQuZW5jb2RlVGV4dChsaW5lKTtcbiAgICAgICAgdmFyIHdpZHRoID0gZm9udC53aWR0aE9mVGV4dEF0U2l6ZShsaW5lLCBmb250U2l6ZSk7XG4gICAgICAgIGlmICh3aWR0aCA8IG1heFdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgcmVtYWluZGVyID0gaW5wdXQuc3Vic3RyaW5nKGxhc3RXaGl0ZXNwYWNlSWR4KSB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4geyBsaW5lOiBsaW5lLCBlbmNvZGVkOiBlbmNvZGVkLCB3aWR0aDogd2lkdGgsIHJlbWFpbmRlcjogcmVtYWluZGVyIH07XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFdoaXRlc3BhY2VJZHggPSAoX2EgPSBsYXN0SW5kZXhPZldoaXRlc3BhY2UobGluZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgfVxuICAgIC8vIFdlIHdlcmUgdW5hYmxlIHRvIHNwbGl0IHRoZSBpbnB1dCBlbm91Z2ggdG8gZ2V0IGEgY2h1bmsgdGhhdCB3b3VsZCBmaXRcbiAgICAvLyB3aXRoaW4gdGhlIHNwZWNpZmllZCBgbWF4V2lkdGhgIHNvIHdlJ2xsIGp1c3QgcmV0dXJuIGV2ZXJ5dGhpbmdcbiAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBpbnB1dCxcbiAgICAgICAgZW5jb2RlZDogZm9udC5lbmNvZGVUZXh0KGlucHV0KSxcbiAgICAgICAgd2lkdGg6IGZvbnQud2lkdGhPZlRleHRBdFNpemUoaW5wdXQsIGZvbnRTaXplKSxcbiAgICAgICAgcmVtYWluZGVyOiB1bmRlZmluZWQsXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGxheW91dE11bHRpbGluZVRleHQgPSBmdW5jdGlvbiAodGV4dCwgX2EpIHtcbiAgICB2YXIgYWxpZ25tZW50ID0gX2EuYWxpZ25tZW50LCBmb250U2l6ZSA9IF9hLmZvbnRTaXplLCBmb250ID0gX2EuZm9udCwgYm91bmRzID0gX2EuYm91bmRzO1xuICAgIHZhciBsaW5lcyA9IGxpbmVTcGxpdChjbGVhblRleHQodGV4dCkpO1xuICAgIGlmIChmb250U2l6ZSA9PT0gdW5kZWZpbmVkIHx8IGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgIGZvbnRTaXplID0gY29tcHV0ZUZvbnRTaXplKGxpbmVzLCBmb250LCBib3VuZHMsIHRydWUpO1xuICAgIH1cbiAgICB2YXIgaGVpZ2h0ID0gZm9udC5oZWlnaHRBdFNpemUoZm9udFNpemUpO1xuICAgIHZhciBsaW5lSGVpZ2h0ID0gaGVpZ2h0ICsgaGVpZ2h0ICogMC4yO1xuICAgIHZhciB0ZXh0TGluZXMgPSBbXTtcbiAgICB2YXIgbWluWCA9IGJvdW5kcy54O1xuICAgIHZhciBtaW5ZID0gYm91bmRzLnk7XG4gICAgdmFyIG1heFggPSBib3VuZHMueCArIGJvdW5kcy53aWR0aDtcbiAgICB2YXIgbWF4WSA9IGJvdW5kcy55ICsgYm91bmRzLmhlaWdodDtcbiAgICB2YXIgeSA9IGJvdW5kcy55ICsgYm91bmRzLmhlaWdodDtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIHByZXZSZW1haW5kZXIgPSBsaW5lc1tpZHhdO1xuICAgICAgICB3aGlsZSAocHJldlJlbWFpbmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBzcGxpdE91dExpbmVzKHByZXZSZW1haW5kZXIsIGJvdW5kcy53aWR0aCwgZm9udCwgZm9udFNpemUpLCBsaW5lID0gX2IubGluZSwgZW5jb2RlZCA9IF9iLmVuY29kZWQsIHdpZHRoID0gX2Iud2lkdGgsIHJlbWFpbmRlciA9IF9iLnJlbWFpbmRlcjtcbiAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgdmFyIHggPSAoYWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkxlZnQgPyBib3VuZHMueFxuICAgICAgICAgICAgICAgIDogYWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkNlbnRlciA/IGJvdW5kcy54ICsgKGJvdW5kcy53aWR0aCAvIDIpIC0gKHdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAgICAgOiBhbGlnbm1lbnQgPT09IFRleHRBbGlnbm1lbnQuUmlnaHQgPyBib3VuZHMueCArIGJvdW5kcy53aWR0aCAtIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGJvdW5kcy54KTtcbiAgICAgICAgICAgIHkgLT0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWClcbiAgICAgICAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSlcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgIGlmICh4ICsgd2lkdGggPiBtYXhYKVxuICAgICAgICAgICAgICAgIG1heFggPSB4ICsgd2lkdGg7XG4gICAgICAgICAgICBpZiAoeSArIGhlaWdodCA+IG1heFkpXG4gICAgICAgICAgICAgICAgbWF4WSA9IHkgKyBoZWlnaHQ7XG4gICAgICAgICAgICB0ZXh0TGluZXMucHVzaCh7IHRleHQ6IGxpbmUsIGVuY29kZWQ6IGVuY29kZWQsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHg6IHgsIHk6IHkgfSk7XG4gICAgICAgICAgICAvLyBPbmx5IHRyaW0gbGluZXMgdGhhdCB3ZSBoYWQgdG8gc3BsaXQgb3Vyc2VsdmVzLiBTbyB3ZSB3b24ndCB0cmltIGxpbmVzXG4gICAgICAgICAgICAvLyB0aGF0IHRoZSB1c2VyIHByb3ZpZGVkIHRoZW1zZWx2ZXMgd2l0aCB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgcHJldlJlbWFpbmRlciA9IHJlbWFpbmRlciA9PT0gbnVsbCB8fCByZW1haW5kZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlbWFpbmRlci50cmltKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgICAgICBsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0LFxuICAgICAgICBsaW5lczogdGV4dExpbmVzLFxuICAgICAgICBib3VuZHM6IHtcbiAgICAgICAgICAgIHg6IG1pblgsXG4gICAgICAgICAgICB5OiBtaW5ZLFxuICAgICAgICAgICAgd2lkdGg6IG1heFggLSBtaW5YLFxuICAgICAgICAgICAgaGVpZ2h0OiBtYXhZIC0gbWluWSxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgbGF5b3V0Q29tYmVkVGV4dCA9IGZ1bmN0aW9uICh0ZXh0LCBfYSkge1xuICAgIHZhciBmb250U2l6ZSA9IF9hLmZvbnRTaXplLCBmb250ID0gX2EuZm9udCwgYm91bmRzID0gX2EuYm91bmRzLCBjZWxsQ291bnQgPSBfYS5jZWxsQ291bnQ7XG4gICAgdmFyIGxpbmUgPSBtZXJnZUxpbmVzKGNsZWFuVGV4dCh0ZXh0KSk7XG4gICAgaWYgKGxpbmUubGVuZ3RoID4gY2VsbENvdW50KSB7XG4gICAgICAgIHRocm93IG5ldyBDb21iZWRUZXh0TGF5b3V0RXJyb3IobGluZS5sZW5ndGgsIGNlbGxDb3VudCk7XG4gICAgfVxuICAgIGlmIChmb250U2l6ZSA9PT0gdW5kZWZpbmVkIHx8IGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgIGZvbnRTaXplID0gY29tcHV0ZUNvbWJlZEZvbnRTaXplKGxpbmUsIGZvbnQsIGJvdW5kcywgY2VsbENvdW50KTtcbiAgICB9XG4gICAgdmFyIGNlbGxXaWR0aCA9IGJvdW5kcy53aWR0aCAvIGNlbGxDb3VudDtcbiAgICB2YXIgaGVpZ2h0ID0gZm9udC5oZWlnaHRBdFNpemUoZm9udFNpemUsIHsgZGVzY2VuZGVyOiBmYWxzZSB9KTtcbiAgICB2YXIgeSA9IGJvdW5kcy55ICsgKGJvdW5kcy5oZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMik7XG4gICAgdmFyIGNlbGxzID0gW107XG4gICAgdmFyIG1pblggPSBib3VuZHMueDtcbiAgICB2YXIgbWluWSA9IGJvdW5kcy55O1xuICAgIHZhciBtYXhYID0gYm91bmRzLnggKyBib3VuZHMud2lkdGg7XG4gICAgdmFyIG1heFkgPSBib3VuZHMueSArIGJvdW5kcy5oZWlnaHQ7XG4gICAgdmFyIGNlbGxPZmZzZXQgPSAwO1xuICAgIHZhciBjaGFyT2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAoY2VsbE9mZnNldCA8IGNlbGxDb3VudCkge1xuICAgICAgICB2YXIgX2IgPSBjaGFyQXRJbmRleChsaW5lLCBjaGFyT2Zmc2V0KSwgY2hhciA9IF9iWzBdLCBjaGFyTGVuZ3RoID0gX2JbMV07XG4gICAgICAgIHZhciBlbmNvZGVkID0gZm9udC5lbmNvZGVUZXh0KGNoYXIpO1xuICAgICAgICB2YXIgd2lkdGggPSBmb250LndpZHRoT2ZUZXh0QXRTaXplKGNoYXIsIGZvbnRTaXplKTtcbiAgICAgICAgdmFyIGNlbGxDZW50ZXIgPSBib3VuZHMueCArIChjZWxsV2lkdGggKiBjZWxsT2Zmc2V0ICsgY2VsbFdpZHRoIC8gMik7XG4gICAgICAgIHZhciB4ID0gY2VsbENlbnRlciAtIHdpZHRoIC8gMjtcbiAgICAgICAgaWYgKHggPCBtaW5YKVxuICAgICAgICAgICAgbWluWCA9IHg7XG4gICAgICAgIGlmICh5IDwgbWluWSlcbiAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICBpZiAoeCArIHdpZHRoID4gbWF4WClcbiAgICAgICAgICAgIG1heFggPSB4ICsgd2lkdGg7XG4gICAgICAgIGlmICh5ICsgaGVpZ2h0ID4gbWF4WSlcbiAgICAgICAgICAgIG1heFkgPSB5ICsgaGVpZ2h0O1xuICAgICAgICBjZWxscy5wdXNoKHsgdGV4dDogbGluZSwgZW5jb2RlZDogZW5jb2RlZCwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgeDogeCwgeTogeSB9KTtcbiAgICAgICAgY2VsbE9mZnNldCArPSAxO1xuICAgICAgICBjaGFyT2Zmc2V0ICs9IGNoYXJMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICAgICAgY2VsbHM6IGNlbGxzLFxuICAgICAgICBib3VuZHM6IHtcbiAgICAgICAgICAgIHg6IG1pblgsXG4gICAgICAgICAgICB5OiBtaW5ZLFxuICAgICAgICAgICAgd2lkdGg6IG1heFggLSBtaW5YLFxuICAgICAgICAgICAgaGVpZ2h0OiBtYXhZIC0gbWluWSxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgbGF5b3V0U2luZ2xlbGluZVRleHQgPSBmdW5jdGlvbiAodGV4dCwgX2EpIHtcbiAgICB2YXIgYWxpZ25tZW50ID0gX2EuYWxpZ25tZW50LCBmb250U2l6ZSA9IF9hLmZvbnRTaXplLCBmb250ID0gX2EuZm9udCwgYm91bmRzID0gX2EuYm91bmRzO1xuICAgIHZhciBsaW5lID0gbWVyZ2VMaW5lcyhjbGVhblRleHQodGV4dCkpO1xuICAgIGlmIChmb250U2l6ZSA9PT0gdW5kZWZpbmVkIHx8IGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgIGZvbnRTaXplID0gY29tcHV0ZUZvbnRTaXplKFtsaW5lXSwgZm9udCwgYm91bmRzKTtcbiAgICB9XG4gICAgdmFyIGVuY29kZWQgPSBmb250LmVuY29kZVRleHQobGluZSk7XG4gICAgdmFyIHdpZHRoID0gZm9udC53aWR0aE9mVGV4dEF0U2l6ZShsaW5lLCBmb250U2l6ZSk7XG4gICAgdmFyIGhlaWdodCA9IGZvbnQuaGVpZ2h0QXRTaXplKGZvbnRTaXplLCB7IGRlc2NlbmRlcjogZmFsc2UgfSk7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgdmFyIHggPSAoYWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkxlZnQgPyBib3VuZHMueFxuICAgICAgICA6IGFsaWdubWVudCA9PT0gVGV4dEFsaWdubWVudC5DZW50ZXIgPyBib3VuZHMueCArIChib3VuZHMud2lkdGggLyAyKSAtICh3aWR0aCAvIDIpXG4gICAgICAgICAgICA6IGFsaWdubWVudCA9PT0gVGV4dEFsaWdubWVudC5SaWdodCA/IGJvdW5kcy54ICsgYm91bmRzLndpZHRoIC0gd2lkdGhcbiAgICAgICAgICAgICAgICA6IGJvdW5kcy54KTtcbiAgICB2YXIgeSA9IGJvdW5kcy55ICsgKGJvdW5kcy5oZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgICAgICBsaW5lOiB7IHRleHQ6IGxpbmUsIGVuY29kZWQ6IGVuY29kZWQsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHg6IHgsIHk6IHkgfSxcbiAgICAgICAgYm91bmRzOiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGRyYXdDaGVja0JveCwgcm90YXRlSW5QbGFjZSwgZHJhd1JhZGlvQnV0dG9uLCBkcmF3QnV0dG9uLCBkcmF3VGV4dEZpZWxkLCBkcmF3T3B0aW9uTGlzdCwgfSBmcm9tIFwiLi4vb3BlcmF0aW9uc1wiO1xuaW1wb3J0IHsgcmdiLCBjb21wb25lbnRzVG9Db2xvciwgc2V0RmlsbGluZ0NvbG9yLCBncmF5c2NhbGUsIGNteWssIH0gZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHsgcmVkdWNlUm90YXRpb24sIGFkanVzdERpbXNGb3JSb3RhdGlvbiB9IGZyb20gXCIuLi9yb3RhdGlvbnNcIjtcbmltcG9ydCB7IGxheW91dE11bHRpbGluZVRleHQsIGxheW91dENvbWJlZFRleHQsIGxheW91dFNpbmdsZWxpbmVUZXh0LCB9IGZyb20gXCIuLi90ZXh0L2xheW91dFwiO1xuaW1wb3J0IHsgVGV4dEFsaWdubWVudCB9IGZyb20gXCIuLi90ZXh0L2FsaWdubWVudFwiO1xuaW1wb3J0IHsgc2V0Rm9udEFuZFNpemUgfSBmcm9tIFwiLi4vb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBmaW5kTGFzdE1hdGNoIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKioqKioqKioqKioqKioqKioqKioqIEFwcGVhcmFuY2UgUHJvdmlkZXIgRnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IHZhciBub3JtYWxpemVBcHBlYXJhbmNlID0gZnVuY3Rpb24gKGFwcGVhcmFuY2UpIHtcbiAgICBpZiAoJ25vcm1hbCcgaW4gYXBwZWFyYW5jZSlcbiAgICAgICAgcmV0dXJuIGFwcGVhcmFuY2U7XG4gICAgcmV0dXJuIHsgbm9ybWFsOiBhcHBlYXJhbmNlIH07XG59O1xuLy8gRXhhbXBsZXM6XG4vLyAgIGAvSGVsdiAxMiBUZmAgLT4gWycvSGVsdiAxMiBUZicsICdIZWx2JywgJzEyJ11cbi8vICAgYC9IZUJvIDguMDAgVGZgIC0+IFsnL0hlQm8gOCBUZicsICdIZUJvJywgJzguMDAnXVxudmFyIHRmUmVnZXggPSAvXFwvKFteXFwwXFx0XFxuXFxmXFxyXFwgXSspW1xcMFxcdFxcblxcZlxcclxcIF0rKFxcZCpcXC5cXGQrfFxcZCspW1xcMFxcdFxcblxcZlxcclxcIF0rVGYvO1xudmFyIGdldERlZmF1bHRGb250U2l6ZSA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIGRhID0gKF9hID0gZmllbGQuZ2V0RGVmYXVsdEFwcGVhcmFuY2UoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgdmFyIGRhTWF0Y2ggPSAoX2IgPSBmaW5kTGFzdE1hdGNoKGRhLCB0ZlJlZ2V4KS5tYXRjaCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgdmFyIGRlZmF1bHRGb250U2l6ZSA9IE51bWJlcihkYU1hdGNoWzJdKTtcbiAgICByZXR1cm4gaXNGaW5pdGUoZGVmYXVsdEZvbnRTaXplKSA/IGRlZmF1bHRGb250U2l6ZSA6IHVuZGVmaW5lZDtcbn07XG4vLyBFeGFtcGxlczpcbi8vICAgYDAuMyBnYCAtPiBbJzAuMycsICdnJ11cbi8vICAgYDAuMyAxIC4zIHJnYCAtPiBbJzAuMycsICcxJywgJy4zJywgJ3JnJ11cbi8vICAgYDAuMyAxIC4zIDAga2AgLT4gWycwLjMnLCAnMScsICcuMycsICcwJywgJ2snXVxudmFyIGNvbG9yUmVnZXggPSAvKFxcZCpcXC5cXGQrfFxcZCspW1xcMFxcdFxcblxcZlxcclxcIF0qKFxcZCpcXC5cXGQrfFxcZCspP1tcXDBcXHRcXG5cXGZcXHJcXCBdKihcXGQqXFwuXFxkK3xcXGQrKT9bXFwwXFx0XFxuXFxmXFxyXFwgXSooXFxkKlxcLlxcZCt8XFxkKyk/W1xcMFxcdFxcblxcZlxcclxcIF0rKGd8cmd8aykvO1xudmFyIGdldERlZmF1bHRDb2xvciA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZGEgPSAoX2EgPSBmaWVsZC5nZXREZWZhdWx0QXBwZWFyYW5jZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICB2YXIgZGFNYXRjaCA9IGZpbmRMYXN0TWF0Y2goZGEsIGNvbG9yUmVnZXgpLm1hdGNoO1xuICAgIHZhciBfYiA9IGRhTWF0Y2ggIT09IG51bGwgJiYgZGFNYXRjaCAhPT0gdm9pZCAwID8gZGFNYXRjaCA6IFtdLCBjMSA9IF9iWzFdLCBjMiA9IF9iWzJdLCBjMyA9IF9iWzNdLCBjNCA9IF9iWzRdLCBjb2xvclNwYWNlID0gX2JbNV07XG4gICAgaWYgKGNvbG9yU3BhY2UgPT09ICdnJyAmJiBjMSkge1xuICAgICAgICByZXR1cm4gZ3JheXNjYWxlKE51bWJlcihjMSkpO1xuICAgIH1cbiAgICBpZiAoY29sb3JTcGFjZSA9PT0gJ3JnJyAmJiBjMSAmJiBjMiAmJiBjMykge1xuICAgICAgICByZXR1cm4gcmdiKE51bWJlcihjMSksIE51bWJlcihjMiksIE51bWJlcihjMykpO1xuICAgIH1cbiAgICBpZiAoY29sb3JTcGFjZSA9PT0gJ2snICYmIGMxICYmIGMyICYmIGMzICYmIGM0KSB7XG4gICAgICAgIHJldHVybiBjbXlrKE51bWJlcihjMSksIE51bWJlcihjMiksIE51bWJlcihjMyksIE51bWJlcihjNCkpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbnZhciB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZSA9IGZ1bmN0aW9uIChmaWVsZCwgY29sb3IsIGZvbnQsIGZvbnRTaXplKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChmb250U2l6ZSA9PT0gdm9pZCAwKSB7IGZvbnRTaXplID0gMDsgfVxuICAgIHZhciBkYSA9IFtcbiAgICAgICAgc2V0RmlsbGluZ0NvbG9yKGNvbG9yKS50b1N0cmluZygpLFxuICAgICAgICBzZXRGb250QW5kU2l6ZSgoX2EgPSBmb250ID09PSBudWxsIHx8IGZvbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZvbnQubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2R1bW15X19ub29wJywgZm9udFNpemUpLnRvU3RyaW5nKCksXG4gICAgXS5qb2luKCdcXG4nKTtcbiAgICBmaWVsZC5zZXREZWZhdWx0QXBwZWFyYW5jZShkYSk7XG59O1xuZXhwb3J0IHZhciBkZWZhdWx0Q2hlY2tCb3hBcHBlYXJhbmNlUHJvdmlkZXIgPSBmdW5jdGlvbiAoY2hlY2tCb3gsIHdpZGdldCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIC8vIFRoZSBgL0RBYCBlbnRyeSBjYW4gYmUgYXQgdGhlIHdpZGdldCBvciBmaWVsZCBsZXZlbCAtIHNvIHdlIGhhbmRsZSBib3RoXG4gICAgdmFyIHdpZGdldENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHdpZGdldCk7XG4gICAgdmFyIGZpZWxkQ29sb3IgPSBnZXREZWZhdWx0Q29sb3IoY2hlY2tCb3guYWNyb0ZpZWxkKTtcbiAgICB2YXIgcmVjdGFuZ2xlID0gd2lkZ2V0LmdldFJlY3RhbmdsZSgpO1xuICAgIHZhciBhcCA9IHdpZGdldC5nZXRBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzKCk7XG4gICAgdmFyIGJzID0gd2lkZ2V0LmdldEJvcmRlclN0eWxlKCk7XG4gICAgdmFyIGJvcmRlcldpZHRoID0gKF9hID0gYnMgPT09IG51bGwgfHwgYnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJzLmdldFdpZHRoKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgdmFyIHJvdGF0aW9uID0gcmVkdWNlUm90YXRpb24oYXAgPT09IG51bGwgfHwgYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFwLmdldFJvdGF0aW9uKCkpO1xuICAgIHZhciBfZCA9IGFkanVzdERpbXNGb3JSb3RhdGlvbihyZWN0YW5nbGUsIHJvdGF0aW9uKSwgd2lkdGggPSBfZC53aWR0aCwgaGVpZ2h0ID0gX2QuaGVpZ2h0O1xuICAgIHZhciByb3RhdGUgPSByb3RhdGVJblBsYWNlKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZWN0YW5nbGUpLCB7IHJvdGF0aW9uOiByb3RhdGlvbiB9KSk7XG4gICAgdmFyIGJsYWNrID0gcmdiKDAsIDAsIDApO1xuICAgIHZhciBib3JkZXJDb2xvciA9IChfYiA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCb3JkZXJDb2xvcigpKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogYmxhY2s7XG4gICAgdmFyIG5vcm1hbEJhY2tncm91bmRDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCYWNrZ3JvdW5kQ29sb3IoKSk7XG4gICAgdmFyIGRvd25CYWNrZ3JvdW5kQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0QmFja2dyb3VuZENvbG9yKCksIDAuOCk7XG4gICAgLy8gVXBkYXRlIGNvbG9yXG4gICAgdmFyIHRleHRDb2xvciA9IChfYyA9IHdpZGdldENvbG9yICE9PSBudWxsICYmIHdpZGdldENvbG9yICE9PSB2b2lkIDAgPyB3aWRnZXRDb2xvciA6IGZpZWxkQ29sb3IpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGJsYWNrO1xuICAgIGlmICh3aWRnZXRDb2xvcikge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZSh3aWRnZXQsIHRleHRDb2xvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZShjaGVja0JveC5hY3JvRmllbGQsIHRleHRDb2xvcik7XG4gICAgfVxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB4OiAwICsgYm9yZGVyV2lkdGggLyAyLFxuICAgICAgICB5OiAwICsgYm9yZGVyV2lkdGggLyAyLFxuICAgICAgICB3aWR0aDogd2lkdGggLSBib3JkZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSBib3JkZXJXaWR0aCxcbiAgICAgICAgdGhpY2tuZXNzOiAxLjUsXG4gICAgICAgIGJvcmRlcldpZHRoOiBib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICBtYXJrQ29sb3I6IHRleHRDb2xvcixcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgb246IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0NoZWNrQm94KF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBjb2xvcjogbm9ybWFsQmFja2dyb3VuZENvbG9yLCBmaWxsZWQ6IHRydWUgfSkpKSxcbiAgICAgICAgICAgIG9mZjogX19zcHJlYWRBcnJheXMocm90YXRlLCBkcmF3Q2hlY2tCb3goX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbG9yOiBub3JtYWxCYWNrZ3JvdW5kQ29sb3IsIGZpbGxlZDogZmFsc2UgfSkpKSxcbiAgICAgICAgfSxcbiAgICAgICAgZG93bjoge1xuICAgICAgICAgICAgb246IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0NoZWNrQm94KF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBjb2xvcjogZG93bkJhY2tncm91bmRDb2xvciwgZmlsbGVkOiB0cnVlIH0pKSksXG4gICAgICAgICAgICBvZmY6IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0NoZWNrQm94KF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBjb2xvcjogZG93bkJhY2tncm91bmRDb2xvciwgZmlsbGVkOiBmYWxzZSB9KSkpLFxuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IHZhciBkZWZhdWx0UmFkaW9Hcm91cEFwcGVhcmFuY2VQcm92aWRlciA9IGZ1bmN0aW9uIChyYWRpb0dyb3VwLCB3aWRnZXQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAvLyBUaGUgYC9EQWAgZW50cnkgY2FuIGJlIGF0IHRoZSB3aWRnZXQgb3IgZmllbGQgbGV2ZWwgLSBzbyB3ZSBoYW5kbGUgYm90aFxuICAgIHZhciB3aWRnZXRDb2xvciA9IGdldERlZmF1bHRDb2xvcih3aWRnZXQpO1xuICAgIHZhciBmaWVsZENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHJhZGlvR3JvdXAuYWNyb0ZpZWxkKTtcbiAgICB2YXIgcmVjdGFuZ2xlID0gd2lkZ2V0LmdldFJlY3RhbmdsZSgpO1xuICAgIHZhciBhcCA9IHdpZGdldC5nZXRBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzKCk7XG4gICAgdmFyIGJzID0gd2lkZ2V0LmdldEJvcmRlclN0eWxlKCk7XG4gICAgdmFyIGJvcmRlcldpZHRoID0gKF9hID0gYnMgPT09IG51bGwgfHwgYnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJzLmdldFdpZHRoKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgdmFyIHJvdGF0aW9uID0gcmVkdWNlUm90YXRpb24oYXAgPT09IG51bGwgfHwgYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFwLmdldFJvdGF0aW9uKCkpO1xuICAgIHZhciBfZCA9IGFkanVzdERpbXNGb3JSb3RhdGlvbihyZWN0YW5nbGUsIHJvdGF0aW9uKSwgd2lkdGggPSBfZC53aWR0aCwgaGVpZ2h0ID0gX2QuaGVpZ2h0O1xuICAgIHZhciByb3RhdGUgPSByb3RhdGVJblBsYWNlKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZWN0YW5nbGUpLCB7IHJvdGF0aW9uOiByb3RhdGlvbiB9KSk7XG4gICAgdmFyIGJsYWNrID0gcmdiKDAsIDAsIDApO1xuICAgIHZhciBib3JkZXJDb2xvciA9IChfYiA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCb3JkZXJDb2xvcigpKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogYmxhY2s7XG4gICAgdmFyIG5vcm1hbEJhY2tncm91bmRDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCYWNrZ3JvdW5kQ29sb3IoKSk7XG4gICAgdmFyIGRvd25CYWNrZ3JvdW5kQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0QmFja2dyb3VuZENvbG9yKCksIDAuOCk7XG4gICAgLy8gVXBkYXRlIGNvbG9yXG4gICAgdmFyIHRleHRDb2xvciA9IChfYyA9IHdpZGdldENvbG9yICE9PSBudWxsICYmIHdpZGdldENvbG9yICE9PSB2b2lkIDAgPyB3aWRnZXRDb2xvciA6IGZpZWxkQ29sb3IpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGJsYWNrO1xuICAgIGlmICh3aWRnZXRDb2xvcikge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZSh3aWRnZXQsIHRleHRDb2xvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZShyYWRpb0dyb3VwLmFjcm9GaWVsZCwgdGV4dENvbG9yKTtcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHg6IHdpZHRoIC8gMixcbiAgICAgICAgeTogaGVpZ2h0IC8gMixcbiAgICAgICAgd2lkdGg6IHdpZHRoIC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGJvcmRlcldpZHRoOiBib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICBkb3RDb2xvcjogdGV4dENvbG9yLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICBvbjogX19zcHJlYWRBcnJheXMocm90YXRlLCBkcmF3UmFkaW9CdXR0b24oX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbG9yOiBub3JtYWxCYWNrZ3JvdW5kQ29sb3IsIGZpbGxlZDogdHJ1ZSB9KSkpLFxuICAgICAgICAgICAgb2ZmOiBfX3NwcmVhZEFycmF5cyhyb3RhdGUsIGRyYXdSYWRpb0J1dHRvbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgY29sb3I6IG5vcm1hbEJhY2tncm91bmRDb2xvciwgZmlsbGVkOiBmYWxzZSB9KSkpLFxuICAgICAgICB9LFxuICAgICAgICBkb3duOiB7XG4gICAgICAgICAgICBvbjogX19zcHJlYWRBcnJheXMocm90YXRlLCBkcmF3UmFkaW9CdXR0b24oX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbG9yOiBkb3duQmFja2dyb3VuZENvbG9yLCBmaWxsZWQ6IHRydWUgfSkpKSxcbiAgICAgICAgICAgIG9mZjogX19zcHJlYWRBcnJheXMocm90YXRlLCBkcmF3UmFkaW9CdXR0b24oX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbG9yOiBkb3duQmFja2dyb3VuZENvbG9yLCBmaWxsZWQ6IGZhbHNlIH0pKSksXG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGRlZmF1bHRCdXR0b25BcHBlYXJhbmNlUHJvdmlkZXIgPSBmdW5jdGlvbiAoYnV0dG9uLCB3aWRnZXQsIGZvbnQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIC8vIFRoZSBgL0RBYCBlbnRyeSBjYW4gYmUgYXQgdGhlIHdpZGdldCBvciBmaWVsZCBsZXZlbCAtIHNvIHdlIGhhbmRsZSBib3RoXG4gICAgdmFyIHdpZGdldENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHdpZGdldCk7XG4gICAgdmFyIGZpZWxkQ29sb3IgPSBnZXREZWZhdWx0Q29sb3IoYnV0dG9uLmFjcm9GaWVsZCk7XG4gICAgdmFyIHdpZGdldEZvbnRTaXplID0gZ2V0RGVmYXVsdEZvbnRTaXplKHdpZGdldCk7XG4gICAgdmFyIGZpZWxkRm9udFNpemUgPSBnZXREZWZhdWx0Rm9udFNpemUoYnV0dG9uLmFjcm9GaWVsZCk7XG4gICAgdmFyIHJlY3RhbmdsZSA9IHdpZGdldC5nZXRSZWN0YW5nbGUoKTtcbiAgICB2YXIgYXAgPSB3aWRnZXQuZ2V0QXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcygpO1xuICAgIHZhciBicyA9IHdpZGdldC5nZXRCb3JkZXJTdHlsZSgpO1xuICAgIHZhciBjYXB0aW9ucyA9IGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRDYXB0aW9ucygpO1xuICAgIHZhciBub3JtYWxUZXh0ID0gKF9hID0gY2FwdGlvbnMgPT09IG51bGwgfHwgY2FwdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhcHRpb25zLm5vcm1hbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgdmFyIGRvd25UZXh0ID0gKF9jID0gKF9iID0gY2FwdGlvbnMgPT09IG51bGwgfHwgY2FwdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhcHRpb25zLmRvd24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5vcm1hbFRleHQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xuICAgIHZhciBib3JkZXJXaWR0aCA9IChfZCA9IGJzID09PSBudWxsIHx8IGJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBicy5nZXRXaWR0aCgpKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwO1xuICAgIHZhciByb3RhdGlvbiA9IHJlZHVjZVJvdGF0aW9uKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRSb3RhdGlvbigpKTtcbiAgICB2YXIgX2YgPSBhZGp1c3REaW1zRm9yUm90YXRpb24ocmVjdGFuZ2xlLCByb3RhdGlvbiksIHdpZHRoID0gX2Yud2lkdGgsIGhlaWdodCA9IF9mLmhlaWdodDtcbiAgICB2YXIgcm90YXRlID0gcm90YXRlSW5QbGFjZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVjdGFuZ2xlKSwgeyByb3RhdGlvbjogcm90YXRpb24gfSkpO1xuICAgIHZhciBibGFjayA9IHJnYigwLCAwLCAwKTtcbiAgICB2YXIgYm9yZGVyQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0Qm9yZGVyQ29sb3IoKSk7XG4gICAgdmFyIG5vcm1hbEJhY2tncm91bmRDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCYWNrZ3JvdW5kQ29sb3IoKSk7XG4gICAgdmFyIGRvd25CYWNrZ3JvdW5kQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0QmFja2dyb3VuZENvbG9yKCksIDAuOCk7XG4gICAgdmFyIGJvdW5kcyA9IHtcbiAgICAgICAgeDogYm9yZGVyV2lkdGgsXG4gICAgICAgIHk6IGJvcmRlcldpZHRoLFxuICAgICAgICB3aWR0aDogd2lkdGggLSBib3JkZXJXaWR0aCAqIDIsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gYm9yZGVyV2lkdGggKiAyLFxuICAgIH07XG4gICAgdmFyIG5vcm1hbExheW91dCA9IGxheW91dFNpbmdsZWxpbmVUZXh0KG5vcm1hbFRleHQsIHtcbiAgICAgICAgYWxpZ25tZW50OiBUZXh0QWxpZ25tZW50LkNlbnRlcixcbiAgICAgICAgZm9udFNpemU6IHdpZGdldEZvbnRTaXplICE9PSBudWxsICYmIHdpZGdldEZvbnRTaXplICE9PSB2b2lkIDAgPyB3aWRnZXRGb250U2l6ZSA6IGZpZWxkRm9udFNpemUsXG4gICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgIH0pO1xuICAgIHZhciBkb3duTGF5b3V0ID0gbGF5b3V0U2luZ2xlbGluZVRleHQoZG93blRleHQsIHtcbiAgICAgICAgYWxpZ25tZW50OiBUZXh0QWxpZ25tZW50LkNlbnRlcixcbiAgICAgICAgZm9udFNpemU6IHdpZGdldEZvbnRTaXplICE9PSBudWxsICYmIHdpZGdldEZvbnRTaXplICE9PSB2b2lkIDAgPyB3aWRnZXRGb250U2l6ZSA6IGZpZWxkRm9udFNpemUsXG4gICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgIH0pO1xuICAgIC8vIFVwZGF0ZSBmb250IHNpemUgYW5kIGNvbG9yXG4gICAgdmFyIGZvbnRTaXplID0gTWF0aC5taW4obm9ybWFsTGF5b3V0LmZvbnRTaXplLCBkb3duTGF5b3V0LmZvbnRTaXplKTtcbiAgICB2YXIgdGV4dENvbG9yID0gKF9lID0gd2lkZ2V0Q29sb3IgIT09IG51bGwgJiYgd2lkZ2V0Q29sb3IgIT09IHZvaWQgMCA/IHdpZGdldENvbG9yIDogZmllbGRDb2xvcikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogYmxhY2s7XG4gICAgaWYgKHdpZGdldENvbG9yIHx8IHdpZGdldEZvbnRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBkYXRlRGVmYXVsdEFwcGVhcmFuY2Uod2lkZ2V0LCB0ZXh0Q29sb3IsIGZvbnQsIGZvbnRTaXplKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVwZGF0ZURlZmF1bHRBcHBlYXJhbmNlKGJ1dHRvbi5hY3JvRmllbGQsIHRleHRDb2xvciwgZm9udCwgZm9udFNpemUpO1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgeDogMCArIGJvcmRlcldpZHRoIC8gMixcbiAgICAgICAgeTogMCArIGJvcmRlcldpZHRoIC8gMixcbiAgICAgICAgd2lkdGg6IHdpZHRoIC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGJvcmRlcldpZHRoOiBib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgZm9udDogZm9udC5uYW1lLFxuICAgICAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub3JtYWw6IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0J1dHRvbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgY29sb3I6IG5vcm1hbEJhY2tncm91bmRDb2xvciwgdGV4dExpbmVzOiBbbm9ybWFsTGF5b3V0LmxpbmVdIH0pKSksXG4gICAgICAgIGRvd246IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0J1dHRvbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgY29sb3I6IGRvd25CYWNrZ3JvdW5kQ29sb3IsIHRleHRMaW5lczogW2Rvd25MYXlvdXQubGluZV0gfSkpKSxcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgZGVmYXVsdFRleHRGaWVsZEFwcGVhcmFuY2VQcm92aWRlciA9IGZ1bmN0aW9uICh0ZXh0RmllbGQsIHdpZGdldCwgZm9udCkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAvLyBUaGUgYC9EQWAgZW50cnkgY2FuIGJlIGF0IHRoZSB3aWRnZXQgb3IgZmllbGQgbGV2ZWwgLSBzbyB3ZSBoYW5kbGUgYm90aFxuICAgIHZhciB3aWRnZXRDb2xvciA9IGdldERlZmF1bHRDb2xvcih3aWRnZXQpO1xuICAgIHZhciBmaWVsZENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHRleHRGaWVsZC5hY3JvRmllbGQpO1xuICAgIHZhciB3aWRnZXRGb250U2l6ZSA9IGdldERlZmF1bHRGb250U2l6ZSh3aWRnZXQpO1xuICAgIHZhciBmaWVsZEZvbnRTaXplID0gZ2V0RGVmYXVsdEZvbnRTaXplKHRleHRGaWVsZC5hY3JvRmllbGQpO1xuICAgIHZhciByZWN0YW5nbGUgPSB3aWRnZXQuZ2V0UmVjdGFuZ2xlKCk7XG4gICAgdmFyIGFwID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MoKTtcbiAgICB2YXIgYnMgPSB3aWRnZXQuZ2V0Qm9yZGVyU3R5bGUoKTtcbiAgICB2YXIgdGV4dCA9IChfYSA9IHRleHRGaWVsZC5nZXRUZXh0KCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIHZhciBib3JkZXJXaWR0aCA9IChfYiA9IGJzID09PSBudWxsIHx8IGJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBicy5nZXRXaWR0aCgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgIHZhciByb3RhdGlvbiA9IHJlZHVjZVJvdGF0aW9uKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRSb3RhdGlvbigpKTtcbiAgICB2YXIgX2UgPSBhZGp1c3REaW1zRm9yUm90YXRpb24ocmVjdGFuZ2xlLCByb3RhdGlvbiksIHdpZHRoID0gX2Uud2lkdGgsIGhlaWdodCA9IF9lLmhlaWdodDtcbiAgICB2YXIgcm90YXRlID0gcm90YXRlSW5QbGFjZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVjdGFuZ2xlKSwgeyByb3RhdGlvbjogcm90YXRpb24gfSkpO1xuICAgIHZhciBibGFjayA9IHJnYigwLCAwLCAwKTtcbiAgICB2YXIgYm9yZGVyQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0Qm9yZGVyQ29sb3IoKSk7XG4gICAgdmFyIG5vcm1hbEJhY2tncm91bmRDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCYWNrZ3JvdW5kQ29sb3IoKSk7XG4gICAgdmFyIHRleHRMaW5lcztcbiAgICB2YXIgZm9udFNpemU7XG4gICAgdmFyIHBhZGRpbmcgPSB0ZXh0RmllbGQuaXNDb21iZWQoKSA/IDAgOiAxO1xuICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgIHg6IGJvcmRlcldpZHRoICsgcGFkZGluZyxcbiAgICAgICAgeTogYm9yZGVyV2lkdGggKyBwYWRkaW5nLFxuICAgICAgICB3aWR0aDogd2lkdGggLSAoYm9yZGVyV2lkdGggKyBwYWRkaW5nKSAqIDIsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gKGJvcmRlcldpZHRoICsgcGFkZGluZykgKiAyLFxuICAgIH07XG4gICAgaWYgKHRleHRGaWVsZC5pc011bHRpbGluZSgpKSB7XG4gICAgICAgIHZhciBsYXlvdXQgPSBsYXlvdXRNdWx0aWxpbmVUZXh0KHRleHQsIHtcbiAgICAgICAgICAgIGFsaWdubWVudDogdGV4dEZpZWxkLmdldEFsaWdubWVudCgpLFxuICAgICAgICAgICAgZm9udFNpemU6IHdpZGdldEZvbnRTaXplICE9PSBudWxsICYmIHdpZGdldEZvbnRTaXplICE9PSB2b2lkIDAgPyB3aWRnZXRGb250U2l6ZSA6IGZpZWxkRm9udFNpemUsXG4gICAgICAgICAgICBmb250OiBmb250LFxuICAgICAgICAgICAgYm91bmRzOiBib3VuZHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0ZXh0TGluZXMgPSBsYXlvdXQubGluZXM7XG4gICAgICAgIGZvbnRTaXplID0gbGF5b3V0LmZvbnRTaXplO1xuICAgIH1cbiAgICBlbHNlIGlmICh0ZXh0RmllbGQuaXNDb21iZWQoKSkge1xuICAgICAgICB2YXIgbGF5b3V0ID0gbGF5b3V0Q29tYmVkVGV4dCh0ZXh0LCB7XG4gICAgICAgICAgICBmb250U2l6ZTogd2lkZ2V0Rm9udFNpemUgIT09IG51bGwgJiYgd2lkZ2V0Rm9udFNpemUgIT09IHZvaWQgMCA/IHdpZGdldEZvbnRTaXplIDogZmllbGRGb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgICAgICBib3VuZHM6IGJvdW5kcyxcbiAgICAgICAgICAgIGNlbGxDb3VudDogKF9jID0gdGV4dEZpZWxkLmdldE1heExlbmd0aCgpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgdGV4dExpbmVzID0gbGF5b3V0LmNlbGxzO1xuICAgICAgICBmb250U2l6ZSA9IGxheW91dC5mb250U2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBsYXlvdXQgPSBsYXlvdXRTaW5nbGVsaW5lVGV4dCh0ZXh0LCB7XG4gICAgICAgICAgICBhbGlnbm1lbnQ6IHRleHRGaWVsZC5nZXRBbGlnbm1lbnQoKSxcbiAgICAgICAgICAgIGZvbnRTaXplOiB3aWRnZXRGb250U2l6ZSAhPT0gbnVsbCAmJiB3aWRnZXRGb250U2l6ZSAhPT0gdm9pZCAwID8gd2lkZ2V0Rm9udFNpemUgOiBmaWVsZEZvbnRTaXplLFxuICAgICAgICAgICAgZm9udDogZm9udCxcbiAgICAgICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGV4dExpbmVzID0gW2xheW91dC5saW5lXTtcbiAgICAgICAgZm9udFNpemUgPSBsYXlvdXQuZm9udFNpemU7XG4gICAgfVxuICAgIC8vIFVwZGF0ZSBmb250IHNpemUgYW5kIGNvbG9yXG4gICAgdmFyIHRleHRDb2xvciA9IChfZCA9IHdpZGdldENvbG9yICE9PSBudWxsICYmIHdpZGdldENvbG9yICE9PSB2b2lkIDAgPyB3aWRnZXRDb2xvciA6IGZpZWxkQ29sb3IpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGJsYWNrO1xuICAgIGlmICh3aWRnZXRDb2xvciB8fCB3aWRnZXRGb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwZGF0ZURlZmF1bHRBcHBlYXJhbmNlKHdpZGdldCwgdGV4dENvbG9yLCBmb250LCBmb250U2l6ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZSh0ZXh0RmllbGQuYWNyb0ZpZWxkLCB0ZXh0Q29sb3IsIGZvbnQsIGZvbnRTaXplKTtcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHg6IDAgKyBib3JkZXJXaWR0aCAvIDIsXG4gICAgICAgIHk6IDAgKyBib3JkZXJXaWR0aCAvIDIsXG4gICAgICAgIHdpZHRoOiB3aWR0aCAtIGJvcmRlcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIGJvcmRlcldpZHRoLFxuICAgICAgICBib3JkZXJXaWR0aDogYm9yZGVyV2lkdGggIT09IG51bGwgJiYgYm9yZGVyV2lkdGggIT09IHZvaWQgMCA/IGJvcmRlcldpZHRoIDogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgZm9udDogZm9udC5uYW1lLFxuICAgICAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgICAgIGNvbG9yOiBub3JtYWxCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIHRleHRMaW5lczogdGV4dExpbmVzLFxuICAgICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIH07XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd1RleHRGaWVsZChvcHRpb25zKSk7XG59O1xuZXhwb3J0IHZhciBkZWZhdWx0RHJvcGRvd25BcHBlYXJhbmNlUHJvdmlkZXIgPSBmdW5jdGlvbiAoZHJvcGRvd24sIHdpZGdldCwgZm9udCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIC8vIFRoZSBgL0RBYCBlbnRyeSBjYW4gYmUgYXQgdGhlIHdpZGdldCBvciBmaWVsZCBsZXZlbCAtIHNvIHdlIGhhbmRsZSBib3RoXG4gICAgdmFyIHdpZGdldENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHdpZGdldCk7XG4gICAgdmFyIGZpZWxkQ29sb3IgPSBnZXREZWZhdWx0Q29sb3IoZHJvcGRvd24uYWNyb0ZpZWxkKTtcbiAgICB2YXIgd2lkZ2V0Rm9udFNpemUgPSBnZXREZWZhdWx0Rm9udFNpemUod2lkZ2V0KTtcbiAgICB2YXIgZmllbGRGb250U2l6ZSA9IGdldERlZmF1bHRGb250U2l6ZShkcm9wZG93bi5hY3JvRmllbGQpO1xuICAgIHZhciByZWN0YW5nbGUgPSB3aWRnZXQuZ2V0UmVjdGFuZ2xlKCk7XG4gICAgdmFyIGFwID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MoKTtcbiAgICB2YXIgYnMgPSB3aWRnZXQuZ2V0Qm9yZGVyU3R5bGUoKTtcbiAgICB2YXIgdGV4dCA9IChfYSA9IGRyb3Bkb3duLmdldFNlbGVjdGVkKClbMF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIHZhciBib3JkZXJXaWR0aCA9IChfYiA9IGJzID09PSBudWxsIHx8IGJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBicy5nZXRXaWR0aCgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgIHZhciByb3RhdGlvbiA9IHJlZHVjZVJvdGF0aW9uKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRSb3RhdGlvbigpKTtcbiAgICB2YXIgX2QgPSBhZGp1c3REaW1zRm9yUm90YXRpb24ocmVjdGFuZ2xlLCByb3RhdGlvbiksIHdpZHRoID0gX2Qud2lkdGgsIGhlaWdodCA9IF9kLmhlaWdodDtcbiAgICB2YXIgcm90YXRlID0gcm90YXRlSW5QbGFjZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVjdGFuZ2xlKSwgeyByb3RhdGlvbjogcm90YXRpb24gfSkpO1xuICAgIHZhciBibGFjayA9IHJnYigwLCAwLCAwKTtcbiAgICB2YXIgYm9yZGVyQ29sb3IgPSBjb21wb25lbnRzVG9Db2xvcihhcCA9PT0gbnVsbCB8fCBhcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXAuZ2V0Qm9yZGVyQ29sb3IoKSk7XG4gICAgdmFyIG5vcm1hbEJhY2tncm91bmRDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCYWNrZ3JvdW5kQ29sb3IoKSk7XG4gICAgdmFyIHBhZGRpbmcgPSAxO1xuICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgIHg6IGJvcmRlcldpZHRoICsgcGFkZGluZyxcbiAgICAgICAgeTogYm9yZGVyV2lkdGggKyBwYWRkaW5nLFxuICAgICAgICB3aWR0aDogd2lkdGggLSAoYm9yZGVyV2lkdGggKyBwYWRkaW5nKSAqIDIsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gKGJvcmRlcldpZHRoICsgcGFkZGluZykgKiAyLFxuICAgIH07XG4gICAgdmFyIF9lID0gbGF5b3V0U2luZ2xlbGluZVRleHQodGV4dCwge1xuICAgICAgICBhbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQuTGVmdCxcbiAgICAgICAgZm9udFNpemU6IHdpZGdldEZvbnRTaXplICE9PSBudWxsICYmIHdpZGdldEZvbnRTaXplICE9PSB2b2lkIDAgPyB3aWRnZXRGb250U2l6ZSA6IGZpZWxkRm9udFNpemUsXG4gICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgIH0pLCBsaW5lID0gX2UubGluZSwgZm9udFNpemUgPSBfZS5mb250U2l6ZTtcbiAgICAvLyBVcGRhdGUgZm9udCBzaXplIGFuZCBjb2xvclxuICAgIHZhciB0ZXh0Q29sb3IgPSAoX2MgPSB3aWRnZXRDb2xvciAhPT0gbnVsbCAmJiB3aWRnZXRDb2xvciAhPT0gdm9pZCAwID8gd2lkZ2V0Q29sb3IgOiBmaWVsZENvbG9yKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBibGFjaztcbiAgICBpZiAod2lkZ2V0Q29sb3IgfHwgd2lkZ2V0Rm9udFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZSh3aWRnZXQsIHRleHRDb2xvciwgZm9udCwgZm9udFNpemUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdXBkYXRlRGVmYXVsdEFwcGVhcmFuY2UoZHJvcGRvd24uYWNyb0ZpZWxkLCB0ZXh0Q29sb3IsIGZvbnQsIGZvbnRTaXplKTtcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHg6IDAgKyBib3JkZXJXaWR0aCAvIDIsXG4gICAgICAgIHk6IDAgKyBib3JkZXJXaWR0aCAvIDIsXG4gICAgICAgIHdpZHRoOiB3aWR0aCAtIGJvcmRlcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIGJvcmRlcldpZHRoLFxuICAgICAgICBib3JkZXJXaWR0aDogYm9yZGVyV2lkdGggIT09IG51bGwgJiYgYm9yZGVyV2lkdGggIT09IHZvaWQgMCA/IGJvcmRlcldpZHRoIDogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgZm9udDogZm9udC5uYW1lLFxuICAgICAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgICAgIGNvbG9yOiBub3JtYWxCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIHRleHRMaW5lczogW2xpbmVdLFxuICAgICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIH07XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd1RleHRGaWVsZChvcHRpb25zKSk7XG59O1xuZXhwb3J0IHZhciBkZWZhdWx0T3B0aW9uTGlzdEFwcGVhcmFuY2VQcm92aWRlciA9IGZ1bmN0aW9uIChvcHRpb25MaXN0LCB3aWRnZXQsIGZvbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIC8vIFRoZSBgL0RBYCBlbnRyeSBjYW4gYmUgYXQgdGhlIHdpZGdldCBvciBmaWVsZCBsZXZlbCAtIHNvIHdlIGhhbmRsZSBib3RoXG4gICAgdmFyIHdpZGdldENvbG9yID0gZ2V0RGVmYXVsdENvbG9yKHdpZGdldCk7XG4gICAgdmFyIGZpZWxkQ29sb3IgPSBnZXREZWZhdWx0Q29sb3Iob3B0aW9uTGlzdC5hY3JvRmllbGQpO1xuICAgIHZhciB3aWRnZXRGb250U2l6ZSA9IGdldERlZmF1bHRGb250U2l6ZSh3aWRnZXQpO1xuICAgIHZhciBmaWVsZEZvbnRTaXplID0gZ2V0RGVmYXVsdEZvbnRTaXplKG9wdGlvbkxpc3QuYWNyb0ZpZWxkKTtcbiAgICB2YXIgcmVjdGFuZ2xlID0gd2lkZ2V0LmdldFJlY3RhbmdsZSgpO1xuICAgIHZhciBhcCA9IHdpZGdldC5nZXRBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzKCk7XG4gICAgdmFyIGJzID0gd2lkZ2V0LmdldEJvcmRlclN0eWxlKCk7XG4gICAgdmFyIGJvcmRlcldpZHRoID0gKF9hID0gYnMgPT09IG51bGwgfHwgYnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJzLmdldFdpZHRoKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgdmFyIHJvdGF0aW9uID0gcmVkdWNlUm90YXRpb24oYXAgPT09IG51bGwgfHwgYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFwLmdldFJvdGF0aW9uKCkpO1xuICAgIHZhciBfYyA9IGFkanVzdERpbXNGb3JSb3RhdGlvbihyZWN0YW5nbGUsIHJvdGF0aW9uKSwgd2lkdGggPSBfYy53aWR0aCwgaGVpZ2h0ID0gX2MuaGVpZ2h0O1xuICAgIHZhciByb3RhdGUgPSByb3RhdGVJblBsYWNlKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZWN0YW5nbGUpLCB7IHJvdGF0aW9uOiByb3RhdGlvbiB9KSk7XG4gICAgdmFyIGJsYWNrID0gcmdiKDAsIDAsIDApO1xuICAgIHZhciBib3JkZXJDb2xvciA9IGNvbXBvbmVudHNUb0NvbG9yKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRCb3JkZXJDb2xvcigpKTtcbiAgICB2YXIgbm9ybWFsQmFja2dyb3VuZENvbG9yID0gY29tcG9uZW50c1RvQ29sb3IoYXAgPT09IG51bGwgfHwgYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFwLmdldEJhY2tncm91bmRDb2xvcigpKTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbkxpc3QuZ2V0T3B0aW9ucygpO1xuICAgIHZhciBzZWxlY3RlZCA9IG9wdGlvbkxpc3QuZ2V0U2VsZWN0ZWQoKTtcbiAgICBpZiAob3B0aW9uTGlzdC5pc1NvcnRlZCgpKVxuICAgICAgICBvcHRpb25zLnNvcnQoKTtcbiAgICB2YXIgdGV4dCA9ICcnO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHRleHQgKz0gb3B0aW9uc1tpZHhdO1xuICAgICAgICBpZiAoaWR4IDwgbGVuIC0gMSlcbiAgICAgICAgICAgIHRleHQgKz0gJ1xcbic7XG4gICAgfVxuICAgIHZhciBwYWRkaW5nID0gMTtcbiAgICB2YXIgYm91bmRzID0ge1xuICAgICAgICB4OiBib3JkZXJXaWR0aCArIHBhZGRpbmcsXG4gICAgICAgIHk6IGJvcmRlcldpZHRoICsgcGFkZGluZyxcbiAgICAgICAgd2lkdGg6IHdpZHRoIC0gKGJvcmRlcldpZHRoICsgcGFkZGluZykgKiAyLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIChib3JkZXJXaWR0aCArIHBhZGRpbmcpICogMixcbiAgICB9O1xuICAgIHZhciBfZCA9IGxheW91dE11bHRpbGluZVRleHQodGV4dCwge1xuICAgICAgICBhbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQuTGVmdCxcbiAgICAgICAgZm9udFNpemU6IHdpZGdldEZvbnRTaXplICE9PSBudWxsICYmIHdpZGdldEZvbnRTaXplICE9PSB2b2lkIDAgPyB3aWRnZXRGb250U2l6ZSA6IGZpZWxkRm9udFNpemUsXG4gICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgIH0pLCBsaW5lcyA9IF9kLmxpbmVzLCBmb250U2l6ZSA9IF9kLmZvbnRTaXplLCBsaW5lSGVpZ2h0ID0gX2QubGluZUhlaWdodDtcbiAgICB2YXIgc2VsZWN0ZWRMaW5lcyA9IFtdO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2lkeF07XG4gICAgICAgIGlmIChzZWxlY3RlZC5pbmNsdWRlcyhsaW5lLnRleHQpKVxuICAgICAgICAgICAgc2VsZWN0ZWRMaW5lcy5wdXNoKGlkeCk7XG4gICAgfVxuICAgIHZhciBibHVlID0gcmdiKDE1MyAvIDI1NSwgMTkzIC8gMjU1LCAyMTggLyAyNTUpO1xuICAgIC8vIFVwZGF0ZSBmb250IHNpemUgYW5kIGNvbG9yXG4gICAgdmFyIHRleHRDb2xvciA9IChfYiA9IHdpZGdldENvbG9yICE9PSBudWxsICYmIHdpZGdldENvbG9yICE9PSB2b2lkIDAgPyB3aWRnZXRDb2xvciA6IGZpZWxkQ29sb3IpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGJsYWNrO1xuICAgIGlmICh3aWRnZXRDb2xvciB8fCB3aWRnZXRGb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwZGF0ZURlZmF1bHRBcHBlYXJhbmNlKHdpZGdldCwgdGV4dENvbG9yLCBmb250LCBmb250U2l6ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1cGRhdGVEZWZhdWx0QXBwZWFyYW5jZShvcHRpb25MaXN0LmFjcm9GaWVsZCwgdGV4dENvbG9yLCBmb250LCBmb250U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhyb3RhdGUsIGRyYXdPcHRpb25MaXN0KHtcbiAgICAgICAgeDogMCArIGJvcmRlcldpZHRoIC8gMixcbiAgICAgICAgeTogMCArIGJvcmRlcldpZHRoIC8gMixcbiAgICAgICAgd2lkdGg6IHdpZHRoIC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gYm9yZGVyV2lkdGgsXG4gICAgICAgIGJvcmRlcldpZHRoOiBib3JkZXJXaWR0aCAhPT0gbnVsbCAmJiBib3JkZXJXaWR0aCAhPT0gdm9pZCAwID8gYm9yZGVyV2lkdGggOiAwLFxuICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogdGV4dENvbG9yLFxuICAgICAgICBmb250OiBmb250Lm5hbWUsXG4gICAgICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICAgICAgY29sb3I6IG5vcm1hbEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgdGV4dExpbmVzOiBsaW5lcyxcbiAgICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodCxcbiAgICAgICAgc2VsZWN0ZWRDb2xvcjogYmx1ZSxcbiAgICAgICAgc2VsZWN0ZWRMaW5lczogc2VsZWN0ZWRMaW5lcyxcbiAgICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICB9KSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwZWFyYW5jZXMuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkRvY3VtZW50IGZyb20gXCIuL1BERkRvY3VtZW50XCI7XG5pbXBvcnQgeyBQREZQYWdlRW1iZWRkZXIsIFBERlJlZiB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBhc3NlcnRJcyB9IGZyb20gXCIuLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgUERGIHBhZ2UgdGhhdCBoYXMgYmVlbiBlbWJlZGRlZCBpbiBhIFtbUERGRG9jdW1lbnRdXS5cbiAqL1xudmFyIFBERkVtYmVkZGVkUGFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZFbWJlZGRlZFBhZ2UocmVmLCBkb2MsIGVtYmVkZGVyKSB7XG4gICAgICAgIHRoaXMuYWxyZWFkeUVtYmVkZGVkID0gZmFsc2U7XG4gICAgICAgIGFzc2VydElzKHJlZiwgJ3JlZicsIFtbUERGUmVmLCAnUERGUmVmJ11dKTtcbiAgICAgICAgYXNzZXJ0SXMoZG9jLCAnZG9jJywgW1tQREZEb2N1bWVudCwgJ1BERkRvY3VtZW50J11dKTtcbiAgICAgICAgYXNzZXJ0SXMoZW1iZWRkZXIsICdlbWJlZGRlcicsIFtbUERGUGFnZUVtYmVkZGVyLCAnUERGUGFnZUVtYmVkZGVyJ11dKTtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICB0aGlzLndpZHRoID0gZW1iZWRkZXIud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gZW1iZWRkZXIuaGVpZ2h0O1xuICAgICAgICB0aGlzLmVtYmVkZGVyID0gZW1iZWRkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhpcyBwYWdlIGFmdGVyIGJlaW5nIHNjYWxlZCBieSB0aGVcbiAgICAgKiBnaXZlbiBgZmFjdG9yYC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBlbWJlZGRlZFBhZ2Uud2lkdGggIC8vID0+IDUwMFxuICAgICAqIGVtYmVkZGVkUGFnZS5oZWlnaHQgLy8gPT4gMjUwXG4gICAgICpcbiAgICAgKiBjb25zdCBzY2FsZWQgPSBlbWJlZGRlZFBhZ2Uuc2NhbGUoMC41KVxuICAgICAqIHNjYWxlZC53aWR0aCAgLy8gPT4gMjUwXG4gICAgICogc2NhbGVkLmhlaWdodCAvLyA9PiAxMjVcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG9wZXJhdGlvbiBpcyBvZnRlbiB1c2VmdWwgYmVmb3JlIGRyYXdpbmcgYSBwYWdlIHdpdGhcbiAgICAgKiBbW1BERlBhZ2UuZHJhd1BhZ2VdXSB0byBjb21wdXRlIHRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBmYWN0b3IgVGhlIGZhY3RvciBieSB3aGljaCB0aGlzIHBhZ2Ugc2hvdWxkIGJlIHNjYWxlZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgcGFnZSBhZnRlciBiZWluZyBzY2FsZWQuXG4gICAgICovXG4gICAgUERGRW1iZWRkZWRQYWdlLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uIChmYWN0b3IpIHtcbiAgICAgICAgYXNzZXJ0SXMoZmFjdG9yLCAnZmFjdG9yJywgWydudW1iZXInXSk7XG4gICAgICAgIHJldHVybiB7IHdpZHRoOiB0aGlzLndpZHRoICogZmFjdG9yLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0ICogZmFjdG9yIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZW1iZWRkZWRQYWdlLnNpemUoKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIFBERkVtYmVkZGVkUGFnZS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUoMSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiA+ICoqTk9URToqKiBZb3UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBUaGVcbiAgICAgKiA+IFtbUERGRG9jdW1lbnQuc2F2ZV1dIGFuZCBbW1BERkRvY3VtZW50LnNhdmVBc0Jhc2U2NF1dIG1ldGhvZHMgd2lsbFxuICAgICAqID4gYXV0b21hdGljYWxseSBlbnN1cmUgYWxsIGVtYmVkZGFibGUgcGFnZXMgZ2V0IGVtYmVkZGVkLlxuICAgICAqXG4gICAgICogRW1iZWQgdGhpcyBlbWJlZGRhYmxlIHBhZ2UgaW4gaXRzIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2hlbiB0aGUgZW1iZWRkaW5nIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIFBERkVtYmVkZGVkUGFnZS5wcm90b3R5cGUuZW1iZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMuYWxyZWFkeUVtYmVkZGVkKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRkZXIuZW1iZWRJbnRvQ29udGV4dCh0aGlzLmRvYy5jb250ZXh0LCB0aGlzLnJlZildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFscmVhZHlFbWJlZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZEb2N1bWVudC5lbWJlZFBkZl1dIGFuZFxuICAgICAqID4gW1tQREZEb2N1bWVudC5lbWJlZFBhZ2VdXSBtZXRob2RzLCB3aGljaCB3aWxsIGNyZWF0ZSBpbnN0YW5jZXMgb2ZcbiAgICAgKiA+IFtbUERGRW1iZWRkZWRQYWdlXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERkVtYmVkZGVkUGFnZV1dIGZyb20gYW4gZXhpc3RpbmcgcmVmIGFuZCBlbWJlZGRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHJlZiBUaGUgdW5pcXVlIHJlZmVyZW5jZSBmb3IgdGhpcyBlbWJlZGRlZCBwYWdlLlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoZSBlbWJlZGRlZCBwYWdlIHdpbGwgYmVsb25nLlxuICAgICAqIEBwYXJhbSBlbWJlZGRlciBUaGUgZW1iZWRkZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gZW1iZWQgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgUERGRW1iZWRkZWRQYWdlLm9mID0gZnVuY3Rpb24gKHJlZiwgZG9jLCBlbWJlZGRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFBERkVtYmVkZGVkUGFnZShyZWYsIGRvYywgZW1iZWRkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkVtYmVkZGVkUGFnZTtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZFbWJlZGRlZFBhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZFbWJlZGRlZFBhZ2UuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkRvY3VtZW50IGZyb20gXCIuL1BERkRvY3VtZW50XCI7XG5pbXBvcnQgeyBDdXN0b21Gb250RW1iZWRkZXIsIFBERlJlZiwgU3RhbmRhcmRGb250RW1iZWRkZXIsIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRPclVuZGVmaW5lZCB9IGZyb20gXCIuLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgZm9udCB0aGF0IGhhcyBiZWVuIGVtYmVkZGVkIGluIGEgW1tQREZEb2N1bWVudF1dLlxuICovXG52YXIgUERGRm9udCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZGb250KHJlZiwgZG9jLCBlbWJlZGRlcikge1xuICAgICAgICB0aGlzLm1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgYXNzZXJ0SXMocmVmLCAncmVmJywgW1tQREZSZWYsICdQREZSZWYnXV0pO1xuICAgICAgICBhc3NlcnRJcyhkb2MsICdkb2MnLCBbW1BERkRvY3VtZW50LCAnUERGRG9jdW1lbnQnXV0pO1xuICAgICAgICBhc3NlcnRJcyhlbWJlZGRlciwgJ2VtYmVkZGVyJywgW1xuICAgICAgICAgICAgW0N1c3RvbUZvbnRFbWJlZGRlciwgJ0N1c3RvbUZvbnRFbWJlZGRlciddLFxuICAgICAgICAgICAgW1N0YW5kYXJkRm9udEVtYmVkZGVyLCAnU3RhbmRhcmRGb250RW1iZWRkZXInXSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5uYW1lID0gZW1iZWRkZXIuZm9udE5hbWU7XG4gICAgICAgIHRoaXMuZW1iZWRkZXIgPSBlbWJlZGRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gVGhlXG4gICAgICogPiBbW1BERlBhZ2UuZHJhd1RleHRdXSBtZXRob2Qgd2lsbCBhdXRvbWF0aWNhbGx5IGVuY29kZSB0aGUgdGV4dCBpdCBpc1xuICAgICAqID4gZ2l2ZW4uXG4gICAgICpcbiAgICAgKiBFbmNvZGVzIGEgc3RyaW5nIG9mIHRleHQgaW4gdGhpcyBmb250LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRleHQgVGhlIHRleHQgdG8gYmUgZW5jb2RlZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgZW5jb2RlZCB0ZXh0IGFzIGEgaGV4IHN0cmluZy5cbiAgICAgKi9cbiAgICBQREZGb250LnByb3RvdHlwZS5lbmNvZGVUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgYXNzZXJ0SXModGV4dCwgJ3RleHQnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdGhpcy5tb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYmVkZGVyLmVuY29kZVRleHQodGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZWFzdXJlIHRoZSB3aWR0aCBvZiBhIHN0cmluZyBvZiB0ZXh0IGRyYXduIGluIHRoaXMgZm9udCBhdCBhIGdpdmVuIHNpemUuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB3aWR0aCA9IGZvbnQud2lkdGhPZlRleHRBdFNpemUoJ0ZvbyBCYXIgUXV4IEJheicsIDM2KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBzdHJpbmcgb2YgdGV4dCB0byBiZSBtZWFzdXJlZC5cbiAgICAgKiBAcGFyYW0gc2l6ZSBUaGUgZm9udCBzaXplIHRvIGJlIHVzZWQgZm9yIHRoaXMgbWVhc3VyZW1lbnQuXG4gICAgICogQHJldHVybnMgVGhlIHdpZHRoIG9mIHRoZSBzdHJpbmcgb2YgdGV4dCB3aGVuIGRyYXduIGluIHRoaXMgZm9udCBhdCB0aGVcbiAgICAgKiAgICAgICAgICBnaXZlbiBzaXplLlxuICAgICAqL1xuICAgIFBERkZvbnQucHJvdG90eXBlLndpZHRoT2ZUZXh0QXRTaXplID0gZnVuY3Rpb24gKHRleHQsIHNpemUpIHtcbiAgICAgICAgYXNzZXJ0SXModGV4dCwgJ3RleHQnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgYXNzZXJ0SXMoc2l6ZSwgJ3NpemUnLCBbJ251bWJlciddKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZXIud2lkdGhPZlRleHRBdFNpemUodGV4dCwgc2l6ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZWFzdXJlIHRoZSBoZWlnaHQgb2YgdGhpcyBmb250IGF0IGEgZ2l2ZW4gc2l6ZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWlnaHQgPSBmb250LmhlaWdodEF0U2l6ZSgyNClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSBgb3B0aW9ucy5kZXNjZW5kZXJgIHZhbHVlIGNvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBmb250J3NcbiAgICAgKiBkZXNjZW5kZXIgaXMgaW5jbHVkZWQgaW4gdGhlIGhlaWdodCBjYWxjdWxhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaXplIFRoZSBmb250IHNpemUgdG8gYmUgdXNlZCBmb3IgdGhpcyBtZWFzdXJlbWVudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBiZSB1c2VkIHdoZW4gY29tcHV0aW5nIHRoaXMgbWVhc3VyZW1lbnQuXG4gICAgICogQHJldHVybnMgVGhlIGhlaWdodCBvZiB0aGlzIGZvbnQgYXQgdGhlIGdpdmVuIHNpemUuXG4gICAgICovXG4gICAgUERGRm9udC5wcm90b3R5cGUuaGVpZ2h0QXRTaXplID0gZnVuY3Rpb24gKHNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBhc3NlcnRJcyhzaXplLCAnc2l6ZScsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVzY2VuZGVyLCAnb3B0aW9ucy5kZXNjZW5kZXInLCBbJ2Jvb2xlYW4nXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYmVkZGVyLmhlaWdodE9mRm9udEF0U2l6ZShzaXplLCB7XG4gICAgICAgICAgICBkZXNjZW5kZXI6IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZXNjZW5kZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgZm9udCBzaXplIGF0IHdoaWNoIHRoaXMgZm9udCBpcyBhIGdpdmVuIGhlaWdodC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb250U2l6ZSA9IGZvbnQuc2l6ZUF0SGVpZ2h0KDEyKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIGhlaWdodCB0byBiZSB1c2VkIGZvciB0aGlzIGNhbGN1bGF0aW9uLlxuICAgICAqIEByZXR1cm5zIFRoZSBmb250IHNpemUgYXQgd2hpY2ggdGhpcyBmb250IGlzIHRoZSBnaXZlbiBoZWlnaHQuXG4gICAgICovXG4gICAgUERGRm9udC5wcm90b3R5cGUuc2l6ZUF0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICBhc3NlcnRJcyhoZWlnaHQsICdoZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZXIuc2l6ZU9mRm9udEF0SGVpZ2h0KGhlaWdodCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNldCBvZiB1bmljb2RlIGNvZGUgcG9pbnRzIHRoYXQgY2FuIGJlIHJlcHJlc2VudGVkIGJ5IHRoaXMgZm9udC5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2V0IG9mIHVuaWNvZGUgY29kZSBwb2ludHMgc3VwcG9ydGVkIGJ5IHRoaXMgZm9udC5cbiAgICAgKi9cbiAgICBQREZGb250LnByb3RvdHlwZS5nZXRDaGFyYWN0ZXJTZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmVtYmVkZGVyIGluc3RhbmNlb2YgU3RhbmRhcmRGb250RW1iZWRkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtYmVkZGVyLmVuY29kaW5nLnN1cHBvcnRlZENvZGVQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWJlZGRlci5mb250LmNoYXJhY3RlclNldDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gVGhlXG4gICAgICogPiBbW1BERkRvY3VtZW50LnNhdmVdXSBhbmQgW1tQREZEb2N1bWVudC5zYXZlQXNCYXNlNjRdXSBtZXRob2RzIHdpbGxcbiAgICAgKiA+IGF1dG9tYXRpY2FsbHkgZW5zdXJlIGFsbCBmb250cyBnZXQgZW1iZWRkZWQuXG4gICAgICpcbiAgICAgKiBFbWJlZCB0aGlzIGZvbnQgaW4gaXRzIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2hlbiB0aGUgZW1iZWRkaW5nIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIFBERkZvbnQucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubW9kaWZpZWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5lbWJlZGRlci5lbWJlZEludG9Db250ZXh0KHRoaXMuZG9jLmNvbnRleHQsIHRoaXMucmVmKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gSW5zdGVhZCxcbiAgICAgKiA+IGNvbnNpZGVyIHVzaW5nIHRoZSBbW1BERkRvY3VtZW50LmVtYmVkRm9udF1dIGFuZFxuICAgICAqID4gW1tQREZEb2N1bWVudC5lbWJlZFN0YW5kYXJkRm9udF1dIG1ldGhvZHMsIHdoaWNoIHdpbGwgY3JlYXRlIGluc3RhbmNlc1xuICAgICAqID4gb2YgW1tQREZGb250XV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERkZvbnRdXSBmcm9tIGFuIGV4aXN0aW5nIHJlZiBhbmQgZW1iZWRkZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWYgVGhlIHVuaXF1ZSByZWZlcmVuY2UgZm9yIHRoaXMgZm9udC5cbiAgICAgKiBAcGFyYW0gZG9jIFRoZSBkb2N1bWVudCB0byB3aGljaCB0aGUgZm9udCB3aWxsIGJlbG9uZy5cbiAgICAgKiBAcGFyYW0gZW1iZWRkZXIgVGhlIGVtYmVkZGVyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGVtYmVkIHRoZSBmb250LlxuICAgICAqL1xuICAgIFBERkZvbnQub2YgPSBmdW5jdGlvbiAocmVmLCBkb2MsIGVtYmVkZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGRm9udChyZWYsIGRvYywgZW1iZWRkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkZvbnQ7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGRm9udDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkZvbnQuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkRvY3VtZW50IGZyb20gXCIuL1BERkRvY3VtZW50XCI7XG5pbXBvcnQgeyBKcGVnRW1iZWRkZXIsIFBERlJlZiwgUG5nRW1iZWRkZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgYXNzZXJ0SXMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbWFnZSB0aGF0IGhhcyBiZWVuIGVtYmVkZGVkIGluIGEgW1tQREZEb2N1bWVudF1dLlxuICovXG52YXIgUERGSW1hZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUERGSW1hZ2UocmVmLCBkb2MsIGVtYmVkZGVyKSB7XG4gICAgICAgIGFzc2VydElzKHJlZiwgJ3JlZicsIFtbUERGUmVmLCAnUERGUmVmJ11dKTtcbiAgICAgICAgYXNzZXJ0SXMoZG9jLCAnZG9jJywgW1tQREZEb2N1bWVudCwgJ1BERkRvY3VtZW50J11dKTtcbiAgICAgICAgYXNzZXJ0SXMoZW1iZWRkZXIsICdlbWJlZGRlcicsIFtcbiAgICAgICAgICAgIFtKcGVnRW1iZWRkZXIsICdKcGVnRW1iZWRkZXInXSxcbiAgICAgICAgICAgIFtQbmdFbWJlZGRlciwgJ1BuZ0VtYmVkZGVyJ10sXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgIHRoaXMud2lkdGggPSBlbWJlZGRlci53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBlbWJlZGRlci5oZWlnaHQ7XG4gICAgICAgIHRoaXMuZW1iZWRkZXIgPSBlbWJlZGRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGlzIGltYWdlIGFmdGVyIGJlaW5nIHNjYWxlZCBieSB0aGVcbiAgICAgKiBnaXZlbiBgZmFjdG9yYC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbWFnZS53aWR0aCAgLy8gPT4gNTAwXG4gICAgICogaW1hZ2UuaGVpZ2h0IC8vID0+IDI1MFxuICAgICAqXG4gICAgICogY29uc3Qgc2NhbGVkID0gaW1hZ2Uuc2NhbGUoMC41KVxuICAgICAqIHNjYWxlZC53aWR0aCAgLy8gPT4gMjUwXG4gICAgICogc2NhbGVkLmhlaWdodCAvLyA9PiAxMjVcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG9wZXJhdGlvbiBpcyBvZnRlbiB1c2VmdWwgYmVmb3JlIGRyYXdpbmcgYW4gaW1hZ2Ugd2l0aFxuICAgICAqIFtbUERGUGFnZS5kcmF3SW1hZ2VdXSB0byBjb21wdXRlIHRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBmYWN0b3IgVGhlIGZhY3RvciBieSB3aGljaCB0aGlzIGltYWdlIHNob3VsZCBiZSBzY2FsZWQuXG4gICAgICogQHJldHVybnMgVGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGltYWdlIGFmdGVyIGJlaW5nIHNjYWxlZC5cbiAgICAgKi9cbiAgICBQREZJbWFnZS5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiAoZmFjdG9yKSB7XG4gICAgICAgIGFzc2VydElzKGZhY3RvciwgJ2ZhY3RvcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICByZXR1cm4geyB3aWR0aDogdGhpcy53aWR0aCAqIGZhY3RvciwgaGVpZ2h0OiB0aGlzLmhlaWdodCAqIGZhY3RvciB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoaXMgaW1hZ2UgYWZ0ZXIgc2NhbGluZyBpdCBhcyBsYXJnZSBhc1xuICAgICAqIHBvc3NpYmxlIHdoaWxlIG1haW50YWluaW5nIGl0cyBhc3BlY3QgcmF0aW8gYW5kIG5vdCBleGNlZWRpbmcgdGhlXG4gICAgICogc3BlY2lmaWVkIGB3aWR0aGAgYW5kIGBoZWlnaHRgLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBcbiAgICAgKiBpbWFnZS53aWR0aCAgLy8gPT4gNTAwXG4gICAgICogaW1hZ2UuaGVpZ2h0IC8vID0+IDI1MFxuICAgICAqXG4gICAgICogY29uc3Qgc2NhbGVkID0gaW1hZ2Uuc2NhbGVUb0ZpdCg3NTAsIDEwMDApXG4gICAgICogc2NhbGVkLndpZHRoICAvLyA9PiA3NTBcbiAgICAgKiBzY2FsZWQuaGVpZ2h0IC8vID0+IDM3NVxuICAgICAqIGBgYFxuICAgICAqIFRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBwYXJhbWV0ZXJzIGNhbiBhbHNvIGJlIHRob3VnaHQgb2YgYXMgdGhlIHdpZHRoXG4gICAgICogYW5kIGhlaWdodCBvZiBhIGJveCB0aGF0IHRoZSBzY2FsZWQgaW1hZ2UgbXVzdCBmaXQgd2l0aGluLlxuICAgICAqIEBwYXJhbSB3aWR0aCBUaGUgYm91bmRpbmcgYm94J3Mgd2lkdGguXG4gICAgICogQHBhcmFtIGhlaWdodCBUaGUgYm91bmRpbmcgYm94J3MgaGVpZ2h0LlxuICAgICAqIEByZXR1cm5zIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBpbWFnZSBhZnRlciBiZWluZyBzY2FsZWQuXG4gICAgICovXG4gICAgUERGSW1hZ2UucHJvdG90eXBlLnNjYWxlVG9GaXQgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBhc3NlcnRJcyh3aWR0aCwgJ3dpZHRoJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKGhlaWdodCwgJ2hlaWdodCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICB2YXIgaW1nV2lkdGhTY2FsZSA9IHdpZHRoIC8gdGhpcy53aWR0aDtcbiAgICAgICAgdmFyIGltZ0hlaWdodFNjYWxlID0gaGVpZ2h0IC8gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHZhciBzY2FsZSA9IE1hdGgubWluKGltZ1dpZHRoU2NhbGUsIGltZ0hlaWdodFNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUoc2NhbGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoaXMgaW1hZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBpbWFnZS5zaXplKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgUERGSW1hZ2UucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxlKDEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gVGhlXG4gICAgICogPiBbW1BERkRvY3VtZW50LnNhdmVdXSBhbmQgW1tQREZEb2N1bWVudC5zYXZlQXNCYXNlNjRdXSBtZXRob2RzIHdpbGxcbiAgICAgKiA+IGF1dG9tYXRpY2FsbHkgZW5zdXJlIGFsbCBpbWFnZXMgZ2V0IGVtYmVkZGVkLlxuICAgICAqXG4gICAgICogRW1iZWQgdGhpcyBpbWFnZSBpbiBpdHMgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHRoZSBlbWJlZGRpbmcgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgUERGSW1hZ2UucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGRvYywgcmVmO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVtYmVkZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBpbWFnZSBzaG91bGQgb25seSBiZSBlbWJlZGRlZCBvbmNlLiBJZiB0aGVyZSdzIGEgcGVuZGluZyBlbWJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlcmF0aW9uIHRoZW4gd2FpdCBvbiBpdC4gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gc3RhcnQgdGhlIGVtYmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVtYmVkVGFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgZG9jID0gX2EuZG9jLCByZWYgPSBfYS5yZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWJlZFRhc2sgPSB0aGlzLmVtYmVkZGVyLmVtYmVkSW50b0NvbnRleHQoZG9jLmNvbnRleHQsIHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmVtYmVkVGFza107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNsZWFyIGB0aGlzLmVtYmVkZGVyYCBzbyB0aGF0IHRoZSBpbmRpcmVjdGx5IHJlZmVyZW5jZWQgaW1hZ2UgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkLCB0aHVzIGF2b2lkaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0hvcGRpbmcvcGRmLWxpYi9wdWxsLzEwMzIvZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYmVkZGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZEb2N1bWVudC5lbWJlZFBuZ11dIGFuZCBbW1BERkRvY3VtZW50LmVtYmVkSnBnXV1cbiAgICAgKiA+IG1ldGhvZHMsIHdoaWNoIHdpbGwgY3JlYXRlIGluc3RhbmNlcyBvZiBbW1BERkltYWdlXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERkltYWdlXV0gZnJvbSBhbiBleGlzdGluZyByZWYgYW5kIGVtYmVkZGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB1bmlxdWUgcmVmZXJlbmNlIGZvciB0aGlzIGltYWdlLlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoZSBpbWFnZSB3aWxsIGJlbG9uZy5cbiAgICAgKiBAcGFyYW0gZW1iZWRkZXIgVGhlIGVtYmVkZGVyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGVtYmVkIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICBQREZJbWFnZS5vZiA9IGZ1bmN0aW9uIChyZWYsIGRvYywgZW1iZWRkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZJbWFnZShyZWYsIGRvYywgZW1iZWRkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkltYWdlO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkltYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGSW1hZ2UuanMubWFwIiwiZXhwb3J0IHZhciBJbWFnZUFsaWdubWVudDtcbihmdW5jdGlvbiAoSW1hZ2VBbGlnbm1lbnQpIHtcbiAgICBJbWFnZUFsaWdubWVudFtJbWFnZUFsaWdubWVudFtcIkxlZnRcIl0gPSAwXSA9IFwiTGVmdFwiO1xuICAgIEltYWdlQWxpZ25tZW50W0ltYWdlQWxpZ25tZW50W1wiQ2VudGVyXCJdID0gMV0gPSBcIkNlbnRlclwiO1xuICAgIEltYWdlQWxpZ25tZW50W0ltYWdlQWxpZ25tZW50W1wiUmlnaHRcIl0gPSAyXSA9IFwiUmlnaHRcIjtcbn0pKEltYWdlQWxpZ25tZW50IHx8IChJbWFnZUFsaWdubWVudCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGlnbm1lbnQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGRG9jdW1lbnQgZnJvbSBcIi4uL1BERkRvY3VtZW50XCI7XG5pbXBvcnQgeyBjb2xvclRvQ29tcG9uZW50cywgc2V0RmlsbGluZ0NvbG9yIH0gZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHsgdG9EZWdyZWVzLCByb3RhdGVSZWN0YW5nbGUsIHJlZHVjZVJvdGF0aW9uLCBhZGp1c3REaW1zRm9yUm90YXRpb24sIGRlZ3JlZXMsIH0gZnJvbSBcIi4uL3JvdGF0aW9uc1wiO1xuaW1wb3J0IHsgUERGUmVmLCBQREZXaWRnZXRBbm5vdGF0aW9uLCBQREZOYW1lLCBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yLCBBY3JvRmllbGRGbGFncywgUERGQWNyb1Rlcm1pbmFsLCBBbm5vdGF0aW9uRmxhZ3MsIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRNdWx0aXBsZSwgYXNzZXJ0T3JVbmRlZmluZWQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IEltYWdlQWxpZ25tZW50IH0gZnJvbSAnLi4vaW1hZ2UnO1xuaW1wb3J0IHsgZHJhd0ltYWdlLCByb3RhdGVJblBsYWNlIH0gZnJvbSAnLi4vb3BlcmF0aW9ucyc7XG5leHBvcnQgdmFyIGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54LCAnb3B0aW9ucy54JywgWydudW1iZXInXSk7XG4gICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnksICdvcHRpb25zLnknLCBbJ251bWJlciddKTtcbiAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2lkdGgsICdvcHRpb25zLndpZHRoJywgWydudW1iZXInXSk7XG4gICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlaWdodCwgJ29wdGlvbnMuaGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRleHRDb2xvciwgJ29wdGlvbnMudGV4dENvbG9yJywgW1xuICAgICAgICBbT2JqZWN0LCAnQ29sb3InXSxcbiAgICBdKTtcbiAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLCAnb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3InLCBbXG4gICAgICAgIFtPYmplY3QsICdDb2xvciddLFxuICAgIF0pO1xuICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ib3JkZXJDb2xvciwgJ29wdGlvbnMuYm9yZGVyQ29sb3InLCBbXG4gICAgICAgIFtPYmplY3QsICdDb2xvciddLFxuICAgIF0pO1xuICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ib3JkZXJXaWR0aCwgJ29wdGlvbnMuYm9yZGVyV2lkdGgnLCBbJ251bWJlciddKTtcbiAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm90YXRlLCAnb3B0aW9ucy5yb3RhdGUnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbn07XG4vKipcbiAqIFJlcHJlc2VudHMgYSBmaWVsZCBvZiBhIFtbUERGRm9ybV1dLlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgZWZmZWN0aXZlbHkgYWJzdHJhY3QuIEFsbCBmaWVsZHMgaW4gYSBbW1BERkZvcm1dXSB3aWxsXG4gKiBhY3R1YWxseSBiZSBhbiBpbnN0YW5jZSBvZiBhIHN1YmNsYXNzIG9mIHRoaXMgY2xhc3MuXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggZmllbGQgaW4gYSBQREYgaXMgcmVwcmVzZW50ZWQgYnkgYSBzaW5nbGUgZmllbGQgb2JqZWN0LlxuICogSG93ZXZlciwgYSBnaXZlbiBmaWVsZCBvYmplY3QgbWF5IGJlIHJlbmRlcmVkIGF0IG11bHRpcGxlIGxvY2F0aW9ucyB3aXRoaW5cbiAqIHRoZSBkb2N1bWVudCAoYWNyb3NzIG9uZSBvciBtb3JlIHBhZ2VzKS4gVGhlIHJlbmRlcmluZyBvZiBhIGZpZWxkIGlzXG4gKiBjb250cm9sbGVkIGJ5IGl0cyB3aWRnZXRzLiBFYWNoIHdpZGdldCBjYXVzZXMgaXRzIGZpZWxkIHRvIGJlIGRpc3BsYXllZCBhdCBhXG4gKiBwYXJ0aWN1bGFyIGxvY2F0aW9uIGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBNb3N0IG9mIHRoZSB0aW1lIGVhY2ggZmllbGQgaW4gYSBQREYgaGFzIG9ubHkgYSBzaW5nbGUgd2lkZ2V0LCBhbmQgdGh1cyBpc1xuICogb25seSByZW5kZXJlZCBvbmNlLiBIb3dldmVyLCBpZiBhIGZpZWxkIGlzIHJlbmRlcmVkIG11bHRpcGxlIHRpbWVzLCBpdCB3aWxsXG4gKiBoYXZlIG11bHRpcGxlIHdpZGdldHMgLSBvbmUgZm9yIGVhY2ggbG9jYXRpb24gaXQgaXMgcmVuZGVyZWQuXG4gKlxuICogVGhpcyBhYnN0cmFjdGlvbiBvZiBmaWVsZCBvYmplY3RzIGFuZCB3aWRnZXRzIGlzIGRlZmluZWQgaW4gdGhlIFBERlxuICogc3BlY2lmaWNhdGlvbiBhbmQgZGljdGF0ZXMgaG93IFBERiBmaWxlcyBzdG9yZSBmaWVsZHMgYW5kIHdoZXJlIHRoZXkgYXJlXG4gKiB0byBiZSByZW5kZXJlZC5cbiAqL1xudmFyIFBERkZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkZpZWxkKGFjcm9GaWVsZCwgcmVmLCBkb2MpIHtcbiAgICAgICAgYXNzZXJ0SXMoYWNyb0ZpZWxkLCAnYWNyb0ZpZWxkJywgW1tQREZBY3JvVGVybWluYWwsICdQREZBY3JvVGVybWluYWwnXV0pO1xuICAgICAgICBhc3NlcnRJcyhyZWYsICdyZWYnLCBbW1BERlJlZiwgJ1BERlJlZiddXSk7XG4gICAgICAgIGFzc2VydElzKGRvYywgJ2RvYycsIFtbUERGRG9jdW1lbnQsICdQREZEb2N1bWVudCddXSk7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkID0gYWNyb0ZpZWxkO1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUgb2YgdGhpcyBmaWVsZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmaWVsZHMgPSBmb3JtLmdldEZpZWxkcygpXG4gICAgICogZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAqICAgY29uc3QgbmFtZSA9IGZpZWxkLmdldE5hbWUoKVxuICAgICAqICAgY29uc29sZS5sb2coJ0ZpZWxkIG5hbWU6JywgbmFtZSlcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIE5vdGUgdGhhdCBQREYgZmllbGRzIGFyZSBzdHJ1Y3R1cmVkIGFzIGEgdHJlZS4gRWFjaCBmaWVsZCBpcyB0aGVcbiAgICAgKiBkZXNjZW5kZW50IG9mIGEgc2VyaWVzIG9mIGFuY2VzdG9yIG5vZGVzIGFsbCB0aGUgd2F5IHVwIHRvIHRoZSBmb3JtIG5vZGUsXG4gICAgICogd2hpY2ggaXMgYWx3YXlzIHRoZSByb290IG9mIHRoZSB0cmVlLiBFYWNoIG5vZGUgaW4gdGhlIHRyZWUgKGV4Y2VwdCBmb3JcbiAgICAgKiB0aGUgZm9ybSBub2RlKSBoYXMgYSBwYXJ0aWFsIG5hbWUuIFBhcnRpYWwgbmFtZXMgY2FuIGJlIGNvbXBvc2VkIG9mIGFueVxuICAgICAqIHVuaWNvZGUgY2hhcmFjdGVycyBleGNlcHQgYSBwZXJpb2QgKGAuYCkuIFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBvZiBhXG4gICAgICogZmllbGQgaXMgY29tcG9zZWQgb2YgdGhlIHBhcnRpYWwgbmFtZXMgb2YgYWxsIGl0cyBhbmNlc3RvcnMgam9pbmVkXG4gICAgICogd2l0aCBwZXJpb2RzLiBUaGlzIG1lYW5zIHRoYXQgc3BsaXR0aW5nIHRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBvblxuICAgICAqIHBlcmlvZHMgYW5kIHRha2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSByZXN1bHRpbmcgYXJyYXkgd2lsbCBnaXZlIHlvdVxuICAgICAqIHRoZSBwYXJ0aWFsIG5hbWUgb2YgYSBzcGVjaWZpYyBmaWVsZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUgb2YgdGhpcyBmaWVsZC5cbiAgICAgKi9cbiAgICBQREZGaWVsZC5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5hY3JvRmllbGQuZ2V0RnVsbHlRdWFsaWZpZWROYW1lKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBmaWVsZCBpcyByZWFkIG9ubHkuIFRoaXMgbWVhbnMgdGhhdCBQREYgcmVhZGVyc1xuICAgICAqIHdpbGwgbm90IGFsbG93IHVzZXJzIHRvIGludGVyYWN0IHdpdGggdGhlIGZpZWxkIG9yIGNoYW5nZSBpdHMgdmFsdWUuIFNlZVxuICAgICAqIFtbUERGRmllbGQuZW5hYmxlUmVhZE9ubHldXSBhbmQgW1tQREZGaWVsZC5kaXNhYmxlUmVhZE9ubHldXS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnc29tZS5maWVsZCcpXG4gICAgICogaWYgKGZpZWxkLmlzUmVhZE9ubHkoKSkgY29uc29sZS5sb2coJ1JlYWQgb25seSBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGEgcmVhZCBvbmx5IGZpZWxkLlxuICAgICAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5pc1JlYWRPbmx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvRmllbGRGbGFncy5SZWFkT25seSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IFBERiByZWFkZXJzIGZyb20gYWxsb3dpbmcgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCB0aGlzIGZpZWxkIG9yXG4gICAgICogY2hhbmdlIGl0cyB2YWx1ZS4gVGhlIGZpZWxkIHdpbGwgbm90IHJlc3BvbmQgdG8gbW91c2Ugb3Iga2V5Ym9hcmQgaW5wdXQuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmaWVsZCA9IGZvcm0uZ2V0RmllbGQoJ3NvbWUuZmllbGQnKVxuICAgICAqIGZpZWxkLmVuYWJsZVJlYWRPbmx5KClcbiAgICAgKiBgYGBcbiAgICAgKiBVc2VmdWwgZm9yIGZpZWxkcyB3aG9zZSB2YWx1ZXMgYXJlIGNvbXB1dGVkLCBpbXBvcnRlZCBmcm9tIGEgZGF0YWJhc2UsIG9yXG4gICAgICogcHJlZmlsbGVkIGJ5IHNvZnR3YXJlIGJlZm9yZSBiZWluZyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgUERGRmllbGQucHJvdG90eXBlLmVuYWJsZVJlYWRPbmx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0ZpZWxkRmxhZ3MuUmVhZE9ubHksIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCB0aGlzIGZpZWxkIGFuZCBjaGFuZ2UgaXRzIHZhbHVlIGluIFBERlxuICAgICAqIHJlYWRlcnMgdmlhIG1vdXNlIGFuZCBrZXlib2FyZCBpbnB1dC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmaWVsZCA9IGZvcm0uZ2V0RmllbGQoJ3NvbWUuZmllbGQnKVxuICAgICAqIGZpZWxkLmRpc2FibGVSZWFkT25seSgpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGRmllbGQucHJvdG90eXBlLmRpc2FibGVSZWFkT25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9GaWVsZEZsYWdzLlJlYWRPbmx5LCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGZpZWxkIG11c3QgaGF2ZSBhIHZhbHVlIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkLlxuICAgICAqIFNlZSBbW1BERkZpZWxkLmVuYWJsZVJlcXVpcmVkXV0gYW5kIFtbUERGRmllbGQuZGlzYWJsZVJlcXVpcmVkXV0uXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmaWVsZCA9IGZvcm0uZ2V0RmllbGQoJ3NvbWUuZmllbGQnKVxuICAgICAqIGlmIChmaWVsZC5pc1JlcXVpcmVkKCkpIGNvbnNvbGUubG9nKCdGaWVsZCBpcyByZXF1aXJlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICBQREZGaWVsZC5wcm90b3R5cGUuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNyb0ZpZWxkLmhhc0ZsYWcoQWNyb0ZpZWxkRmxhZ3MuUmVxdWlyZWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVxdWlyZSB0aGlzIGZpZWxkIHRvIGhhdmUgYSB2YWx1ZSB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnc29tZS5maWVsZCcpXG4gICAgICogZmllbGQuZW5hYmxlUmVxdWlyZWQoKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5lbmFibGVSZXF1aXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9GaWVsZEZsYWdzLlJlcXVpcmVkLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERvIG5vdCByZXF1aXJlIHRoaXMgZmllbGQgdG8gaGF2ZSBhIHZhbHVlIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZmllbGQgPSBmb3JtLmdldEZpZWxkKCdzb21lLmZpZWxkJylcbiAgICAgKiBmaWVsZC5kaXNhYmxlUmVxdWlyZWQoKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5kaXNhYmxlUmVxdWlyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvRmllbGRGbGFncy5SZXF1aXJlZCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBmaWVsZCdzIHZhbHVlIHNob3VsZCBiZSBleHBvcnRlZCB3aGVuIHRoZSBmb3JtIGlzXG4gICAgICogc3VibWl0dGVkLiBTZWUgW1tQREZGaWVsZC5lbmFibGVFeHBvcnRpbmddXSBhbmRcbiAgICAgKiBbW1BERkZpZWxkLmRpc2FibGVFeHBvcnRpbmddXS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnc29tZS5maWVsZCcpXG4gICAgICogaWYgKGZpZWxkLmlzRXhwb3J0ZWQoKSkgY29uc29sZS5sb2coJ0V4cG9ydGluZyBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIGZpZWxkJ3MgdmFsdWUgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgICAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5pc0V4cG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuYWNyb0ZpZWxkLmhhc0ZsYWcoQWNyb0ZpZWxkRmxhZ3MuTm9FeHBvcnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhhdCB0aGlzIGZpZWxkJ3MgdmFsdWUgc2hvdWxkIGJlIGV4cG9ydGVkIHdoZW4gdGhlIGZvcm0gaXNcbiAgICAgKiBzdWJtaXR0ZWQgaW4gYSBQREYgcmVhZGVyLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnc29tZS5maWVsZCcpXG4gICAgICogZmllbGQuZW5hYmxlRXhwb3J0aW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZGaWVsZC5wcm90b3R5cGUuZW5hYmxlRXhwb3J0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0ZpZWxkRmxhZ3MuTm9FeHBvcnQsIGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlIHRoYXQgdGhpcyBmaWVsZCdzIHZhbHVlIHNob3VsZCAqKm5vdCoqIGJlIGV4cG9ydGVkIHdoZW4gdGhlIGZvcm1cbiAgICAgKiBpcyBzdWJtaXR0ZWQgaW4gYSBQREYgcmVhZGVyLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnc29tZS5maWVsZCcpXG4gICAgICogZmllbGQuZGlzYWJsZUV4cG9ydGluZygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGRmllbGQucHJvdG90eXBlLmRpc2FibGVFeHBvcnRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvRmllbGRGbGFncy5Ob0V4cG9ydCwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICduZWVkc0FwcGVhcmFuY2VzVXBkYXRlJyk7XG4gICAgfTtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5kZWZhdWx0VXBkYXRlQXBwZWFyYW5jZXMgPSBmdW5jdGlvbiAoX2ZvbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzJyk7XG4gICAgfTtcbiAgICBQREZGaWVsZC5wcm90b3R5cGUubWFya0FzRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZG9jLmdldEZvcm0oKS5tYXJrRmllbGRBc0RpcnR5KHRoaXMucmVmKTtcbiAgICB9O1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5tYXJrQXNDbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kb2MuZ2V0Rm9ybSgpLm1hcmtGaWVsZEFzQ2xlYW4odGhpcy5yZWYpO1xuICAgIH07XG4gICAgUERGRmllbGQucHJvdG90eXBlLmlzRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvYy5nZXRGb3JtKCkuZmllbGRJc0RpcnR5KHRoaXMucmVmKTtcbiAgICB9O1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS5jcmVhdGVXaWRnZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB0ZXh0Q29sb3IgPSBvcHRpb25zLnRleHRDb2xvcjtcbiAgICAgICAgdmFyIGJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICB2YXIgYm9yZGVyQ29sb3IgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICB2YXIgYm9yZGVyV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgICAgICB2YXIgZGVncmVlc0FuZ2xlID0gdG9EZWdyZWVzKG9wdGlvbnMucm90YXRlKTtcbiAgICAgICAgdmFyIGNhcHRpb24gPSBvcHRpb25zLmNhcHRpb247XG4gICAgICAgIHZhciB4ID0gb3B0aW9ucy54O1xuICAgICAgICB2YXIgeSA9IG9wdGlvbnMueTtcbiAgICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCArIGJvcmRlcldpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKyBib3JkZXJXaWR0aDtcbiAgICAgICAgdmFyIGhpZGRlbiA9IEJvb2xlYW4ob3B0aW9ucy5oaWRkZW4pO1xuICAgICAgICB2YXIgcGFnZVJlZiA9IG9wdGlvbnMucGFnZTtcbiAgICAgICAgYXNzZXJ0TXVsdGlwbGUoZGVncmVlc0FuZ2xlLCAnZGVncmVlc0FuZ2xlJywgOTApO1xuICAgICAgICAvLyBDcmVhdGUgYSB3aWRnZXQgZm9yIHRoaXMgZmllbGRcbiAgICAgICAgdmFyIHdpZGdldCA9IFBERldpZGdldEFubm90YXRpb24uY3JlYXRlKHRoaXMuZG9jLmNvbnRleHQsIHRoaXMucmVmKTtcbiAgICAgICAgLy8gU2V0IHdpZGdldCBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciByZWN0ID0gcm90YXRlUmVjdGFuZ2xlKHsgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9LCBib3JkZXJXaWR0aCwgZGVncmVlc0FuZ2xlKTtcbiAgICAgICAgd2lkZ2V0LnNldFJlY3RhbmdsZShyZWN0KTtcbiAgICAgICAgaWYgKHBhZ2VSZWYpXG4gICAgICAgICAgICB3aWRnZXQuc2V0UChwYWdlUmVmKTtcbiAgICAgICAgdmFyIGFjID0gd2lkZ2V0LmdldE9yQ3JlYXRlQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcygpO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBhYy5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JUb0NvbXBvbmVudHMoYmFja2dyb3VuZENvbG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgYWMuc2V0Um90YXRpb24oZGVncmVlc0FuZ2xlKTtcbiAgICAgICAgaWYgKGNhcHRpb24pXG4gICAgICAgICAgICBhYy5zZXRDYXB0aW9ucyh7IG5vcm1hbDogY2FwdGlvbiB9KTtcbiAgICAgICAgaWYgKGJvcmRlckNvbG9yKVxuICAgICAgICAgICAgYWMuc2V0Qm9yZGVyQ29sb3IoY29sb3JUb0NvbXBvbmVudHMoYm9yZGVyQ29sb3IpKTtcbiAgICAgICAgdmFyIGJzID0gd2lkZ2V0LmdldE9yQ3JlYXRlQm9yZGVyU3R5bGUoKTtcbiAgICAgICAgaWYgKGJvcmRlcldpZHRoICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBicy5zZXRXaWR0aChib3JkZXJXaWR0aCk7XG4gICAgICAgIHdpZGdldC5zZXRGbGFnVG8oQW5ub3RhdGlvbkZsYWdzLlByaW50LCB0cnVlKTtcbiAgICAgICAgd2lkZ2V0LnNldEZsYWdUbyhBbm5vdGF0aW9uRmxhZ3MuSGlkZGVuLCBoaWRkZW4pO1xuICAgICAgICB3aWRnZXQuc2V0RmxhZ1RvKEFubm90YXRpb25GbGFncy5JbnZpc2libGUsIGZhbHNlKTtcbiAgICAgICAgLy8gU2V0IGFjcm9maWVsZCBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICh0ZXh0Q29sb3IpIHtcbiAgICAgICAgICAgIHZhciBkYSA9IChfYSA9IHRoaXMuYWNyb0ZpZWxkLmdldERlZmF1bHRBcHBlYXJhbmNlKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICAgICAgdmFyIG5ld0RhID0gZGEgKyAnXFxuJyArIHNldEZpbGxpbmdDb2xvcih0ZXh0Q29sb3IpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXREZWZhdWx0QXBwZWFyYW5jZShuZXdEYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9O1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS51cGRhdGVXaWRnZXRBcHBlYXJhbmNlV2l0aEZvbnQgPSBmdW5jdGlvbiAod2lkZ2V0LCBmb250LCBfYSkge1xuICAgICAgICB2YXIgbm9ybWFsID0gX2Eubm9ybWFsLCByb2xsb3ZlciA9IF9hLnJvbGxvdmVyLCBkb3duID0gX2EuZG93bjtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlcyh3aWRnZXQsIHtcbiAgICAgICAgICAgIG5vcm1hbDogdGhpcy5jcmVhdGVBcHBlYXJhbmNlU3RyZWFtKHdpZGdldCwgbm9ybWFsLCBmb250KSxcbiAgICAgICAgICAgIHJvbGxvdmVyOiByb2xsb3ZlciAmJiB0aGlzLmNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0od2lkZ2V0LCByb2xsb3ZlciwgZm9udCksXG4gICAgICAgICAgICBkb3duOiBkb3duICYmIHRoaXMuY3JlYXRlQXBwZWFyYW5jZVN0cmVhbSh3aWRnZXQsIGRvd24sIGZvbnQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS51cGRhdGVPbk9mZldpZGdldEFwcGVhcmFuY2UgPSBmdW5jdGlvbiAod2lkZ2V0LCBvblZhbHVlLCBfYSkge1xuICAgICAgICB2YXIgbm9ybWFsID0gX2Eubm9ybWFsLCByb2xsb3ZlciA9IF9hLnJvbGxvdmVyLCBkb3duID0gX2EuZG93bjtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlcyh3aWRnZXQsIHtcbiAgICAgICAgICAgIG5vcm1hbDogdGhpcy5jcmVhdGVBcHBlYXJhbmNlRGljdCh3aWRnZXQsIG5vcm1hbCwgb25WYWx1ZSksXG4gICAgICAgICAgICByb2xsb3Zlcjogcm9sbG92ZXIgJiYgdGhpcy5jcmVhdGVBcHBlYXJhbmNlRGljdCh3aWRnZXQsIHJvbGxvdmVyLCBvblZhbHVlKSxcbiAgICAgICAgICAgIGRvd246IGRvd24gJiYgdGhpcy5jcmVhdGVBcHBlYXJhbmNlRGljdCh3aWRnZXQsIGRvd24sIG9uVmFsdWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBERkZpZWxkLnByb3RvdHlwZS51cGRhdGVXaWRnZXRBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uICh3aWRnZXQsIF9hKSB7XG4gICAgICAgIHZhciBub3JtYWwgPSBfYS5ub3JtYWwsIHJvbGxvdmVyID0gX2Eucm9sbG92ZXIsIGRvd24gPSBfYS5kb3duO1xuICAgICAgICB3aWRnZXQuc2V0Tm9ybWFsQXBwZWFyYW5jZShub3JtYWwpO1xuICAgICAgICBpZiAocm9sbG92ZXIpIHtcbiAgICAgICAgICAgIHdpZGdldC5zZXRSb2xsb3ZlckFwcGVhcmFuY2Uocm9sbG92ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lkZ2V0LnJlbW92ZVJvbGxvdmVyQXBwZWFyYW5jZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICB3aWRnZXQuc2V0RG93bkFwcGVhcmFuY2UoZG93bik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWRnZXQucmVtb3ZlRG93bkFwcGVhcmFuY2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gLy8gVE9ETzogRG8gd2UgbmVlZCB0byBkbyB0aGlzLi4uP1xuICAgIC8vIHByaXZhdGUgZm9vKGZvbnQ6IFBERkZvbnQsIGRpY3Q6IFBERkRpY3QpIHtcbiAgICAvLyAgIGlmICghZGljdC5sb29rdXAoUERGTmFtZS5vZignRFInKSkpIHtcbiAgICAvLyAgICAgZGljdC5zZXQoUERGTmFtZS5vZignRFInKSwgZGljdC5jb250ZXh0Lm9iaih7fSkpO1xuICAgIC8vICAgfVxuICAgIC8vICAgY29uc3QgRFIgPSBkaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdEUicpLCBQREZEaWN0KTtcbiAgICAvLyAgIGlmICghRFIubG9va3VwKFBERk5hbWUub2YoJ0ZvbnQnKSkpIHtcbiAgICAvLyAgICAgRFIuc2V0KFBERk5hbWUub2YoJ0ZvbnQnKSwgZGljdC5jb250ZXh0Lm9iaih7fSkpO1xuICAgIC8vICAgfVxuICAgIC8vICAgY29uc3QgRm9udCA9IERSLmxvb2t1cChQREZOYW1lLm9mKCdGb250JyksIFBERkRpY3QpO1xuICAgIC8vICAgRm9udC5zZXQoUERGTmFtZS5vZihmb250Lm5hbWUpLCBmb250LnJlZik7XG4gICAgLy8gfVxuICAgIFBERkZpZWxkLnByb3RvdHlwZS5jcmVhdGVBcHBlYXJhbmNlU3RyZWFtID0gZnVuY3Rpb24gKHdpZGdldCwgYXBwZWFyYW5jZSwgZm9udCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5hY3JvRmllbGQuZGljdC5jb250ZXh0O1xuICAgICAgICB2YXIgX2IgPSB3aWRnZXQuZ2V0UmVjdGFuZ2xlKCksIHdpZHRoID0gX2Iud2lkdGgsIGhlaWdodCA9IF9iLmhlaWdodDtcbiAgICAgICAgLy8gVE9ETzogRG8gd2UgbmVlZCB0byBkbyB0aGlzLi4uP1xuICAgICAgICAvLyBpZiAoZm9udCkge1xuICAgICAgICAvLyAgIHRoaXMuZm9vKGZvbnQsIHdpZGdldC5kaWN0KTtcbiAgICAgICAgLy8gICB0aGlzLmZvbyhmb250LCB0aGlzLmRvYy5nZXRGb3JtKCkuYWNyb0Zvcm0uZGljdCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gRU5EIFRPRE9cbiAgICAgICAgdmFyIFJlc291cmNlcyA9IGZvbnQgJiYgeyBGb250OiAoX2EgPSB7fSwgX2FbZm9udC5uYW1lXSA9IGZvbnQucmVmLCBfYSkgfTtcbiAgICAgICAgdmFyIHN0cmVhbSA9IGNvbnRleHQuZm9ybVhPYmplY3QoYXBwZWFyYW5jZSwge1xuICAgICAgICAgICAgUmVzb3VyY2VzOiBSZXNvdXJjZXMsXG4gICAgICAgICAgICBCQm94OiBjb250ZXh0Lm9iaihbMCwgMCwgd2lkdGgsIGhlaWdodF0pLFxuICAgICAgICAgICAgTWF0cml4OiBjb250ZXh0Lm9iaihbMSwgMCwgMCwgMSwgMCwgMF0pLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHN0cmVhbVJlZiA9IGNvbnRleHQucmVnaXN0ZXIoc3RyZWFtKTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbVJlZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIEZvcm1YT2JqZWN0IG9mIHRoZSBzdXBwbGllZCBpbWFnZSBhbmQgYWRkIGl0IHRvIGNvbnRleHQuXG4gICAgICogVGhlIEZvcm1YT2JqZWN0IHNpemUgaXMgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgd2lkZ2V0IChpbmNsdWRpbmdcbiAgICAgKiB0aGUgYWxpZ25tZW50KS5cbiAgICAgKiBAcGFyYW0gd2lkZ2V0IFRoZSB3aWRnZXQgdGhhdCBzaG91bGQgZGlzcGxheSB0aGUgaW1hZ2UuXG4gICAgICogQHBhcmFtIGFsaWdubWVudCBUaGUgYWxpZ25tZW50IG9mIHRoZSBpbWFnZS5cbiAgICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVmIGZvciB0aGUgRm9ybVhPYmplY3QgdGhhdCB3YXMgYWRkZWQgdG8gdGhlIGNvbnRleHQuXG4gICAgICovXG4gICAgUERGRmllbGQucHJvdG90eXBlLmNyZWF0ZUltYWdlQXBwZWFyYW5jZVN0cmVhbSA9IGZ1bmN0aW9uICh3aWRnZXQsIGltYWdlLCBhbGlnbm1lbnQpIHtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IGhhbmRsZSBpbWFnZSBib3JkZXJzLlxuICAgICAgICAvLyBOT1RFOiBBY3JvYmF0IHNlZW1zIHRvIHJlc2l6ZSB0aGUgaW1hZ2UgKG1heWJlIGV2ZW4gc2tld2luZyBpdHMgYXNwZWN0XG4gICAgICAgIC8vICAgICAgIHJhdGlvKSB0byBmaXQgcGVyZmVjdGx5IHdpdGhpbiB0aGUgd2lkZ2V0J3MgcmVjdGFuZ2xlLiBUaGlzIG1ldGhvZFxuICAgICAgICAvLyAgICAgICBkb2VzIG5vdCBjdXJyZW50bHkgZG8gdGhhdC4gU2hvdWxkIHRoZXJlIGJlIGFuIG9wdGlvbiBmb3IgdGhhdD9cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5hY3JvRmllbGQuZGljdC5jb250ZXh0O1xuICAgICAgICB2YXIgcmVjdGFuZ2xlID0gd2lkZ2V0LmdldFJlY3RhbmdsZSgpO1xuICAgICAgICB2YXIgYXAgPSB3aWRnZXQuZ2V0QXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcygpO1xuICAgICAgICB2YXIgYnMgPSB3aWRnZXQuZ2V0Qm9yZGVyU3R5bGUoKTtcbiAgICAgICAgdmFyIGJvcmRlcldpZHRoID0gKF9iID0gYnMgPT09IG51bGwgfHwgYnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJzLmdldFdpZHRoKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgIHZhciByb3RhdGlvbiA9IHJlZHVjZVJvdGF0aW9uKGFwID09PSBudWxsIHx8IGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcC5nZXRSb3RhdGlvbigpKTtcbiAgICAgICAgdmFyIHJvdGF0ZSA9IHJvdGF0ZUluUGxhY2UoX19hc3NpZ24oX19hc3NpZ24oe30sIHJlY3RhbmdsZSksIHsgcm90YXRpb246IHJvdGF0aW9uIH0pKTtcbiAgICAgICAgdmFyIGFkaiA9IGFkanVzdERpbXNGb3JSb3RhdGlvbihyZWN0YW5nbGUsIHJvdGF0aW9uKTtcbiAgICAgICAgdmFyIGltYWdlRGltcyA9IGltYWdlLnNjYWxlVG9GaXQoYWRqLndpZHRoIC0gYm9yZGVyV2lkdGggKiAyLCBhZGouaGVpZ2h0IC0gYm9yZGVyV2lkdGggKiAyKTtcbiAgICAgICAgLy8gU3VwcG9ydCBib3JkZXJzIG9uIGltYWdlcyBhbmQgbWF5YmUgb3RoZXIgcHJvcGVydGllc1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHg6IGJvcmRlcldpZHRoLFxuICAgICAgICAgICAgeTogYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICB3aWR0aDogaW1hZ2VEaW1zLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBpbWFnZURpbXMuaGVpZ2h0LFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIHJvdGF0ZTogZGVncmVlcygwKSxcbiAgICAgICAgICAgIHhTa2V3OiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgeVNrZXc6IGRlZ3JlZXMoMCksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChhbGlnbm1lbnQgPT09IEltYWdlQWxpZ25tZW50LkNlbnRlcikge1xuICAgICAgICAgICAgb3B0aW9ucy54ICs9IChhZGoud2lkdGggLSBib3JkZXJXaWR0aCAqIDIpIC8gMiAtIGltYWdlRGltcy53aWR0aCAvIDI7XG4gICAgICAgICAgICBvcHRpb25zLnkgKz0gKGFkai5oZWlnaHQgLSBib3JkZXJXaWR0aCAqIDIpIC8gMiAtIGltYWdlRGltcy5oZWlnaHQgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsaWdubWVudCA9PT0gSW1hZ2VBbGlnbm1lbnQuUmlnaHQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMueCA9IGFkai53aWR0aCAtIGJvcmRlcldpZHRoIC0gaW1hZ2VEaW1zLndpZHRoO1xuICAgICAgICAgICAgb3B0aW9ucy55ID0gYWRqLmhlaWdodCAtIGJvcmRlcldpZHRoIC0gaW1hZ2VEaW1zLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW1hZ2VOYW1lID0gdGhpcy5kb2MuY29udGV4dC5hZGRSYW5kb21TdWZmaXgoJ0ltYWdlJywgMTApO1xuICAgICAgICB2YXIgYXBwZWFyYW5jZSA9IF9fc3ByZWFkQXJyYXlzKHJvdGF0ZSwgZHJhd0ltYWdlKGltYWdlTmFtZSwgb3B0aW9ucykpO1xuICAgICAgICAvLy8vLy8vLy8vLy9cbiAgICAgICAgdmFyIFJlc291cmNlcyA9IHsgWE9iamVjdDogKF9hID0ge30sIF9hW2ltYWdlTmFtZV0gPSBpbWFnZS5yZWYsIF9hKSB9O1xuICAgICAgICB2YXIgc3RyZWFtID0gY29udGV4dC5mb3JtWE9iamVjdChhcHBlYXJhbmNlLCB7XG4gICAgICAgICAgICBSZXNvdXJjZXM6IFJlc291cmNlcyxcbiAgICAgICAgICAgIEJCb3g6IGNvbnRleHQub2JqKFswLCAwLCByZWN0YW5nbGUud2lkdGgsIHJlY3RhbmdsZS5oZWlnaHRdKSxcbiAgICAgICAgICAgIE1hdHJpeDogY29udGV4dC5vYmooWzEsIDAsIDAsIDEsIDAsIDBdKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnJlZ2lzdGVyKHN0cmVhbSk7XG4gICAgfTtcbiAgICBQREZGaWVsZC5wcm90b3R5cGUuY3JlYXRlQXBwZWFyYW5jZURpY3QgPSBmdW5jdGlvbiAod2lkZ2V0LCBhcHBlYXJhbmNlLCBvblZhbHVlKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5hY3JvRmllbGQuZGljdC5jb250ZXh0O1xuICAgICAgICB2YXIgb25TdHJlYW1SZWYgPSB0aGlzLmNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0od2lkZ2V0LCBhcHBlYXJhbmNlLm9uKTtcbiAgICAgICAgdmFyIG9mZlN0cmVhbVJlZiA9IHRoaXMuY3JlYXRlQXBwZWFyYW5jZVN0cmVhbSh3aWRnZXQsIGFwcGVhcmFuY2Uub2ZmKTtcbiAgICAgICAgdmFyIGFwcGVhcmFuY2VEaWN0ID0gY29udGV4dC5vYmooe30pO1xuICAgICAgICBhcHBlYXJhbmNlRGljdC5zZXQob25WYWx1ZSwgb25TdHJlYW1SZWYpO1xuICAgICAgICBhcHBlYXJhbmNlRGljdC5zZXQoUERGTmFtZS5vZignT2ZmJyksIG9mZlN0cmVhbVJlZik7XG4gICAgICAgIHJldHVybiBhcHBlYXJhbmNlRGljdDtcbiAgICB9O1xuICAgIHJldHVybiBQREZGaWVsZDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkZpZWxkLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERlBhZ2UgZnJvbSBcIi4uL1BERlBhZ2VcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZUFwcGVhcmFuY2UsIGRlZmF1bHRDaGVja0JveEFwcGVhcmFuY2VQcm92aWRlciwgfSBmcm9tIFwiLi9hcHBlYXJhbmNlc1wiO1xuaW1wb3J0IHsgcmdiIH0gZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHsgZGVncmVlcyB9IGZyb20gXCIuLi9yb3RhdGlvbnNcIjtcbmltcG9ydCBQREZGaWVsZCwgeyBhc3NlcnRGaWVsZEFwcGVhcmFuY2VPcHRpb25zLCB9IGZyb20gXCIuL1BERkZpZWxkXCI7XG5pbXBvcnQgeyBQREZOYW1lLCBQREZEaWN0LCBQREZBY3JvQ2hlY2tCb3gsIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRPclVuZGVmaW5lZCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2hlY2sgYm94IGZpZWxkIG9mIGEgW1tQREZGb3JtXV0uXG4gKlxuICogW1tQREZDaGVja0JveF1dIGZpZWxkcyBhcmUgaW50ZXJhY3RpdmUgYm94ZXMgdGhhdCB1c2VycyBjYW4gY2xpY2sgd2l0aCB0aGVpclxuICogbW91c2UuIFRoaXMgdHlwZSBvZiBbW1BERkZpZWxkXV0gaGFzIHR3byBzdGF0ZXM6IGBvbmAgYW5kIGBvZmZgLiBUaGUgcHVycG9zZVxuICogb2YgYSBjaGVjayBib3ggaXMgdG8gZW5hYmxlIHVzZXJzIHRvIHNlbGVjdCBmcm9tIG9uZSBvciBtb3JlIG9wdGlvbnMsIHdoZXJlXG4gKiBlYWNoIG9wdGlvbiBpcyByZXByZXNlbnRlZCBieSBhIHNpbmdsZSBjaGVjayBib3guIENoZWNrIGJveGVzIGFyZSB0eXBpY2FsbHlcbiAqIHNxdWFyZSBpbiBzaGFwZSBhbmQgZGlzcGxheSBhIGNoZWNrIG1hcmsgd2hlbiB0aGV5IGFyZSBpbiB0aGUgYG9uYCBzdGF0ZS5cbiAqL1xudmFyIFBERkNoZWNrQm94ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZDaGVja0JveCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZDaGVja0JveChhY3JvQ2hlY2tCb3gsIHJlZiwgZG9jKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGFjcm9DaGVja0JveCwgcmVmLCBkb2MpIHx8IHRoaXM7XG4gICAgICAgIGFzc2VydElzKGFjcm9DaGVja0JveCwgJ2Fjcm9DaGVja0JveCcsIFtcbiAgICAgICAgICAgIFtQREZBY3JvQ2hlY2tCb3gsICdQREZBY3JvQ2hlY2tCb3gnXSxcbiAgICAgICAgXSk7XG4gICAgICAgIF90aGlzLmFjcm9GaWVsZCA9IGFjcm9DaGVja0JveDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrIHRoaXMgY2hlY2sgYm94LiBUaGlzIG9wZXJhdGlvbiBpcyBhbmFsb2dvdXMgdG8gYSBodW1hbiB1c2VyIGNsaWNraW5nXG4gICAgICogYSBjaGVjayBib3ggdG8gZmlsbCBpdCBpbiBhIFBERiByZWFkZXIuIFRoaXMgbWV0aG9kIHdpbGwgdXBkYXRlIHRoZVxuICAgICAqIHVuZGVybHlpbmcgc3RhdGUgb2YgdGhlIGNoZWNrIGJveCBmaWVsZCB0byBpbmRpY2F0ZSBpdCBoYXMgYmVlbiBzZWxlY3RlZC5cbiAgICAgKiBQREYgbGlicmFyaWVzIGFuZCByZWFkZXJzIHdpbGwgYmUgYWJsZSB0byBleHRyYWN0IHRoaXMgdmFsdWUgZnJvbSB0aGVcbiAgICAgKiBzYXZlZCBkb2N1bWVudCBhbmQgZGV0ZXJtaW5lIHRoYXQgaXQgd2FzIHNlbGVjdGVkLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBjaGVja0JveCA9IGZvcm0uZ2V0Q2hlY2tCb3goJ3NvbWUuY2hlY2tCb3guZmllbGQnKVxuICAgICAqIGNoZWNrQm94LmNoZWNrKClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIGNoZWNrIGJveCBhcyBkaXJ0eSwgY2F1c2luZyBpdHMgYXBwZWFyYW5jZVxuICAgICAqIHN0cmVhbXMgdG8gYmUgdXBkYXRlZCB3aGVuIGVpdGhlciBbW1BERkRvY3VtZW50LnNhdmVdXSBvclxuICAgICAqIFtbUERGRm9ybS51cGRhdGVGaWVsZEFwcGVhcmFuY2VzXV0gaXMgY2FsbGVkLiBUaGUgdXBkYXRlZCBhcHBlYXJhbmNlXG4gICAgICogc3RyZWFtcyB3aWxsIGRpc3BsYXkgYSBjaGVjayBtYXJrIGluc2lkZSB0aGUgd2lkZ2V0cyBvZiB0aGlzIGNoZWNrIGJveFxuICAgICAqIGZpZWxkLlxuICAgICAqL1xuICAgIFBERkNoZWNrQm94LnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgb25WYWx1ZSA9IChfYSA9IHRoaXMuYWNyb0ZpZWxkLmdldE9uVmFsdWUoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUERGTmFtZS5vZignWWVzJyk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWUob25WYWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhpcyBjaGVjayBib3guIFRoaXMgb3BlcmF0aW9uIGlzIGFuYWxvZ291cyB0byBhIGh1bWFuIHVzZXIgY2xpY2tpbmdcbiAgICAgKiBhIGNoZWNrIGJveCB0byB1bm1hcmsgaXQgaW4gYSBQREYgcmVhZGVyLiBUaGlzIG1ldGhvZCB3aWxsIHVwZGF0ZSB0aGVcbiAgICAgKiB1bmRlcmx5aW5nIHN0YXRlIG9mIHRoZSBjaGVjayBib3ggZmllbGQgdG8gaW5kaWNhdGUgaXQgaGFzIGJlZW4gZGVzZWxlY3RlZC5cbiAgICAgKiBQREYgbGlicmFyaWVzIGFuZCByZWFkZXJzIHdpbGwgYmUgYWJsZSB0byBleHRyYWN0IHRoaXMgdmFsdWUgZnJvbSB0aGVcbiAgICAgKiBzYXZlZCBkb2N1bWVudCBhbmQgZGV0ZXJtaW5lIHRoYXQgaXQgd2FzIG5vdCBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY2hlY2tCb3ggPSBmb3JtLmdldENoZWNrQm94KCdzb21lLmNoZWNrQm94LmZpZWxkJylcbiAgICAgKiBjaGVja0JveC51bmNoZWNrKClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIGNoZWNrIGJveCBhcyBkaXJ0eS4gU2VlIFtbUERGQ2hlY2tCb3guY2hlY2tdXVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMgYWJvdXQgd2hhdCB0aGlzIG1lYW5zLlxuICAgICAqL1xuICAgIFBERkNoZWNrQm94LnByb3RvdHlwZS51bmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldFZhbHVlKFBERk5hbWUub2YoJ09mZicpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgY2hlY2sgYm94IGlzIHNlbGVjdGVkIChlaXRoZXIgYnkgYSBodW1hbiB1c2VyIHZpYVxuICAgICAqIGEgUERGIHJlYWRlciwgb3IgZWxzZSBwcm9ncmFtbWF0aWNhbGx5IHZpYSBzb2Z0d2FyZSkuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY2hlY2tCb3ggPSBmb3JtLmdldENoZWNrQm94KCdzb21lLmNoZWNrQm94LmZpZWxkJylcbiAgICAgKiBpZiAoY2hlY2tCb3guaXNDaGVja2VkKCkpIGNvbnNvbGUubG9nKCdjaGVjayBib3ggaXMgc2VsZWN0ZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgY2hlY2sgYm94IGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIFBERkNoZWNrQm94LnByb3RvdHlwZS5pc0NoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblZhbHVlID0gdGhpcy5hY3JvRmllbGQuZ2V0T25WYWx1ZSgpO1xuICAgICAgICByZXR1cm4gISFvblZhbHVlICYmIG9uVmFsdWUgPT09IHRoaXMuYWNyb0ZpZWxkLmdldFZhbHVlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IHRoaXMgY2hlY2sgYm94IG9uIHRoZSBzcGVjaWZpZWQgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2EgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IGNoZWNrQm94ID0gZm9ybS5jcmVhdGVDaGVja0JveCgnc29tZS5jaGVja0JveC5maWVsZCcpXG4gICAgICpcbiAgICAgKiBjaGVja0JveC5hZGRUb1BhZ2UocGFnZSwge1xuICAgICAqICAgeDogNTAsXG4gICAgICogICB5OiA3NSxcbiAgICAgKiAgIHdpZHRoOiAyNSxcbiAgICAgKiAgIGhlaWdodDogMjUsXG4gICAgICogICB0ZXh0Q29sb3I6IHJnYigxLCAwLCAwKSxcbiAgICAgKiAgIGJhY2tncm91bmRDb2xvcjogcmdiKDAsIDEsIDApLFxuICAgICAqICAgYm9yZGVyQ29sb3I6IHJnYigwLCAwLCAxKSxcbiAgICAgKiAgIGJvcmRlcldpZHRoOiAyLFxuICAgICAqICAgcm90YXRlOiBkZWdyZWVzKDkwKSxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgd2lkZ2V0IGZvciB0aGlzIGNoZWNrIGJveCBmaWVsZC5cbiAgICAgKiBAcGFyYW0gcGFnZSBUaGUgcGFnZSB0byB3aGljaCB0aGlzIGNoZWNrIGJveCB3aWRnZXQgc2hvdWxkIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBhZGRpbmcgdGhpcyBjaGVjayBib3ggd2lkZ2V0LlxuICAgICAqL1xuICAgIFBERkNoZWNrQm94LnByb3RvdHlwZS5hZGRUb1BhZ2UgPSBmdW5jdGlvbiAocGFnZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgYXNzZXJ0SXMocGFnZSwgJ3BhZ2UnLCBbW1BERlBhZ2UsICdQREZQYWdlJ11dKTtcbiAgICAgICAgYXNzZXJ0RmllbGRBcHBlYXJhbmNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAoISgndGV4dENvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMudGV4dENvbG9yID0gcmdiKDAsIDAsIDApO1xuICAgICAgICBpZiAoISgnYmFja2dyb3VuZENvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYmFja2dyb3VuZENvbG9yID0gcmdiKDEsIDEsIDEpO1xuICAgICAgICBpZiAoISgnYm9yZGVyQ29sb3InIGluIG9wdGlvbnMpKVxuICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJDb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgaWYgKCEoJ2JvcmRlcldpZHRoJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAxO1xuICAgICAgICAvLyBDcmVhdGUgYSB3aWRnZXQgZm9yIHRoaXMgY2hlY2sgYm94XG4gICAgICAgIHZhciB3aWRnZXQgPSB0aGlzLmNyZWF0ZVdpZGdldCh7XG4gICAgICAgICAgICB4OiAoX2EgPSBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAsXG4gICAgICAgICAgICB3aWR0aDogKF9jID0gb3B0aW9ucy53aWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogNTAsXG4gICAgICAgICAgICBoZWlnaHQ6IChfZCA9IG9wdGlvbnMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiA1MCxcbiAgICAgICAgICAgIHRleHRDb2xvcjogb3B0aW9ucy50ZXh0Q29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKF9lID0gb3B0aW9ucy5ib3JkZXJXaWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9mID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICBoaWRkZW46IG9wdGlvbnMuaGlkZGVuLFxuICAgICAgICAgICAgcGFnZTogcGFnZS5yZWYsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgd2lkZ2V0UmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3Rlcih3aWRnZXQuZGljdCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhpcyBmaWVsZFxuICAgICAgICB0aGlzLmFjcm9GaWVsZC5hZGRXaWRnZXQod2lkZ2V0UmVmKTtcbiAgICAgICAgLy8gU2V0IGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3Igd2lkZ2V0XG4gICAgICAgIHdpZGdldC5zZXRBcHBlYXJhbmNlU3RhdGUoUERGTmFtZS5vZignT2ZmJykpO1xuICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2Uod2lkZ2V0LCBQREZOYW1lLm9mKCdZZXMnKSk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhlIGdpdmVuIHBhZ2VcbiAgICAgICAgcGFnZS5ub2RlLmFkZEFubm90KHdpZGdldFJlZik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgb2YgdGhpcyBjaGVjayBib3gncyB3aWRnZXRzIGRvIG5vdCBoYXZlIGFuXG4gICAgICogYXBwZWFyYW5jZSBzdHJlYW0gZm9yIGl0cyBjdXJyZW50IHN0YXRlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNoZWNrQm94ID0gZm9ybS5nZXRDaGVja0JveCgnc29tZS5jaGVja0JveC5maWVsZCcpXG4gICAgICogaWYgKGNoZWNrQm94Lm5lZWRzQXBwZWFyYW5jZXNVcGRhdGUoKSkgY29uc29sZS5sb2coJ05lZWRzIHVwZGF0ZScpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBjaGVjayBib3ggbmVlZHMgYW4gYXBwZWFyYW5jZSB1cGRhdGUuXG4gICAgICovXG4gICAgUERGQ2hlY2tCb3gucHJvdG90eXBlLm5lZWRzQXBwZWFyYW5jZXNVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHdpZGdldHMgPSB0aGlzLmFjcm9GaWVsZC5nZXRXaWRnZXRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0ID0gd2lkZ2V0c1tpZHhdO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VTdGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG5vcm1hbCA9IChfYSA9IHdpZGdldC5nZXRBcHBlYXJhbmNlcygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9ybWFsO1xuICAgICAgICAgICAgaWYgKCEobm9ybWFsIGluc3RhbmNlb2YgUERGRGljdCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoc3RhdGUgJiYgIW5vcm1hbC5oYXMoc3RhdGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciBlYWNoIG9mIHRoaXMgY2hlY2sgYm94J3Mgd2lkZ2V0cyB1c2luZ1xuICAgICAqIHRoZSBkZWZhdWx0IGFwcGVhcmFuY2UgcHJvdmlkZXIgZm9yIGNoZWNrIGJveGVzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNoZWNrQm94ID0gZm9ybS5nZXRDaGVja0JveCgnc29tZS5jaGVja0JveC5maWVsZCcpXG4gICAgICogY2hlY2tCb3guZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZDaGVja0JveC5wcm90b3R5cGUuZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUFwcGVhcmFuY2VzKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIGNoZWNrIGJveCdzIHdpZGdldHMgdXNpbmdcbiAgICAgKiB0aGUgZ2l2ZW4gYXBwZWFyYW5jZSBwcm92aWRlci4gSWYgbm8gYHByb3ZpZGVyYCBpcyBwYXNzZWQsIHRoZSBkZWZhdWx0XG4gICAgICogYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgY2hlY2sgYm94cyB3aWxsIGJlIHVzZWQuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY2hlY2tCb3ggPSBmb3JtLmdldENoZWNrQm94KCdzb21lLmNoZWNrQm94LmZpZWxkJylcbiAgICAgKiBjaGVja0JveC51cGRhdGVBcHBlYXJhbmNlcygoZmllbGQsIHdpZGdldCkgPT4ge1xuICAgICAqICAgLi4uXG4gICAgICogICByZXR1cm4ge1xuICAgICAqICAgICBub3JtYWw6IHsgb246IGRyYXdDaGVja0JveCguLi4pLCBvZmY6IGRyYXdDaGVja0JveCguLi4pIH0sXG4gICAgICogICAgIGRvd246IHsgb246IGRyYXdDaGVja0JveCguLi4pLCBvZmY6IGRyYXdDaGVja0JveCguLi4pIH0sXG4gICAgICogICB9XG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXIgT3B0aW9uYWxseSwgdGhlIGFwcGVhcmFuY2UgcHJvdmlkZXIgdG8gYmUgdXNlZCBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgZ2VuZXJhdGluZyB0aGUgY29udGVudHMgb2YgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcy5cbiAgICAgKi9cbiAgICBQREZDaGVja0JveC5wcm90b3R5cGUudXBkYXRlQXBwZWFyYW5jZXMgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChwcm92aWRlciwgJ3Byb3ZpZGVyJywgW0Z1bmN0aW9uXSk7XG4gICAgICAgIHZhciB3aWRnZXRzID0gdGhpcy5hY3JvRmllbGQuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHZhciBvblZhbHVlID0gKF9hID0gd2lkZ2V0LmdldE9uVmFsdWUoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUERGTmFtZS5vZignWWVzJyk7XG4gICAgICAgICAgICBpZiAoIW9uVmFsdWUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2Uod2lkZ2V0LCBvblZhbHVlLCBwcm92aWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrQXNDbGVhbigpO1xuICAgIH07XG4gICAgUERGQ2hlY2tCb3gucHJvdG90eXBlLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2UgPSBmdW5jdGlvbiAod2lkZ2V0LCBvblZhbHVlLCBwcm92aWRlcikge1xuICAgICAgICB2YXIgYXBQcm92aWRlciA9IHByb3ZpZGVyICE9PSBudWxsICYmIHByb3ZpZGVyICE9PSB2b2lkIDAgPyBwcm92aWRlciA6IGRlZmF1bHRDaGVja0JveEFwcGVhcmFuY2VQcm92aWRlcjtcbiAgICAgICAgdmFyIGFwcGVhcmFuY2VzID0gbm9ybWFsaXplQXBwZWFyYW5jZShhcFByb3ZpZGVyKHRoaXMsIHdpZGdldCkpO1xuICAgICAgICB0aGlzLnVwZGF0ZU9uT2ZmV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIG9uVmFsdWUsIGFwcGVhcmFuY2VzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZGb3JtLmdldENoZWNrQm94XV0gbWV0aG9kLCB3aGljaCB3aWxsIGNyZWF0ZSBhblxuICAgICAqID4gaW5zdGFuY2Ugb2YgW1tQREZDaGVja0JveF1dIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgW1tQREZDaGVja0JveF1dIGZyb20gYW4gZXhpc3RpbmcgYWNyb0NoZWNrQm94IGFuZCByZWZcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3JvQ2hlY2tCb3ggVGhlIHVuZGVybHlpbmcgYFBERkFjcm9DaGVja0JveGAgZm9yIHRoaXMgY2hlY2sgYm94LlxuICAgICAqIEBwYXJhbSByZWYgVGhlIHVuaXF1ZSByZWZlcmVuY2UgZm9yIHRoaXMgY2hlY2sgYm94LlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoaXMgY2hlY2sgYm94IHdpbGwgYmVsb25nLlxuICAgICAqL1xuICAgIFBERkNoZWNrQm94Lm9mID0gZnVuY3Rpb24gKGFjcm9DaGVja0JveCwgcmVmLCBkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZDaGVja0JveChhY3JvQ2hlY2tCb3gsIHJlZiwgZG9jKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZDaGVja0JveDtcbn0oUERGRmllbGQpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkNoZWNrQm94O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQ2hlY2tCb3guanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGUGFnZSBmcm9tIFwiLi4vUERGUGFnZVwiO1xuaW1wb3J0IFBERkZvbnQgZnJvbSBcIi4uL1BERkZvbnRcIjtcbmltcG9ydCBQREZGaWVsZCwgeyBhc3NlcnRGaWVsZEFwcGVhcmFuY2VPcHRpb25zLCB9IGZyb20gXCIuL1BERkZpZWxkXCI7XG5pbXBvcnQgeyBub3JtYWxpemVBcHBlYXJhbmNlLCBkZWZhdWx0RHJvcGRvd25BcHBlYXJhbmNlUHJvdmlkZXIsIH0gZnJvbSBcIi4vYXBwZWFyYW5jZXNcIjtcbmltcG9ydCB7IHJnYiB9IGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCB7IGRlZ3JlZXMgfSBmcm9tIFwiLi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBQREZIZXhTdHJpbmcsIFBERlN0cmVhbSwgUERGQWNyb0NvbWJvQm94LCBBY3JvQ2hvaWNlRmxhZ3MsIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRPclVuZGVmaW5lZCwgYXNzZXJ0UG9zaXRpdmUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGRyb3Bkb3duIGZpZWxkIG9mIGEgW1tQREZGb3JtXV0uXG4gKlxuICogW1tQREZEcm9wZG93bl1dIGZpZWxkcyBhcmUgaW50ZXJhY3RpdmUgdGV4dCBib3hlcyB0aGF0IGRpc3BsYXkgYSBzaW5nbGVcbiAqIGVsZW1lbnQgKHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUpLiBUaGUgcHVycG9zZSBvZiBhIGRyb3Bkb3duIGlzIHRvXG4gKiBlbmFibGUgdXNlcnMgdG8gc2VsZWN0IGEgc2luZ2xlIG9wdGlvbiBmcm9tIGEgc2V0IG9mIHBvc3NpYmxlIG9wdGlvbnMuIFVzZXJzXG4gKiBjYW4gY2xpY2sgb24gYSBkcm9wZG93biB0byB2aWV3IHRoZSBmdWxsIGxpc3Qgb2Ygb3B0aW9ucyBpdCBwcm92aWRlcy5cbiAqIENsaWNraW5nIG9uIGFuIG9wdGlvbiBpbiB0aGUgbGlzdCB3aWxsIGNhdXNlIGl0IHRvIGJlIHNlbGVjdGVkIGFuZCBkaXNwbGF5ZWRcbiAqIGluIHRoZSBkcm9wZG93bidzIHRleHQgYm94LiBTb21lIGRyb3Bkb3ducyBhbGxvdyB1c2VycyB0byBlbnRlciB0ZXh0XG4gKiBkaXJlY3RseSBpbnRvIHRoZSBib3ggZnJvbSB0aGVpciBrZXlib2FyZCwgcmF0aGVyIHRoYW4gb25seSBiZWluZyBhbGxvd2VkIHRvXG4gKiBjaG9vc2UgYW4gb3B0aW9uIGZyb20gdGhlIGxpc3QgKHNlZSBbW1BERkRyb3Bkb3duLmlzRWRpdGFibGVdXSkuXG4gKi9cbnZhciBQREZEcm9wZG93biA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGRHJvcGRvd24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGRHJvcGRvd24oYWNyb0NvbWJvQm94LCByZWYsIGRvYykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhY3JvQ29tYm9Cb3gsIHJlZiwgZG9jKSB8fCB0aGlzO1xuICAgICAgICBhc3NlcnRJcyhhY3JvQ29tYm9Cb3gsICdhY3JvQ29tYm9Cb3gnLCBbXG4gICAgICAgICAgICBbUERGQWNyb0NvbWJvQm94LCAnUERGQWNyb0NvbWJvQm94J10sXG4gICAgICAgIF0pO1xuICAgICAgICBfdGhpcy5hY3JvRmllbGQgPSBhY3JvQ29tYm9Cb3g7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb25zIGZvciB0aGlzIGRyb3Bkb3duLiBUaGVzZSBvcHRpb25zIHdpbGwgYmVcbiAgICAgKiBkaXNwbGF5ZWQgdG8gdXNlcnMgd2hvIGNsaWNrIG9uIHRoaXMgZHJvcGRvd24gaW4gYSBQREYgcmVhZGVyLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBjb25zdCBvcHRpb25zID0gZHJvcGRvd24uZ2V0T3B0aW9ucygpXG4gICAgICogY29uc29sZS5sb2coJ0Ryb3Bkb3duIG9wdGlvbnM6Jywgb3B0aW9ucylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgb3B0aW9ucyBmb3IgdGhpcyBkcm9wZG93bi5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJhd09wdGlvbnMgPSB0aGlzLmFjcm9GaWVsZC5nZXRPcHRpb25zKCk7XG4gICAgICAgIHZhciBvcHRpb25zID0gbmV3IEFycmF5KHJhd09wdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gb3B0aW9ucy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHJhd09wdGlvbnNbaWR4XSwgZGlzcGxheSA9IF9hLmRpc3BsYXksIHZhbHVlID0gX2EudmFsdWU7XG4gICAgICAgICAgICBvcHRpb25zW2lkeF0gPSAoZGlzcGxheSAhPT0gbnVsbCAmJiBkaXNwbGF5ICE9PSB2b2lkIDAgPyBkaXNwbGF5IDogdmFsdWUpLmRlY29kZVRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2VsZWN0ZWQgb3B0aW9ucyBmb3IgdGhpcyBkcm9wZG93bi4gVGhlc2UgYXJlIHRoZSB2YWx1ZXMgdGhhdCB3ZXJlXG4gICAgICogc2VsZWN0ZWQgYnkgYSBodW1hbiB1c2VyIHZpYSBhIFBERiByZWFkZXIsIG9yIHByb2dyYW1hdGljYWxseSB2aWFcbiAgICAgKiBzb2Z0d2FyZS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogY29uc3Qgc2VsZWN0aW9ucyA9IGRyb3Bkb3duLmdldFNlbGVjdGVkKClcbiAgICAgKiBjb25zb2xlLmxvZygnRHJvcGRvd24gc2VsZWN0aW9uczonLCBzZWxlY3Rpb25zKVxuICAgICAqIGBgYFxuICAgICAqID4gKipOT1RFOioqIE5vdGUgdGhhdCBQREYgcmVhZGVycyBvbmx5IGRpc3BsYXkgb25lIHNlbGVjdGVkIG9wdGlvbiB3aGVuXG4gICAgICogPiByZW5kZXJpbmcgZHJvcGRvd25zLiBIb3dldmVyLCB0aGUgUERGIHNwZWNpZmljYXRpb24gZG9lcyBhbGxvdyBmb3JcbiAgICAgKiA+IG11bHRpcGxlIHZhbHVlcyB0byBiZSBzZWxlY3RlZCBpbiBhIGRyb3Bkb3duLiBBcyBzdWNoLCB0aGUgYHBkZi1saWJgXG4gICAgICogPiBBUEkgc3VwcG9ydHMgdGhpcy4gSG93ZXZlciwgaW4gbW9zdCBjYXNlcyB0aGUgYXJyYXkgcmV0dXJuZWQgYnkgdGhpc1xuICAgICAqID4gbWV0aG9kIHdpbGwgY29udGFpbiBvbmx5IGEgc2luZ2xlIGVsZW1lbnQgKG9yIG5vIGVsZW1lbnRzKS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2VsZWN0ZWQgb3B0aW9ucyBpbiB0aGlzIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5nZXRTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldFZhbHVlcygpO1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBuZXcgQXJyYXkodmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHNlbGVjdGVkW2lkeF0gPSB2YWx1ZXNbaWR4XS5kZWNvZGVUZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsaXN0IG9mIG9wdGlvbnMgdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGlzIGRyb3Bkb3duLiBUaGVzZSBhcmVcbiAgICAgKiB0aGUgdmFsdWVzIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgZm9yIHVzZXJzIHRvIHNlbGVjdCB3aGVuIHRoZXkgdmlldyB0aGlzXG4gICAgICogZHJvcGRvd24gaW4gYSBQREYgcmVhZGVyLiBOb3RlIHRoYXQgcHJlZXhpc3Rpbmcgb3B0aW9ucyBmb3IgdGhpcyBkcm9wZG93blxuICAgICAqIHdpbGwgYmUgcmVtb3ZlZC4gT25seSB0aGUgdmFsdWVzIHBhc3NlZCBhcyBgb3B0aW9uc2Agd2lsbCBiZSBhdmFpbGFibGUgdG9cbiAgICAgKiBzZWxlY3QuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3BsYW5ldHMuZHJvcGRvd24nKVxuICAgICAqIGRyb3Bkb3duLnNldE9wdGlvbnMoWydFYXJ0aCcsICdNYXJzJywgJ1BsdXRvJywgJ1ZlbnVzJ10pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIGluIHRoaXMgZHJvcGRvd24uXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBhc3NlcnRJcyhvcHRpb25zLCAnb3B0aW9ucycsIFtBcnJheV0pO1xuICAgICAgICB2YXIgb3B0aW9uT2JqZWN0cyA9IG5ldyBBcnJheShvcHRpb25zLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBvcHRpb25PYmplY3RzW2lkeF0gPSB7IHZhbHVlOiBQREZIZXhTdHJpbmcuZnJvbVRleHQob3B0aW9uc1tpZHhdKSB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldE9wdGlvbnMob3B0aW9uT2JqZWN0cyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgdG8gdGhlIGxpc3Qgb2Ygb3B0aW9ucyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgZHJvcGRvd24uIFVzZXJzXG4gICAgICogd2lsbCBiZSBhYmxlIHRvIHNlbGVjdCB0aGVzZSB2YWx1ZXMgaW4gYSBQREYgcmVhZGVyLiBJbiBhZGRpdGlvbiB0byB0aGVcbiAgICAgKiB2YWx1ZXMgcGFzc2VkIGFzIGBvcHRpb25zYCwgYW55IHByZWV4aXN0aW5nIG9wdGlvbnMgZm9yIHRoaXMgZHJvcGRvd24gd2lsbFxuICAgICAqIHN0aWxsIGJlIGF2YWlsYWJsZSBmb3IgdXNlcnMgdG8gc2VsZWN0LlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdyb2NrZXRzLmRyb3Bkb3duJylcbiAgICAgKiBkcm9wZG93bi5hZGRPcHRpb25zKFsnU2F0dXJuIElWJywgJ0ZhbGNvbiBIZWF2eSddKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBvcHRpb25zIE5ldyBvcHRpb25zIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiB0aGlzIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0SXMob3B0aW9ucywgJ29wdGlvbnMnLCBbJ3N0cmluZycsIEFycmF5XSk7XG4gICAgICAgIHZhciBvcHRpb25zQXJyID0gQXJyYXkuaXNBcnJheShvcHRpb25zKSA/IG9wdGlvbnMgOiBbb3B0aW9uc107XG4gICAgICAgIHZhciBleGlzdGluZ09wdGlvbnMgPSB0aGlzLmFjcm9GaWVsZC5nZXRPcHRpb25zKCk7XG4gICAgICAgIHZhciBuZXdPcHRpb25zID0gbmV3IEFycmF5KG9wdGlvbnNBcnIubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gb3B0aW9uc0Fyci5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIG5ld09wdGlvbnNbaWR4XSA9IHsgdmFsdWU6IFBERkhleFN0cmluZy5mcm9tVGV4dChvcHRpb25zQXJyW2lkeF0pIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0T3B0aW9ucyhleGlzdGluZ09wdGlvbnMuY29uY2F0KG5ld09wdGlvbnMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbGVjdCBvbmUgb3IgbW9yZSB2YWx1ZXMgZm9yIHRoaXMgZHJvcGRvd24uIFRoaXMgb3BlcmF0aW9uIGlzIGFuYWxvZ291c1xuICAgICAqIHRvIGEgaHVtYW4gdXNlciBvcGVuaW5nIHRoZSBkcm9wZG93biBpbiBhIFBERiByZWFkZXIgYW5kIGNsaWNraW5nIG9uIGFcbiAgICAgKiB2YWx1ZSB0byBzZWxlY3QgaXQuIFRoaXMgbWV0aG9kIHdpbGwgdXBkYXRlIHRoZSB1bmRlcmx5aW5nIHN0YXRlIG9mIHRoZVxuICAgICAqIGRyb3Bkb3duIHRvIGluZGljYXRlIHdoaWNoIHZhbHVlcyBoYXZlIGJlZW4gc2VsZWN0ZWQuIFBERiBsaWJyYXJpZXMgYW5kXG4gICAgICogcmVhZGVycyB3aWxsIGJlIGFibGUgdG8gZXh0cmFjdCB0aGVzZSB2YWx1ZXMgZnJvbSB0aGUgc2F2ZWQgZG9jdW1lbnQgYW5kXG4gICAgICogZGV0ZXJtaW5lIHdoaWNoIHZhbHVlcyB3ZXJlIHNlbGVjdGVkLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ2Jlc3Quc3VwZXJoZXJvLmRyb3Bkb3duJylcbiAgICAgKiBkcm9wZG93bi5zZWxlY3QoJ09uZSBQdW5jaCBNYW4nKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYXJrIHRoaXMgZHJvcGRvd24gYXMgZGlydHksIGNhdXNpbmcgaXRzIGFwcGVhcmFuY2VcbiAgICAgKiBzdHJlYW1zIHRvIGJlIHVwZGF0ZWQgd2hlbiBlaXRoZXIgW1tQREZEb2N1bWVudC5zYXZlXV0gb3JcbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIGlzIGNhbGxlZC4gVGhlIHVwZGF0ZWQgc3RyZWFtcyB3aWxsXG4gICAgICogZGlzcGxheSB0aGUgc2VsZWN0ZWQgb3B0aW9uIGluc2lkZSB0aGUgd2lkZ2V0cyBvZiB0aGlzIGRyb3Bkb3duLlxuICAgICAqXG4gICAgICogKipJTVBPUlRBTlQ6KiogVGhlIGRlZmF1bHQgZm9udCB1c2VkIHRvIHVwZGF0ZSBhcHBlYXJhbmNlIHN0cmVhbXMgaXNcbiAgICAgKiBbW1N0YW5kYXJkRm9udHMuSGVsdmV0aWNhXV0uIE5vdGUgdGhhdCB0aGlzIGlzIGEgV2luQW5zaSBmb250LiBUaGlzIG1lYW5zXG4gICAgICogdGhhdCBlbmNvZGluZyBlcnJvcnMgd2lsbCBiZSB0aHJvd24gaWYgdGhlIHNlbGVjdGVkIG9wdGlvbiBmb3IgdGhpcyBmaWVsZFxuICAgICAqIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3V0c2lkZSB0aGUgV2luQW5zaSBjaGFyYWN0ZXIgc2V0ICh0aGUgbGF0aW4gYWxwaGFiZXQpLlxuICAgICAqXG4gICAgICogRW1iZWRkaW5nIGEgY3VzdG9tIGZvbnQgYW5kIHBhc3NpbmcgaXQgdG9cbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIG9yIFtbUERGRHJvcGRvd24udXBkYXRlQXBwZWFyYW5jZXNdXVxuICAgICAqIGFsbG93cyB5b3UgdG8gZ2VuZXJhdGUgYXBwZWFyYW5jZSBzdHJlYW1zIHdpdGggY2hhcmFjdGVycyBvdXRzaWRlIHRoZVxuICAgICAqIGxhdGluIGFscGhhYmV0IChhc3N1bWluZyB0aGUgY3VzdG9tIGZvbnQgc3VwcG9ydHMgdGhlbSkuXG4gICAgICpcbiAgICAgKiBTZWxlY3RpbmcgYW4gb3B0aW9uIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gdGhpcyBkcm9wZG93bidzIG9wdGlvbiBsaXN0XG4gICAgICogKHNlZSBbW1BERkRyb3Bkb3duLmdldE9wdGlvbnNdXSkgd2lsbCBlbmFibGUgZWRpdGluZyBvbiB0aGlzIGRyb3Bkb3duXG4gICAgICogKHNlZSBbW1BERkRyb3Bkb3duLmVuYWJsZUVkaXRpbmddXSkuXG4gICAgICpcbiAgICAgKiA+ICoqTk9URToqKiBQREYgcmVhZGVycyBvbmx5IGRpc3BsYXkgb25lIHNlbGVjdGVkIG9wdGlvbiB3aGVuIHJlbmRlcmluZ1xuICAgICAqID4gZHJvcGRvd25zLiBIb3dldmVyLCB0aGUgUERGIHNwZWNpZmljYXRpb24gZG9lcyBhbGxvdyBmb3IgbXVsdGlwbGUgdmFsdWVzXG4gICAgICogPiB0byBiZSBzZWxlY3RlZCBpbiBhIGRyb3Bkb3duLiBBcyBzdWNoLCB0aGUgYHBkZi1saWJgIEFQSSBzdXBwb3J0cyB0aGlzLlxuICAgICAqID4gSG93ZXZlciwgaXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIHNlbGVjdCBtb3JlIHRoYW4gb25lIHZhbHVlIHdpdGggdGhpc1xuICAgICAqID4gbWV0aG9kLCBhcyBvbmx5IG9uZSB3aWxsIGJlIHZpc2libGUuIFtbUERGT3B0aW9uTGlzdF1dIGZpZWxkcyBhcmUgYmV0dGVyXG4gICAgICogPiBzdWl0ZWQgZm9yIGRpc3BsYXlpbmcgbXVsdGlwbGUgc2VsZWN0ZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gICAgICogQHBhcmFtIG1lcmdlIFdoZXRoZXIgb3Igbm90IGV4aXN0aW5nIHNlbGVjdGlvbnMgc2hvdWxkIGJlIHByZXNlcnZlZC5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMsIG1lcmdlKSB7XG4gICAgICAgIGlmIChtZXJnZSA9PT0gdm9pZCAwKSB7IG1lcmdlID0gZmFsc2U7IH1cbiAgICAgICAgYXNzZXJ0SXMob3B0aW9ucywgJ29wdGlvbnMnLCBbJ3N0cmluZycsIEFycmF5XSk7XG4gICAgICAgIGFzc2VydElzKG1lcmdlLCAnbWVyZ2UnLCBbJ2Jvb2xlYW4nXSk7XG4gICAgICAgIHZhciBvcHRpb25zQXJyID0gQXJyYXkuaXNBcnJheShvcHRpb25zKSA/IG9wdGlvbnMgOiBbb3B0aW9uc107XG4gICAgICAgIHZhciB2YWxpZE9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgdmFyIGhhc0N1c3RvbU9wdGlvbiA9IG9wdGlvbnNBcnIuZmluZChmdW5jdGlvbiAob3B0aW9uKSB7IHJldHVybiAhdmFsaWRPcHRpb25zLmluY2x1ZGVzKG9wdGlvbik7IH0pO1xuICAgICAgICBpZiAoaGFzQ3VzdG9tT3B0aW9uKVxuICAgICAgICAgICAgdGhpcy5lbmFibGVFZGl0aW5nKCk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgaWYgKG9wdGlvbnNBcnIubGVuZ3RoID4gMSB8fCAob3B0aW9uc0Fyci5sZW5ndGggPT09IDEgJiYgbWVyZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZU11bHRpc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShvcHRpb25zQXJyLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnNBcnIubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YWx1ZXNbaWR4XSA9IFBERkhleFN0cmluZy5mcm9tVGV4dChvcHRpb25zQXJyW2lkeF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJnZSkge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWVzID0gdGhpcy5hY3JvRmllbGQuZ2V0VmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRWYWx1ZXMoZXhpc3RpbmdWYWx1ZXMuY29uY2F0KHZhbHVlcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWVzKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCBzZWxlY3RlZCB2YWx1ZXMgZm9yIHRoaXMgZHJvcGRvd24uIFRoaXMgb3BlcmF0aW9uIGlzIGVxdWl2YWxlbnRcbiAgICAgKiB0byBzZWxlY3RpbmcgYW4gZW1wdHkgbGlzdC4gVGhpcyBtZXRob2Qgd2lsbCB1cGRhdGUgdGhlIHVuZGVybHlpbmcgc3RhdGVcbiAgICAgKiBvZiB0aGUgZHJvcGRvd24gdG8gaW5kaWNhdGUgdGhhdCBubyB2YWx1ZXMgaGF2ZSBiZWVuIHNlbGVjdGVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5jbGVhcigpXG4gICAgICogYGBgXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYXJrIHRoaXMgdGV4dCBmaWVsZCBhcyBkaXJ0eS4gU2VlIFtbUERGRHJvcGRvd24uc2VsZWN0XV1cbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWVzKFtdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZm9udCBzaXplIGZvciB0aGlzIGZpZWxkLiBMYXJnZXIgZm9udCBzaXplcyB3aWxsIHJlc3VsdCBpbiBsYXJnZXJcbiAgICAgKiB0ZXh0IGJlaW5nIGRpc3BsYXllZCB3aGVuIFBERiByZWFkZXJzIHJlbmRlciB0aGlzIGRyb3Bkb3duLiBGb250IHNpemVzIG1heVxuICAgICAqIGJlIGludGVnZXIgb3IgZmxvYXRpbmcgcG9pbnQgbnVtYmVycy4gU3VwcGx5aW5nIGEgbmVnYXRpdmUgZm9udCBzaXplIHdpbGxcbiAgICAgKiBjYXVzZSB0aGlzIG1ldGhvZCB0byB0aHJvdyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5zZXRGb250U2l6ZSg0KVxuICAgICAqIGRyb3Bkb3duLnNldEZvbnRTaXplKDE1LjcpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IFRoaXMgbWV0aG9kIGRlcGVuZHMgdXBvbiB0aGUgZXhpc3RlbmNlIG9mIGEgZGVmYXVsdCBhcHBlYXJhbmNlXG4gICAgICogPiAoYC9EQWApIHN0cmluZy4gSWYgdGhpcyBmaWVsZCBkb2VzIG5vdCBoYXZlIGEgZGVmYXVsdCBhcHBlYXJhbmNlIHN0cmluZyxcbiAgICAgKiA+IG9yIHRoYXQgc3RyaW5nIGRvZXMgbm90IGNvbnRhaW4gYSBmb250IHNpemUgKHZpYSB0aGUgYFRmYCBvcGVyYXRvciksXG4gICAgICogPiB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9udFNpemUgVGhlIGZvbnQgc2l6ZSB0byBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIHRleHQgaW4gdGhpcyBmaWVsZC5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuc2V0Rm9udFNpemUgPSBmdW5jdGlvbiAoZm9udFNpemUpIHtcbiAgICAgICAgYXNzZXJ0UG9zaXRpdmUoZm9udFNpemUsICdmb250U2l6ZScpO1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGb250U2l6ZShmb250U2l6ZSk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHVzZXJzIGFyZSBhbGxvd2VkIHRvIGVkaXQgdGhlIHNlbGVjdGVkIHZhbHVlIG9mIHRoaXNcbiAgICAgKiBkcm9wZG93biBkaXJlY3RseSBhbmQgYXJlIG5vdCBjb25zdHJhaW5lZCBieSB0aGUgbGlzdCBvZiBhdmFpbGFibGVcbiAgICAgKiBvcHRpb25zLiBTZWUgW1tQREZEcm9wZG93bi5lbmFibGVFZGl0aW5nXV0gYW5kXG4gICAgICogW1tQREZEcm9wZG93bi5kaXNhYmxlRWRpdGluZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogaWYgKGRyb3Bkb3duLmlzRWRpdGFibGUoKSkgY29uc29sZS5sb2coJ0VkaXRpbmcgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBkcm9wZG93biBpcyBlZGl0YWJsZS5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuaXNFZGl0YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNyb0ZpZWxkLmhhc0ZsYWcoQWNyb0Nob2ljZUZsYWdzLkVkaXQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgdXNlcnMgdG8gZWRpdCB0aGUgc2VsZWN0ZWQgdmFsdWUgb2YgdGhpcyBkcm9wZG93biBpbiBQREYgcmVhZGVyc1xuICAgICAqIHdpdGggdGhlaXIga2V5Ym9hcmQuIFRoaXMgbWVhbnMgdGhhdCB0aGUgc2VsZWN0ZWQgdmFsdWUgb2YgdGhpcyBkcm9wZG93blxuICAgICAqIHdpbGwgbm90IGJlIGNvbnN0cmFpbmVkIGJ5IHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb25zLiBIb3dldmVyLCBpZiB0aGlzXG4gICAgICogZHJvcGRvd24gaGFzIGFueSBhdmFpbGFibGUgb3B0aW9ucywgdXNlcnMgd2lsbCBzdGlsbCBiZSBhbGxvd2VkIHRvIHNlbGVjdFxuICAgICAqIGZyb20gdGhhdCBsaXN0LlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5lbmFibGVFZGl0aW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZW5hYmxlRWRpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5FZGl0LCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBhbGxvdyB1c2VycyB0byBlZGl0IHRoZSBzZWxlY3RlZCB2YWx1ZSBvZiB0aGlzIGRyb3Bkb3duIGluIFBERlxuICAgICAqIHJlYWRlcnMgd2l0aCB0aGVpciBrZXlib2FyZC4gVGhpcyB3aWxsIGNvbnN0cmFpbiB0aGUgc2VsZWN0ZWQgdmFsdWUgb2ZcbiAgICAgKiB0aGlzIGRyb3Bkb3duIHRvIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb25zLiBVc2VycyB3aWxsIG9ubHkgYmUgYWJsZVxuICAgICAqIHRvIHNlbGVjdCBhbiBvcHRpb24gZnJvbSB0aGF0IGxpc3QuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGRyb3Bkb3duLmRpc2FibGVFZGl0aW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZGlzYWJsZUVkaXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuRWRpdCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9wdGlvbiBsaXN0IG9mIHRoaXMgZHJvcGRvd24gaXMgYWx3YXlzIGRpc3BsYXllZFxuICAgICAqIGluIGFscGhhYmV0aWNhbCBvcmRlciwgaXJyZXNwZWN0aXZlIG9mIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgb3B0aW9uc1xuICAgICAqIHdlcmUgYWRkZWQgdG8gdGhlIGRyb3Bkb3duLiBTZWUgW1tQREZEcm9wZG93bi5lbmFibGVTb3J0aW5nXV0gYW5kXG4gICAgICogW1tQREZEcm9wZG93bi5kaXNhYmxlU29ydGluZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogaWYgKGRyb3Bkb3duLmlzU29ydGVkKCkpIGNvbnNvbGUubG9nKCdTb3J0aW5nIGlzIGVuYWJsZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgZHJvcGRvd24ncyBvcHRpb25zIGFyZSBzb3J0ZWQuXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmlzU29ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvQ2hvaWNlRmxhZ3MuU29ydCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbHdheXMgZGlzcGxheSB0aGUgb3B0aW9uIGxpc3Qgb2YgdGhpcyBkcm9wZG93biBpbiBhbHBoYWJldGljYWwgb3JkZXIsXG4gICAgICogaXJyZXNwZWN0aXZlIG9mIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgb3B0aW9ucyB3ZXJlIGFkZGVkIHRvIHRoaXMgZHJvcGRvd24uXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGRyb3Bkb3duLmVuYWJsZVNvcnRpbmcoKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5lbmFibGVTb3J0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0Nob2ljZUZsYWdzLlNvcnQsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRG8gbm90IGFsd2F5cyBkaXNwbGF5IHRoZSBvcHRpb24gbGlzdCBvZiB0aGlzIGRyb3Bkb3duIGluIGFscGhhYmV0aWNhbFxuICAgICAqIG9yZGVyLiBJbnN0ZWFkLCBkaXNwbGF5IHRoZSBvcHRpb25zIGluIHdoaWNoZXZlciBvcmRlciB0aGV5IHdlcmUgYWRkZWRcbiAgICAgKiB0byB0aGUgbGlzdC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGRyb3Bkb3duLmRpc2FibGVTb3J0aW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZGlzYWJsZVNvcnRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuU29ydCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgbXVsdGlwbGUgb3B0aW9ucyBjYW4gYmUgc2VsZWN0ZWQgZnJvbSB0aGlzIGRyb3Bkb3duJ3NcbiAgICAgKiBvcHRpb24gbGlzdC4gU2VlIFtbUERGRHJvcGRvd24uZW5hYmxlTXVsdGlzZWxlY3RdXSBhbmRcbiAgICAgKiBbW1BERkRyb3Bkb3duLmRpc2FibGVNdWx0aXNlbGVjdF1dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogaWYgKGRyb3Bkb3duLmlzTXVsdGlzZWxlY3QoKSkgY29uc29sZS5sb2coJ011bHRpc2VsZWN0IGlzIGVuYWJsZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IG11bHRpcGxlIG9wdGlvbnMgY2FuIGJlIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5pc011bHRpc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvQ2hvaWNlRmxhZ3MuTXVsdGlTZWxlY3QpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgdXNlcnMgdG8gc2VsZWN0IG1vcmUgdGhhbiBvbmUgb3B0aW9uIGZyb20gdGhpcyBkcm9wZG93bidzIG9wdGlvblxuICAgICAqIGxpc3QuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5lbmFibGVNdWx0aXNlbGVjdCgpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmVuYWJsZU11bHRpc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0Nob2ljZUZsYWdzLk11bHRpU2VsZWN0LCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBhbGxvdyB1c2VycyB0byBzZWxlY3QgbW9yZSB0aGFuIG9uZSBvcHRpb24gZnJvbSB0aGlzIGRyb3Bkb3duJ3NcbiAgICAgKiBvcHRpb24gbGlzdC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGRyb3Bkb3duLmRpc2FibGVNdWx0aXNlbGVjdCgpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmRpc2FibGVNdWx0aXNlbGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5NdWx0aVNlbGVjdCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNlbGVjdGVkIG9wdGlvbiBzaG91bGQgYmUgc3BlbGwgY2hlY2tlZCBieSBQREZcbiAgICAgKiByZWFkZXJzLiBTcGVsbCBjaGVja2luZyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIGlmIHRoaXMgZHJvcGRvd24gYWxsb3dzXG4gICAgICogZWRpdGluZyAoc2VlIFtbUERGRHJvcGRvd24uaXNFZGl0YWJsZV1dKS4gU2VlXG4gICAgICogW1tQREZEcm9wZG93bi5lbmFibGVTcGVsbENoZWNraW5nXV0gYW5kXG4gICAgICogW1tQREZEcm9wZG93bi5kaXNhYmxlU3BlbGxDaGVja2luZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogaWYgKGRyb3Bkb3duLmlzU3BlbGxDaGVja2VkKCkpIGNvbnNvbGUubG9nKCdTcGVsbCBjaGVja2luZyBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIGRyb3Bkb3duIGNhbiBiZSBzcGVsbCBjaGVja2VkLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5pc1NwZWxsQ2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9DaG9pY2VGbGFncy5Eb05vdFNwZWxsQ2hlY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgUERGIHJlYWRlcnMgdG8gc3BlbGwgY2hlY2sgdGhlIHNlbGVjdGVkIG9wdGlvbiBvZiB0aGlzIGRyb3Bkb3duLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5lbmFibGVTcGVsbENoZWNraW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZW5hYmxlU3BlbGxDaGVja2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5Eb05vdFNwZWxsQ2hlY2ssIGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBhbGxvdyBQREYgcmVhZGVycyB0byBzcGVsbCBjaGVjayB0aGUgc2VsZWN0ZWQgb3B0aW9uIG9mIHRoaXNcbiAgICAgKiBkcm9wZG93bi4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGRyb3Bkb3duLmRpc2FibGVTcGVsbENoZWNraW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZGlzYWJsZVNwZWxsQ2hlY2tpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuRG9Ob3RTcGVsbENoZWNrLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcHRpb24gc2VsZWN0ZWQgYnkgYSB1c2VyIGlzIHN0b3JlZCwgb3IgXCJjb21taXR0ZWRcIixcbiAgICAgKiB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgb3B0aW9uLiBUaGUgYWx0ZXJuYXRpdmUgaXMgdGhhdCB0aGUgdXNlcidzXG4gICAgICogc2VsZWN0aW9uIGlzIHN0b3JlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGlzIGRyb3Bkb3duIGZpZWxkIChieSBjbGlja2luZ1xuICAgICAqIG91dHNpZGUgb2YgaXQgLSBvbiBhbm90aGVyIGZpZWxkLCBmb3IgZXhhbXBsZSkuIFNlZVxuICAgICAqIFtbUERGRHJvcGRvd24uZW5hYmxlU2VsZWN0T25DbGlja11dIGFuZFxuICAgICAqIFtbUERGRHJvcGRvd24uZGlzYWJsZVNlbGVjdE9uQ2xpY2tdXS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ3NvbWUuZHJvcGRvd24uZmllbGQnKVxuICAgICAqIGlmIChkcm9wZG93bi5pc1NlbGVjdE9uQ2xpY2soKSkgY29uc29sZS5sb2coJ1NlbGVjdCBvbiBjbGljayBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCBvcHRpb25zIGFyZSBzZWxlY3RlZCBpbW1lZGlhdGVseSBhZnRlciB0aGV5IGFyZVxuICAgICAqICAgICAgICAgIGNsaWNrZWQuXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmlzU2VsZWN0T25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNyb0ZpZWxkLmhhc0ZsYWcoQWNyb0Nob2ljZUZsYWdzLkNvbW1pdE9uU2VsQ2hhbmdlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3JlIHRoZSBvcHRpb24gc2VsZWN0ZWQgYnkgYSB1c2VyIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSB1c2VyIGNsaWNrcyB0aGVcbiAgICAgKiBvcHRpb24uIERvIG5vdCB3YWl0IGZvciB0aGUgdXNlciB0byBsZWF2ZSB0aGlzIGRyb3Bkb3duIGZpZWxkIChieSBjbGlja2luZ1xuICAgICAqIG91dHNpZGUgb2YgaXQgLSBvbiBhbm90aGVyIGZpZWxkLCBmb3IgZXhhbXBsZSkuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5lbmFibGVTZWxlY3RPbkNsaWNrKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5wcm90b3R5cGUuZW5hYmxlU2VsZWN0T25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5Db21taXRPblNlbENoYW5nZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYWl0IHRvIHN0b3JlIHRoZSBvcHRpb24gc2VsZWN0ZWQgYnkgYSB1c2VyIHVudGlsIHRoZXkgbGVhdmUgdGhpcyBkcm9wZG93blxuICAgICAqIGZpZWxkIChieSBjbGlja2luZyBvdXRzaWRlIG9mIGl0IC0gb24gYW5vdGhlciBmaWVsZCwgZm9yIGV4YW1wbGUpLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBkcm9wZG93bi5kaXNhYmxlU2VsZWN0T25DbGljaygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmRpc2FibGVTZWxlY3RPbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0Nob2ljZUZsYWdzLkNvbW1pdE9uU2VsQ2hhbmdlLCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IHRoaXMgZHJvcGRvd24gb24gdGhlIHNwZWNpZmllZCBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHVidW50dUZvbnQgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KHVidW50dUZvbnRCeXRlcylcbiAgICAgKiBjb25zdCBwYWdlID0gcGRmRG9jLmFkZFBhZ2UoKVxuICAgICAqXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uY3JlYXRlRHJvcGRvd24oJ2Jlc3QuZ3VuZGFtJylcbiAgICAgKiBkcm9wZG93bi5zZXRPcHRpb25zKFsnRXhpYScsICdEeW5hbWVzJ10pXG4gICAgICogZHJvcGRvd24uc2VsZWN0KCdFeGlhJylcbiAgICAgKlxuICAgICAqIGRyb3Bkb3duLmFkZFRvUGFnZShwYWdlLCB7XG4gICAgICogICB4OiA1MCxcbiAgICAgKiAgIHk6IDc1LFxuICAgICAqICAgd2lkdGg6IDIwMCxcbiAgICAgKiAgIGhlaWdodDogMTAwLFxuICAgICAqICAgdGV4dENvbG9yOiByZ2IoMSwgMCwgMCksXG4gICAgICogICBiYWNrZ3JvdW5kQ29sb3I6IHJnYigwLCAxLCAwKSxcbiAgICAgKiAgIGJvcmRlckNvbG9yOiByZ2IoMCwgMCwgMSksXG4gICAgICogICBib3JkZXJXaWR0aDogMixcbiAgICAgKiAgIHJvdGF0ZTogZGVncmVlcyg5MCksXG4gICAgICogICBmb250OiB1YnVudHVGb250LFxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyB3aWRnZXQgZm9yIHRoaXMgZHJvcGRvd24gZmllbGQuXG4gICAgICogQHBhcmFtIHBhZ2UgVGhlIHBhZ2UgdG8gd2hpY2ggdGhpcyBkcm9wZG93biB3aWRnZXQgc2hvdWxkIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBhZGRpbmcgdGhpcyBkcm9wZG93biB3aWRnZXQuXG4gICAgICovXG4gICAgUERGRHJvcGRvd24ucHJvdG90eXBlLmFkZFRvUGFnZSA9IGZ1bmN0aW9uIChwYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgYXNzZXJ0SXMocGFnZSwgJ3BhZ2UnLCBbW1BERlBhZ2UsICdQREZQYWdlJ11dKTtcbiAgICAgICAgYXNzZXJ0RmllbGRBcHBlYXJhbmNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAoISgndGV4dENvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMudGV4dENvbG9yID0gcmdiKDAsIDAsIDApO1xuICAgICAgICBpZiAoISgnYmFja2dyb3VuZENvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYmFja2dyb3VuZENvbG9yID0gcmdiKDEsIDEsIDEpO1xuICAgICAgICBpZiAoISgnYm9yZGVyQ29sb3InIGluIG9wdGlvbnMpKVxuICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJDb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgaWYgKCEoJ2JvcmRlcldpZHRoJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAxO1xuICAgICAgICAvLyBDcmVhdGUgYSB3aWRnZXQgZm9yIHRoaXMgZHJvcGRvd25cbiAgICAgICAgdmFyIHdpZGdldCA9IHRoaXMuY3JlYXRlV2lkZ2V0KHtcbiAgICAgICAgICAgIHg6IChfYSA9IG9wdGlvbnMueCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCxcbiAgICAgICAgICAgIHk6IChfYiA9IG9wdGlvbnMueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAoX2MgPSBvcHRpb25zLndpZHRoKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAyMDAsXG4gICAgICAgICAgICBoZWlnaHQ6IChfZCA9IG9wdGlvbnMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiA1MCxcbiAgICAgICAgICAgIHRleHRDb2xvcjogb3B0aW9ucy50ZXh0Q29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKF9lID0gb3B0aW9ucy5ib3JkZXJXaWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9mID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICBoaWRkZW46IG9wdGlvbnMuaGlkZGVuLFxuICAgICAgICAgICAgcGFnZTogcGFnZS5yZWYsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgd2lkZ2V0UmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3Rlcih3aWRnZXQuZGljdCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhpcyBmaWVsZFxuICAgICAgICB0aGlzLmFjcm9GaWVsZC5hZGRXaWRnZXQod2lkZ2V0UmVmKTtcbiAgICAgICAgLy8gU2V0IGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3Igd2lkZ2V0XG4gICAgICAgIHZhciBmb250ID0gKF9nID0gb3B0aW9ucy5mb250KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiB0aGlzLmRvYy5nZXRGb3JtKCkuZ2V0RGVmYXVsdEZvbnQoKTtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlKHdpZGdldCwgZm9udCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhlIGdpdmVuIHBhZ2VcbiAgICAgICAgcGFnZS5ub2RlLmFkZEFubm90KHdpZGdldFJlZik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGRyb3Bkb3duIGhhcyBiZWVuIG1hcmtlZCBhcyBkaXJ0eSwgb3IgaWYgYW55IG9mXG4gICAgICogdGhpcyBkcm9wZG93bidzIHdpZGdldHMgZG8gbm90IGhhdmUgYW4gYXBwZWFyYW5jZSBzdHJlYW0uIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmdldERyb3Bkb3duKCdzb21lLmRyb3Bkb3duLmZpZWxkJylcbiAgICAgKiBpZiAoZHJvcGRvd24ubmVlZHNBcHBlYXJhbmNlc1VwZGF0ZSgpKSBjb25zb2xlLmxvZygnTmVlZHMgdXBkYXRlJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIGRyb3Bkb3duIG5lZWRzIGFuIGFwcGVhcmFuY2UgdXBkYXRlLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmlzRGlydHkoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgaGFzQXBwZWFyYW5jZXMgPSAoKF9hID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWwpIGluc3RhbmNlb2YgUERGU3RyZWFtO1xuICAgICAgICAgICAgaWYgKCFoYXNBcHBlYXJhbmNlcylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIGRyb3Bkb3duJ3Mgd2lkZ2V0cyB1c2luZ1xuICAgICAqIHRoZSBkZWZhdWx0IGFwcGVhcmFuY2UgcHJvdmlkZXIgZm9yIGRyb3Bkb3ducy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2EgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogZHJvcGRvd24uZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzKGhlbHZldGljYSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgZm9udCB0byBiZSB1c2VkIGZvciBjcmVhdGluZyB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS5kZWZhdWx0VXBkYXRlQXBwZWFyYW5jZXMgPSBmdW5jdGlvbiAoZm9udCkge1xuICAgICAgICBhc3NlcnRJcyhmb250LCAnZm9udCcsIFtbUERGRm9udCwgJ1BERkZvbnQnXV0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUFwcGVhcmFuY2VzKGZvbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMgZm9yIGVhY2ggb2YgdGhpcyBkcm9wZG93bidzIHdpZGdldHMgdXNpbmdcbiAgICAgKiB0aGUgZ2l2ZW4gYXBwZWFyYW5jZSBwcm92aWRlci4gSWYgbm8gYHByb3ZpZGVyYCBpcyBwYXNzZWQsIHRoZSBkZWZhdWx0XG4gICAgICogYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgZHJvcGRvd25zIHdpbGwgYmUgdXNlZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2EgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IGRyb3Bkb3duID0gZm9ybS5nZXREcm9wZG93bignc29tZS5kcm9wZG93bi5maWVsZCcpXG4gICAgICogZHJvcGRvd24udXBkYXRlQXBwZWFyYW5jZXMoaGVsdmV0aWNhLCAoZmllbGQsIHdpZGdldCwgZm9udCkgPT4ge1xuICAgICAqICAgLi4uXG4gICAgICogICByZXR1cm4gZHJhd1RleHRGaWVsZCguLi4pXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgZm9udCB0byBiZSB1c2VkIGZvciBjcmVhdGluZyB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zLlxuICAgICAqIEBwYXJhbSBwcm92aWRlciBPcHRpb25hbGx5LCB0aGUgYXBwZWFyYW5jZSBwcm92aWRlciB0byBiZSB1c2VkIGZvclxuICAgICAqICAgICAgICAgICAgICAgICBnZW5lcmF0aW5nIHRoZSBjb250ZW50cyBvZiB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zLlxuICAgICAqL1xuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS51cGRhdGVBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uIChmb250LCBwcm92aWRlcikge1xuICAgICAgICBhc3NlcnRJcyhmb250LCAnZm9udCcsIFtbUERGRm9udCwgJ1BERkZvbnQnXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChwcm92aWRlciwgJ3Byb3ZpZGVyJywgW0Z1bmN0aW9uXSk7XG4gICAgICAgIHZhciB3aWRnZXRzID0gdGhpcy5hY3JvRmllbGQuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIGZvbnQsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtBc0NsZWFuKCk7XG4gICAgfTtcbiAgICAvLyBnZXRPcHRpb24oaW5kZXg6IG51bWJlcik6IHN0cmluZyB7fVxuICAgIC8vIGdldFNlbGVjdGVkSW5kaWNlcygpOiBudW1iZXJbXSB7fVxuICAgIC8vIHJlbW92ZU9wdGlvbnMob3B0aW9uOiBzdHJpbmcgfCBzdHJpbmdbXSkge31cbiAgICAvLyByZW1vdmVJbmRpY2VzKG9wdGlvbjogbnVtYmVyW10pIHt9XG4gICAgLy8gZGVzZWxlY3Qob3B0aW9uczogc3RyaW5nIHwgc3RyaW5nW10pIHt9XG4gICAgLy8gZGVzZWxlY3RJbmRpY2VzKG9wdGlvbkluZGljZXM6IG51bWJlcltdKSB7fVxuICAgIFBERkRyb3Bkb3duLnByb3RvdHlwZS51cGRhdGVXaWRnZXRBcHBlYXJhbmNlID0gZnVuY3Rpb24gKHdpZGdldCwgZm9udCwgcHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIGFwUHJvdmlkZXIgPSBwcm92aWRlciAhPT0gbnVsbCAmJiBwcm92aWRlciAhPT0gdm9pZCAwID8gcHJvdmlkZXIgOiBkZWZhdWx0RHJvcGRvd25BcHBlYXJhbmNlUHJvdmlkZXI7XG4gICAgICAgIHZhciBhcHBlYXJhbmNlcyA9IG5vcm1hbGl6ZUFwcGVhcmFuY2UoYXBQcm92aWRlcih0aGlzLCB3aWRnZXQsIGZvbnQpKTtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlV2l0aEZvbnQod2lkZ2V0LCBmb250LCBhcHBlYXJhbmNlcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiA+ICoqTk9URToqKiBZb3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJbnN0ZWFkLFxuICAgICAqID4gY29uc2lkZXIgdXNpbmcgdGhlIFtbUERGRm9ybS5nZXREcm9wZG93bl1dIG1ldGhvZCwgd2hpY2ggd2lsbCBjcmVhdGUgYW5cbiAgICAgKiA+IGluc3RhbmNlIG9mIFtbUERGRHJvcGRvd25dXSBmb3IgeW91LlxuICAgICAqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIFtbUERGRHJvcGRvd25dXSBmcm9tIGFuIGV4aXN0aW5nIGFjcm9Db21ib0JveCBhbmQgcmVmXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWNyb0NvbWJvQm94IFRoZSB1bmRlcmx5aW5nIGBQREZBY3JvQ29tYm9Cb3hgIGZvciB0aGlzIGRyb3Bkb3duLlxuICAgICAqIEBwYXJhbSByZWYgVGhlIHVuaXF1ZSByZWZlcmVuY2UgZm9yIHRoaXMgZHJvcGRvd24uXG4gICAgICogQHBhcmFtIGRvYyBUaGUgZG9jdW1lbnQgdG8gd2hpY2ggdGhpcyBkcm9wZG93biB3aWxsIGJlbG9uZy5cbiAgICAgKi9cbiAgICBQREZEcm9wZG93bi5vZiA9IGZ1bmN0aW9uIChhY3JvQ29tYm9Cb3gsIHJlZiwgZG9jKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGRHJvcGRvd24oYWNyb0NvbWJvQm94LCByZWYsIGRvYyk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGRHJvcGRvd247XG59KFBERkZpZWxkKSk7XG5leHBvcnQgZGVmYXVsdCBQREZEcm9wZG93bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkRyb3Bkb3duLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERlBhZ2UgZnJvbSBcIi4uL1BERlBhZ2VcIjtcbmltcG9ydCBQREZGb250IGZyb20gXCIuLi9QREZGb250XCI7XG5pbXBvcnQgUERGRmllbGQsIHsgYXNzZXJ0RmllbGRBcHBlYXJhbmNlT3B0aW9ucywgfSBmcm9tIFwiLi9QREZGaWVsZFwiO1xuaW1wb3J0IHsgbm9ybWFsaXplQXBwZWFyYW5jZSwgZGVmYXVsdE9wdGlvbkxpc3RBcHBlYXJhbmNlUHJvdmlkZXIsIH0gZnJvbSBcIi4vYXBwZWFyYW5jZXNcIjtcbmltcG9ydCB7IHJnYiB9IGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCB7IGRlZ3JlZXMgfSBmcm9tIFwiLi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBQREZIZXhTdHJpbmcsIFBERlN0cmVhbSwgUERGQWNyb0xpc3RCb3gsIEFjcm9DaG9pY2VGbGFncywgfSBmcm9tIFwiLi4vLi4vY29yZVwiO1xuaW1wb3J0IHsgYXNzZXJ0SXMsIGFzc2VydElzU3Vic2V0LCBhc3NlcnRPclVuZGVmaW5lZCwgYXNzZXJ0UG9zaXRpdmUsIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb3B0aW9uIGxpc3QgZmllbGQgb2YgYSBbW1BERkZvcm1dXS5cbiAqXG4gKiBbW1BERk9wdGlvbkxpc3RdXSBmaWVsZHMgYXJlIGludGVyYWN0aXZlIGxpc3RzIG9mIG9wdGlvbnMuIFRoZSBwdXJwb3NlIG9mIGFuXG4gKiBvcHRpb24gbGlzdCBpcyB0byBlbmFibGUgdXNlcnMgdG8gc2VsZWN0IG9uZSBvciBtb3JlIG9wdGlvbnMgZnJvbSBhIHNldCBvZlxuICogcG9zc2libGUgb3B0aW9ucy4gVXNlcnMgYXJlIGFibGUgdG8gc2VlIHRoZSBmdWxsIHNldCBvZiBvcHRpb25zIHdpdGhvdXRcbiAqIGZpcnN0IGhhdmluZyB0byBjbGljayBvbiB0aGUgZmllbGQgKHRob3VnaCBzY3JvbGxpbmcgbWF5IGJlIG5lY2Vzc2FyeSkuXG4gKiBDbGlja2luZyBhbiBvcHRpb24gaW4gdGhlIGxpc3Qgd2lsbCBjYXVzZSBpdCB0byBiZSBzZWxlY3RlZCBhbmQgZGlzcGxheWVkXG4gKiB3aXRoIGEgaGlnaGxpZ2h0ZWQgYmFja2dyb3VuZC4gU29tZSBvcHRpb24gbGlzdHMgYWxsb3cgdXNlcnMgdG8gc2VsZWN0XG4gKiBtb3JlIHRoYW4gb25lIG9wdGlvbiAoc2VlIFtbUERGT3B0aW9uTGlzdC5pc011bHRpc2VsZWN0XV0pLlxuICovXG52YXIgUERGT3B0aW9uTGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGT3B0aW9uTGlzdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZPcHRpb25MaXN0KGFjcm9MaXN0Qm94LCByZWYsIGRvYykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhY3JvTGlzdEJveCwgcmVmLCBkb2MpIHx8IHRoaXM7XG4gICAgICAgIGFzc2VydElzKGFjcm9MaXN0Qm94LCAnYWNyb0xpc3RCb3gnLCBbW1BERkFjcm9MaXN0Qm94LCAnUERGQWNyb0xpc3RCb3gnXV0pO1xuICAgICAgICBfdGhpcy5hY3JvRmllbGQgPSBhY3JvTGlzdEJveDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIHRoaXMgb3B0aW9uIGxpc3QuIFRoZXNlIG9wdGlvbnMgd2lsbFxuICAgICAqIGJlIGRpc3BsYXllZCB0byB1c2VycyB3aG8gdmlldyB0aGlzIG9wdGlvbiBsaXN0IGluIGEgUERGIHJlYWRlci5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogY29uc3Qgb3B0aW9ucyA9IG9wdGlvbkxpc3QuZ2V0T3B0aW9ucygpXG4gICAgICogY29uc29sZS5sb2coJ09wdGlvbiBMaXN0IG9wdGlvbnM6Jywgb3B0aW9ucylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgb3B0aW9ucyBmb3IgdGhpcyBvcHRpb24gbGlzdC5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmF3T3B0aW9ucyA9IHRoaXMuYWNyb0ZpZWxkLmdldE9wdGlvbnMoKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgQXJyYXkocmF3T3B0aW9ucy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvcHRpb25zLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gcmF3T3B0aW9uc1tpZHhdLCBkaXNwbGF5ID0gX2EuZGlzcGxheSwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgIG9wdGlvbnNbaWR4XSA9IChkaXNwbGF5ICE9PSBudWxsICYmIGRpc3BsYXkgIT09IHZvaWQgMCA/IGRpc3BsYXkgOiB2YWx1ZSkuZGVjb2RlVGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzZWxlY3RlZCBvcHRpb25zIGZvciB0aGlzIG9wdGlvbiBsaXN0LiBUaGVzZSBhcmUgdGhlIHZhbHVlcyB0aGF0XG4gICAgICogd2VyZSBzZWxlY3RlZCBieSBhIGh1bWFuIHVzZXIgdmlhIGEgUERGIHJlYWRlciwgb3IgcHJvZ3JhbWF0aWNhbGx5IHZpYVxuICAgICAqIHNvZnR3YXJlLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBjb25zdCBzZWxlY3Rpb25zID0gb3B0aW9uTGlzdC5nZXRTZWxlY3RlZCgpXG4gICAgICogY29uc29sZS5sb2coJ09wdGlvbiBMaXN0IHNlbGVjdGlvbnM6Jywgc2VsZWN0aW9ucylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgc2VsZWN0ZWQgb3B0aW9ucyBmb3IgdGhpcyBvcHRpb24gbGlzdC5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5nZXRTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldFZhbHVlcygpO1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBuZXcgQXJyYXkodmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHNlbGVjdGVkW2lkeF0gPSB2YWx1ZXNbaWR4XS5kZWNvZGVUZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsaXN0IG9mIG9wdGlvbnMgdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGlzIG9wdGlvbiBsaXN0LiBUaGVzZSBhcmVcbiAgICAgKiB0aGUgdmFsdWVzIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgZm9yIHVzZXJzIHRvIHNlbGVjdCB3aGVuIHRoZXkgdmlldyB0aGlzXG4gICAgICogb3B0aW9uIGxpc3QgaW4gYSBQREYgcmVhZGVyLiBOb3RlIHRoYXQgcHJlZXhpc3Rpbmcgb3B0aW9ucyBmb3IgdGhpc1xuICAgICAqIG9wdGlvbiBsaXN0IHdpbGwgYmUgcmVtb3ZlZC4gT25seSB0aGUgdmFsdWVzIHBhc3NlZCBhcyBgb3B0aW9uc2Agd2lsbCBiZVxuICAgICAqIGF2YWlsYWJsZSB0byBzZWxlY3QuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3BsYW5ldHMub3B0aW9uTGlzdCcpXG4gICAgICogb3B0aW9uTGlzdC5zZXRPcHRpb25zKFsnRWFydGgnLCAnTWFycycsICdQbHV0bycsICdWZW51cyddKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYXJrIHRoaXMgb3B0aW9uIGxpc3QgYXMgZGlydHksIGNhdXNpbmcgaXRzIGFwcGVhcmFuY2VcbiAgICAgKiBzdHJlYW1zIHRvIGJlIHVwZGF0ZWQgd2hlbiBlaXRoZXIgW1tQREZEb2N1bWVudC5zYXZlXV0gb3JcbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIGlzIGNhbGxlZC4gVGhlIHVwZGF0ZWQgc3RyZWFtcyB3aWxsXG4gICAgICogZGlzcGxheSB0aGUgb3B0aW9ucyB0aGlzIGZpZWxkIGNvbnRhaW5zIGluc2lkZSB0aGUgd2lkZ2V0cyBvZiB0aGlzIHRleHRcbiAgICAgKiBmaWVsZCAod2l0aCBzZWxlY3RlZCBvcHRpb25zIGhpZ2hsaWdodGVkKS5cbiAgICAgKlxuICAgICAqICoqSU1QT1JUQU5UOioqIFRoZSBkZWZhdWx0IGZvbnQgdXNlZCB0byB1cGRhdGUgYXBwZWFyYW5jZSBzdHJlYW1zIGlzXG4gICAgICogW1tTdGFuZGFyZEZvbnRzLkhlbHZldGljYV1dLiBOb3RlIHRoYXQgdGhpcyBpcyBhIFdpbkFuc2kgZm9udC4gVGhpcyBtZWFuc1xuICAgICAqIHRoYXQgZW5jb2RpbmcgZXJyb3JzIHdpbGwgYmUgdGhyb3duIGlmIHRoaXMgZmllbGQgY29udGFpbnMgYW55IG9wdGlvbnNcbiAgICAgKiB3aXRoIGNoYXJhY3RlcnMgb3V0c2lkZSB0aGUgV2luQW5zaSBjaGFyYWN0ZXIgc2V0ICh0aGUgbGF0aW4gYWxwaGFiZXQpLlxuICAgICAqXG4gICAgICogRW1iZWRkaW5nIGEgY3VzdG9tIGZvbnQgYW5kIHBhc3NpbmcgaXQgdG9cbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIG9yIFtbUERGT3B0aW9uTGlzdC51cGRhdGVBcHBlYXJhbmNlc11dXG4gICAgICogYWxsb3dzIHlvdSB0byBnZW5lcmF0ZSBhcHBlYXJhbmNlIHN0cmVhbXMgd2l0aCBjaGFyYWN0ZXJzIG91dHNpZGUgdGhlXG4gICAgICogbGF0aW4gYWxwaGFiZXQgKGFzc3VtaW5nIHRoZSBjdXN0b20gZm9udCBzdXBwb3J0cyB0aGVtKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiB0aGlzIG9wdGlvbiBsaXN0LlxuICAgICAqL1xuICAgIFBERk9wdGlvbkxpc3QucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBhc3NlcnRJcyhvcHRpb25zLCAnb3B0aW9ucycsIFtBcnJheV0pO1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgIHZhciBvcHRpb25PYmplY3RzID0gbmV3IEFycmF5KG9wdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gb3B0aW9ucy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIG9wdGlvbk9iamVjdHNbaWR4XSA9IHsgdmFsdWU6IFBERkhleFN0cmluZy5mcm9tVGV4dChvcHRpb25zW2lkeF0pIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0T3B0aW9ucyhvcHRpb25PYmplY3RzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCB0byB0aGUgbGlzdCBvZiBvcHRpb25zIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBvcHRpb24gbGlzdC4gVXNlcnNcbiAgICAgKiB3aWxsIGJlIGFibGUgdG8gc2VsZWN0IHRoZXNlIHZhbHVlcyBpbiBhIFBERiByZWFkZXIuIEluIGFkZGl0aW9uIHRvIHRoZVxuICAgICAqIHZhbHVlcyBwYXNzZWQgYXMgYG9wdGlvbnNgLCBhbnkgcHJlZXhpc3Rpbmcgb3B0aW9ucyBmb3IgdGhpcyBvcHRpb24gbGlzdFxuICAgICAqIHdpbGwgc3RpbGwgYmUgYXZhaWxhYmxlIGZvciB1c2VycyB0byBzZWxlY3QuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdyb2NrZXRzLm9wdGlvbkxpc3QnKVxuICAgICAqIG9wdGlvbkxpc3QuYWRkT3B0aW9ucyhbJ1NhdHVybiBJVicsICdGYWxjb24gSGVhdnknXSlcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1hcmsgdGhpcyBvcHRpb24gbGlzdCBhcyBkaXJ0eS4gU2VlXG4gICAgICogW1tQREZPcHRpb25MaXN0LnNldE9wdGlvbnNdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBOZXcgb3B0aW9ucyB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgaW4gdGhpcyBvcHRpb24gbGlzdC5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0SXMob3B0aW9ucywgJ29wdGlvbnMnLCBbJ3N0cmluZycsIEFycmF5XSk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdmFyIG9wdGlvbnNBcnIgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMpID8gb3B0aW9ucyA6IFtvcHRpb25zXTtcbiAgICAgICAgdmFyIGV4aXN0aW5nT3B0aW9ucyA9IHRoaXMuYWNyb0ZpZWxkLmdldE9wdGlvbnMoKTtcbiAgICAgICAgdmFyIG5ld09wdGlvbnMgPSBuZXcgQXJyYXkob3B0aW9uc0Fyci5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvcHRpb25zQXJyLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgbmV3T3B0aW9uc1tpZHhdID0geyB2YWx1ZTogUERGSGV4U3RyaW5nLmZyb21UZXh0KG9wdGlvbnNBcnJbaWR4XSkgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRPcHRpb25zKGV4aXN0aW5nT3B0aW9ucy5jb25jYXQobmV3T3B0aW9ucykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VsZWN0IG9uZSBvciBtb3JlIHZhbHVlcyBmb3IgdGhpcyBvcHRpb24gbGlzdC4gVGhpcyBvcGVyYXRpb24gaXMgYW5hbG9nb3VzXG4gICAgICogdG8gYSBodW1hbiB1c2VyIG9wZW5pbmcgdGhlIG9wdGlvbiBsaXN0IGluIGEgUERGIHJlYWRlciBhbmQgY2xpY2tpbmcgb24gb25lXG4gICAgICogb3IgbW9yZSB2YWx1ZXMgdG8gc2VsZWN0IHRoZW0uIFRoaXMgbWV0aG9kIHdpbGwgdXBkYXRlIHRoZSB1bmRlcmx5aW5nIHN0YXRlXG4gICAgICogb2YgdGhlIG9wdGlvbiBsaXN0IHRvIGluZGljYXRlIHdoaWNoIHZhbHVlcyBoYXZlIGJlZW4gc2VsZWN0ZWQuIFBERlxuICAgICAqIGxpYnJhcmllcyBhbmQgcmVhZGVycyB3aWxsIGJlIGFibGUgdG8gZXh0cmFjdCB0aGVzZSB2YWx1ZXMgZnJvbSB0aGUgc2F2ZWRcbiAgICAgKiBkb2N1bWVudCBhbmQgZGV0ZXJtaW5lIHdoaWNoIHZhbHVlcyB3ZXJlIHNlbGVjdGVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnYmVzdC5zdXBlcmhlcm9lcy5vcHRpb25MaXN0JylcbiAgICAgKiBvcHRpb25MaXN0LnNlbGVjdChbJ09uZSBQdW5jaCBNYW4nLCAnSXJvbiBNYW4nXSlcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1hcmsgdGhpcyBvcHRpb24gbGlzdCBhcyBkaXJ0eS4gU2VlXG4gICAgICogW1tQREZPcHRpb25MaXN0LnNldE9wdGlvbnNdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICAgKiBAcGFyYW0gbWVyZ2UgV2hldGhlciBvciBub3QgZXhpc3Rpbmcgc2VsZWN0aW9ucyBzaG91bGQgYmUgcHJlc2VydmVkLlxuICAgICAqL1xuICAgIFBERk9wdGlvbkxpc3QucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChvcHRpb25zLCBtZXJnZSkge1xuICAgICAgICBpZiAobWVyZ2UgPT09IHZvaWQgMCkgeyBtZXJnZSA9IGZhbHNlOyB9XG4gICAgICAgIGFzc2VydElzKG9wdGlvbnMsICdvcHRpb25zJywgWydzdHJpbmcnLCBBcnJheV0pO1xuICAgICAgICBhc3NlcnRJcyhtZXJnZSwgJ21lcmdlJywgWydib29sZWFuJ10pO1xuICAgICAgICB2YXIgb3B0aW9uc0FyciA9IEFycmF5LmlzQXJyYXkob3B0aW9ucykgPyBvcHRpb25zIDogW29wdGlvbnNdO1xuICAgICAgICB2YXIgdmFsaWRPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGFzc2VydElzU3Vic2V0KG9wdGlvbnNBcnIsICdvcHRpb24nLCB2YWxpZE9wdGlvbnMpO1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgIGlmIChvcHRpb25zQXJyLmxlbmd0aCA+IDEgfHwgKG9wdGlvbnNBcnIubGVuZ3RoID09PSAxICYmIG1lcmdlKSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVNdWx0aXNlbGVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkob3B0aW9uc0Fyci5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvcHRpb25zQXJyLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFsdWVzW2lkeF0gPSBQREZIZXhTdHJpbmcuZnJvbVRleHQob3B0aW9uc0FycltpZHhdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyZ2UpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ1ZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldFZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWVzKGV4aXN0aW5nVmFsdWVzLmNvbmNhdCh2YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldFZhbHVlcyh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgc2VsZWN0ZWQgdmFsdWVzIGZvciB0aGlzIG9wdGlvbiBsaXN0LiBUaGlzIG9wZXJhdGlvbiBpc1xuICAgICAqIGVxdWl2YWxlbnQgdG8gc2VsZWN0aW5nIGFuIGVtcHR5IGxpc3QuIFRoaXMgbWV0aG9kIHdpbGwgdXBkYXRlIHRoZVxuICAgICAqIHVuZGVybHlpbmcgc3RhdGUgb2YgdGhlIG9wdGlvbiBsaXN0IHRvIGluZGljYXRlIHRoYXQgbm8gdmFsdWVzIGhhdmUgYmVlblxuICAgICAqIHNlbGVjdGVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBvcHRpb25MaXN0LmNsZWFyKClcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1hcmsgdGhpcyBvcHRpb24gbGlzdCBhcyBkaXJ0eS4gU2VlXG4gICAgICogW1tQREZPcHRpb25MaXN0LnNldE9wdGlvbnNdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRWYWx1ZXMoW10pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSB0ZXh0IGluIHRoaXMgZmllbGQuIFRoZXJlIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBkZWZhdWx0IGFwcGVhcmFuY2Ugc3RyaW5nIChEQSkgc2V0IHdpdGggYSBmb250IHZhbHVlIHNwZWNpZmllZFxuICAgICAqIGZvciB0aGlzIHRvIHdvcmsuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBvcHRpb25MaXN0LnNldEZvbnRTaXplKDQpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBmb250U2l6ZSBUaGUgZm9udCBzaXplIHRvIHNldCB0aGUgZm9udCB0by5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhpcyBmaWVsZC4gTGFyZ2VyIGZvbnQgc2l6ZXMgd2lsbCByZXN1bHQgaW4gbGFyZ2VyXG4gICAgICogdGV4dCBiZWluZyBkaXNwbGF5ZWQgd2hlbiBQREYgcmVhZGVycyByZW5kZXIgdGhpcyBvcHRpb24gbGlzdC4gRm9udCBzaXplc1xuICAgICAqIG1heSBiZSBpbnRlZ2VyIG9yIGZsb2F0aW5nIHBvaW50IG51bWJlcnMuIFN1cHBseWluZyBhIG5lZ2F0aXZlIGZvbnQgc2l6ZVxuICAgICAqIHdpbGwgY2F1c2UgdGhpcyBtZXRob2QgdG8gdGhyb3cgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogb3B0aW9uTGlzdC5zZXRGb250U2l6ZSg0KVxuICAgICAqIG9wdGlvbkxpc3Quc2V0Rm9udFNpemUoMTUuNylcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqID4gVGhpcyBtZXRob2QgZGVwZW5kcyB1cG9uIHRoZSBleGlzdGVuY2Ugb2YgYSBkZWZhdWx0IGFwcGVhcmFuY2VcbiAgICAgKiA+IChgL0RBYCkgc3RyaW5nLiBJZiB0aGlzIGZpZWxkIGRvZXMgbm90IGhhdmUgYSBkZWZhdWx0IGFwcGVhcmFuY2Ugc3RyaW5nLFxuICAgICAqID4gb3IgdGhhdCBzdHJpbmcgZG9lcyBub3QgY29udGFpbiBhIGZvbnQgc2l6ZSAodmlhIHRoZSBgVGZgIG9wZXJhdG9yKSxcbiAgICAgKiA+IHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb250U2l6ZSBUaGUgZm9udCBzaXplIHRvIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdGV4dCBpbiB0aGlzIGZpZWxkLlxuICAgICAqL1xuICAgIFBERk9wdGlvbkxpc3QucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKGZvbnRTaXplKSB7XG4gICAgICAgIGFzc2VydFBvc2l0aXZlKGZvbnRTaXplLCAnZm9udFNpemUnKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb3B0aW9ucyBvZiB0aGlzIG9wdGlvbiBsaXN0IGFyZSBhbHdheXMgZGlzcGxheWVkXG4gICAgICogaW4gYWxwaGFiZXRpY2FsIG9yZGVyLCBpcnJlc3BlY3RpdmUgb2YgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBvcHRpb25zXG4gICAgICogd2VyZSBhZGRlZCB0byB0aGUgb3B0aW9uIGxpc3QuIFNlZSBbW1BERk9wdGlvbkxpc3QuZW5hYmxlU29ydGluZ11dIGFuZFxuICAgICAqIFtbUERGT3B0aW9uTGlzdC5kaXNhYmxlU29ydGluZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogaWYgKG9wdGlvbkxpc3QuaXNTb3J0ZWQoKSkgY29uc29sZS5sb2coJ1NvcnRpbmcgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBvcHRpb24gbGlzdCBpcyBzb3J0ZWQuXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuaXNTb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9DaG9pY2VGbGFncy5Tb3J0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsd2F5cyBkaXNwbGF5IHRoZSBvcHRpb25zIG9mIHRoaXMgb3B0aW9uIGxpc3QgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLFxuICAgICAqIGlycmVzcGVjdGl2ZSBvZiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIG9wdGlvbnMgd2VyZSBhZGRlZCB0byB0aGlzIG9wdGlvblxuICAgICAqIGxpc3QuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdzb21lLm9wdGlvbkxpc3QuZmllbGQnKVxuICAgICAqIG9wdGlvbkxpc3QuZW5hYmxlU29ydGluZygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuZW5hYmxlU29ydGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5Tb3J0LCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBhbHdheXMgZGlzcGxheSB0aGUgb3B0aW9ucyBvZiB0aGlzIG9wdGlvbiBsaXN0IGluIGFscGhhYmV0aWNhbFxuICAgICAqIG9yZGVyLiBJbnN0ZWFkLCBkaXNwbGF5IHRoZSBvcHRpb25zIGluIHdoaWNoZXZlciBvcmRlciB0aGV5IHdlcmUgYWRkZWRcbiAgICAgKiB0byB0aGlzIG9wdGlvbiBsaXN0LiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogb3B0aW9uTGlzdC5kaXNhYmxlU29ydGluZygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuZGlzYWJsZVNvcnRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuU29ydCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgbXVsdGlwbGUgb3B0aW9ucyBjYW4gYmUgc2VsZWN0ZWQgZnJvbSB0aGlzIG9wdGlvbiBsaXN0LlxuICAgICAqIFNlZSBbW1BERk9wdGlvbkxpc3QuZW5hYmxlTXVsdGlzZWxlY3RdXSBhbmRcbiAgICAgKiBbW1BERk9wdGlvbkxpc3QuZGlzYWJsZU11bHRpc2VsZWN0XV0uIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBpZiAob3B0aW9uTGlzdC5pc011bHRpc2VsZWN0KCkpIGNvbnNvbGUubG9nKCdNdWx0aXNlbGVjdCBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCBtdWx0aXBsZSBvcHRpb25zIGNhbiBiZSBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5pc011bHRpc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvQ2hvaWNlRmxhZ3MuTXVsdGlTZWxlY3QpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgdXNlcnMgdG8gc2VsZWN0IG1vcmUgdGhhbiBvbmUgb3B0aW9uIGZyb20gdGhpcyBvcHRpb24gbGlzdC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogb3B0aW9uTGlzdC5lbmFibGVNdWx0aXNlbGVjdCgpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuZW5hYmxlTXVsdGlzZWxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuTXVsdGlTZWxlY3QsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRG8gbm90IGFsbG93IHVzZXJzIHRvIHNlbGVjdCBtb3JlIHRoYW4gb25lIG9wdGlvbiBmcm9tIHRoaXMgb3B0aW9uIGxpc3QuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdzb21lLm9wdGlvbkxpc3QuZmllbGQnKVxuICAgICAqIG9wdGlvbkxpc3QuZGlzYWJsZU11bHRpc2VsZWN0KClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5kaXNhYmxlTXVsdGlzZWxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQ2hvaWNlRmxhZ3MuTXVsdGlTZWxlY3QsIGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcHRpb24gc2VsZWN0ZWQgYnkgYSB1c2VyIGlzIHN0b3JlZCwgb3IgXCJjb21taXR0ZWRcIixcbiAgICAgKiB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgb3B0aW9uLiBUaGUgYWx0ZXJuYXRpdmUgaXMgdGhhdCB0aGUgdXNlcidzXG4gICAgICogc2VsZWN0aW9uIGlzIHN0b3JlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGlzIG9wdGlvbiBsaXN0IGZpZWxkIChieVxuICAgICAqIGNsaWNraW5nIG91dHNpZGUgb2YgaXQgLSBvbiBhbm90aGVyIGZpZWxkLCBmb3IgZXhhbXBsZSkuIFNlZVxuICAgICAqIFtbUERGT3B0aW9uTGlzdC5lbmFibGVTZWxlY3RPbkNsaWNrXV0gYW5kXG4gICAgICogW1tQREZPcHRpb25MaXN0LmRpc2FibGVTZWxlY3RPbkNsaWNrXV0uIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBpZiAob3B0aW9uTGlzdC5pc1NlbGVjdE9uQ2xpY2soKSkgY29uc29sZS5sb2coJ1NlbGVjdCBvbiBjbGljayBpcyBlbmFibGVkJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCBvcHRpb25zIGFyZSBzZWxlY3RlZCBpbW1lZGlhdGVseSBhZnRlciB0aGV5IGFyZVxuICAgICAqICAgICAgICAgIGNsaWNrZWQuXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuaXNTZWxlY3RPbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvQ2hvaWNlRmxhZ3MuQ29tbWl0T25TZWxDaGFuZ2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcmUgdGhlIG9wdGlvbiBzZWxlY3RlZCBieSBhIHVzZXIgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHVzZXIgY2xpY2tzIHRoZVxuICAgICAqIG9wdGlvbi4gRG8gbm90IHdhaXQgZm9yIHRoZSB1c2VyIHRvIGxlYXZlIHRoaXMgb3B0aW9uIGxpc3QgZmllbGQgKGJ5XG4gICAgICogY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCAtIG9uIGFub3RoZXIgZmllbGQsIGZvciBleGFtcGxlKS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdzb21lLm9wdGlvbkxpc3QuZmllbGQnKVxuICAgICAqIG9wdGlvbkxpc3QuZW5hYmxlU2VsZWN0T25DbGljaygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuZW5hYmxlU2VsZWN0T25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5Db21taXRPblNlbENoYW5nZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYWl0IHRvIHN0b3JlIHRoZSBvcHRpb24gc2VsZWN0ZWQgYnkgYSB1c2VyIHVudGlsIHRoZXkgbGVhdmUgdGhpcyBvcHRpb25cbiAgICAgKiBsaXN0IGZpZWxkIChieSBjbGlja2luZyBvdXRzaWRlIG9mIGl0IC0gb24gYW5vdGhlciBmaWVsZCwgZm9yIGV4YW1wbGUpLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uZ2V0T3B0aW9uTGlzdCgnc29tZS5vcHRpb25MaXN0LmZpZWxkJylcbiAgICAgKiBvcHRpb25MaXN0LmRpc2FibGVTZWxlY3RPbkNsaWNrKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5kaXNhYmxlU2VsZWN0T25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9DaG9pY2VGbGFncy5Db21taXRPblNlbENoYW5nZSwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2hvdyB0aGlzIG9wdGlvbiBsaXN0IG9uIHRoZSBzcGVjaWZpZWQgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB1YnVudHVGb250ID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udCh1YnVudHVGb250Qnl0ZXMpXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3Qgb3B0aW9uTGlzdCA9IGZvcm0uY3JlYXRlT3B0aW9uTGlzdCgnYmVzdC5ndW5kYW1zJylcbiAgICAgKiBvcHRpb25MaXN0LnNldE9wdGlvbnMoWydFeGlhJywgJ0R5bmFtZXMnLCAnS3lyaW9zJywgJ1ZpcnR1ZSddKVxuICAgICAqIG9wdGlvbkxpc3Quc2VsZWN0KFsnRXhpYScsICdWaXJ0dWUnXSlcbiAgICAgKlxuICAgICAqIG9wdGlvbkxpc3QuYWRkVG9QYWdlKHBhZ2UsIHtcbiAgICAgKiAgIHg6IDUwLFxuICAgICAqICAgeTogNzUsXG4gICAgICogICB3aWR0aDogMjAwLFxuICAgICAqICAgaGVpZ2h0OiAxMDAsXG4gICAgICogICB0ZXh0Q29sb3I6IHJnYigxLCAwLCAwKSxcbiAgICAgKiAgIGJhY2tncm91bmRDb2xvcjogcmdiKDAsIDEsIDApLFxuICAgICAqICAgYm9yZGVyQ29sb3I6IHJnYigwLCAwLCAxKSxcbiAgICAgKiAgIGJvcmRlcldpZHRoOiAyLFxuICAgICAqICAgcm90YXRlOiBkZWdyZWVzKDkwKSxcbiAgICAgKiAgIGZvbnQ6IHVidW50dUZvbnQsXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IHdpZGdldCBmb3IgdGhpcyBvcHRpb24gbGlzdCBmaWVsZC5cbiAgICAgKiBAcGFyYW0gcGFnZSBUaGUgcGFnZSB0byB3aGljaCB0aGlzIG9wdGlvbiBsaXN0IHdpZGdldCBzaG91bGQgYmUgYWRkZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGFkZGluZyB0aGlzIG9wdGlvbiBsaXN0IHdpZGdldC5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5hZGRUb1BhZ2UgPSBmdW5jdGlvbiAocGFnZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgIGFzc2VydElzKHBhZ2UsICdwYWdlJywgW1tQREZQYWdlLCAnUERGUGFnZSddXSk7XG4gICAgICAgIGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKCEoJ3RleHRDb2xvcicgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLnRleHRDb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgaWYgKCEoJ2JhY2tncm91bmRDb2xvcicgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLmJhY2tncm91bmRDb2xvciA9IHJnYigxLCAxLCAxKTtcbiAgICAgICAgaWYgKCEoJ2JvcmRlckNvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyQ29sb3IgPSByZ2IoMCwgMCwgMCk7XG4gICAgICAgIGlmICghKCdib3JkZXJXaWR0aCcgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgd2lkZ2V0IGZvciB0aGlzIG9wdGlvbiBsaXN0XG4gICAgICAgIHZhciB3aWRnZXQgPSB0aGlzLmNyZWF0ZVdpZGdldCh7XG4gICAgICAgICAgICB4OiAoX2EgPSBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAsXG4gICAgICAgICAgICB3aWR0aDogKF9jID0gb3B0aW9ucy53aWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMjAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAoX2QgPSBvcHRpb25zLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMTAwLFxuICAgICAgICAgICAgdGV4dENvbG9yOiBvcHRpb25zLnRleHRDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiAoX2UgPSBvcHRpb25zLmJvcmRlcldpZHRoKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwLFxuICAgICAgICAgICAgcm90YXRlOiAoX2YgPSBvcHRpb25zLnJvdGF0ZSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIGhpZGRlbjogb3B0aW9ucy5oaWRkZW4sXG4gICAgICAgICAgICBwYWdlOiBwYWdlLnJlZixcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB3aWRnZXRSZWYgPSB0aGlzLmRvYy5jb250ZXh0LnJlZ2lzdGVyKHdpZGdldC5kaWN0KTtcbiAgICAgICAgLy8gQWRkIHdpZGdldCB0byB0aGlzIGZpZWxkXG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLmFkZFdpZGdldCh3aWRnZXRSZWYpO1xuICAgICAgICAvLyBTZXQgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciB3aWRnZXRcbiAgICAgICAgdmFyIGZvbnQgPSAoX2cgPSBvcHRpb25zLmZvbnQpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHRoaXMuZG9jLmdldEZvcm0oKS5nZXREZWZhdWx0Rm9udCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2Uod2lkZ2V0LCBmb250KTtcbiAgICAgICAgLy8gQWRkIHdpZGdldCB0byB0aGUgZ2l2ZW4gcGFnZVxuICAgICAgICBwYWdlLm5vZGUuYWRkQW5ub3Qod2lkZ2V0UmVmKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgb3B0aW9uIGxpc3QgaGFzIGJlZW4gbWFya2VkIGFzIGRpcnR5LCBvciBpZiBhbnkgb2ZcbiAgICAgKiB0aGlzIG9wdGlvbiBsaXN0J3Mgd2lkZ2V0cyBkbyBub3QgaGF2ZSBhbiBhcHBlYXJhbmNlIHN0cmVhbS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdzb21lLm9wdGlvbkxpc3QuZmllbGQnKVxuICAgICAqIGlmIChvcHRpb25MaXN0Lm5lZWRzQXBwZWFyYW5jZXNVcGRhdGUoKSkgY29uc29sZS5sb2coJ05lZWRzIHVwZGF0ZScpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBvcHRpb24gbGlzdCBuZWVkcyBhbiBhcHBlYXJhbmNlIHVwZGF0ZS5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmlzRGlydHkoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgaGFzQXBwZWFyYW5jZXMgPSAoKF9hID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWwpIGluc3RhbmNlb2YgUERGU3RyZWFtO1xuICAgICAgICAgICAgaWYgKCFoYXNBcHBlYXJhbmNlcylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIG9wdGlvbiBsaXN0J3Mgd2lkZ2V0cyB1c2luZ1xuICAgICAqIHRoZSBkZWZhdWx0IGFwcGVhcmFuY2UgcHJvdmlkZXIgZm9yIG9wdGlvbiBsaXN0cy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2EgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmdldE9wdGlvbkxpc3QoJ3NvbWUub3B0aW9uTGlzdC5maWVsZCcpXG4gICAgICogb3B0aW9uTGlzdC5kZWZhdWx0VXBkYXRlQXBwZWFyYW5jZXMoaGVsdmV0aWNhKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBmb250IFRoZSBmb250IHRvIGJlIHVzZWQgZm9yIGNyZWF0aW5nIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMuXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5wcm90b3R5cGUuZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgYXNzZXJ0SXMoZm9udCwgJ2ZvbnQnLCBbW1BERkZvbnQsICdQREZGb250J11dKTtcbiAgICAgICAgdGhpcy51cGRhdGVBcHBlYXJhbmNlcyhmb250KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciBlYWNoIG9mIHRoaXMgb3B0aW9uIGxpc3QncyB3aWRnZXRzIHVzaW5nXG4gICAgICogdGhlIGdpdmVuIGFwcGVhcmFuY2UgcHJvdmlkZXIuIElmIG5vIGBwcm92aWRlcmAgaXMgcGFzc2VkLCB0aGUgZGVmYXVsdFxuICAgICAqIGFwcGVhcmFuY2UgcHJvdmlkZXIgZm9yIG9wdGlvbiBsaXN0cyB3aWxsIGJlIHVzZWQuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgaGVsdmV0aWNhID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSlcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdzb21lLm9wdGlvbkxpc3QuZmllbGQnKVxuICAgICAqIG9wdGlvbkxpc3QudXBkYXRlQXBwZWFyYW5jZXMoaGVsdmV0aWNhLCAoZmllbGQsIHdpZGdldCwgZm9udCkgPT4ge1xuICAgICAqICAgLi4uXG4gICAgICogICByZXR1cm4gZHJhd09wdGlvbkxpc3QoLi4uKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGZvbnQgVGhlIGZvbnQgdG8gYmUgdXNlZCBmb3IgY3JlYXRpbmcgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcy5cbiAgICAgKiBAcGFyYW0gcHJvdmlkZXIgT3B0aW9uYWxseSwgdGhlIGFwcGVhcmFuY2UgcHJvdmlkZXIgdG8gYmUgdXNlZCBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgZ2VuZXJhdGluZyB0aGUgY29udGVudHMgb2YgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcy5cbiAgICAgKi9cbiAgICBQREZPcHRpb25MaXN0LnByb3RvdHlwZS51cGRhdGVBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uIChmb250LCBwcm92aWRlcikge1xuICAgICAgICBhc3NlcnRJcyhmb250LCAnZm9udCcsIFtbUERGRm9udCwgJ1BERkZvbnQnXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChwcm92aWRlciwgJ3Byb3ZpZGVyJywgW0Z1bmN0aW9uXSk7XG4gICAgICAgIHZhciB3aWRnZXRzID0gdGhpcy5hY3JvRmllbGQuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIGZvbnQsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtBc0NsZWFuKCk7XG4gICAgfTtcbiAgICAvLyBnZXRPcHRpb24oaW5kZXg6IG51bWJlcik6IHN0cmluZyB7fVxuICAgIC8vIGdldFNlbGVjdGVkSW5kaWNlcygpOiBudW1iZXJbXSB7fVxuICAgIC8vIHJlbW92ZU9wdGlvbnMob3B0aW9uOiBzdHJpbmcgfCBzdHJpbmdbXSkge31cbiAgICAvLyByZW1vdmVJbmRpY2VzKG9wdGlvbjogbnVtYmVyW10pIHt9XG4gICAgLy8gZGVzZWxlY3Qob3B0aW9uczogc3RyaW5nIHwgc3RyaW5nW10pIHt9XG4gICAgLy8gZGVzZWxlY3RJbmRpY2VzKG9wdGlvbkluZGljZXM6IG51bWJlcltdKSB7fVxuICAgIFBERk9wdGlvbkxpc3QucHJvdG90eXBlLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2UgPSBmdW5jdGlvbiAod2lkZ2V0LCBmb250LCBwcm92aWRlcikge1xuICAgICAgICB2YXIgYXBQcm92aWRlciA9IHByb3ZpZGVyICE9PSBudWxsICYmIHByb3ZpZGVyICE9PSB2b2lkIDAgPyBwcm92aWRlciA6IGRlZmF1bHRPcHRpb25MaXN0QXBwZWFyYW5jZVByb3ZpZGVyO1xuICAgICAgICB2YXIgYXBwZWFyYW5jZXMgPSBub3JtYWxpemVBcHBlYXJhbmNlKGFwUHJvdmlkZXIodGhpcywgd2lkZ2V0LCBmb250KSk7XG4gICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZVdpdGhGb250KHdpZGdldCwgZm9udCwgYXBwZWFyYW5jZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gSW5zdGVhZCxcbiAgICAgKiA+IGNvbnNpZGVyIHVzaW5nIHRoZSBbW1BERkZvcm0uZ2V0T3B0aW9uTGlzdF1dIG1ldGhvZCwgd2hpY2ggd2lsbCBjcmVhdGVcbiAgICAgKiA+IGFuIGluc3RhbmNlIG9mIFtbUERGT3B0aW9uTGlzdF1dIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgW1tQREZPcHRpb25MaXN0XV0gZnJvbSBhbiBleGlzdGluZyBhY3JvTGlzdEJveCBhbmRcbiAgICAgKiByZWZcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3JvQ29tYm9Cb3ggVGhlIHVuZGVybHlpbmcgYFBERkFjcm9MaXN0Qm94YCBmb3IgdGhpcyBvcHRpb24gbGlzdC5cbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB1bmlxdWUgcmVmZXJlbmNlIGZvciB0aGlzIG9wdGlvbiBsaXN0LlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoaXMgb3B0aW9uIGxpc3Qgd2lsbCBiZWxvbmcuXG4gICAgICovXG4gICAgUERGT3B0aW9uTGlzdC5vZiA9IGZ1bmN0aW9uIChhY3JvTGlzdEJveCwgcmVmLCBkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZPcHRpb25MaXN0KGFjcm9MaXN0Qm94LCByZWYsIGRvYyk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGT3B0aW9uTGlzdDtcbn0oUERGRmllbGQpKTtcbmV4cG9ydCBkZWZhdWx0IFBERk9wdGlvbkxpc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZPcHRpb25MaXN0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERlBhZ2UgZnJvbSBcIi4uL1BERlBhZ2VcIjtcbmltcG9ydCBQREZGaWVsZCwgeyBhc3NlcnRGaWVsZEFwcGVhcmFuY2VPcHRpb25zLCB9IGZyb20gXCIuL1BERkZpZWxkXCI7XG5pbXBvcnQgeyBub3JtYWxpemVBcHBlYXJhbmNlLCBkZWZhdWx0UmFkaW9Hcm91cEFwcGVhcmFuY2VQcm92aWRlciwgfSBmcm9tIFwiLi9hcHBlYXJhbmNlc1wiO1xuaW1wb3J0IHsgcmdiIH0gZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHsgZGVncmVlcyB9IGZyb20gXCIuLi9yb3RhdGlvbnNcIjtcbmltcG9ydCB7IFBERk5hbWUsIFBERkhleFN0cmluZywgUERGRGljdCwgUERGQWNyb1JhZGlvQnV0dG9uLCBBY3JvQnV0dG9uRmxhZ3MsIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRPclVuZGVmaW5lZCwgYXNzZXJ0SXNPbmVPZiB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmFkaW8gZ3JvdXAgZmllbGQgb2YgYSBbW1BERkZvcm1dXS5cbiAqXG4gKiBbW1BERlJhZGlvR3JvdXBdXSBmaWVsZHMgYXJlIGNvbGxlY3Rpb25zIG9mIHJhZGlvIGJ1dHRvbnMuIFRoZSBwdXJwb3NlIG9mIGFcbiAqIHJhZGlvIGdyb3VwIGlzIHRvIGVuYWJsZSB1c2VycyB0byBzZWxlY3Qgb25lIG9wdGlvbiBmcm9tIGEgc2V0IG9mIG11dHVhbGx5XG4gKiBleGNsdXNpdmUgY2hvaWNlcy4gRWFjaCBjaG9pY2UgaW4gYSByYWRpbyBncm91cCBpcyByZXByZXNlbnRlZCBieSBhIHJhZGlvXG4gKiBidXR0b24uIFJhZGlvIGJ1dHRvbnMgZWFjaCBoYXZlIHR3byBzdGF0ZXM6IGBvbmAgYW5kIGBvZmZgLiBBdCBtb3N0IG9uZVxuICogcmFkaW8gYnV0dG9uIGluIGEgZ3JvdXAgbWF5IGJlIGluIHRoZSBgb25gIHN0YXRlIGF0IGFueSB0aW1lLiBVc2VycyBjYW5cbiAqIGNsaWNrIG9uIGEgcmFkaW8gYnV0dG9uIHRvIHNlbGVjdCBpdCAoYW5kIHRoZXJlYnkgYXV0b21hdGljYWxseSBkZXNlbGVjdCBhbnlcbiAqIG90aGVyIHJhZGlvIGJ1dHRvbiB0aGF0IG1pZ2h0IGhhdmUgYWxyZWFkeSBiZWVuIHNlbGVjdGVkKS4gU29tZSByYWRpb1xuICogZ3JvdXBzIGFsbG93IHVzZXJzIHRvIHRvZ2dsZSBhIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbiBgb2ZmYCBieSBjbGlja2luZyBvblxuICogaXQgKHNlZSBbW1BERlJhZGlvR3JvdXAuaXNPZmZUb2dnbGVhYmxlXV0pLlxuICpcbiAqIE5vdGUgdGhhdCBzb21lIHJhZGlvIGdyb3VwcyBhbGxvdyBtdWx0aXBsZSByYWRpbyBidXR0b25zIHRvIGJlIGluIHRoZSBgb25gXG4gKiBzdGF0ZSBhdCB0aGUgc2FtZSB0eXBlICoqaWYqKiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSB1bmRlcmx5aW5nIHZhbHVlIChzZWVcbiAqIFtbUERGUmFkaW9Hcm91cC5pc011dHVhbGx5RXhjbHVzaXZlXV0pLlxuICovXG52YXIgUERGUmFkaW9Hcm91cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGUmFkaW9Hcm91cCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZSYWRpb0dyb3VwKGFjcm9SYWRpb0J1dHRvbiwgcmVmLCBkb2MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYWNyb1JhZGlvQnV0dG9uLCByZWYsIGRvYykgfHwgdGhpcztcbiAgICAgICAgYXNzZXJ0SXMoYWNyb1JhZGlvQnV0dG9uLCAnYWNyb1JhZGlvQnV0dG9uJywgW1xuICAgICAgICAgICAgW1BERkFjcm9SYWRpb0J1dHRvbiwgJ1BERkFjcm9SYWRpb0J1dHRvbiddLFxuICAgICAgICBdKTtcbiAgICAgICAgX3RoaXMuYWNyb0ZpZWxkID0gYWNyb1JhZGlvQnV0dG9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBhdmFpbGFibGUgb3B0aW9ucyBmb3IgdGhpcyByYWRpbyBncm91cC4gRWFjaCBvcHRpb24gaXNcbiAgICAgKiByZXByZXNlbnRlZCBieSBhIHJhZGlvIGJ1dHRvbi4gVGhlc2UgcmFkaW8gYnV0dG9ucyBhcmUgZGlzcGxheWVkIGF0XG4gICAgICogdmFyaW91cyBsb2NhdGlvbnMgaW4gdGhlIGRvY3VtZW50LCBwb3RlbnRpYWxseSBvbiBkaWZmZXJlbnQgcGFnZXMgKHRob3VnaFxuICAgICAqIHR5cGljYWxseSB0aGV5IGFyZSBzdGFja2VkIGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5IG9uIHRoZSBzYW1lIHBhZ2UpLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcmFkaW9Hcm91cCA9IGZvcm0uZ2V0UmFkaW9Hcm91cCgnc29tZS5yYWRpb0dyb3VwLmZpZWxkJylcbiAgICAgKiBjb25zdCBvcHRpb25zID0gcmFkaW9Hcm91cC5nZXRPcHRpb25zKClcbiAgICAgKiBjb25zb2xlLmxvZygnUmFkaW8gR3JvdXAgb3B0aW9uczonLCBvcHRpb25zKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFRoZSBvcHRpb25zIGZvciB0aGlzIHJhZGlvIGdyb3VwLlxuICAgICAqL1xuICAgIFBERlJhZGlvR3JvdXAucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBleHBvcnRWYWx1ZXMgPSB0aGlzLmFjcm9GaWVsZC5nZXRFeHBvcnRWYWx1ZXMoKTtcbiAgICAgICAgaWYgKGV4cG9ydFZhbHVlcykge1xuICAgICAgICAgICAgdmFyIGV4cG9ydE9wdGlvbnMgPSBuZXcgQXJyYXkoZXhwb3J0VmFsdWVzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBleHBvcnRWYWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0T3B0aW9uc1tpZHhdID0gZXhwb3J0VmFsdWVzW2lkeF0uZGVjb2RlVGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydE9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9uVmFsdWVzID0gdGhpcy5hY3JvRmllbGQuZ2V0T25WYWx1ZXMoKTtcbiAgICAgICAgdmFyIG9uT3B0aW9ucyA9IG5ldyBBcnJheShvblZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvbk9wdGlvbnMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBvbk9wdGlvbnNbaWR4XSA9IG9uVmFsdWVzW2lkeF0uZGVjb2RlVGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvbk9wdGlvbnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNlbGVjdGVkIG9wdGlvbiBmb3IgdGhpcyByYWRpbyBncm91cC4gVGhlIHNlbGVjdGVkIG9wdGlvbiBpc1xuICAgICAqIHJlcHJlc2VudGVkIGJ5IHRoZSByYWRpbyBidXR0b24gaW4gdGhpcyBncm91cCB0aGF0IGlzIHR1cm5lZCBvbi4gQXQgbW9zdFxuICAgICAqIG9uZSByYWRpbyBidXR0b24gaW4gYSBncm91cCBjYW4gYmUgc2VsZWN0ZWQuIElmIG5vIGJ1dHRvbnMgaW4gdGhpcyBncm91cFxuICAgICAqIGFyZSBzZWxlY3RlZCwgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCByYWRpb0dyb3VwID0gZm9ybS5nZXRSYWRpb0dyb3VwKCdzb21lLnJhZGlvR3JvdXAuZmllbGQnKVxuICAgICAqIGNvbnN0IHNlbGVjdGVkID0gcmFkaW9Hcm91cC5nZXRTZWxlY3RlZCgpXG4gICAgICogY29uc29sZS5sb2coJ1NlbGVjdGVkIHJhZGlvIGJ1dHRvbjonLCBzZWxlY3RlZClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgc2VsZWN0ZWQgb3B0aW9uIGZvciB0aGlzIHJhZGlvIGdyb3VwLlxuICAgICAqL1xuICAgIFBERlJhZGlvR3JvdXAucHJvdG90eXBlLmdldFNlbGVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmFjcm9GaWVsZC5nZXRWYWx1ZSgpO1xuICAgICAgICBpZiAodmFsdWUgPT09IFBERk5hbWUub2YoJ09mZicpKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGV4cG9ydFZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldEV4cG9ydFZhbHVlcygpO1xuICAgICAgICBpZiAoZXhwb3J0VmFsdWVzKSB7XG4gICAgICAgICAgICB2YXIgb25WYWx1ZXMgPSB0aGlzLmFjcm9GaWVsZC5nZXRPblZhbHVlcygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gb25WYWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uVmFsdWVzW2lkeF0gPT09IHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0VmFsdWVzW2lkeF0uZGVjb2RlVGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZS5kZWNvZGVUZXh0KCk7XG4gICAgfTtcbiAgICAvLyAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSB0aGlzIHNlZW1zIHRvIGNyYXNoIEFjcm9iYXQuIE1heWJlIGl0J3MgYmVjYXVzZSB3ZVxuICAgIC8vIC8vICAgICAgIGFyZW4ndCByZW1vdmluZyB0aGUgd2lkZ2V0IHJlZmVyZW5jZSBmcm9tIHRoZSBwYWdlJ3MgQW5ub3RzP1xuICAgIC8vIHJlbW92ZU9wdGlvbihvcHRpb246IHN0cmluZykge1xuICAgIC8vICAgYXNzZXJ0SXMob3B0aW9uLCAnb3B0aW9uJywgWydzdHJpbmcnXSk7XG4gICAgLy8gICAvLyBUT0RPOiBBc3NlcnQgaXMgdmFsaWQgYG9wdGlvbmAhXG4gICAgLy8gICBjb25zdCBvblZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldE9uVmFsdWVzKCk7XG4gICAgLy8gICBjb25zdCBleHBvcnRWYWx1ZXMgPSB0aGlzLmFjcm9GaWVsZC5nZXRFeHBvcnRWYWx1ZXMoKTtcbiAgICAvLyAgIGlmIChleHBvcnRWYWx1ZXMpIHtcbiAgICAvLyAgICAgZm9yIChsZXQgaWR4ID0gMCwgbGVuID0gZXhwb3J0VmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgIC8vICAgICAgIGlmIChleHBvcnRWYWx1ZXNbaWR4XS5kZWNvZGVUZXh0KCkgPT09IG9wdGlvbikge1xuICAgIC8vICAgICAgICAgdGhpcy5hY3JvRmllbGQucmVtb3ZlV2lkZ2V0KGlkeCk7XG4gICAgLy8gICAgICAgICB0aGlzLmFjcm9GaWVsZC5yZW1vdmVFeHBvcnRWYWx1ZShpZHgpO1xuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgfSBlbHNlIHtcbiAgICAvLyAgICAgZm9yIChsZXQgaWR4ID0gMCwgbGVuID0gb25WYWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgLy8gICAgICAgY29uc3QgdmFsdWUgPSBvblZhbHVlc1tpZHhdO1xuICAgIC8vICAgICAgIGlmICh2YWx1ZS5kZWNvZGVUZXh0KCkgPT09IG9wdGlvbikge1xuICAgIC8vICAgICAgICAgdGhpcy5hY3JvRmllbGQucmVtb3ZlV2lkZ2V0KGlkeCk7XG4gICAgLy8gICAgICAgICB0aGlzLmFjcm9GaWVsZC5yZW1vdmVFeHBvcnRWYWx1ZShpZHgpO1xuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYW4gb3B0aW9uIGZvciB0aGlzIHJhZGlvIGdyb3VwLiBUaGlzIG9wZXJhdGlvbiBpcyBhbmFsb2dvdXMgdG8gYVxuICAgICAqIGh1bWFuIHVzZXIgY2xpY2tpbmcgb25lIG9mIHRoZSByYWRpbyBidXR0b25zIGluIHRoaXMgZ3JvdXAgdmlhIGEgUERGXG4gICAgICogcmVhZGVyIHRvIHRvZ2dsZSBpdCBvbi4gVGhpcyBtZXRob2Qgd2lsbCB1cGRhdGUgdGhlIHVuZGVybHlpbmcgc3RhdGUgb2ZcbiAgICAgKiB0aGUgcmFkaW8gZ3JvdXAgdG8gaW5kaWNhdGUgd2hpY2ggb3B0aW9uIGhhcyBiZWVuIHNlbGVjdGVkLiBQREYgbGlicmFyaWVzXG4gICAgICogYW5kIHJlYWRlcnMgd2lsbCBiZSBhYmxlIHRvIGV4dHJhY3QgdGhpcyB2YWx1ZSBmcm9tIHRoZSBzYXZlZCBkb2N1bWVudCBhbmRcbiAgICAgKiBkZXRlcm1pbmUgd2hpY2ggb3B0aW9uIHdhcyBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcmFkaW9Hcm91cCA9IGZvcm0uZ2V0UmFkaW9Hcm91cCgnYmVzdC5zdXBlcmhlcm8ucmFkaW9Hcm91cCcpXG4gICAgICogcmFkaW9Hcm91cC5zZWxlY3QoJ09uZSBQdW5jaCBNYW4nKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYXJrIHRoaXMgcmFkaW8gZ3JvdXAgYXMgZGlydHksIGNhdXNpbmcgaXRzIGFwcGVhcmFuY2VcbiAgICAgKiBzdHJlYW1zIHRvIGJlIHVwZGF0ZWQgd2hlbiBlaXRoZXIgW1tQREZEb2N1bWVudC5zYXZlXV0gb3JcbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIGlzIGNhbGxlZC4gVGhlIHVwZGF0ZWQgYXBwZWFyYW5jZVxuICAgICAqIHN0cmVhbXMgd2lsbCBkaXNwbGF5IGEgZG90IGluc2lkZSB0aGUgd2lkZ2V0IG9mIHRoaXMgY2hlY2sgYm94IGZpZWxkXG4gICAgICogdGhhdCByZXByZXNlbnRzIHRoZSBzZWxlY3RlZCBvcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBvcHRpb24gdG8gYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICBhc3NlcnRJcyhvcHRpb24sICdvcHRpb24nLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIHZhbGlkT3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICBhc3NlcnRJc09uZU9mKG9wdGlvbiwgJ29wdGlvbicsIHZhbGlkT3B0aW9ucyk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdmFyIG9uVmFsdWVzID0gdGhpcy5hY3JvRmllbGQuZ2V0T25WYWx1ZXMoKTtcbiAgICAgICAgdmFyIGV4cG9ydFZhbHVlcyA9IHRoaXMuYWNyb0ZpZWxkLmdldEV4cG9ydFZhbHVlcygpO1xuICAgICAgICBpZiAoZXhwb3J0VmFsdWVzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBleHBvcnRWYWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cG9ydFZhbHVlc1tpZHhdLmRlY29kZVRleHQoKSA9PT0gb3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldFZhbHVlKG9uVmFsdWVzW2lkeF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9uVmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9uVmFsdWVzW2lkeF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmRlY29kZVRleHQoKSA9PT0gb3B0aW9uKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFyIGFueSBzZWxlY3RlZCBvcHRpb24gZm9yIHRoaXMgZHJvcGRvd24uIFRoaXMgd2lsbCByZXN1bHQgaW4gYWxsXG4gICAgICogcmFkaW8gYnV0dG9ucyBpbiB0aGlzIGdyb3VwIGJlaW5nIHRvZ2dsZWQgb2ZmLiBUaGlzIG1ldGhvZCB3aWxsIHVwZGF0ZVxuICAgICAqIHRoZSB1bmRlcmx5aW5nIHN0YXRlIG9mIHRoZSBkcm9wZG93biB0byBpbmRpY2F0ZSB0aGF0IG5vIHJhZGlvIGJ1dHRvbnNcbiAgICAgKiBoYXZlIGJlZW4gc2VsZWN0ZWQuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCByYWRpb0dyb3VwID0gZm9ybS5nZXRSYWRpb0dyb3VwKCdzb21lLnJhZGlvR3JvdXAuZmllbGQnKVxuICAgICAqIHJhZGlvR3JvdXAuY2xlYXIoKVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHJhZGlvIGdyb3VwIGFzIGRpcnR5LiBTZWVcbiAgICAgKiBbW1BERlJhZGlvR3JvdXAuc2VsZWN0XV0gZm9yIG1vcmUgZGV0YWlscyBhYm91dCB3aGF0IHRoaXMgbWVhbnMuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWUoUERGTmFtZS5vZignT2ZmJykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdXNlcnMgY2FuIGNsaWNrIG9uIHJhZGlvIGJ1dHRvbnMgaW4gdGhpcyBncm91cCB0byB0b2dnbGVcbiAgICAgKiB0aGVtIG9mZi4gVGhlIGFsdGVybmF0aXZlIGlzIHRoYXQgb25jZSBhIHVzZXIgY2xpY2tzIG9uIGEgcmFkaW8gYnV0dG9uXG4gICAgICogdG8gc2VsZWN0IGl0LCB0aGUgb25seSB3YXkgdG8gZGVzZWxlY3QgaXQgaXMgYnkgc2VsZWN0aW5nIG9uIGFub3RoZXIgcmFkaW9cbiAgICAgKiBidXR0b24gaW4gdGhlIGdyb3VwLiBTZWUgW1tQREZSYWRpb0dyb3VwLmVuYWJsZU9mZlRvZ2dsaW5nXV0gYW5kXG4gICAgICogW1tQREZSYWRpb0dyb3VwLmRpc2FibGVPZmZUb2dnbGluZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogaWYgKHJhZGlvR3JvdXAuaXNPZmZUb2dnbGVhYmxlKCkpIGNvbnNvbGUubG9nKCdPZmYgdG9nZ2xpbmcgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuaXNPZmZUb2dnbGVhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuYWNyb0ZpZWxkLmhhc0ZsYWcoQWNyb0J1dHRvbkZsYWdzLk5vVG9nZ2xlVG9PZmYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3cgdXNlcnMgdG8gY2xpY2sgb24gc2VsZWN0ZWQgcmFkaW8gYnV0dG9ucyBpbiB0aGlzIGdyb3VwIHRvIHRvZ2dsZVxuICAgICAqIHRoZW0gb2ZmLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogcmFkaW9Hcm91cC5lbmFibGVPZmZUb2dnbGluZygpXG4gICAgICogYGBgXG4gICAgICogPiAqKk5PVEU6KiogVGhpcyBmZWF0dXJlIGlzIGRvY3VtZW50ZWQgaW4gdGhlIFBERiBzcGVjaWZpY2F0aW9uXG4gICAgICogPiAoVGFibGUgMjI2KS4gSG93ZXZlciwgbW9zdCBQREYgcmVhZGVycyBkbyBub3QgcmVzcGVjdCB0aGlzIG9wdGlvbiBhbmRcbiAgICAgKiA+IHByZXZlbnQgdXNlcnMgZnJvbSB0b2dnbGluZyByYWRpbyBidXR0b25zIG9mZiBldmVuIHdoZW4gaXQgaXMgZW5hYmxlZC5cbiAgICAgKiA+IEF0IHRoZSB0aW1lIG9mIHRoaXMgd3JpdGluZyAoOS82LzIwMjApIE1hYydzIFByZXZpZXcgc29mdHdhcmUgZGlkXG4gICAgICogPiByZXNwZWN0IHRoZSBvcHRpb24uIEFkb2JlIEFjcm9iYXQsIEZveGl0IFJlYWRlciwgYW5kIEdvb2dsZSBDaHJvbWUgZGlkXG4gICAgICogPiBub3QuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuZW5hYmxlT2ZmVG9nZ2xpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvQnV0dG9uRmxhZ3MuTm9Ub2dnbGVUb09mZiwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJldmVudCB1c2VycyBmcm9tIGNsaWNraW5nIG9uIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbnMgaW4gdGhpcyBncm91cCB0b1xuICAgICAqIHRvZ2dsZSB0aGVtIG9mZi4gQ2xpY2tpbmcgb24gYSBzZWxlY3RlZCByYWRpbyBidXR0b24gd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICAgKiBUaGUgb25seSB3YXkgdG8gZGVzZWxlY3QgYSBzZWxlY3RlZCByYWRpbyBidXR0b24gaXMgdG8gY2xpY2sgb24gYVxuICAgICAqIGRpZmZlcmVudCByYWRpbyBidXR0b24gaW4gdGhlIGdyb3VwLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogcmFkaW9Hcm91cC5kaXNhYmxlT2ZmVG9nZ2xpbmcoKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERlJhZGlvR3JvdXAucHJvdG90eXBlLmRpc2FibGVPZmZUb2dnbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9CdXR0b25GbGFncy5Ob1RvZ2dsZVRvT2ZmLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSByYWRpbyBidXR0b25zIGluIHRoaXMgZ3JvdXAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS5cbiAgICAgKiBUaGlzIG1lYW5zIHRoYXQgd2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgcmFkaW8gYnV0dG9uLCBvbmx5IHRoYXQgc3BlY2lmaWNcbiAgICAgKiBidXR0b24gd2lsbCBiZSB0dXJuZWQgb24uIEV2ZW4gaWYgb3RoZXIgcmFkaW8gYnV0dG9ucyBpbiB0aGUgZ3JvdXBcbiAgICAgKiByZXByZXNlbnQgdGhlIHNhbWUgdmFsdWUsIHRoZXkgd2lsbCBub3QgYmUgZW5hYmxlZC4gVGhlIGFsdGVybmF0aXZlIHRvXG4gICAgICogdGhpcyBpcyB0aGF0IGNsaWNraW5nIGEgcmFkaW8gYnV0dG9uIHdpbGwgc2VsZWN0IHRoYXQgYnV0dG9uIGFsb25nIHdpdGhcbiAgICAgKiBhbnkgb3RoZXIgcmFkaW8gYnV0dG9ucyBpbiB0aGUgZ3JvdXAgdGhhdCBzaGFyZSB0aGUgc2FtZSB2YWx1ZS4gU2VlXG4gICAgICogW1tQREZSYWRpb0dyb3VwLmVuYWJsZU11dHVhbEV4Y2x1c2lvbl1dIGFuZFxuICAgICAqIFtbUERGUmFkaW9Hcm91cC5kaXNhYmxlTXV0dWFsRXhjbHVzaW9uXV0uXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCByYWRpb0dyb3VwID0gZm9ybS5nZXRSYWRpb0dyb3VwKCdzb21lLnJhZGlvR3JvdXAuZmllbGQnKVxuICAgICAqIGlmIChyYWRpb0dyb3VwLmlzTXV0dWFsbHlFeGNsdXNpdmUoKSkgY29uc29sZS5sb2coJ011dHVhbCBleGNsdXNpb24gaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuaXNNdXR1YWxseUV4Y2x1c2l2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9CdXR0b25GbGFncy5SYWRpb3NJblVuaXNvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB1c2VyIGNsaWNrcyBhIHJhZGlvIGJ1dHRvbiBpbiB0aGlzIGdyb3VwIGl0IHdpbGwgYmUgc2VsZWN0ZWQuIEluXG4gICAgICogYWRkaXRpb24sIGFueSBvdGhlciByYWRpbyBidXR0b25zIGluIHRoaXMgZ3JvdXAgdGhhdCBzaGFyZSB0aGUgc2FtZVxuICAgICAqIHVuZGVybHlpbmcgdmFsdWUgd2lsbCBhbHNvIGJlIHNlbGVjdGVkLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogcmFkaW9Hcm91cC5lbmFibGVNdXR1YWxFeGNsdXNpb24oKVxuICAgICAqIGBgYFxuICAgICAqIE5vdGUgdGhhdCB0aGlzIG9wdGlvbiBtdXN0IGJlIGVuYWJsZWQgcHJpb3IgdG8gYWRkaW5nIG9wdGlvbnMgdG8gdGhlXG4gICAgICogcmFkaW8gZ3JvdXAuIEl0IGRvZXMgbm90IGN1cnJlbnRseSBhcHBseSByZXRyb2FjdGl2ZWx5IHRvIGV4aXN0aW5nXG4gICAgICogcmFkaW8gYnV0dG9ucyBpbiB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUuZW5hYmxlTXV0dWFsRXhjbHVzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0J1dHRvbkZsYWdzLlJhZGlvc0luVW5pc29uLCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB1c2VyIGNsaWNrcyBhIHJhZGlvIGJ1dHRvbiBpbiB0aGlzIGdyb3VwIG9ubHkgaXQgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgKiBObyBvdGhlciByYWRpbyBidXR0b25zIGluIHRoZSBncm91cCB3aWxsIGJlIHNlbGVjdGVkLCBldmVuIGlmIHRoZXkgc2hhcmVcbiAgICAgKiB0aGUgc2FtZSB1bmRlcmx5aW5nIHZhbHVlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogcmFkaW9Hcm91cC5kaXNhYmxlTXV0dWFsRXhjbHVzaW9uKClcbiAgICAgKiBgYGBcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBvcHRpb24gbXVzdCBiZSBkaXNhYmxlZCBwcmlvciB0byBhZGRpbmcgb3B0aW9ucyB0byB0aGVcbiAgICAgKiByYWRpbyBncm91cC4gSXQgZG9lcyBub3QgY3VycmVudGx5IGFwcGx5IHJldHJvYWN0aXZlbHkgdG8gZXhpc3RpbmdcbiAgICAgKiByYWRpbyBidXR0b25zIGluIHRoZSBncm91cC5cbiAgICAgKi9cbiAgICBQREZSYWRpb0dyb3VwLnByb3RvdHlwZS5kaXNhYmxlTXV0dWFsRXhjbHVzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb0J1dHRvbkZsYWdzLlJhZGlvc0luVW5pc29uLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyByYWRpbyBidXR0b24gdG8gdGhpcyBncm91cCBvbiB0aGUgc3BlY2lmaWVkIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgcmFkaW9Hcm91cCA9IGZvcm0uY3JlYXRlUmFkaW9Hcm91cCgnYmVzdC5ndW5kYW0nKVxuICAgICAqXG4gICAgICogY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgKiAgIHg6IDUwLFxuICAgICAqICAgd2lkdGg6IDI1LFxuICAgICAqICAgaGVpZ2h0OiAyNSxcbiAgICAgKiAgIHRleHRDb2xvcjogcmdiKDEsIDAsIDApLFxuICAgICAqICAgYmFja2dyb3VuZENvbG9yOiByZ2IoMCwgMSwgMCksXG4gICAgICogICBib3JkZXJDb2xvcjogcmdiKDAsIDAsIDEpLFxuICAgICAqICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICogICByb3RhdGU6IGRlZ3JlZXMoOTApLFxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHJhZGlvR3JvdXAuYWRkT3B0aW9uVG9QYWdlKCdFeGlhJywgcGFnZSwgeyAuLi5vcHRpb25zLCB5OiA1MCB9KVxuICAgICAqIHJhZGlvR3JvdXAuYWRkT3B0aW9uVG9QYWdlKCdEeW5hbWVzJywgcGFnZSwgeyAuLi5vcHRpb25zLCB5OiAxMTAgfSlcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IHJhZGlvIGJ1dHRvbiB3aWRnZXQgZm9yIHRoaXMgcmFkaW8gZ3JvdXAgZmllbGQuXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgb3B0aW9uIHRoYXQgdGhlIHJhZGlvIGJ1dHRvbiB3aWRnZXQgcmVwcmVzZW50cy5cbiAgICAgKiBAcGFyYW0gcGFnZSBUaGUgcGFnZSB0byB3aGljaCB0aGUgcmFkaW8gYnV0dG9uIHdpZGdldCBzaG91bGQgYmUgYWRkZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGFkZGluZyB0aGUgcmFkaW8gYnV0dG9uIHdpZGdldC5cbiAgICAgKi9cbiAgICBQREZSYWRpb0dyb3VwLnByb3RvdHlwZS5hZGRPcHRpb25Ub1BhZ2UgPSBmdW5jdGlvbiAob3B0aW9uLCBwYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qO1xuICAgICAgICBhc3NlcnRJcyhvcHRpb24sICdvcHRpb24nLCBbJ3N0cmluZyddKTtcbiAgICAgICAgYXNzZXJ0SXMocGFnZSwgJ3BhZ2UnLCBbW1BERlBhZ2UsICdQREZQYWdlJ11dKTtcbiAgICAgICAgYXNzZXJ0RmllbGRBcHBlYXJhbmNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgd2lkZ2V0IGZvciB0aGlzIHJhZGlvIGJ1dHRvblxuICAgICAgICB2YXIgd2lkZ2V0ID0gdGhpcy5jcmVhdGVXaWRnZXQoe1xuICAgICAgICAgICAgeDogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2lkdGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiA1MCxcbiAgICAgICAgICAgIHRleHRDb2xvcjogKF9lID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRleHRDb2xvcikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogcmdiKDAsIDAsIDApLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoX2YgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiByZ2IoMSwgMSwgMSksXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogKF9nID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJvcmRlckNvbG9yKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiByZ2IoMCwgMCwgMCksXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKF9oID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJvcmRlcldpZHRoKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAxLFxuICAgICAgICAgICAgcm90YXRlOiAoX2ogPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm90YXRlKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgaGlkZGVuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGlkZGVuLFxuICAgICAgICAgICAgcGFnZTogcGFnZS5yZWYsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgd2lkZ2V0UmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3Rlcih3aWRnZXQuZGljdCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhpcyBmaWVsZFxuICAgICAgICB2YXIgYXBTdGF0ZVZhbHVlID0gdGhpcy5hY3JvRmllbGQuYWRkV2lkZ2V0V2l0aE9wdCh3aWRnZXRSZWYsIFBERkhleFN0cmluZy5mcm9tVGV4dChvcHRpb24pLCAhdGhpcy5pc011dHVhbGx5RXhjbHVzaXZlKCkpO1xuICAgICAgICAvLyBTZXQgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciB3aWRnZXRcbiAgICAgICAgd2lkZ2V0LnNldEFwcGVhcmFuY2VTdGF0ZShQREZOYW1lLm9mKCdPZmYnKSk7XG4gICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIGFwU3RhdGVWYWx1ZSk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhlIGdpdmVuIHBhZ2VcbiAgICAgICAgcGFnZS5ub2RlLmFkZEFubm90KHdpZGdldFJlZik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgb2YgdGhpcyBncm91cCdzIHJhZGlvIGJ1dHRvbiB3aWRnZXRzIGRvIG5vdCBoYXZlIGFuXG4gICAgICogYXBwZWFyYW5jZSBzdHJlYW0gZm9yIHRoZWlyIGN1cnJlbnQgc3RhdGUuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcmFkaW9Hcm91cCA9IGZvcm0uZ2V0UmFkaW9Hcm91cCgnc29tZS5yYWRpb0dyb3VwLmZpZWxkJylcbiAgICAgKiBpZiAocmFkaW9Hcm91cC5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlKCkpIGNvbnNvbGUubG9nKCdOZWVkcyB1cGRhdGUnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgcmFkaW8gZ3JvdXAgbmVlZHMgYW4gYXBwZWFyYW5jZSB1cGRhdGUuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUubmVlZHNBcHBlYXJhbmNlc1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB3aWRnZXQuZ2V0QXBwZWFyYW5jZVN0YXRlKCk7XG4gICAgICAgICAgICB2YXIgbm9ybWFsID0gKF9hID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWw7XG4gICAgICAgICAgICBpZiAoIShub3JtYWwgaW5zdGFuY2VvZiBQREZEaWN0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiAhbm9ybWFsLmhhcyhzdGF0ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMgZm9yIGVhY2ggb2YgdGhpcyBncm91cCdzIHJhZGlvIGJ1dHRvbiB3aWRnZXRzXG4gICAgICogdXNpbmcgdGhlIGRlZmF1bHQgYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgcmFkaW8gZ3JvdXBzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ3NvbWUucmFkaW9Hcm91cC5maWVsZCcpXG4gICAgICogcmFkaW9Hcm91cC5kZWZhdWx0VXBkYXRlQXBwZWFyYW5jZXMoKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERlJhZGlvR3JvdXAucHJvdG90eXBlLmRlZmF1bHRVcGRhdGVBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVBcHBlYXJhbmNlcygpO1xuICAgIH07XG4gICAgLy8gcmcudXBkYXRlQXBwZWFyYW5jZXMoKGZpZWxkOiBhbnksIHdpZGdldDogYW55KSA9PiB7XG4gICAgLy8gICBhc3NlcnQoZmllbGQgPT09IHJnKTtcbiAgICAvLyAgIGFzc2VydCh3aWRnZXQgaW5zdGFuY2VvZiBQREZXaWRnZXRBbm5vdGF0aW9uKTtcbiAgICAvLyAgIHJldHVybiB7IG9uOiBbLi4ucmVjdGFuZ2xlLCAuLi5jaXJjbGVdLCBvZmY6IFsuLi5yZWN0YW5nbGUsIC4uLmNpcmNsZV0gfTtcbiAgICAvLyB9KTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIGdyb3VwJ3MgcmFkaW8gYnV0dG9uIHdpZGdldHNcbiAgICAgKiB1c2luZyB0aGUgZ2l2ZW4gYXBwZWFyYW5jZSBwcm92aWRlci4gSWYgbm8gYHByb3ZpZGVyYCBpcyBwYXNzZWQsIHRoZVxuICAgICAqIGRlZmF1bHQgYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgcmFkaW8gZ3JvdXBzIHdpbGwgYmUgdXNlZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCByYWRpb0dyb3VwID0gZm9ybS5nZXRSYWRpb0dyb3VwKCdzb21lLnJhZGlvR3JvdXAuZmllbGQnKVxuICAgICAqIHJhZGlvR3JvdXAudXBkYXRlQXBwZWFyYW5jZXMoKGZpZWxkLCB3aWRnZXQpID0+IHtcbiAgICAgKiAgIC4uLlxuICAgICAqICAgcmV0dXJuIHtcbiAgICAgKiAgICAgbm9ybWFsOiB7IG9uOiBkcmF3UmFkaW9CdXR0b24oLi4uKSwgb2ZmOiBkcmF3UmFkaW9CdXR0b24oLi4uKSB9LFxuICAgICAqICAgICBkb3duOiB7IG9uOiBkcmF3UmFkaW9CdXR0b24oLi4uKSwgb2ZmOiBkcmF3UmFkaW9CdXR0b24oLi4uKSB9LFxuICAgICAqICAgfVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIE9wdGlvbmFsbHksIHRoZSBhcHBlYXJhbmNlIHByb3ZpZGVyIHRvIGJlIHVzZWQgZm9yXG4gICAgICogICAgICAgICAgICAgICAgIGdlbmVyYXRpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5wcm90b3R5cGUudXBkYXRlQXBwZWFyYW5jZXMgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQocHJvdmlkZXIsICdwcm92aWRlcicsIFtGdW5jdGlvbl0pO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgb25WYWx1ZSA9IHdpZGdldC5nZXRPblZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoIW9uVmFsdWUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2Uod2lkZ2V0LCBvblZhbHVlLCBwcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERlJhZGlvR3JvdXAucHJvdG90eXBlLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2UgPSBmdW5jdGlvbiAod2lkZ2V0LCBvblZhbHVlLCBwcm92aWRlcikge1xuICAgICAgICB2YXIgYXBQcm92aWRlciA9IHByb3ZpZGVyICE9PSBudWxsICYmIHByb3ZpZGVyICE9PSB2b2lkIDAgPyBwcm92aWRlciA6IGRlZmF1bHRSYWRpb0dyb3VwQXBwZWFyYW5jZVByb3ZpZGVyO1xuICAgICAgICB2YXIgYXBwZWFyYW5jZXMgPSBub3JtYWxpemVBcHBlYXJhbmNlKGFwUHJvdmlkZXIodGhpcywgd2lkZ2V0KSk7XG4gICAgICAgIHRoaXMudXBkYXRlT25PZmZXaWRnZXRBcHBlYXJhbmNlKHdpZGdldCwgb25WYWx1ZSwgYXBwZWFyYW5jZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gSW5zdGVhZCxcbiAgICAgKiA+IGNvbnNpZGVyIHVzaW5nIHRoZSBbW1BERkZvcm0uZ2V0T3B0aW9uTGlzdF1dIG1ldGhvZCwgd2hpY2ggd2lsbCBjcmVhdGUgYW5cbiAgICAgKiA+IGluc3RhbmNlIG9mIFtbUERGT3B0aW9uTGlzdF1dIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgW1tQREZPcHRpb25MaXN0XV0gZnJvbSBhbiBleGlzdGluZyBhY3JvUmFkaW9CdXR0b25cbiAgICAgKiBhbmQgcmVmXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWNyb1JhZGlvQnV0dG9uIFRoZSB1bmRlcmx5aW5nIGBQREZBY3JvUmFkaW9CdXR0b25gIGZvciB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICByYWRpbyBncm91cC5cbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB1bmlxdWUgcmVmZXJlbmNlIGZvciB0aGlzIHJhZGlvIGdyb3VwLlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoaXMgcmFkaW8gZ3JvdXAgd2lsbCBiZWxvbmcuXG4gICAgICovXG4gICAgUERGUmFkaW9Hcm91cC5vZiA9IGZ1bmN0aW9uIChhY3JvUmFkaW9CdXR0b24sIHJlZiwgZG9jKSB7IHJldHVybiBuZXcgUERGUmFkaW9Hcm91cChhY3JvUmFkaW9CdXR0b24sIHJlZiwgZG9jKTsgfTtcbiAgICByZXR1cm4gUERGUmFkaW9Hcm91cDtcbn0oUERGRmllbGQpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlJhZGlvR3JvdXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZSYWRpb0dyb3VwLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkZpZWxkIGZyb20gXCIuL1BERkZpZWxkXCI7XG5pbXBvcnQgeyBQREZBY3JvU2lnbmF0dXJlIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBzaWduYXR1cmUgZmllbGQgb2YgYSBbW1BERkZvcm1dXS5cbiAqXG4gKiBbW1BERlNpZ25hdHVyZV1dIGZpZWxkcyBhcmUgZGlnaXRhbCBzaWduYXR1cmVzLiBgcGRmLWxpYmAgZG9lcyBub3RcbiAqIGN1cnJlbnRseSBwcm92aWRlIGFueSBzcGVjaWFsaXplZCBBUElzIGZvciBjcmVhdGluZyBkaWdpdGFsIHNpZ25hdHVyZXMgb3JcbiAqIHJlYWRpbmcgdGhlIGNvbnRlbnRzIG9mIGV4aXN0aW5nIGRpZ2l0YWwgc2lnbmF0dXJlcy5cbiAqL1xudmFyIFBERlNpZ25hdHVyZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGU2lnbmF0dXJlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERlNpZ25hdHVyZShhY3JvU2lnbmF0dXJlLCByZWYsIGRvYykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhY3JvU2lnbmF0dXJlLCByZWYsIGRvYykgfHwgdGhpcztcbiAgICAgICAgYXNzZXJ0SXMoYWNyb1NpZ25hdHVyZSwgJ2Fjcm9TaWduYXR1cmUnLCBbXG4gICAgICAgICAgICBbUERGQWNyb1NpZ25hdHVyZSwgJ1BERkFjcm9TaWduYXR1cmUnXSxcbiAgICAgICAgXSk7XG4gICAgICAgIF90aGlzLmFjcm9GaWVsZCA9IGFjcm9TaWduYXR1cmU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUERGU2lnbmF0dXJlLnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiA+ICoqTk9URToqKiBZb3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJbnN0ZWFkLFxuICAgICAqID4gY29uc2lkZXIgdXNpbmcgdGhlIFtbUERGRm9ybS5nZXRTaWduYXR1cmVdXSBtZXRob2QsIHdoaWNoIHdpbGwgY3JlYXRlIGFuXG4gICAgICogPiBpbnN0YW5jZSBvZiBbW1BERlNpZ25hdHVyZV1dIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgW1tQREZTaWduYXR1cmVdXSBmcm9tIGFuIGV4aXN0aW5nIGFjcm9TaWduYXR1cmUgYW5kXG4gICAgICogcmVmXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWNyb1NpZ25hdHVyZSBUaGUgdW5kZXJseWluZyBgUERGQWNyb1NpZ25hdHVyZWAgZm9yIHRoaXMgc2lnbmF0dXJlLlxuICAgICAqIEBwYXJhbSByZWYgVGhlIHVuaXF1ZSByZWZlcmVuY2UgZm9yIHRoaXMgc2lnbmF0dXJlLlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoaXMgc2lnbmF0dXJlIHdpbGwgYmVsb25nLlxuICAgICAqL1xuICAgIFBERlNpZ25hdHVyZS5vZiA9IGZ1bmN0aW9uIChhY3JvU2lnbmF0dXJlLCByZWYsIGRvYykgeyByZXR1cm4gbmV3IFBERlNpZ25hdHVyZShhY3JvU2lnbmF0dXJlLCByZWYsIGRvYyk7IH07XG4gICAgcmV0dXJuIFBERlNpZ25hdHVyZTtcbn0oUERGRmllbGQpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlNpZ25hdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlNpZ25hdHVyZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZQYWdlIGZyb20gXCIuLi9QREZQYWdlXCI7XG5pbXBvcnQgUERGRm9udCBmcm9tIFwiLi4vUERGRm9udFwiO1xuaW1wb3J0IFBERkZpZWxkLCB7IGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMsIH0gZnJvbSBcIi4vUERGRmllbGRcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZUFwcGVhcmFuY2UsIGRlZmF1bHRUZXh0RmllbGRBcHBlYXJhbmNlUHJvdmlkZXIsIH0gZnJvbSBcIi4vYXBwZWFyYW5jZXNcIjtcbmltcG9ydCB7IHJnYiB9IGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCB7IGRlZ3JlZXMgfSBmcm9tIFwiLi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBSaWNoVGV4dEZpZWxkUmVhZEVycm9yLCBFeGNlZWRlZE1heExlbmd0aEVycm9yLCBJbnZhbGlkTWF4TGVuZ3RoRXJyb3IsIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IHsgSW1hZ2VBbGlnbm1lbnQgfSBmcm9tIFwiLi4vaW1hZ2UvYWxpZ25tZW50XCI7XG5pbXBvcnQgeyBUZXh0QWxpZ25tZW50IH0gZnJvbSBcIi4uL3RleHQvYWxpZ25tZW50XCI7XG5pbXBvcnQgeyBQREZIZXhTdHJpbmcsIFBERlN0cmVhbSwgUERGQWNyb1RleHQsIEFjcm9UZXh0RmxhZ3MsIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRJc09uZU9mLCBhc3NlcnRPclVuZGVmaW5lZCwgYXNzZXJ0UG9zaXRpdmUsIGFzc2VydFJhbmdlT3JVbmRlZmluZWQsIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSB0ZXh0IGZpZWxkIG9mIGEgW1tQREZGb3JtXV0uXG4gKlxuICogW1tQREZUZXh0RmllbGRdXSBmaWVsZHMgYXJlIGJveGVzIHRoYXQgZGlzcGxheSB0ZXh0IGVudGVyZWQgYnkgdGhlIHVzZXIuIFRoZVxuICogcHVycG9zZSBvZiBhIHRleHQgZmllbGQgaXMgdG8gZW5hYmxlIHVzZXJzIHRvIGVudGVyIHRleHQgb3IgdmlldyB0ZXh0IHZhbHVlc1xuICogaW4gdGhlIGRvY3VtZW50IHByZWZpbGxlZCBieSBzb2Z0d2FyZS4gVXNlcnMgY2FuIGNsaWNrIG9uIGEgdGV4dCBmaWVsZCBhbmRcbiAqIGlucHV0IHRleHQgdmlhIHRoZWlyIGtleWJvYXJkLiBTb21lIHRleHQgZmllbGRzIGFsbG93IG11bHRpcGxlIGxpbmVzIG9mIHRleHRcbiAqIHRvIGJlIGVudGVyZWQgKHNlZSBbW1BERlRleHRGaWVsZC5pc011bHRpbGluZV1dKS5cbiAqL1xudmFyIFBERlRleHRGaWVsZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGVGV4dEZpZWxkLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERlRleHRGaWVsZChhY3JvVGV4dCwgcmVmLCBkb2MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYWNyb1RleHQsIHJlZiwgZG9jKSB8fCB0aGlzO1xuICAgICAgICBhc3NlcnRJcyhhY3JvVGV4dCwgJ2Fjcm9UZXh0JywgW1tQREZBY3JvVGV4dCwgJ1BERkFjcm9UZXh0J11dKTtcbiAgICAgICAgX3RoaXMuYWNyb0ZpZWxkID0gYWNyb1RleHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0ZXh0IHRoYXQgdGhpcyBmaWVsZCBjb250YWlucy4gVGhpcyB0ZXh0IGlzIHZpc2libGUgdG8gdXNlcnMgd2hvXG4gICAgICogdmlldyB0aGlzIGZpZWxkIGluIGEgUERGIHJlYWRlci5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogY29uc3QgdGV4dCA9IHRleHRGaWVsZC5nZXRUZXh0KClcbiAgICAgKiBjb25zb2xlLmxvZygnVGV4dCBmaWVsZCBjb250ZW50czonLCB0ZXh0KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHRoaXMgdGV4dCBmaWVsZCBjb250YWlucyBubyB1bmRlcmx5aW5nIHZhbHVlLCBgdW5kZWZpbmVkYFxuICAgICAqIHdpbGwgYmUgcmV0dXJuZWQuIFRleHQgZmllbGRzIG1heSBhbHNvIGNvbnRhaW4gYW4gdW5kZXJseWluZyB2YWx1ZSB0aGF0XG4gICAgICogaXMgc2ltcGx5IGFuIGVtcHR5IHN0cmluZyAoYCcnYCkuIFRoaXMgZGV0YWlsIGlzIGxhcmdlbHkgaXJyZWxldmFudCBmb3JcbiAgICAgKiBtb3N0IGFwcGxpY2F0aW9ucy4gSW4gZ2VuZXJhbCwgeW91J2xsIHdhbnQgdG8gdHJlYXQgYm90aCBjYXNlcyB0aGUgc2FtZVxuICAgICAqIHdheSBhbmQgc2ltcGx5IGNvbnNpZGVyIHRoZSB0ZXh0IGZpZWxkIHRvIGJlIGVtcHR5LiBJbiBlaXRoZXIgY2FzZSwgdGhlXG4gICAgICogdGV4dCBmaWVsZCB3aWxsIGFwcGVhciBlbXB0eSB0byB1c2VycyB3aGVuIHZpZXdlZCBpbiBhIFBERiByZWFkZXIuXG4gICAgICpcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiB0aGlzIGlzIGEgcmljaCB0ZXh0IGZpZWxkLiBgcGRmLWxpYmAgZG9lcyBub3RcbiAgICAgKiBzdXBwb3J0IHJlYWRpbmcgcmljaCB0ZXh0IGZpZWxkcy4gTm9yIGRvIG1vc3QgUERGIHJlYWRlcnMgYW5kIHdyaXRlcnMuXG4gICAgICogUmljaCB0ZXh0IGZpZWxkcyBhcmUgYmFzZWQgb24gWEZBIChYTUwgRm9ybXMgQXJjaGl0ZWN0dXJlKS4gUmVsYXRpdmVseSBmZXdcbiAgICAgKiBQREZzIHVzZSByaWNoIHRleHQgZmllbGRzIG9yIFhGQS4gVW5saWtlIFBERiBpdHNlbGYsIFhGQSBpcyBub3QgYW4gSVNPXG4gICAgICogc3RhbmRhcmQuIFhGQSBoYXMgYmVlbiBkZXByZWNhdGVkIGluIFBERiAyLjA6XG4gICAgICogKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9YRkFcbiAgICAgKiAqIGh0dHA6Ly9ibG9nLnBkZnNoYXJlZm9ybXMuY29tL3BkZi0yLTAtcmVsZWFzZS1iaWQtZmFyZXdlbGwteGZhLWZvcm1zL1xuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgY29udGFpbmVkIGluIHRoaXMgdGV4dCBmaWVsZC5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuYWNyb0ZpZWxkLmdldFZhbHVlKCk7XG4gICAgICAgIGlmICghdmFsdWUgJiYgdGhpcy5pc1JpY2hGb3JtYXR0ZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJpY2hUZXh0RmllbGRSZWFkRXJyb3IodGhpcy5nZXROYW1lKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUuZGVjb2RlVGV4dCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB0ZXh0IGZvciB0aGlzIGZpZWxkLiBUaGlzIG9wZXJhdGlvbiBpcyBhbmFsb2dvdXMgdG8gYSBodW1hbiB1c2VyXG4gICAgICogY2xpY2tpbmcgb24gdGhlIHRleHQgZmllbGQgaW4gYSBQREYgcmVhZGVyIGFuZCB0eXBpbmcgaW4gdGV4dCB2aWEgdGhlaXJcbiAgICAgKiBrZXlib2FyZC4gVGhpcyBtZXRob2Qgd2lsbCB1cGRhdGUgdGhlIHVuZGVybHlpbmcgc3RhdGUgb2YgdGhlIHRleHQgZmllbGRcbiAgICAgKiB0byBpbmRpY2F0ZSB3aGF0IHRleHQgaGFzIGJlZW4gc2V0LiBQREYgbGlicmFyaWVzIGFuZCByZWFkZXJzIHdpbGwgYmUgYWJsZVxuICAgICAqIHRvIGV4dHJhY3QgdGhlc2UgdmFsdWVzIGZyb20gdGhlIHNhdmVkIGRvY3VtZW50IGFuZCBkZXRlcm1pbmUgd2hhdCB0ZXh0XG4gICAgICogd2FzIHNldC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ2Jlc3Quc3VwZXJoZXJvLnRleHQuZmllbGQnKVxuICAgICAqIHRleHRGaWVsZC5zZXRUZXh0KCdPbmUgUHVuY2ggTWFuJylcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHRleHQgZmllbGQgYXMgZGlydHksIGNhdXNpbmcgaXRzIGFwcGVhcmFuY2VcbiAgICAgKiBzdHJlYW1zIHRvIGJlIHVwZGF0ZWQgd2hlbiBlaXRoZXIgW1tQREZEb2N1bWVudC5zYXZlXV0gb3JcbiAgICAgKiBbW1BERkZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlc11dIGlzIGNhbGxlZC4gVGhlIHVwZGF0ZWQgc3RyZWFtcyB3aWxsXG4gICAgICogZGlzcGxheSB0aGUgdGV4dCB0aGlzIGZpZWxkIGNvbnRhaW5zIGluc2lkZSB0aGUgd2lkZ2V0cyBvZiB0aGlzIHRleHRcbiAgICAgKiBmaWVsZC5cbiAgICAgKlxuICAgICAqICoqSU1QT1JUQU5UOioqIFRoZSBkZWZhdWx0IGZvbnQgdXNlZCB0byB1cGRhdGUgYXBwZWFyYW5jZSBzdHJlYW1zIGlzXG4gICAgICogW1tTdGFuZGFyZEZvbnRzLkhlbHZldGljYV1dLiBOb3RlIHRoYXQgdGhpcyBpcyBhIFdpbkFuc2kgZm9udC4gVGhpcyBtZWFuc1xuICAgICAqIHRoYXQgZW5jb2RpbmcgZXJyb3JzIHdpbGwgYmUgdGhyb3duIGlmIHRoaXMgZmllbGQgY29udGFpbnMgdGV4dCBvdXRzaWRlXG4gICAgICogdGhlIFdpbkFuc2kgY2hhcmFjdGVyIHNldCAodGhlIGxhdGluIGFscGhhYmV0KS5cbiAgICAgKlxuICAgICAqIEVtYmVkZGluZyBhIGN1c3RvbSBmb250IGFuZCBwYXNzaW5nIGl0IHRvXG4gICAgICogW1tQREZGb3JtLnVwZGF0ZUZpZWxkQXBwZWFyYW5jZXNdXSBvciBbW1BERlRleHRGaWVsZC51cGRhdGVBcHBlYXJhbmNlc11dXG4gICAgICogYWxsb3dzIHlvdSB0byBnZW5lcmF0ZSBhcHBlYXJhbmNlIHN0cmVhbXMgd2l0aCBjaGFyYWN0ZXJzIG91dHNpZGUgdGhlXG4gICAgICogbGF0aW4gYWxwaGFiZXQgKGFzc3VtaW5nIHRoZSBjdXN0b20gZm9udCBzdXBwb3J0cyB0aGVtKS5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgaXMgYSByaWNoIHRleHQgZmllbGQsIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgc3RhbmRhcmQgdGV4dFxuICAgICAqIGZpZWxkIGluIG9yZGVyIHRvIHNldCB0aGUgdGV4dC4gYHBkZi1saWJgIGRvZXMgbm90IHN1cHBvcnQgd3JpdGluZyByaWNoXG4gICAgICogdGV4dCBzdHJpbmdzLiBOb3IgZG8gbW9zdCBQREYgcmVhZGVycyBhbmQgd3JpdGVycy4gU2VlXG4gICAgICogW1tQREZUZXh0RmllbGQuZ2V0VGV4dF1dIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHJpY2ggdGV4dCBmaWVsZHMgYW5kXG4gICAgICogdGhlaXIgZGVwcmVjYXRpb24gaW4gUERGIDIuMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRoaXMgZmllbGQgc2hvdWxkIGNvbnRhaW4uXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQodGV4dCwgJ3RleHQnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIG1heExlbmd0aCA9IHRoaXMuZ2V0TWF4TGVuZ3RoKCk7XG4gICAgICAgIGlmIChtYXhMZW5ndGggIT09IHVuZGVmaW5lZCAmJiB0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZWVkZWRNYXhMZW5ndGhFcnJvcih0ZXh0Lmxlbmd0aCwgbWF4TGVuZ3RoLCB0aGlzLmdldE5hbWUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xuICAgICAgICB0aGlzLmRpc2FibGVSaWNoRm9ybWF0dGluZygpO1xuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0VmFsdWUoUERGSGV4U3RyaW5nLmZyb21UZXh0KHRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWNyb0ZpZWxkLnJlbW92ZVZhbHVlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYWxpZ25tZW50IGZvciB0aGlzIHRleHQgZmllbGQuIFRoaXMgdmFsdWUgcmVwcmVzZW50cyB0aGVcbiAgICAgKiBqdXN0aWZpY2F0aW9uIG9mIHRoZSB0ZXh0IHdoZW4gaXQgaXMgZGlzcGxheWVkIHRvIHRoZSB1c2VyIGluIFBERiByZWFkZXJzLlxuICAgICAqIFRoZXJlIGFyZSB0aHJlZSBwb3NzaWJsZSBhbGlnbm1lbnRzOiBsZWZ0LCBjZW50ZXIsIGFuZCByaWdodC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiBjb25zdCBhbGlnbm1lbnQgPSB0ZXh0RmllbGQuZ2V0QWxpZ25tZW50KClcbiAgICAgKiBpZiAoYWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkxlZnQpIGNvbnNvbGUubG9nKCdUZXh0IGlzIGxlZnQganVzdGlmaWVkJylcbiAgICAgKiBpZiAoYWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkNlbnRlcikgY29uc29sZS5sb2coJ1RleHQgaXMgY2VudGVyZWQnKVxuICAgICAqIGlmIChhbGlnbm1lbnQgPT09IFRleHRBbGlnbm1lbnQuUmlnaHQpIGNvbnNvbGUubG9nKCdUZXh0IGlzIHJpZ2h0IGp1c3RpZmllZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgVGhlIGFsaWdubWVudCBvZiB0aGlzIHRleHQgZmllbGQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5nZXRBbGlnbm1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBxdWFkZGluZyA9IHRoaXMuYWNyb0ZpZWxkLmdldFF1YWRkaW5nKCk7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICByZXR1cm4gKHF1YWRkaW5nID09PSAwID8gVGV4dEFsaWdubWVudC5MZWZ0XG4gICAgICAgICAgICA6IHF1YWRkaW5nID09PSAxID8gVGV4dEFsaWdubWVudC5DZW50ZXJcbiAgICAgICAgICAgICAgICA6IHF1YWRkaW5nID09PSAyID8gVGV4dEFsaWdubWVudC5SaWdodFxuICAgICAgICAgICAgICAgICAgICA6IFRleHRBbGlnbm1lbnQuTGVmdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGFsaWdubWVudCBmb3IgdGhpcyB0ZXh0IGZpZWxkLiBUaGlzIHdpbGwgZGV0ZXJtaW5lIHRoZVxuICAgICAqIGp1c3RpZmljYXRpb24gb2YgdGhlIHRleHQgd2hlbiBpdCBpcyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgaW4gUERGIHJlYWRlcnMuXG4gICAgICogVGhlcmUgYXJlIHRocmVlIHBvc3NpYmxlIGFsaWdubWVudHM6IGxlZnQsIGNlbnRlciwgYW5kIHJpZ2h0LiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqXG4gICAgICogLy8gVGV4dCB3aWxsIGJlIGxlZnQganVzdGlmaWVkIHdoZW4gZGlzcGxheWVkXG4gICAgICogdGV4dEZpZWxkLnNldEFsaWdubWVudChUZXh0QWxpZ25tZW50LkxlZnQpXG4gICAgICpcbiAgICAgKiAvLyBUZXh0IHdpbGwgYmUgY2VudGVyZWQgd2hlbiBkaXNwbGF5ZWRcbiAgICAgKiB0ZXh0RmllbGQuc2V0QWxpZ25tZW50KFRleHRBbGlnbm1lbnQuQ2VudGVyKVxuICAgICAqXG4gICAgICogLy8gVGV4dCB3aWxsIGJlIHJpZ2h0IGp1c3RpZmllZCB3aGVuIGRpc3BsYXllZFxuICAgICAqIHRleHRGaWVsZC5zZXRBbGlnbm1lbnQoVGV4dEFsaWdubWVudC5SaWdodClcbiAgICAgKiBgYGBcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1hcmsgdGhpcyB0ZXh0IGZpZWxkIGFzIGRpcnR5LiBTZWVcbiAgICAgKiBbW1BERlRleHRGaWVsZC5zZXRUZXh0XV0gZm9yIG1vcmUgZGV0YWlscyBhYm91dCB3aGF0IHRoaXMgbWVhbnMuXG4gICAgICogQHBhcmFtIGFsaWdubWVudCBUaGUgYWxpZ25tZW50IGZvciB0aGlzIHRleHQgZmllbGQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5zZXRBbGlnbm1lbnQgPSBmdW5jdGlvbiAoYWxpZ25tZW50KSB7XG4gICAgICAgIGFzc2VydElzT25lT2YoYWxpZ25tZW50LCAnYWxpZ25tZW50JywgVGV4dEFsaWdubWVudCk7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0UXVhZGRpbmcoYWxpZ25tZW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWF4aW11bSBsZW5ndGggb2YgdGhpcyBmaWVsZC4gVGhpcyB2YWx1ZSByZXByZXNlbnRzIHRoZSBtYXhpbXVtXG4gICAgICogbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBjYW4gYmUgdHlwZWQgaW50byB0aGlzIGZpZWxkIGJ5IHRoZSB1c2VyLiBJZlxuICAgICAqIHRoaXMgZmllbGQgZG9lcyBub3QgaGF2ZSBhIG1heGltdW0gbGVuZ3RoLCBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGNvbnN0IG1heExlbmd0aCA9IHRleHRGaWVsZC5nZXRNYXhMZW5ndGgoKVxuICAgICAqIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCkgY29uc29sZS5sb2coJ05vIG1heCBsZW5ndGgnKVxuICAgICAqIGVsc2UgY29uc29sZS5sb2coYE1heCBsZW5ndGggaXMgJHttYXhMZW5ndGh9YClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBhbGxvd2VkIGluIHRoaXMgZmllbGQsIG9yXG4gICAgICogICAgICAgICAgYHVuZGVmaW5lZGAgaWYgbm8gbGltaXQgZXhpc3RzLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuZ2V0TWF4TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuZ2V0TWF4TGVuZ3RoKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoaXMgZmllbGQuIFRoaXMgbGltaXRzIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVyc1xuICAgICAqIHRoYXQgY2FuIGJlIHR5cGVkIGludG8gdGhpcyBmaWVsZCBieSB0aGUgdXNlci4gVGhpcyBhbHNvIGxpbWl0cyB0aGUgbGVuZ3RoXG4gICAgICogb2YgdGhlIHN0cmluZyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gW1tQREZUZXh0RmllbGQuc2V0VGV4dF1dLiBUaGlzIGxpbWl0XG4gICAgICogY2FuIGJlIHJlbW92ZWQgYnkgcGFzc2luZyBgdW5kZWZpbmVkYCBhcyBgbWF4TGVuZ3RoYC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKlxuICAgICAqIC8vIEFsbG93IGJldHdlZW4gMCBhbmQgNSBjaGFyYWN0ZXJzIHRvIGJlIGVudGVyZWRcbiAgICAgKiB0ZXh0RmllbGQuc2V0TWF4TGVuZ3RoKDUpXG4gICAgICpcbiAgICAgKiAvLyBBbGxvdyBhbnkgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gYmUgZW50ZXJlZFxuICAgICAqIHRleHRGaWVsZC5zZXRNYXhMZW5ndGgodW5kZWZpbmVkKVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHRleHQgZmllbGQgYXMgZGlydHkuIFNlZVxuICAgICAqIFtbUERGVGV4dEZpZWxkLnNldFRleHRdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKiBAcGFyYW0gbWF4TGVuZ3RoIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGFsbG93ZWQgaW4gdGhpcyBmaWVsZCwgb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgIGB1bmRlZmluZWRgIHRvIHJlbW92ZSB0aGUgbGltaXQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5zZXRNYXhMZW5ndGggPSBmdW5jdGlvbiAobWF4TGVuZ3RoKSB7XG4gICAgICAgIGFzc2VydFJhbmdlT3JVbmRlZmluZWQobWF4TGVuZ3RoLCAnbWF4TGVuZ3RoJywgMCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hY3JvRmllbGQucmVtb3ZlTWF4TGVuZ3RoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgaWYgKHRleHQgJiYgdGV4dC5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE1heExlbmd0aEVycm9yKHRleHQubGVuZ3RoLCBtYXhMZW5ndGgsIHRoaXMuZ2V0TmFtZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldE1heExlbmd0aChtYXhMZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIG1heGltdW0gbGVuZ3RoIGZvciB0aGlzIHRleHQgZmllbGQuIFRoaXMgYWxsb3dzIGFueSBudW1iZXIgb2ZcbiAgICAgKiBjaGFyYWN0ZXJzIHRvIGJlIHR5cGVkIGludG8gdGhpcyBmaWVsZCBieSB0aGUgdXNlci4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQucmVtb3ZlTWF4TGVuZ3RoKClcbiAgICAgKiBgYGBcbiAgICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gcGFzc2luZyBgdW5kZWZpbmVkYCB0b1xuICAgICAqIFtbUERGVGV4dEZpZWxkLnNldE1heExlbmd0aF1dLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUucmVtb3ZlTWF4TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnJlbW92ZU1heExlbmd0aCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBhbiBpbWFnZSBpbnNpZGUgdGhlIGJvdW5kcyBvZiB0aGlzIHRleHQgZmllbGQncyB3aWRnZXRzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHBuZ0ltYWdlID0gYXdhaXQgcGRmRG9jLmVtYmVkUG5nKC4uLilcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuc2V0SW1hZ2UocG5nSW1hZ2UpXG4gICAgICogYGBgXG4gICAgICogVGhpcyB3aWxsIHVwZGF0ZSB0aGUgYXBwZWFyYW5jZXMgc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIHRleHQgZmllbGQncyB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSBpbWFnZSBUaGUgaW1hZ2UgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuc2V0SW1hZ2UgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgdmFyIGZpZWxkQWxpZ25tZW50ID0gdGhpcy5nZXRBbGlnbm1lbnQoKTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHZhciBhbGlnbm1lbnQgPSBmaWVsZEFsaWdubWVudCA9PT0gVGV4dEFsaWdubWVudC5DZW50ZXIgPyBJbWFnZUFsaWdubWVudC5DZW50ZXJcbiAgICAgICAgICAgIDogZmllbGRBbGlnbm1lbnQgPT09IFRleHRBbGlnbm1lbnQuUmlnaHQgPyBJbWFnZUFsaWdubWVudC5SaWdodFxuICAgICAgICAgICAgICAgIDogSW1hZ2VBbGlnbm1lbnQuTGVmdDtcbiAgICAgICAgdmFyIHdpZGdldHMgPSB0aGlzLmFjcm9GaWVsZC5nZXRXaWRnZXRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0ID0gd2lkZ2V0c1tpZHhdO1xuICAgICAgICAgICAgdmFyIHN0cmVhbVJlZiA9IHRoaXMuY3JlYXRlSW1hZ2VBcHBlYXJhbmNlU3RyZWFtKHdpZGdldCwgaW1hZ2UsIGFsaWdubWVudCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2VzKHdpZGdldCwgeyBub3JtYWw6IHN0cmVhbVJlZiB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtBc0NsZWFuKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhpcyBmaWVsZC4gTGFyZ2VyIGZvbnQgc2l6ZXMgd2lsbCByZXN1bHQgaW4gbGFyZ2VyXG4gICAgICogdGV4dCBiZWluZyBkaXNwbGF5ZWQgd2hlbiBQREYgcmVhZGVycyByZW5kZXIgdGhpcyB0ZXh0IGZpZWxkLiBGb250IHNpemVzXG4gICAgICogbWF5IGJlIGludGVnZXIgb3IgZmxvYXRpbmcgcG9pbnQgbnVtYmVycy4gU3VwcGx5aW5nIGEgbmVnYXRpdmUgZm9udCBzaXplXG4gICAgICogd2lsbCBjYXVzZSB0aGlzIG1ldGhvZCB0byB0aHJvdyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLnNldEZvbnRTaXplKDQpXG4gICAgICogdGV4dEZpZWxkLnNldEZvbnRTaXplKDE1LjcpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IFRoaXMgbWV0aG9kIGRlcGVuZHMgdXBvbiB0aGUgZXhpc3RlbmNlIG9mIGEgZGVmYXVsdCBhcHBlYXJhbmNlXG4gICAgICogPiAoYC9EQWApIHN0cmluZy4gSWYgdGhpcyBmaWVsZCBkb2VzIG5vdCBoYXZlIGEgZGVmYXVsdCBhcHBlYXJhbmNlIHN0cmluZyxcbiAgICAgKiA+IG9yIHRoYXQgc3RyaW5nIGRvZXMgbm90IGNvbnRhaW4gYSBmb250IHNpemUgKHZpYSB0aGUgYFRmYCBvcGVyYXRvciksXG4gICAgICogPiB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9udFNpemUgVGhlIGZvbnQgc2l6ZSB0byBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIHRleHQgaW4gdGhpcyBmaWVsZC5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKGZvbnRTaXplKSB7XG4gICAgICAgIGFzc2VydFBvc2l0aXZlKGZvbnRTaXplLCAnZm9udFNpemUnKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBlYWNoIGxpbmUgb2YgdGV4dCBpcyBzaG93biBvbiBhIG5ldyBsaW5lIHdoZW4gdGhpc1xuICAgICAqIGZpZWxkIGlzIGRpc3BsYXllZCBpbiBhIFBERiByZWFkZXIuIFRoZSBhbHRlcm5hdGl2ZSBpcyB0aGF0IGFsbCBsaW5lcyBvZlxuICAgICAqIHRleHQgYXJlIG1lcmdlZCBvbnRvIGEgc2luZ2xlIGxpbmUgd2hlbiBkaXNwbGF5ZWQuIFNlZVxuICAgICAqIFtbUERGVGV4dEZpZWxkLmVuYWJsZU11bHRpbGluZV1dIGFuZCBbW1BERlRleHRGaWVsZC5kaXNhYmxlTXVsdGlsaW5lXV0uXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiBpZiAodGV4dEZpZWxkLmlzTXVsdGlsaW5lKCkpIGNvbnNvbGUubG9nKCdNdWx0aWxpbmUgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBpcyBhIG11bHRpbGluZSB0ZXh0IGZpZWxkLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuaXNNdWx0aWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9UZXh0RmxhZ3MuTXVsdGlsaW5lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgZWFjaCBsaW5lIG9mIHRleHQgb24gYSBuZXcgbGluZSB3aGVuIHRoaXMgZmllbGQgaXMgZGlzcGxheWVkIGluIGFcbiAgICAgKiBQREYgcmVhZGVyLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIHRleHRGaWVsZC5lbmFibGVNdWx0aWxpbmUoKVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHRleHQgZmllbGQgYXMgZGlydHkuIFNlZVxuICAgICAqIFtbUERGVGV4dEZpZWxkLnNldFRleHRdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmVuYWJsZU11bHRpbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb1RleHRGbGFncy5NdWx0aWxpbmUsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBlYWNoIGxpbmUgb2YgdGV4dCBvbiB0aGUgc2FtZSBsaW5lIHdoZW4gdGhpcyBmaWVsZCBpcyBkaXNwbGF5ZWRcbiAgICAgKiBpbiBhIFBERiByZWFkZXIuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmRpc2FibGVNdWx0aWxpbmUoKVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHRleHQgZmllbGQgYXMgZGlydHkuIFNlZVxuICAgICAqIFtbUERGVGV4dEZpZWxkLnNldFRleHRdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmRpc2FibGVNdWx0aWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuTXVsdGlsaW5lLCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGlzIGEgcGFzc3dvcmQgdGV4dCBmaWVsZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBmaWVsZFxuICAgICAqIGlzIGludGVuZGVkIGZvciBzdG9yaW5nIGEgc2VjdXJlIHBhc3N3b3JkLiBTZWVcbiAgICAgKiBbW1BERlRleHRGaWVsZC5lbmFibGVQYXNzd29yZF1dIGFuZCBbW1BERlRleHRGaWVsZC5kaXNhYmxlUGFzc3dvcmRdXS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGlmICh0ZXh0RmllbGQuaXNQYXNzd29yZCgpKSBjb25zb2xlLmxvZygnUGFzc3dvcmQgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBpcyBhIHBhc3N3b3JkIHRleHQgZmllbGQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5pc1Bhc3N3b3JkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvVGV4dEZsYWdzLlBhc3N3b3JkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlIHRoYXQgdGhpcyB0ZXh0IGZpZWxkIGlzIGludGVuZGVkIGZvciBzdG9yaW5nIGEgc2VjdXJlIHBhc3N3b3JkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmVuYWJsZVBhc3N3b3JkKClcbiAgICAgKiBgYGBcbiAgICAgKiBWYWx1ZXMgZW50ZXJlZCBpbnRvIHBhc3N3b3JkIHRleHQgZmllbGRzIHNob3VsZCBub3QgYmUgZGlzcGxheWVkIG9uIHRoZVxuICAgICAqIHNjcmVlbiBieSBQREYgcmVhZGVycy4gTW9zdCBQREYgcmVhZGVycyB3aWxsIGRpc3BsYXkgdGhlIHZhbHVlIGFzXG4gICAgICogYXN0ZXJpc2tzIG9yIGJ1bGxldHMuIFBERiByZWFkZXJzIHNob3VsZCBuZXZlciBzdG9yZSB2YWx1ZXMgZW50ZXJlZCBieSB0aGVcbiAgICAgKiB1c2VyIGludG8gcGFzc3dvcmQgdGV4dCBmaWVsZHMuIFNpbWlsYXJseSwgYXBwbGljYXRpb25zIHNob3VsZCBub3RcbiAgICAgKiB3cml0ZSBkYXRhIHRvIGEgcGFzc3dvcmQgdGV4dCBmaWVsZC5cbiAgICAgKlxuICAgICAqICoqUGxlYXNlIG5vdGUgdGhhdCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBjYXVzZSBlbnRlcmVkIHZhbHVlcyB0byBiZVxuICAgICAqIGVuY3J5cHRlZCBvciBzZWN1cmVkIGluIGFueSB3YXkhIEl0IHNpbXBseSBzZXRzIGEgZmxhZyB0aGF0IFBERiBzb2Z0d2FyZVxuICAgICAqIGFuZCByZWFkZXJzIGNhbiBhY2Nlc3MgdG8gZGV0ZXJtaW5lIHRoZSBfcHVycG9zZV8gb2YgdGhpcyBmaWVsZC4qKlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuZW5hYmxlUGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvVGV4dEZsYWdzLlBhc3N3b3JkLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlIHRoYXQgdGhpcyB0ZXh0IGZpZWxkIGlzICoqbm90KiogaW50ZW5kZWQgZm9yIHN0b3JpbmcgYSBzZWN1cmVcbiAgICAgKiBwYXNzd29yZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuZGlzYWJsZVBhc3N3b3JkKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmRpc2FibGVQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuUGFzc3dvcmQsIGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBjb250ZW50cyBvZiB0aGlzIHRleHQgZmllbGQgcmVwcmVzZW50IGEgZmlsZSBwYXRoLlxuICAgICAqIFNlZSBbW1BERlRleHRGaWVsZC5lbmFibGVGaWxlU2VsZWN0aW9uXV0gYW5kXG4gICAgICogW1tQREZUZXh0RmllbGQuZGlzYWJsZUZpbGVTZWxlY3Rpb25dXS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiBpZiAodGV4dEZpZWxkLmlzRmlsZVNlbGVjdG9yKCkpIGNvbnNvbGUubG9nKCdJcyBhIGZpbGUgc2VsZWN0b3InKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgZmllbGQgc2hvdWxkIGNvbnRhaW4gZmlsZSBwYXRocy5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmlzRmlsZVNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvVGV4dEZsYWdzLkZpbGVTZWxlY3QpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhhdCB0aGlzIHRleHQgZmllbGQgaXMgaW50ZW5kZWQgdG8gc3RvcmUgYSBmaWxlIHBhdGguIFRoZVxuICAgICAqIGNvbnRlbnRzIG9mIHRoZSBmaWxlIHN0b3JlZCBhdCB0aGF0IHBhdGggc2hvdWxkIGJlIHN1Ym1pdHRlZCBhcyB0aGUgdmFsdWVcbiAgICAgKiBvZiB0aGUgZmllbGQuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmVuYWJsZUZpbGVTZWxlY3Rpb24oKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuZW5hYmxlRmlsZVNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuRmlsZVNlbGVjdCwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB0aGF0IHRoaXMgdGV4dCBmaWVsZCBpcyAqKm5vdCoqIGludGVuZGVkIHRvIHN0b3JlIGEgZmlsZSBwYXRoLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmRpc2FibGVGaWxlU2VsZWN0aW9uKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmRpc2FibGVGaWxlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjcm9GaWVsZC5zZXRGbGFnVG8oQWNyb1RleHRGbGFncy5GaWxlU2VsZWN0LCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGV4dCBlbnRlcmVkIGluIHRoaXMgZmllbGQgc2hvdWxkIGJlIHNwZWxsIGNoZWNrZWRcbiAgICAgKiBieSBQREYgcmVhZGVycy4gU2VlIFtbUERGVGV4dEZpZWxkLmVuYWJsZVNwZWxsQ2hlY2tpbmddXSBhbmRcbiAgICAgKiBbW1BERlRleHRGaWVsZC5kaXNhYmxlU3BlbGxDaGVja2luZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGlmICh0ZXh0RmllbGQuaXNTcGVsbENoZWNrZWQoKSkgY29uc29sZS5sb2coJ1NwZWxsIGNoZWNraW5nIGlzIGVuYWJsZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgZmllbGQgc2hvdWxkIGJlIHNwZWxsIGNoZWNrZWQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5pc1NwZWxsQ2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9UZXh0RmxhZ3MuRG9Ob3RTcGVsbENoZWNrKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsbG93IFBERiByZWFkZXJzIHRvIHNwZWxsIGNoZWNrIHRoZSB0ZXh0IGVudGVyZWQgaW4gdGhpcyBmaWVsZC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIHRleHRGaWVsZC5lbmFibGVTcGVsbENoZWNraW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmVuYWJsZVNwZWxsQ2hlY2tpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvVGV4dEZsYWdzLkRvTm90U3BlbGxDaGVjaywgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRG8gbm90IGFsbG93IFBERiByZWFkZXJzIHRvIHNwZWxsIGNoZWNrIHRoZSB0ZXh0IGVudGVyZWQgaW4gdGhpcyBmaWVsZC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIHRleHRGaWVsZC5kaXNhYmxlU3BlbGxDaGVja2luZygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5kaXNhYmxlU3BlbGxDaGVja2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuRG9Ob3RTcGVsbENoZWNrLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIFBERiByZWFkZXJzIHNob3VsZCBhbGxvdyB0aGUgdXNlciB0byBzY3JvbGwgdGhlIHRleHRcbiAgICAgKiBmaWVsZCB3aGVuIGl0cyBjb250ZW50cyBkbyBub3QgZml0IHdpdGhpbiB0aGUgZmllbGQncyB2aWV3IGJvdW5kcy4gU2VlXG4gICAgICogW1tQREZUZXh0RmllbGQuZW5hYmxlU2Nyb2xsaW5nXV0gYW5kIFtbUERGVGV4dEZpZWxkLmRpc2FibGVTY3JvbGxpbmddXS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGlmICh0ZXh0RmllbGQuaXNTY3JvbGxhYmxlKCkpIGNvbnNvbGUubG9nKCdTY3JvbGxpbmcgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhlIGZpZWxkIGlzIHNjcm9sbGFibGUgaW4gUERGIHJlYWRlcnMuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5pc1Njcm9sbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvVGV4dEZsYWdzLkRvTm90U2Nyb2xsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsbG93IFBERiByZWFkZXJzIHRvIHByZXNlbnQgYSBzY3JvbGwgYmFyIHRvIHRoZSB1c2VyIHdoZW4gdGhlIGNvbnRlbnRzXG4gICAgICogb2YgdGhpcyB0ZXh0IGZpZWxkIGRvIG5vdCBmaXQgd2l0aGluIGl0cyB2aWV3IGJvdW5kcy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuZW5hYmxlU2Nyb2xsaW5nKClcbiAgICAgKiBgYGBcbiAgICAgKiBBIGhvcml6b250YWwgc2Nyb2xsIGJhciBzaG91bGQgYmUgc2hvd24gZm9yIHNpbmdsZWxpbmUgZmllbGRzLiBBIHZlcnRpY2FsXG4gICAgICogc2Nyb2xsIGJhciBzaG91bGQgYmUgc2hvd24gZm9yIG11bHRpbGluZSBmaWVsZHMuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5lbmFibGVTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvVGV4dEZsYWdzLkRvTm90U2Nyb2xsLCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEbyBub3QgYWxsb3cgUERGIHJlYWRlcnMgdG8gcHJlc2VudCBhIHNjcm9sbCBiYXIgdG8gdGhlIHVzZXIgd2hlbiB0aGVcbiAgICAgKiBjb250ZW50cyBvZiB0aGlzIHRleHQgZmllbGQgZG8gbm90IGZpdCB3aXRoaW4gaXRzIHZpZXcgYm91bmRzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIHRleHRGaWVsZC5kaXNhYmxlU2Nyb2xsaW5nKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmRpc2FibGVTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvVGV4dEZsYWdzLkRvTm90U2Nyb2xsLCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgaXMgYSBjb21iZWQgdGV4dCBmaWVsZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBmaWVsZFxuICAgICAqIGlzIHNwbGl0IGludG8gYG5gIGVxdWFsIHNpemUgY2VsbHMgd2l0aCBvbmUgY2hhcmFjdGVyIGluIGVhY2ggKHdoZXJlIGBuYFxuICAgICAqIGlzIGVxdWFsIHRvIHRoZSBtYXggbGVuZ3RoIG9mIHRoZSB0ZXh0IGZpZWxkKS4gVGhlIHJlc3VsdCBpcyB0aGF0IGFsbFxuICAgICAqIGNoYXJhY3RlcnMgaW4gdGhpcyBmaWVsZCBhcmUgZGlzcGxheWVkIGFuIGVxdWFsIGRpc3RhbmNlIGFwYXJ0IGZyb20gb25lXG4gICAgICogYW5vdGhlci4gU2VlIFtbUERGVGV4dEZpZWxkLmVuYWJsZUNvbWJpbmddXSBhbmRcbiAgICAgKiBbW1BERlRleHRGaWVsZC5kaXNhYmxlQ29tYmluZ11dLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGlmICh0ZXh0RmllbGQuaXNDb21iZWQoKSkgY29uc29sZS5sb2coJ0NvbWJpbmcgaXMgZW5hYmxlZCcpXG4gICAgICogYGBgXG4gICAgICogTm90ZSB0aGF0IGluIG9yZGVyIGZvciBhIHRleHQgZmllbGQgdG8gYmUgY29tYmVkLCB0aGUgZm9sbG93aW5nIG11c3QgYmVcbiAgICAgKiB0cnVlIChpbiBhZGRpdGlvbiB0byBlbmFibGluZyBjb21iaW5nKTpcbiAgICAgKiAqIEl0IG11c3Qgbm90IGJlIGEgbXVsdGlsaW5lIGZpZWxkIChzZWUgW1tQREZUZXh0RmllbGQuaXNNdWx0aWxpbmVdXSlcbiAgICAgKiAqIEl0IG11c3Qgbm90IGJlIGEgcGFzc3dvcmQgZmllbGQgKHNlZSBbW1BERlRleHRGaWVsZC5pc1Bhc3N3b3JkXV0pXG4gICAgICogKiBJdCBtdXN0IG5vdCBiZSBhIGZpbGUgc2VsZWN0b3IgZmllbGQgKHNlZSBbW1BERlRleHRGaWVsZC5pc0ZpbGVTZWxlY3Rvcl1dKVxuICAgICAqICogSXQgbXVzdCBoYXZlIGEgbWF4IGxlbmd0aCBkZWZpbmVkIChzZWUgW1tQREZUZXh0RmllbGQuc2V0TWF4TGVuZ3RoXV0pXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBmaWVsZCBpcyBjb21iZWQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5pc0NvbWJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFjcm9GaWVsZC5oYXNGbGFnKEFjcm9UZXh0RmxhZ3MuQ29tYikgJiZcbiAgICAgICAgICAgICF0aGlzLmlzTXVsdGlsaW5lKCkgJiZcbiAgICAgICAgICAgICF0aGlzLmlzUGFzc3dvcmQoKSAmJlxuICAgICAgICAgICAgIXRoaXMuaXNGaWxlU2VsZWN0b3IoKSAmJlxuICAgICAgICAgICAgdGhpcy5nZXRNYXhMZW5ndGgoKSAhPT0gdW5kZWZpbmVkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNwbGl0IHRoaXMgZmllbGQgaW50byBgbmAgZXF1YWwgc2l6ZSBjZWxscyB3aXRoIG9uZSBjaGFyYWN0ZXIgaW4gZWFjaFxuICAgICAqICh3aGVyZSBgbmAgaXMgZXF1YWwgdG8gdGhlIG1heCBsZW5ndGggb2YgdGhlIHRleHQgZmllbGQpLiBUaGlzIHdpbGwgY2F1c2VcbiAgICAgKiBhbGwgY2hhcmFjdGVycyBpbiB0aGUgZmllbGQgdG8gYmUgZGlzcGxheWVkIGFuIGVxdWFsIGRpc3RhbmNlIGFwYXJ0IGZyb21cbiAgICAgKiBvbmUgYW5vdGhlci4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuZW5hYmxlQ29tYmluZygpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBjYWxsaW5nIHRoaXMgbWV0aG9kLCB0ZXh0IGZpZWxkcyBtdXN0IGhhdmUgYSBtYXggbGVuZ3RoXG4gICAgICogZGVmaW5lZCBpbiBvcmRlciB0byBiZSBjb21iZWQgKHNlZSBbW1BERlRleHRGaWVsZC5zZXRNYXhMZW5ndGhdXSkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gY2FsbCB0aGUgZm9sbG93aW5nIHRocmVlIG1ldGhvZHMgaW50ZXJuYWxseTpcbiAgICAgKiAqIFtbUERGVGV4dEZpZWxkLmRpc2FibGVNdWx0aWxpbmVdXVxuICAgICAqICogW1tQREZUZXh0RmllbGQuZGlzYWJsZVBhc3N3b3JkXV1cbiAgICAgKiAqIFtbUERGVGV4dEZpZWxkLmRpc2FibGVGaWxlU2VsZWN0aW9uXV1cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFyayB0aGlzIHRleHQgZmllbGQgYXMgZGlydHkuIFNlZVxuICAgICAqIFtbUERGVGV4dEZpZWxkLnNldFRleHRdXSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgdGhpcyBtZWFucy5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLmVuYWJsZUNvbWJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmdldE1heExlbmd0aCgpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSBcIlBERlRleHRGaWVsZHMgbXVzdCBoYXZlIGEgbWF4IGxlbmd0aCBpbiBvcmRlciB0byBiZSBjb21iZWRcIjtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlTXVsdGlsaW5lKCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZVBhc3N3b3JkKCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZUZpbGVTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuQ29tYiwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUdXJuIG9mZiBjb21iaW5nIGZvciB0aGlzIHRleHQgZmllbGQuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmRpc2FibGVDb21iaW5nKClcbiAgICAgKiBgYGBcbiAgICAgKiBTZWUgW1tQREZUZXh0RmllbGQuaXNDb21iZWRdXSBhbmQgW1tQREZUZXh0RmllbGQuZW5hYmxlQ29tYmluZ11dIGZvciBtb3JlXG4gICAgICogaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBjb21iaW5nIGlzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYXJrIHRoaXMgdGV4dCBmaWVsZCBhcyBkaXJ0eS4gU2VlXG4gICAgICogW1tQREZUZXh0RmllbGQuc2V0VGV4dF1dIGZvciBtb3JlIGRldGFpbHMgYWJvdXQgd2hhdCB0aGlzIG1lYW5zLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuZGlzYWJsZUNvbWJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuQ29tYiwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyB0ZXh0IGZpZWxkIGNvbnRhaW5zIHJpY2ggdGV4dC4gU2VlXG4gICAgICogW1tQREZUZXh0RmllbGQuZW5hYmxlUmljaEZvcm1hdHRpbmddXSBhbmRcbiAgICAgKiBbW1BERlRleHRGaWVsZC5kaXNhYmxlUmljaEZvcm1hdHRpbmddXS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiBpZiAodGV4dEZpZWxkLmlzUmljaEZvcm1hdHRlZCgpKSBjb25zb2xlLmxvZygnUmljaCBmb3JtYXR0aW5nIGVuYWJsZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoaXMgZmllbGQgY29udGFpbnMgcmljaCB0ZXh0LlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuaXNSaWNoRm9ybWF0dGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3JvRmllbGQuaGFzRmxhZyhBY3JvVGV4dEZsYWdzLlJpY2hUZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlIHRoYXQgdGhpcyBmaWVsZCBjb250YWlucyBYRkEgZGF0YSAtIG9yIHJpY2ggdGV4dC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuZW5hYmxlUmljaEZvcm1hdHRpbmcoKVxuICAgICAqIGBgYFxuICAgICAqIE5vdGUgdGhhdCBgcGRmLWxpYmAgZG9lcyBub3Qgc3VwcG9ydCByZWFkaW5nIG9yIHdyaXRpbmcgcmljaCB0ZXh0IGZpZWxkcy5cbiAgICAgKiBOb3IgZG8gbW9zdCBQREYgcmVhZGVycyBhbmQgd3JpdGVycy4gUmljaCB0ZXh0IGZpZWxkcyBhcmUgYmFzZWQgb24gWEZBXG4gICAgICogKFhNTCBGb3JtcyBBcmNoaXRlY3R1cmUpLiBSZWxhdGl2ZWx5IGZldyBQREZzIHVzZSByaWNoIHRleHQgZmllbGRzIG9yIFhGQS5cbiAgICAgKiBVbmxpa2UgUERGIGl0c2VsZiwgWEZBIGlzIG5vdCBhbiBJU08gc3RhbmRhcmQuIFhGQSBoYXMgYmVlbiBkZXByZWNhdGVkIGluXG4gICAgICogUERGIDIuMDpcbiAgICAgKiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1hGQVxuICAgICAqICogaHR0cDovL2Jsb2cucGRmc2hhcmVmb3Jtcy5jb20vcGRmLTItMC1yZWxlYXNlLWJpZC1mYXJld2VsbC14ZmEtZm9ybXMvXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5lbmFibGVSaWNoRm9ybWF0dGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3JvRmllbGQuc2V0RmxhZ1RvKEFjcm9UZXh0RmxhZ3MuUmljaFRleHQsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhhdCB0aGlzIGlzIGEgc3RhbmRhcmQgdGV4dCBmaWVsZCB0aGF0IGRvZXMgbm90IFhGQSBkYXRhIChyaWNoXG4gICAgICogdGV4dCkuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLmRpc2FibGVSaWNoRm9ybWF0dGluZygpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5kaXNhYmxlUmljaEZvcm1hdHRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZsYWdUbyhBY3JvVGV4dEZsYWdzLlJpY2hUZXh0LCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IHRoaXMgdGV4dCBmaWVsZCBvbiB0aGUgc3BlY2lmaWVkIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdWJ1bnR1Rm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQodWJ1bnR1Rm9udEJ5dGVzKVxuICAgICAqIGNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uY3JlYXRlVGV4dEZpZWxkKCdiZXN0Lmd1bmRhbScpXG4gICAgICogdGV4dEZpZWxkLnNldFRleHQoJ0V4aWEnKVxuICAgICAqXG4gICAgICogdGV4dEZpZWxkLmFkZFRvUGFnZShwYWdlLCB7XG4gICAgICogICB4OiA1MCxcbiAgICAgKiAgIHk6IDc1LFxuICAgICAqICAgd2lkdGg6IDIwMCxcbiAgICAgKiAgIGhlaWdodDogMTAwLFxuICAgICAqICAgdGV4dENvbG9yOiByZ2IoMSwgMCwgMCksXG4gICAgICogICBiYWNrZ3JvdW5kQ29sb3I6IHJnYigwLCAxLCAwKSxcbiAgICAgKiAgIGJvcmRlckNvbG9yOiByZ2IoMCwgMCwgMSksXG4gICAgICogICBib3JkZXJXaWR0aDogMixcbiAgICAgKiAgIHJvdGF0ZTogZGVncmVlcyg5MCksXG4gICAgICogICBmb250OiB1YnVudHVGb250LFxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyB3aWRnZXQgZm9yIHRoaXMgdGV4dCBmaWVsZC5cbiAgICAgKiBAcGFyYW0gcGFnZSBUaGUgcGFnZSB0byB3aGljaCB0aGlzIHRleHQgZmllbGQgd2lkZ2V0IHNob3VsZCBiZSBhZGRlZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBiZSB1c2VkIHdoZW4gYWRkaW5nIHRoaXMgdGV4dCBmaWVsZCB3aWRnZXQuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5hZGRUb1BhZ2UgPSBmdW5jdGlvbiAocGFnZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgIGFzc2VydElzKHBhZ2UsICdwYWdlJywgW1tQREZQYWdlLCAnUERGUGFnZSddXSk7XG4gICAgICAgIGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKCEoJ3RleHRDb2xvcicgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLnRleHRDb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgaWYgKCEoJ2JhY2tncm91bmRDb2xvcicgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLmJhY2tncm91bmRDb2xvciA9IHJnYigxLCAxLCAxKTtcbiAgICAgICAgaWYgKCEoJ2JvcmRlckNvbG9yJyBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyQ29sb3IgPSByZ2IoMCwgMCwgMCk7XG4gICAgICAgIGlmICghKCdib3JkZXJXaWR0aCcgaW4gb3B0aW9ucykpXG4gICAgICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgd2lkZ2V0IGZvciB0aGlzIHRleHQgZmllbGRcbiAgICAgICAgdmFyIHdpZGdldCA9IHRoaXMuY3JlYXRlV2lkZ2V0KHtcbiAgICAgICAgICAgIHg6IChfYSA9IG9wdGlvbnMueCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCxcbiAgICAgICAgICAgIHk6IChfYiA9IG9wdGlvbnMueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAoX2MgPSBvcHRpb25zLndpZHRoKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAyMDAsXG4gICAgICAgICAgICBoZWlnaHQ6IChfZCA9IG9wdGlvbnMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiA1MCxcbiAgICAgICAgICAgIHRleHRDb2xvcjogb3B0aW9ucy50ZXh0Q29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKF9lID0gb3B0aW9ucy5ib3JkZXJXaWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9mID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICBoaWRkZW46IG9wdGlvbnMuaGlkZGVuLFxuICAgICAgICAgICAgcGFnZTogcGFnZS5yZWYsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgd2lkZ2V0UmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3Rlcih3aWRnZXQuZGljdCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhpcyBmaWVsZFxuICAgICAgICB0aGlzLmFjcm9GaWVsZC5hZGRXaWRnZXQod2lkZ2V0UmVmKTtcbiAgICAgICAgLy8gU2V0IGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3Igd2lkZ2V0XG4gICAgICAgIHZhciBmb250ID0gKF9nID0gb3B0aW9ucy5mb250KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiB0aGlzLmRvYy5nZXRGb3JtKCkuZ2V0RGVmYXVsdEZvbnQoKTtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlKHdpZGdldCwgZm9udCk7XG4gICAgICAgIC8vIEFkZCB3aWRnZXQgdG8gdGhlIGdpdmVuIHBhZ2VcbiAgICAgICAgcGFnZS5ub2RlLmFkZEFubm90KHdpZGdldFJlZik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHRleHQgZmllbGQgaGFzIGJlZW4gbWFya2VkIGFzIGRpcnR5LCBvciBpZiBhbnkgb2ZcbiAgICAgKiB0aGlzIHRleHQgZmllbGQncyB3aWRnZXRzIGRvIG5vdCBoYXZlIGFuIGFwcGVhcmFuY2Ugc3RyZWFtLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdzb21lLnRleHQuZmllbGQnKVxuICAgICAqIGlmICh0ZXh0RmllbGQubmVlZHNBcHBlYXJhbmNlc1VwZGF0ZSgpKSBjb25zb2xlLmxvZygnTmVlZHMgdXBkYXRlJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIHRleHQgZmllbGQgbmVlZHMgYW4gYXBwZWFyYW5jZSB1cGRhdGUuXG4gICAgICovXG4gICAgUERGVGV4dEZpZWxkLnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmlzRGlydHkoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgaGFzQXBwZWFyYW5jZXMgPSAoKF9hID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWwpIGluc3RhbmNlb2YgUERGU3RyZWFtO1xuICAgICAgICAgICAgaWYgKCFoYXNBcHBlYXJhbmNlcylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIHRleHQgZmllbGQncyB3aWRnZXRzIHVzaW5nXG4gICAgICogdGhlIGRlZmF1bHQgYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgdGV4dCBmaWVsZHMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgaGVsdmV0aWNhID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSlcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmdldFRleHRGaWVsZCgnc29tZS50ZXh0LmZpZWxkJylcbiAgICAgKiB0ZXh0RmllbGQuZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzKGhlbHZldGljYSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgZm9udCB0byBiZSB1c2VkIGZvciBjcmVhdGluZyB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUuZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgYXNzZXJ0SXMoZm9udCwgJ2ZvbnQnLCBbW1BERkZvbnQsICdQREZGb250J11dKTtcbiAgICAgICAgdGhpcy51cGRhdGVBcHBlYXJhbmNlcyhmb250KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciBlYWNoIG9mIHRoaXMgdGV4dCBmaWVsZCdzIHdpZGdldHMgdXNpbmdcbiAgICAgKiB0aGUgZ2l2ZW4gYXBwZWFyYW5jZSBwcm92aWRlci4gSWYgbm8gYHByb3ZpZGVyYCBpcyBwYXNzZWQsIHRoZSBkZWZhdWx0XG4gICAgICogYXBwZWFyYW5jZSBwcm92aWRlciBmb3IgdGV4dCBmaWVsZHMgd2lsbCBiZSB1c2VkLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGhlbHZldGljYSA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgdGV4dEZpZWxkID0gZm9ybS5nZXRUZXh0RmllbGQoJ3NvbWUudGV4dC5maWVsZCcpXG4gICAgICogdGV4dEZpZWxkLnVwZGF0ZUFwcGVhcmFuY2VzKGhlbHZldGljYSwgKGZpZWxkLCB3aWRnZXQsIGZvbnQpID0+IHtcbiAgICAgKiAgIC4uLlxuICAgICAqICAgcmV0dXJuIGRyYXdUZXh0RmllbGQoLi4uKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGZvbnQgVGhlIGZvbnQgdG8gYmUgdXNlZCBmb3IgY3JlYXRpbmcgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcy5cbiAgICAgKiBAcGFyYW0gcHJvdmlkZXIgT3B0aW9uYWxseSwgdGhlIGFwcGVhcmFuY2UgcHJvdmlkZXIgdG8gYmUgdXNlZCBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgZ2VuZXJhdGluZyB0aGUgY29udGVudHMgb2YgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcy5cbiAgICAgKi9cbiAgICBQREZUZXh0RmllbGQucHJvdG90eXBlLnVwZGF0ZUFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKGZvbnQsIHByb3ZpZGVyKSB7XG4gICAgICAgIGFzc2VydElzKGZvbnQsICdmb250JywgW1tQREZGb250LCAnUERGRm9udCddXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKHByb3ZpZGVyLCAncHJvdmlkZXInLCBbRnVuY3Rpb25dKTtcbiAgICAgICAgdmFyIHdpZGdldHMgPSB0aGlzLmFjcm9GaWVsZC5nZXRXaWRnZXRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0ID0gd2lkZ2V0c1tpZHhdO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXaWRnZXRBcHBlYXJhbmNlKHdpZGdldCwgZm9udCwgcHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFya0FzQ2xlYW4oKTtcbiAgICB9O1xuICAgIFBERlRleHRGaWVsZC5wcm90b3R5cGUudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSA9IGZ1bmN0aW9uICh3aWRnZXQsIGZvbnQsIHByb3ZpZGVyKSB7XG4gICAgICAgIHZhciBhcFByb3ZpZGVyID0gcHJvdmlkZXIgIT09IG51bGwgJiYgcHJvdmlkZXIgIT09IHZvaWQgMCA/IHByb3ZpZGVyIDogZGVmYXVsdFRleHRGaWVsZEFwcGVhcmFuY2VQcm92aWRlcjtcbiAgICAgICAgdmFyIGFwcGVhcmFuY2VzID0gbm9ybWFsaXplQXBwZWFyYW5jZShhcFByb3ZpZGVyKHRoaXMsIHdpZGdldCwgZm9udCkpO1xuICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2VXaXRoRm9udCh3aWRnZXQsIGZvbnQsIGFwcGVhcmFuY2VzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZGb3JtLmdldFRleHRGaWVsZF1dIG1ldGhvZCwgd2hpY2ggd2lsbCBjcmVhdGUgYW5cbiAgICAgKiA+IGluc3RhbmNlIG9mIFtbUERGVGV4dEZpZWxkXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERlRleHRGaWVsZF1dIGZyb20gYW4gZXhpc3RpbmcgYWNyb1RleHQgYW5kIHJlZlxuICAgICAqXG4gICAgICogQHBhcmFtIGFjcm9UZXh0IFRoZSB1bmRlcmx5aW5nIGBQREZBY3JvVGV4dGAgZm9yIHRoaXMgdGV4dCBmaWVsZC5cbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB1bmlxdWUgcmVmZXJlbmNlIGZvciB0aGlzIHRleHQgZmllbGQuXG4gICAgICogQHBhcmFtIGRvYyBUaGUgZG9jdW1lbnQgdG8gd2hpY2ggdGhpcyB0ZXh0IGZpZWxkIHdpbGwgYmVsb25nLlxuICAgICAqL1xuICAgIFBERlRleHRGaWVsZC5vZiA9IGZ1bmN0aW9uIChhY3JvVGV4dCwgcmVmLCBkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZUZXh0RmllbGQoYWNyb1RleHQsIHJlZiwgZG9jKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZUZXh0RmllbGQ7XG59KFBERkZpZWxkKSk7XG5leHBvcnQgZGVmYXVsdCBQREZUZXh0RmllbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZUZXh0RmllbGQuanMubWFwIiwiZXhwb3J0IHZhciBTdGFuZGFyZEZvbnRzO1xuKGZ1bmN0aW9uIChTdGFuZGFyZEZvbnRzKSB7XG4gICAgU3RhbmRhcmRGb250c1tcIkNvdXJpZXJcIl0gPSBcIkNvdXJpZXJcIjtcbiAgICBTdGFuZGFyZEZvbnRzW1wiQ291cmllckJvbGRcIl0gPSBcIkNvdXJpZXItQm9sZFwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJDb3VyaWVyT2JsaXF1ZVwiXSA9IFwiQ291cmllci1PYmxpcXVlXCI7XG4gICAgU3RhbmRhcmRGb250c1tcIkNvdXJpZXJCb2xkT2JsaXF1ZVwiXSA9IFwiQ291cmllci1Cb2xkT2JsaXF1ZVwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJIZWx2ZXRpY2FcIl0gPSBcIkhlbHZldGljYVwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJIZWx2ZXRpY2FCb2xkXCJdID0gXCJIZWx2ZXRpY2EtQm9sZFwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJIZWx2ZXRpY2FPYmxpcXVlXCJdID0gXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJIZWx2ZXRpY2FCb2xkT2JsaXF1ZVwiXSA9IFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCI7XG4gICAgU3RhbmRhcmRGb250c1tcIlRpbWVzUm9tYW5cIl0gPSBcIlRpbWVzLVJvbWFuXCI7XG4gICAgU3RhbmRhcmRGb250c1tcIlRpbWVzUm9tYW5Cb2xkXCJdID0gXCJUaW1lcy1Cb2xkXCI7XG4gICAgU3RhbmRhcmRGb250c1tcIlRpbWVzUm9tYW5JdGFsaWNcIl0gPSBcIlRpbWVzLUl0YWxpY1wiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJUaW1lc1JvbWFuQm9sZEl0YWxpY1wiXSA9IFwiVGltZXMtQm9sZEl0YWxpY1wiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJTeW1ib2xcIl0gPSBcIlN5bWJvbFwiO1xuICAgIFN0YW5kYXJkRm9udHNbXCJaYXBmRGluZ2JhdHNcIl0gPSBcIlphcGZEaW5nYmF0c1wiO1xufSkoU3RhbmRhcmRGb250cyB8fCAoU3RhbmRhcmRGb250cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGFuZGFyZEZvbnRzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkRvY3VtZW50IGZyb20gXCIuLi9QREZEb2N1bWVudFwiO1xuaW1wb3J0IFBERkJ1dHRvbiBmcm9tIFwiLi9QREZCdXR0b25cIjtcbmltcG9ydCBQREZDaGVja0JveCBmcm9tIFwiLi9QREZDaGVja0JveFwiO1xuaW1wb3J0IFBERkRyb3Bkb3duIGZyb20gXCIuL1BERkRyb3Bkb3duXCI7XG5pbXBvcnQgUERGT3B0aW9uTGlzdCBmcm9tIFwiLi9QREZPcHRpb25MaXN0XCI7XG5pbXBvcnQgUERGUmFkaW9Hcm91cCBmcm9tIFwiLi9QREZSYWRpb0dyb3VwXCI7XG5pbXBvcnQgUERGU2lnbmF0dXJlIGZyb20gXCIuL1BERlNpZ25hdHVyZVwiO1xuaW1wb3J0IFBERlRleHRGaWVsZCBmcm9tIFwiLi9QREZUZXh0RmllbGRcIjtcbmltcG9ydCB7IE5vU3VjaEZpZWxkRXJyb3IsIFVuZXhwZWN0ZWRGaWVsZFR5cGVFcnJvciwgRmllbGRBbHJlYWR5RXhpc3RzRXJyb3IsIEludmFsaWRGaWVsZE5hbWVQYXJ0RXJyb3IsIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IFBERkZvbnQgZnJvbSBcIi4uL1BERkZvbnRcIjtcbmltcG9ydCB7IFN0YW5kYXJkRm9udHMgfSBmcm9tIFwiLi4vU3RhbmRhcmRGb250c1wiO1xuaW1wb3J0IHsgcm90YXRlSW5QbGFjZSB9IGZyb20gXCIuLi9vcGVyYXRpb25zXCI7XG5pbXBvcnQgeyBkcmF3T2JqZWN0LCBwb3BHcmFwaGljc1N0YXRlLCBwdXNoR3JhcGhpY3NTdGF0ZSwgdHJhbnNsYXRlLCB9IGZyb20gXCIuLi9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IFBERkFjcm9Gb3JtLCBQREZBY3JvQ2hlY2tCb3gsIFBERkFjcm9Db21ib0JveCwgUERGQWNyb0xpc3RCb3gsIFBERkFjcm9SYWRpb0J1dHRvbiwgUERGQWNyb1NpZ25hdHVyZSwgUERGQWNyb1RleHQsIFBERkFjcm9QdXNoQnV0dG9uLCBQREZBY3JvTm9uVGVybWluYWwsIFBERkRpY3QsIFBERlJlZiwgY3JlYXRlUERGQWNyb0ZpZWxkcywgUERGTmFtZSwgfSBmcm9tIFwiLi4vLi4vY29yZVwiO1xuaW1wb3J0IHsgYXNzZXJ0SXMsIENhY2hlLCBhc3NlcnRPclVuZGVmaW5lZCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBpbnRlcmFjdGl2ZSBmb3JtIG9mIGEgW1tQREZEb2N1bWVudF1dLlxuICpcbiAqIEludGVyYWN0aXZlIGZvcm1zIChzb21ldGltZXMgY2FsbGVkIF9BY3JvRm9ybXNfKSBhcmUgY29sbGVjdGlvbnMgb2YgZmllbGRzXG4gKiBkZXNpZ25lZCB0byBnYXRoZXIgaW5mb3JtYXRpb24gZnJvbSBhIHVzZXIuIEEgUERGIGRvY3VtZW50IG1heSBjb250YWlucyBhbnlcbiAqIG51bWJlciBvZiBmaWVsZHMgdGhhdCBhcHBlYXIgb24gdmFyaW91cyBwYWdlcywgYWxsIG9mIHdoaWNoIG1ha2UgdXAgYSBzaW5nbGUsXG4gKiBnbG9iYWwgaW50ZXJhY3RpdmUgZm9ybSBzcGFubmluZyB0aGUgZW50aXJlIGRvY3VtZW50LiBUaGlzIG1lYW5zIHRoYXRcbiAqIGluc3RhbmNlcyBvZiBbW1BERkRvY3VtZW50XV0gc2hhbGwgY29udGFpbiBhdCBtb3N0IG9uZSBbW1BERkZvcm1dXS5cbiAqXG4gKiBUaGUgZmllbGRzIG9mIGFuIGludGVyYWN0aXZlIGZvcm0gYXJlIHJlcHJlc2VudGVkIGJ5IFtbUERGRmllbGRdXSBpbnN0YW5jZXMuXG4gKi9cbnZhciBQREZGb3JtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkZvcm0oYWNyb0Zvcm0sIGRvYykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmVtYmVkRGVmYXVsdEZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZG9jLmVtYmVkU3RhbmRhcmRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKTtcbiAgICAgICAgfTtcbiAgICAgICAgYXNzZXJ0SXMoYWNyb0Zvcm0sICdhY3JvRm9ybScsIFtbUERGQWNyb0Zvcm0sICdQREZBY3JvRm9ybSddXSk7XG4gICAgICAgIGFzc2VydElzKGRvYywgJ2RvYycsIFtbUERGRG9jdW1lbnQsICdQREZEb2N1bWVudCddXSk7XG4gICAgICAgIHRoaXMuYWNyb0Zvcm0gPSBhY3JvRm9ybTtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgIHRoaXMuZGlydHlGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdEZvbnRDYWNoZSA9IENhY2hlLnBvcHVsYXRlZEJ5KHRoaXMuZW1iZWREZWZhdWx0Rm9udCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgW1tQREZGb3JtXV0gaGFzIFhGQSBkYXRhLiBNb3N0IFBERnMgd2l0aCBmb3JtXG4gICAgICogZmllbGRzIGRvIG5vdCB1c2UgWEZBIGFzIGl0IGlzIG5vdCB3aWRlbHkgc3VwcG9ydGVkIGJ5IFBERiByZWFkZXJzLlxuICAgICAqXG4gICAgICogPiBgcGRmLWxpYmAgZG9lcyBub3Qgc3VwcG9ydCBjcmVhdGlvbiwgbW9kaWZpY2F0aW9uLCBvciByZWFkaW5nIG9mIFhGQVxuICAgICAqID4gZmllbGRzLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGlmIChmb3JtLmhhc1hGQSgpKSBjb25zb2xlLmxvZygnUERGIGhhcyBYRkEgZGF0YScpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBmb3JtIGhhcyBYRkEgZGF0YS5cbiAgICAgKi9cbiAgICBQREZGb3JtLnByb3RvdHlwZS5oYXNYRkEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjcm9Gb3JtLmRpY3QuaGFzKFBERk5hbWUub2YoJ1hGQScpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3QgdGhlIFhGQSBkYXRhIGZyb20gdGhpcyBbW1BERkZvcm1dXSAoaWYgYW55IGV4aXN0cykuIFRoaXMgd2lsbFxuICAgICAqIGZvcmNlIHJlYWRlcnMgdG8gZmFsbGJhY2sgdG8gc3RhbmRhcmQgZmllbGRzIGlmIHRoZSBbW1BERkRvY3VtZW50XV1cbiAgICAgKiBjb250YWlucyBhbnkuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGZvcm0uZGVsZXRlWEZBKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBQREZGb3JtLnByb3RvdHlwZS5kZWxldGVYRkEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWNyb0Zvcm0uZGljdC5kZWxldGUoUERGTmFtZS5vZignWEZBJykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmaWVsZHMgY29udGFpbmVkIGluIHRoaXMgW1tQREZGb3JtXV0uIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBmaWVsZHMgPSBmb3JtLmdldEZpZWxkcygpXG4gICAgICogZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAqICAgY29uc3QgdHlwZSA9IGZpZWxkLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgKiAgIGNvbnN0IG5hbWUgPSBmaWVsZC5nZXROYW1lKClcbiAgICAgKiAgIGNvbnNvbGUubG9nKGAke3R5cGV9OiAke25hbWV9YClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGFsbCBmaWVsZHMgaW4gdGhpcyBmb3JtLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldEZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFsbEZpZWxkcyA9IHRoaXMuYWNyb0Zvcm0uZ2V0QWxsRmllbGRzKCk7XG4gICAgICAgIHZhciBmaWVsZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gYWxsRmllbGRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gYWxsRmllbGRzW2lkeF0sIGFjcm9GaWVsZCA9IF9hWzBdLCByZWYgPSBfYVsxXTtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IGNvbnZlcnRUb1BERkZpZWxkKGFjcm9GaWVsZCwgcmVmLCB0aGlzLmRvYyk7XG4gICAgICAgICAgICBpZiAoZmllbGQpXG4gICAgICAgICAgICAgICAgZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpZWxkIGluIHRoaXMgW1tQREZGb3JtXV0gd2l0aCB0aGUgZ2l2ZW4gbmFtZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZE1heWJlKCdQYWdlMS5Gb28uQmFyWzBdJylcbiAgICAgKiBpZiAoZmllbGQpIGNvbnNvbGUubG9nKCdGaWVsZCBleGlzdHMhJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmFtZSBBIGZ1bGx5IHF1YWxpZmllZCBmaWVsZCBuYW1lLlxuICAgICAqIEByZXR1cm5zIFRoZSBmaWVsZCB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZSwgaWYgb25lIGV4aXN0cy5cbiAgICAgKi9cbiAgICBQREZGb3JtLnByb3RvdHlwZS5nZXRGaWVsZE1heWJlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGZpZWxkcyA9IHRoaXMuZ2V0RmllbGRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGZpZWxkcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1tpZHhdO1xuICAgICAgICAgICAgaWYgKGZpZWxkLmdldE5hbWUoKSA9PT0gbmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgZmllbGQgPSBmb3JtLmdldEZpZWxkKCdQYWdlMS5Gb28uQmFyWzBdJylcbiAgICAgKiBgYGBcbiAgICAgKiBJZiBubyBmaWVsZCBleGlzdHMgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICogQHBhcmFtIG5hbWUgQSBmdWxseSBxdWFsaWZpZWQgZmllbGQgbmFtZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgZmllbGQgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuZ2V0RmllbGQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBhc3NlcnRJcyhuYW1lLCAnbmFtZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIgZmllbGQgPSB0aGlzLmdldEZpZWxkTWF5YmUobmFtZSk7XG4gICAgICAgIGlmIChmaWVsZClcbiAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgdGhyb3cgbmV3IE5vU3VjaEZpZWxkRXJyb3IobmFtZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGJ1dHRvbiBmaWVsZCBpbiB0aGlzIFtbUERGRm9ybV1dIHdpdGggdGhlIGdpdmVuIG5hbWUuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBidXR0b24gPSBmb3JtLmdldEJ1dHRvbignUGFnZTEuRm9vLkJ1dHRvblswXScpXG4gICAgICogYGBgXG4gICAgICogQW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gaWYgbm8gZmllbGQgZXhpc3RzIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUsIG9yIGlmXG4gICAgICogdGhlIGZpZWxkIGV4aXN0cyBidXQgaXMgbm90IGEgYnV0dG9uLlxuICAgICAqIEBwYXJhbSBuYW1lIEEgZnVsbHkgcXVhbGlmaWVkIGJ1dHRvbiBuYW1lLlxuICAgICAqIEByZXR1cm5zIFRoZSBidXR0b24gd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuZ2V0QnV0dG9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5nZXRGaWVsZChuYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUERGQnV0dG9uKVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZEZpZWxkVHlwZUVycm9yKG5hbWUsIFBERkJ1dHRvbiwgZmllbGQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjaGVjayBib3ggZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBjaGVja0JveCA9IGZvcm0uZ2V0Q2hlY2tCb3goJ1BhZ2UxLkZvby5DaGVja0JveFswXScpXG4gICAgICogY2hlY2tCb3guY2hlY2soKVxuICAgICAqIGBgYFxuICAgICAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIG5vIGZpZWxkIGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLCBvciBpZlxuICAgICAqIHRoZSBmaWVsZCBleGlzdHMgYnV0IGlzIG5vdCBhIGNoZWNrIGJveC5cbiAgICAgKiBAcGFyYW0gbmFtZSBBIGZ1bGx5IHF1YWxpZmllZCBjaGVjayBib3ggbmFtZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2hlY2sgYm94IHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldENoZWNrQm94ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5nZXRGaWVsZChuYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUERGQ2hlY2tCb3gpXG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkRmllbGRUeXBlRXJyb3IobmFtZSwgUERGQ2hlY2tCb3gsIGZpZWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZHJvcGRvd24gZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBkcm9wZG93biA9IGZvcm0uZ2V0RHJvcGRvd24oJ1BhZ2UxLkZvby5Ecm9wZG93blswXScpXG4gICAgICogY29uc3Qgb3B0aW9ucyA9IGRyb3Bkb3duLmdldE9wdGlvbnMoKVxuICAgICAqIGRyb3Bkb3duLnNlbGVjdChvcHRpb25zWzBdKVxuICAgICAqIGBgYFxuICAgICAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIG5vIGZpZWxkIGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLCBvciBpZlxuICAgICAqIHRoZSBmaWVsZCBleGlzdHMgYnV0IGlzIG5vdCBhIGRyb3Bkb3duLlxuICAgICAqIEBwYXJhbSBuYW1lIEEgZnVsbHkgcXVhbGlmaWVkIGRyb3Bkb3duIG5hbWUuXG4gICAgICogQHJldHVybnMgVGhlIGRyb3Bkb3duIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldERyb3Bkb3duID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5nZXRGaWVsZChuYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUERGRHJvcGRvd24pXG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkRmllbGRUeXBlRXJyb3IobmFtZSwgUERGRHJvcGRvd24sIGZpZWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgb3B0aW9uIGxpc3QgZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCBvcHRpb25MaXN0ID0gZm9ybS5nZXRPcHRpb25MaXN0KCdQYWdlMS5Gb28uT3B0aW9uTGlzdFswXScpXG4gICAgICogY29uc3Qgb3B0aW9ucyA9IG9wdGlvbkxpc3QuZ2V0T3B0aW9ucygpXG4gICAgICogb3B0aW9uTGlzdC5zZWxlY3Qob3B0aW9uc1swXSlcbiAgICAgKiBgYGBcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBubyBmaWVsZCBleGlzdHMgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSwgb3IgaWZcbiAgICAgKiB0aGUgZmllbGQgZXhpc3RzIGJ1dCBpcyBub3QgYW4gb3B0aW9uIGxpc3QuXG4gICAgICogQHBhcmFtIG5hbWUgQSBmdWxseSBxdWFsaWZpZWQgb3B0aW9uIGxpc3QgbmFtZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgb3B0aW9uIGxpc3Qgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuZ2V0T3B0aW9uTGlzdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGFzc2VydElzKG5hbWUsICduYW1lJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZ2V0RmllbGQobmFtZSk7XG4gICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIFBERk9wdGlvbkxpc3QpXG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkRmllbGRUeXBlRXJyb3IobmFtZSwgUERGT3B0aW9uTGlzdCwgZmllbGQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByYWRpbyBncm91cCBmaWVsZCBpbiB0aGlzIFtbUERGRm9ybV1dIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmdldFJhZGlvR3JvdXAoJ1BhZ2UxLkZvby5SYWRpb0dyb3VwWzBdJylcbiAgICAgKiBjb25zdCBvcHRpb25zID0gcmFkaW9Hcm91cC5nZXRPcHRpb25zKClcbiAgICAgKiByYWRpb0dyb3VwLnNlbGVjdChvcHRpb25zWzBdKVxuICAgICAqIGBgYFxuICAgICAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIG5vIGZpZWxkIGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLCBvciBpZlxuICAgICAqIHRoZSBmaWVsZCBleGlzdHMgYnV0IGlzIG5vdCBhIHJhZGlvIGdyb3VwLlxuICAgICAqIEBwYXJhbSBuYW1lIEEgZnVsbHkgcXVhbGlmaWVkIHJhZGlvIGdyb3VwIG5hbWUuXG4gICAgICogQHJldHVybnMgVGhlIHJhZGlvIGdyb3VwIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldFJhZGlvR3JvdXAgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBhc3NlcnRJcyhuYW1lLCAnbmFtZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIgZmllbGQgPSB0aGlzLmdldEZpZWxkKG5hbWUpO1xuICAgICAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBQREZSYWRpb0dyb3VwKVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZEZpZWxkVHlwZUVycm9yKG5hbWUsIFBERlJhZGlvR3JvdXAsIGZpZWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2lnbmF0dXJlIGZpZWxkIGluIHRoaXMgW1tQREZGb3JtXV0gd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3Qgc2lnbmF0dXJlID0gZm9ybS5nZXRTaWduYXR1cmUoJ1BhZ2UxLkZvby5TaWduYXR1cmVbMF0nKVxuICAgICAqIGBgYFxuICAgICAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIG5vIGZpZWxkIGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLCBvciBpZlxuICAgICAqIHRoZSBmaWVsZCBleGlzdHMgYnV0IGlzIG5vdCBhIHNpZ25hdHVyZS5cbiAgICAgKiBAcGFyYW0gbmFtZSBBIGZ1bGx5IHF1YWxpZmllZCBzaWduYXR1cmUgbmFtZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2lnbmF0dXJlIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldFNpZ25hdHVyZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGFzc2VydElzKG5hbWUsICduYW1lJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZ2V0RmllbGQobmFtZSk7XG4gICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIFBERlNpZ25hdHVyZSlcbiAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRGaWVsZFR5cGVFcnJvcihuYW1lLCBQREZTaWduYXR1cmUsIGZpZWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdGV4dCBmaWVsZCBpbiB0aGlzIFtbUERGRm9ybV1dIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IHRleHRGaWVsZCA9IGZvcm0uZ2V0VGV4dEZpZWxkKCdQYWdlMS5Gb28uVGV4dEZpZWxkWzBdJylcbiAgICAgKiB0ZXh0RmllbGQuc2V0VGV4dCgnQXJlIHlvdSBkZXNpZ25lZCB0byBhY3Qgb3IgdG8gYmUgYWN0ZWQgdXBvbj8nKVxuICAgICAqIGBgYFxuICAgICAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIG5vIGZpZWxkIGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLCBvciBpZlxuICAgICAqIHRoZSBmaWVsZCBleGlzdHMgYnV0IGlzIG5vdCBhIHRleHQgZmllbGQuXG4gICAgICogQHBhcmFtIG5hbWUgQSBmdWxseSBxdWFsaWZpZWQgdGV4dCBmaWVsZCBuYW1lLlxuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IGZpZWxkIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldFRleHRGaWVsZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGFzc2VydElzKG5hbWUsICduYW1lJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZ2V0RmllbGQobmFtZSk7XG4gICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIFBERlRleHRGaWVsZClcbiAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRGaWVsZFR5cGVFcnJvcihuYW1lLCBQREZUZXh0RmllbGQsIGZpZWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBidXR0b24gZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgYnV0dG9uID0gZm9ybS5jcmVhdGVCdXR0b24oJ2Nvb2wubmV3LmJ1dHRvbicpXG4gICAgICpcbiAgICAgKiBidXR0b24uYWRkVG9QYWdlKCdEbyBTdHVmZicsIGZvbnQsIHBhZ2UpXG4gICAgICogYGBgXG4gICAgICogQW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gaWYgYSBmaWVsZCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBmb3IgdGhlIG5ldyBidXR0b24uXG4gICAgICogQHJldHVybnMgVGhlIG5ldyBidXR0b24gZmllbGQuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuY3JlYXRlQnV0dG9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIG5hbWVQYXJ0cyA9IHNwbGl0RmllbGROYW1lKG5hbWUpO1xuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5maW5kT3JDcmVhdGVOb25UZXJtaW5hbHMobmFtZVBhcnRzLm5vblRlcm1pbmFsKTtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IFBERkFjcm9QdXNoQnV0dG9uLmNyZWF0ZSh0aGlzLmRvYy5jb250ZXh0KTtcbiAgICAgICAgYnV0dG9uLnNldFBhcnRpYWxOYW1lKG5hbWVQYXJ0cy50ZXJtaW5hbCk7XG4gICAgICAgIGFkZEZpZWxkVG9QYXJlbnQocGFyZW50LCBbYnV0dG9uLCBidXR0b24ucmVmXSwgbmFtZVBhcnRzLnRlcm1pbmFsKTtcbiAgICAgICAgcmV0dXJuIFBERkJ1dHRvbi5vZihidXR0b24sIGJ1dHRvbi5yZWYsIHRoaXMuZG9jKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjaGVjayBib3ggZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgY2hlY2tCb3ggPSBmb3JtLmNyZWF0ZUNoZWNrQm94KCdjb29sLm5ldy5jaGVja0JveCcpXG4gICAgICpcbiAgICAgKiBjaGVja0JveC5hZGRUb1BhZ2UocGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIGZpZWxkIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciB0aGUgbmV3IGNoZWNrIGJveC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3IGNoZWNrIGJveCBmaWVsZC5cbiAgICAgKi9cbiAgICBQREZGb3JtLnByb3RvdHlwZS5jcmVhdGVDaGVja0JveCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGFzc2VydElzKG5hbWUsICduYW1lJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBuYW1lUGFydHMgPSBzcGxpdEZpZWxkTmFtZShuYW1lKTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZmluZE9yQ3JlYXRlTm9uVGVybWluYWxzKG5hbWVQYXJ0cy5ub25UZXJtaW5hbCk7XG4gICAgICAgIHZhciBjaGVja0JveCA9IFBERkFjcm9DaGVja0JveC5jcmVhdGUodGhpcy5kb2MuY29udGV4dCk7XG4gICAgICAgIGNoZWNrQm94LnNldFBhcnRpYWxOYW1lKG5hbWVQYXJ0cy50ZXJtaW5hbCk7XG4gICAgICAgIGFkZEZpZWxkVG9QYXJlbnQocGFyZW50LCBbY2hlY2tCb3gsIGNoZWNrQm94LnJlZl0sIG5hbWVQYXJ0cy50ZXJtaW5hbCk7XG4gICAgICAgIHJldHVybiBQREZDaGVja0JveC5vZihjaGVja0JveCwgY2hlY2tCb3gucmVmLCB0aGlzLmRvYyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZHJvcGRvd24gZmllbGQgaW4gdGhpcyBbW1BERkZvcm1dXSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgZHJvcGRvd24gPSBmb3JtLmNyZWF0ZURyb3Bkb3duKCdjb29sLm5ldy5kcm9wZG93bicpXG4gICAgICpcbiAgICAgKiBkcm9wZG93bi5hZGRUb1BhZ2UoZm9udCwgcGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIGZpZWxkIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciB0aGUgbmV3IGRyb3Bkb3duLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgZHJvcGRvd24gZmllbGQuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuY3JlYXRlRHJvcGRvd24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBhc3NlcnRJcyhuYW1lLCAnbmFtZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIgbmFtZVBhcnRzID0gc3BsaXRGaWVsZE5hbWUobmFtZSk7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmZpbmRPckNyZWF0ZU5vblRlcm1pbmFscyhuYW1lUGFydHMubm9uVGVybWluYWwpO1xuICAgICAgICB2YXIgY29tYm9Cb3ggPSBQREZBY3JvQ29tYm9Cb3guY3JlYXRlKHRoaXMuZG9jLmNvbnRleHQpO1xuICAgICAgICBjb21ib0JveC5zZXRQYXJ0aWFsTmFtZShuYW1lUGFydHMudGVybWluYWwpO1xuICAgICAgICBhZGRGaWVsZFRvUGFyZW50KHBhcmVudCwgW2NvbWJvQm94LCBjb21ib0JveC5yZWZdLCBuYW1lUGFydHMudGVybWluYWwpO1xuICAgICAgICByZXR1cm4gUERGRHJvcGRvd24ub2YoY29tYm9Cb3gsIGNvbWJvQm94LnJlZiwgdGhpcy5kb2MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IG9wdGlvbiBsaXN0IGZpZWxkIGluIHRoaXMgW1tQREZGb3JtXV0gd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvbnQgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IG9wdGlvbkxpc3QgPSBmb3JtLmNyZWF0ZU9wdGlvbkxpc3QoJ2Nvb2wubmV3Lm9wdGlvbkxpc3QnKVxuICAgICAqXG4gICAgICogb3B0aW9uTGlzdC5hZGRUb1BhZ2UoZm9udCwgcGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIGZpZWxkIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciB0aGUgbmV3IG9wdGlvbiBsaXN0LlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgb3B0aW9uIGxpc3QgZmllbGQuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuY3JlYXRlT3B0aW9uTGlzdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGFzc2VydElzKG5hbWUsICduYW1lJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBuYW1lUGFydHMgPSBzcGxpdEZpZWxkTmFtZShuYW1lKTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZmluZE9yQ3JlYXRlTm9uVGVybWluYWxzKG5hbWVQYXJ0cy5ub25UZXJtaW5hbCk7XG4gICAgICAgIHZhciBsaXN0Qm94ID0gUERGQWNyb0xpc3RCb3guY3JlYXRlKHRoaXMuZG9jLmNvbnRleHQpO1xuICAgICAgICBsaXN0Qm94LnNldFBhcnRpYWxOYW1lKG5hbWVQYXJ0cy50ZXJtaW5hbCk7XG4gICAgICAgIGFkZEZpZWxkVG9QYXJlbnQocGFyZW50LCBbbGlzdEJveCwgbGlzdEJveC5yZWZdLCBuYW1lUGFydHMudGVybWluYWwpO1xuICAgICAgICByZXR1cm4gUERGT3B0aW9uTGlzdC5vZihsaXN0Qm94LCBsaXN0Qm94LnJlZiwgdGhpcy5kb2MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHJhZGlvIGdyb3VwIGZpZWxkIGluIHRoaXMgW1tQREZGb3JtXV0gd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvbnQgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IHJhZGlvR3JvdXAgPSBmb3JtLmNyZWF0ZVJhZGlvR3JvdXAoJ2Nvb2wubmV3LnJhZGlvR3JvdXAnKVxuICAgICAqXG4gICAgICogcmFkaW9Hcm91cC5hZGRPcHRpb25Ub1BhZ2UoJ2lzLWRvZycsIHBhZ2UsIHsgeTogMCB9KVxuICAgICAqIHJhZGlvR3JvdXAuYWRkT3B0aW9uVG9QYWdlKCdpcy1jYXQnLCBwYWdlLCB7IHk6IDc1IH0pXG4gICAgICogYGBgXG4gICAgICogQW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gaWYgYSBmaWVsZCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBmb3IgdGhlIG5ldyByYWRpbyBncm91cC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3IHJhZGlvIGdyb3VwIGZpZWxkLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmNyZWF0ZVJhZGlvR3JvdXAgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBhc3NlcnRJcyhuYW1lLCAnbmFtZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIgbmFtZVBhcnRzID0gc3BsaXRGaWVsZE5hbWUobmFtZSk7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmZpbmRPckNyZWF0ZU5vblRlcm1pbmFscyhuYW1lUGFydHMubm9uVGVybWluYWwpO1xuICAgICAgICB2YXIgcmFkaW9CdXR0b24gPSBQREZBY3JvUmFkaW9CdXR0b24uY3JlYXRlKHRoaXMuZG9jLmNvbnRleHQpO1xuICAgICAgICByYWRpb0J1dHRvbi5zZXRQYXJ0aWFsTmFtZShuYW1lUGFydHMudGVybWluYWwpO1xuICAgICAgICBhZGRGaWVsZFRvUGFyZW50KHBhcmVudCwgW3JhZGlvQnV0dG9uLCByYWRpb0J1dHRvbi5yZWZdLCBuYW1lUGFydHMudGVybWluYWwpO1xuICAgICAgICByZXR1cm4gUERGUmFkaW9Hcm91cC5vZihyYWRpb0J1dHRvbiwgcmFkaW9CdXR0b24ucmVmLCB0aGlzLmRvYyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgdGV4dCBmaWVsZCBpbiB0aGlzIFtbUERGRm9ybV1dIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb250ID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSlcbiAgICAgKiBjb25zdCBwYWdlID0gcGRmRG9jLmFkZFBhZ2UoKVxuICAgICAqXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKClcbiAgICAgKiBjb25zdCB0ZXh0RmllbGQgPSBmb3JtLmNyZWF0ZVRleHRGaWVsZCgnY29vbC5uZXcudGV4dEZpZWxkJylcbiAgICAgKlxuICAgICAqIHRleHRGaWVsZC5hZGRUb1BhZ2UoZm9udCwgcGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKiBBbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIGZpZWxkIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciB0aGUgbmV3IHJhZGlvIGdyb3VwLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgcmFkaW8gZ3JvdXAgZmllbGQuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUuY3JlYXRlVGV4dEZpZWxkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIG5hbWVQYXJ0cyA9IHNwbGl0RmllbGROYW1lKG5hbWUpO1xuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5maW5kT3JDcmVhdGVOb25UZXJtaW5hbHMobmFtZVBhcnRzLm5vblRlcm1pbmFsKTtcbiAgICAgICAgdmFyIHRleHQgPSBQREZBY3JvVGV4dC5jcmVhdGUodGhpcy5kb2MuY29udGV4dCk7XG4gICAgICAgIHRleHQuc2V0UGFydGlhbE5hbWUobmFtZVBhcnRzLnRlcm1pbmFsKTtcbiAgICAgICAgYWRkRmllbGRUb1BhcmVudChwYXJlbnQsIFt0ZXh0LCB0ZXh0LnJlZl0sIG5hbWVQYXJ0cy50ZXJtaW5hbCk7XG4gICAgICAgIHJldHVybiBQREZUZXh0RmllbGQub2YodGV4dCwgdGV4dC5yZWYsIHRoaXMuZG9jKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZsYXR0ZW4gYWxsIGZpZWxkcyBpbiB0aGlzIFtbUERGRm9ybV1dLlxuICAgICAqXG4gICAgICogRmxhdHRlbmluZyBhIGZvcm0gZmllbGQgd2lsbCB0YWtlIHRoZSBjdXJyZW50IGFwcGVhcmFuY2UgZm9yIGVhY2ggb2YgdGhhdFxuICAgICAqIGZpZWxkJ3Mgd2lkZ2V0cyBhbmQgbWFrZSB0aGVtIHBhcnQgb2YgdGhlaXIgcGFnZSdzIGNvbnRlbnQgc3RyZWFtLiBBbGwgZm9ybVxuICAgICAqIGZpZWxkcyBhbmQgYW5ub3RhdGlvbnMgYXNzb2NpYXRlZCBhcmUgdGhlbiByZW1vdmVkLiBOb3RlIHRoYXQgb25jZSBhIGZvcm1cbiAgICAgKiBoYXMgYmVlbiBmbGF0dGVuZWQgaXRzIGZpZWxkcyBjYW4gbm8gbG9uZ2VyIGJlIGFjY2Vzc2VkIG9yIGVkaXRlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgb3BlcmF0aW9uIGlzIG9mdGVuIHVzZWQgYWZ0ZXIgZmlsbGluZyBmb3JtIGZpZWxkcyB0byBlbnN1cmUgYVxuICAgICAqIGNvbnNpc3RlbnQgYXBwZWFyYW5jZSBhY3Jvc3MgZGlmZmVyZW50IFBERiByZWFkZXJzIGFuZC9vciBwcmludGVycy5cbiAgICAgKiBBbm90aGVyIGNvbW1vbiB1c2UgY2FzZSBpcyB0byBjb3B5IGEgdGVtcGxhdGUgZG9jdW1lbnQgd2l0aCBmb3JtIGZpZWxkc1xuICAgICAqIGludG8gYW5vdGhlciBkb2N1bWVudC4gSW4gdGhpcyBzY2VuYXJpbyB5b3Ugd291bGQgbG9hZCB0aGUgdGVtcGxhdGVcbiAgICAgKiBkb2N1bWVudCwgZmlsbCBpdHMgZmllbGRzLCBmbGF0dGVuIGl0LCBhbmQgdGhlbiBjb3B5IGl0cyBwYWdlcyBpbnRvIHRoZVxuICAgICAqIHJlY2lwaWVudCBkb2N1bWVudCAtIHRoZSBmaWxsZWQgZmllbGRzIHdpbGwgYmUgY29waWVkIG92ZXIuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpO1xuICAgICAqIGZvcm0uZmxhdHRlbigpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmZsYXR0ZW4gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7IHVwZGF0ZUZpZWxkQXBwZWFyYW5jZXM6IHRydWUgfTsgfVxuICAgICAgICBpZiAob3B0aW9ucy51cGRhdGVGaWVsZEFwcGVhcmFuY2VzKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkQXBwZWFyYW5jZXMoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmllbGRzID0gdGhpcy5nZXRGaWVsZHMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbkZpZWxkcyA9IGZpZWxkcy5sZW5ndGg7IGkgPCBsZW5GaWVsZHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgdmFyIHdpZGdldHMgPSBmaWVsZC5hY3JvRmllbGQuZ2V0V2lkZ2V0cygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbldpZGdldHMgPSB3aWRnZXRzLmxlbmd0aDsgaiA8IGxlbldpZGdldHM7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2pdO1xuICAgICAgICAgICAgICAgIHZhciBwYWdlID0gdGhpcy5maW5kV2lkZ2V0UGFnZSh3aWRnZXQpO1xuICAgICAgICAgICAgICAgIHZhciB3aWRnZXRSZWYgPSB0aGlzLmZpbmRXaWRnZXRBcHBlYXJhbmNlUmVmKGZpZWxkLCB3aWRnZXQpO1xuICAgICAgICAgICAgICAgIHZhciB4T2JqZWN0S2V5ID0gcGFnZS5ub2RlLm5ld1hPYmplY3QoJ0ZsYXRXaWRnZXQnLCB3aWRnZXRSZWYpO1xuICAgICAgICAgICAgICAgIHZhciByZWN0YW5nbGUgPSB3aWRnZXQuZ2V0UmVjdGFuZ2xlKCk7XG4gICAgICAgICAgICAgICAgdmFyIG9wZXJhdG9ycyA9IF9fc3ByZWFkQXJyYXlzKFtcbiAgICAgICAgICAgICAgICAgICAgcHVzaEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlKHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSlcbiAgICAgICAgICAgICAgICBdLCByb3RhdGVJblBsYWNlKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZWN0YW5nbGUpLCB7IHJvdGF0aW9uOiAwIH0pKSwgW1xuICAgICAgICAgICAgICAgICAgICBkcmF3T2JqZWN0KHhPYmplY3RLZXkpLFxuICAgICAgICAgICAgICAgICAgICBwb3BHcmFwaGljc1N0YXRlKCksXG4gICAgICAgICAgICAgICAgXSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgICAgIHBhZ2UucHVzaE9wZXJhdG9ycy5hcHBseShwYWdlLCBvcGVyYXRvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVGaWVsZChmaWVsZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGZpZWxkIGZyb20gdGhpcyBbW1BERkZvcm1dXS5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IHBkZkRvYy5nZXRGb3JtKCk7XG4gICAgICogY29uc3QgYWdlRmllbGQgPSBmb3JtLmdldEZpZWxkcygpLmZpbmQoeCA9PiB4LmdldE5hbWUoKSA9PT0gJ0FnZScpO1xuICAgICAqIGZvcm0ucmVtb3ZlRmllbGQoYWdlRmllbGQpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLnJlbW92ZUZpZWxkID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciB3aWRnZXRzID0gZmllbGQuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgdmFyIHBhZ2VzID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaV07XG4gICAgICAgICAgICB2YXIgd2lkZ2V0UmVmID0gdGhpcy5maW5kV2lkZ2V0QXBwZWFyYW5jZVJlZihmaWVsZCwgd2lkZ2V0KTtcbiAgICAgICAgICAgIHZhciBwYWdlID0gdGhpcy5maW5kV2lkZ2V0UGFnZSh3aWRnZXQpO1xuICAgICAgICAgICAgcGFnZXMuYWRkKHBhZ2UpO1xuICAgICAgICAgICAgcGFnZS5ub2RlLnJlbW92ZUFubm90KHdpZGdldFJlZik7XG4gICAgICAgIH1cbiAgICAgICAgcGFnZXMuZm9yRWFjaChmdW5jdGlvbiAocGFnZSkgeyByZXR1cm4gcGFnZS5ub2RlLnJlbW92ZUFubm90KGZpZWxkLnJlZik7IH0pO1xuICAgICAgICB0aGlzLmFjcm9Gb3JtLnJlbW92ZUZpZWxkKGZpZWxkLmFjcm9GaWVsZCk7XG4gICAgICAgIHZhciBmaWVsZEtpZHMgPSBmaWVsZC5hY3JvRmllbGQubm9ybWFsaXplZEVudHJpZXMoKS5LaWRzO1xuICAgICAgICB2YXIga2lkc0NvdW50ID0gZmllbGRLaWRzLnNpemUoKTtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRJbmRleCA9IDA7IGNoaWxkSW5kZXggPCBraWRzQ291bnQ7IGNoaWxkSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gZmllbGRLaWRzLmdldChjaGlsZEluZGV4KTtcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFBERlJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jLmNvbnRleHQuZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRvYy5jb250ZXh0LmRlbGV0ZShmaWVsZC5yZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMgZm9yIGFsbCB3aWRnZXRzIG9mIGFsbCBmaWVsZHMgaW4gdGhpc1xuICAgICAqIFtbUERGRm9ybV1dLiBBcHBlYXJhbmNlIHN0cmVhbXMgd2lsbCBvbmx5IGJlIGNyZWF0ZWQgZm9yIGEgd2lkZ2V0IGlmIGl0XG4gICAgICogZG9lcyBub3QgaGF2ZSBhbnkgZXhpc3RpbmcgYXBwZWFyYW5jZSBzdHJlYW1zLCBvciB0aGUgZmllbGQncyB2YWx1ZSBoYXNcbiAgICAgKiBjaGFuZ2VkIChlLmcuIGJ5IGNhbGxpbmcgW1tQREZUZXh0RmllbGQuc2V0VGV4dF1dIG9yXG4gICAgICogW1tQREZEcm9wZG93bi5zZWxlY3RdXSkuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNvdXJpZXIgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuQ291cmllcilcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlcyhjb3VyaWVyKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogKipJTVBPUlRBTlQ6KiogVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBgZm9udGAgcGFyYW1ldGVyIGlzXG4gICAgICogW1tTdGFuZGFyZEZvbnRzLkhlbHZldGljYV1dLiBOb3RlIHRoYXQgdGhpcyBpcyBhIFdpbkFuc2kgZm9udC4gVGhpcyBtZWFuc1xuICAgICAqIHRoYXQgZW5jb2RpbmcgZXJyb3JzIHdpbGwgYmUgdGhyb3duIGlmIGFueSBmaWVsZHMgY29udGFpbiB0ZXh0IHdpdGhcbiAgICAgKiBjaGFyYWN0ZXJzIG91dHNpZGUgdGhlIFdpbkFuc2kgY2hhcmFjdGVyIHNldCAodGhlIGxhdGluIGFscGhhYmV0KS5cbiAgICAgKlxuICAgICAqIEVtYmVkZGluZyBhIGN1c3RvbSBmb250IGFuZCBwYXNzaW5nIHRoYXQgYXMgdGhlIGBmb250YFxuICAgICAqIHBhcmFtZXRlciBhbGxvd3MgeW91IHRvIGdlbmVyYXRlIGFwcGVhcmFuY2Ugc3RyZWFtcyB3aXRoIG5vbiBXaW5BbnNpXG4gICAgICogY2hhcmFjdGVycyAoYXNzdW1pbmcgeW91ciBjdXN0b20gZm9udCBzdXBwb3J0cyB0aGVtKS5cbiAgICAgKlxuICAgICAqID4gKipOT1RFOioqIFRoZSBbW1BERkRvY3VtZW50LnNhdmVdXSBtZXRob2Qgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIHRvXG4gICAgICogPiB1cGRhdGUgYXBwZWFyYW5jZXMgYXV0b21hdGljYWxseSBpZiBhIGZvcm0gd2FzIGFjY2Vzc2VkIHZpYSB0aGVcbiAgICAgKiA+IFtbUERGRG9jdW1lbnQuZ2V0Rm9ybV1dIG1ldGhvZCBwcmlvciB0byBzYXZpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9udCBPcHRpb25hbGx5LCB0aGUgZm9udCB0byB1c2Ugd2hlbiBjcmVhdGluZyBuZXcgYXBwZWFyYW5jZXMuXG4gICAgICovXG4gICAgUERGRm9ybS5wcm90b3R5cGUudXBkYXRlRmllbGRBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uIChmb250KSB7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKGZvbnQsICdmb250JywgW1tQREZGb250LCAnUERGRm9udCddXSk7XG4gICAgICAgIGZvbnQgPSBmb250ICE9PSBudWxsICYmIGZvbnQgIT09IHZvaWQgMCA/IGZvbnQgOiB0aGlzLmdldERlZmF1bHRGb250KCk7XG4gICAgICAgIHZhciBmaWVsZHMgPSB0aGlzLmdldEZpZWxkcygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBmaWVsZHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSBmaWVsZHNbaWR4XTtcbiAgICAgICAgICAgIGlmIChmaWVsZC5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlKCkpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5kZWZhdWx0VXBkYXRlQXBwZWFyYW5jZXMoZm9udCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1hcmsgYSBmaWVsZCBhcyBkaXJ0eS4gVGhpcyB3aWxsIGNhdXNlIGl0cyBhcHBlYXJhbmNlIHN0cmVhbXMgdG8gYmVcbiAgICAgKiB1cGRhdGVkIGJ5IFtbUERGRm9ybS51cGRhdGVGaWVsZEFwcGVhcmFuY2VzXV0uXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnZm9vLmJhcicpXG4gICAgICogZm9ybS5tYXJrRmllbGRBc0RpcnR5KGZpZWxkLnJlZilcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZmllbGRSZWYgVGhlIHJlZmVyZW5jZSB0byB0aGUgZmllbGQgdGhhdCBzaG91bGQgYmUgbWFya2VkLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLm1hcmtGaWVsZEFzRGlydHkgPSBmdW5jdGlvbiAoZmllbGRSZWYpIHtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQoZmllbGRSZWYsICdmaWVsZFJlZicsIFtbUERGUmVmLCAnUERGUmVmJ11dKTtcbiAgICAgICAgdGhpcy5kaXJ0eUZpZWxkcy5hZGQoZmllbGRSZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFyayBhIGZpZWxkIGFzIGRpcnR5LiBUaGlzIHdpbGwgY2F1c2UgaXRzIGFwcGVhcmFuY2Ugc3RyZWFtcyB0byBub3QgYmVcbiAgICAgKiB1cGRhdGVkIGJ5IFtbUERGRm9ybS51cGRhdGVGaWVsZEFwcGVhcmFuY2VzXV0uXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnZm9vLmJhcicpXG4gICAgICogZm9ybS5tYXJrRmllbGRBc0NsZWFuKGZpZWxkLnJlZilcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZmllbGRSZWYgVGhlIHJlZmVyZW5jZSB0byB0aGUgZmllbGQgdGhhdCBzaG91bGQgYmUgbWFya2VkLlxuICAgICAqL1xuICAgIFBERkZvcm0ucHJvdG90eXBlLm1hcmtGaWVsZEFzQ2xlYW4gPSBmdW5jdGlvbiAoZmllbGRSZWYpIHtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQoZmllbGRSZWYsICdmaWVsZFJlZicsIFtbUERGUmVmLCAnUERGUmVmJ11dKTtcbiAgICAgICAgdGhpcy5kaXJ0eUZpZWxkcy5kZWxldGUoZmllbGRSZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaXMgdGhlIHNwZWNpZmllZCBmaWVsZCBoYXMgYmVlbiBtYXJrZWQgYXMgZGlydHkuXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBmb3JtID0gcGRmRG9jLmdldEZvcm0oKVxuICAgICAqIGNvbnN0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCgnZm9vLmJhcicpXG4gICAgICogaWYgKGZvcm0uZmllbGRJc0RpcnR5KGZpZWxkLnJlZikpIGNvbnNvbGUubG9nKCdGaWVsZCBpcyBkaXJ0eScpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGZpZWxkUmVmIFRoZSByZWZlcmVuY2UgdG8gdGhlIGZpZWxkIHRoYXQgc2hvdWxkIGJlIGNoZWNrZWQuXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhlIHNwZWNpZmllZCBmaWVsZCBpcyBkaXJ0eS5cbiAgICAgKi9cbiAgICBQREZGb3JtLnByb3RvdHlwZS5maWVsZElzRGlydHkgPSBmdW5jdGlvbiAoZmllbGRSZWYpIHtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQoZmllbGRSZWYsICdmaWVsZFJlZicsIFtbUERGUmVmLCAnUERGUmVmJ11dKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlydHlGaWVsZHMuaGFzKGZpZWxkUmVmKTtcbiAgICB9O1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmdldERlZmF1bHRGb250ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Rm9udENhY2hlLmFjY2VzcygpO1xuICAgIH07XG4gICAgUERGRm9ybS5wcm90b3R5cGUuZmluZFdpZGdldFBhZ2UgPSBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgIHZhciBwYWdlUmVmID0gd2lkZ2V0LlAoKTtcbiAgICAgICAgdmFyIHBhZ2UgPSB0aGlzLmRvYy5nZXRQYWdlcygpLmZpbmQoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgucmVmID09PSBwYWdlUmVmOyB9KTtcbiAgICAgICAgaWYgKHBhZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHdpZGdldFJlZiA9IHRoaXMuZG9jLmNvbnRleHQuZ2V0T2JqZWN0UmVmKHdpZGdldC5kaWN0KTtcbiAgICAgICAgICAgIGlmICh3aWRnZXRSZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgUERGUmVmIGZvciBQREZPYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhZ2UgPSB0aGlzLmRvYy5maW5kUGFnZUZvckFubm90YXRpb25SZWYod2lkZ2V0UmVmKTtcbiAgICAgICAgICAgIGlmIChwYWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBwYWdlIGZvciBQREZSZWYgXCIgKyB3aWRnZXRSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWdlO1xuICAgIH07XG4gICAgUERGRm9ybS5wcm90b3R5cGUuZmluZFdpZGdldEFwcGVhcmFuY2VSZWYgPSBmdW5jdGlvbiAoZmllbGQsIHdpZGdldCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciByZWZPckRpY3QgPSB3aWRnZXQuZ2V0Tm9ybWFsQXBwZWFyYW5jZSgpO1xuICAgICAgICBpZiAocmVmT3JEaWN0IGluc3RhbmNlb2YgUERGRGljdCAmJlxuICAgICAgICAgICAgKGZpZWxkIGluc3RhbmNlb2YgUERGQ2hlY2tCb3ggfHwgZmllbGQgaW5zdGFuY2VvZiBQREZSYWRpb0dyb3VwKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZmllbGQuYWNyb0ZpZWxkLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB2YXIgcmVmID0gKF9hID0gcmVmT3JEaWN0LmdldCh2YWx1ZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlZk9yRGljdC5nZXQoUERGTmFtZS5vZignT2ZmJykpO1xuICAgICAgICAgICAgaWYgKHJlZiBpbnN0YW5jZW9mIFBERlJlZikge1xuICAgICAgICAgICAgICAgIHJlZk9yRGljdCA9IHJlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIShyZWZPckRpY3QgaW5zdGFuY2VvZiBQREZSZWYpKSB7XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZmllbGQuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGV4dHJhY3QgYXBwZWFyYW5jZSByZWYgZm9yOiBcIiArIG5hbWVfMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZk9yRGljdDtcbiAgICB9O1xuICAgIFBERkZvcm0ucHJvdG90eXBlLmZpbmRPckNyZWF0ZU5vblRlcm1pbmFscyA9IGZ1bmN0aW9uIChwYXJ0aWFsTmFtZXMpIHtcbiAgICAgICAgdmFyIG5vblRlcm1pbmFsID0gW1xuICAgICAgICAgICAgdGhpcy5hY3JvRm9ybSxcbiAgICAgICAgXTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gcGFydGlhbE5hbWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIG5hbWVQYXJ0ID0gcGFydGlhbE5hbWVzW2lkeF07XG4gICAgICAgICAgICBpZiAoIW5hbWVQYXJ0KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkRmllbGROYW1lUGFydEVycm9yKG5hbWVQYXJ0KTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IG5vblRlcm1pbmFsWzBdLCBwYXJlbnRSZWYgPSBub25UZXJtaW5hbFsxXTtcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLmZpbmROb25UZXJtaW5hbChuYW1lUGFydCwgcGFyZW50XzEpO1xuICAgICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsID0gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBQREZBY3JvTm9uVGVybWluYWwuY3JlYXRlKHRoaXMuZG9jLmNvbnRleHQpO1xuICAgICAgICAgICAgICAgIG5vZGUuc2V0UGFydGlhbE5hbWUobmFtZVBhcnQpO1xuICAgICAgICAgICAgICAgIG5vZGUuc2V0UGFyZW50KHBhcmVudFJlZik7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVSZWYgPSB0aGlzLmRvYy5jb250ZXh0LnJlZ2lzdGVyKG5vZGUuZGljdCk7XG4gICAgICAgICAgICAgICAgcGFyZW50XzEuYWRkRmllbGQobm9kZVJlZik7XG4gICAgICAgICAgICAgICAgbm9uVGVybWluYWwgPSBbbm9kZSwgbm9kZVJlZl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vblRlcm1pbmFsO1xuICAgIH07XG4gICAgUERGRm9ybS5wcm90b3R5cGUuZmluZE5vblRlcm1pbmFsID0gZnVuY3Rpb24gKHBhcnRpYWxOYW1lLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGZpZWxkcyA9IHBhcmVudCBpbnN0YW5jZW9mIFBERkFjcm9Gb3JtXG4gICAgICAgICAgICA/IHRoaXMuYWNyb0Zvcm0uZ2V0RmllbGRzKClcbiAgICAgICAgICAgIDogY3JlYXRlUERGQWNyb0ZpZWxkcyhwYXJlbnQuS2lkcygpKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZmllbGRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gZmllbGRzW2lkeF0sIGZpZWxkID0gX2FbMF0sIHJlZiA9IF9hWzFdO1xuICAgICAgICAgICAgaWYgKGZpZWxkLmdldFBhcnRpYWxOYW1lKCkgPT09IHBhcnRpYWxOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUERGQWNyb05vblRlcm1pbmFsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZpZWxkLCByZWZdO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaWVsZEFscmVhZHlFeGlzdHNFcnJvcihwYXJ0aWFsTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZEb2N1bWVudC5nZXRGb3JtXV0gbWV0aG9kLCB3aGljaCB3aWxsIGNyZWF0ZSBhblxuICAgICAqID4gaW5zdGFuY2Ugb2YgW1tQREZGb3JtXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERkZvcm1dXSBmcm9tIGFuIGV4aXN0aW5nIGFjcm9Gb3JtIGFuZCBlbWJlZGRlclxuICAgICAqXG4gICAgICogQHBhcmFtIGFjcm9Gb3JtIFRoZSB1bmRlcmx5aW5nIGBQREZBY3JvRm9ybWAgZm9yIHRoaXMgZm9ybS5cbiAgICAgKiBAcGFyYW0gZG9jIFRoZSBkb2N1bWVudCB0byB3aGljaCB0aGUgZm9ybSB3aWxsIGJlbG9uZy5cbiAgICAgKi9cbiAgICBQREZGb3JtLm9mID0gZnVuY3Rpb24gKGFjcm9Gb3JtLCBkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZGb3JtKGFjcm9Gb3JtLCBkb2MpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkZvcm07XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGRm9ybTtcbnZhciBjb252ZXJ0VG9QREZGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCwgcmVmLCBkb2MpIHtcbiAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBQREZBY3JvUHVzaEJ1dHRvbilcbiAgICAgICAgcmV0dXJuIFBERkJ1dHRvbi5vZihmaWVsZCwgcmVmLCBkb2MpO1xuICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIFBERkFjcm9DaGVja0JveClcbiAgICAgICAgcmV0dXJuIFBERkNoZWNrQm94Lm9mKGZpZWxkLCByZWYsIGRvYyk7XG4gICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUERGQWNyb0NvbWJvQm94KVxuICAgICAgICByZXR1cm4gUERGRHJvcGRvd24ub2YoZmllbGQsIHJlZiwgZG9jKTtcbiAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBQREZBY3JvTGlzdEJveClcbiAgICAgICAgcmV0dXJuIFBERk9wdGlvbkxpc3Qub2YoZmllbGQsIHJlZiwgZG9jKTtcbiAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBQREZBY3JvVGV4dClcbiAgICAgICAgcmV0dXJuIFBERlRleHRGaWVsZC5vZihmaWVsZCwgcmVmLCBkb2MpO1xuICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIFBERkFjcm9SYWRpb0J1dHRvbikge1xuICAgICAgICByZXR1cm4gUERGUmFkaW9Hcm91cC5vZihmaWVsZCwgcmVmLCBkb2MpO1xuICAgIH1cbiAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBQREZBY3JvU2lnbmF0dXJlKSB7XG4gICAgICAgIHJldHVybiBQREZTaWduYXR1cmUub2YoZmllbGQsIHJlZiwgZG9jKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG52YXIgc3BsaXRGaWVsZE5hbWUgPSBmdW5jdGlvbiAoZnVsbHlRdWFsaWZpZWROYW1lKSB7XG4gICAgaWYgKGZ1bGx5UXVhbGlmaWVkTmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQREYgZmllbGQgbmFtZXMgbXVzdCBub3QgYmUgZW1wdHkgc3RyaW5ncycpO1xuICAgIH1cbiAgICB2YXIgcGFydHMgPSBmdWxseVF1YWxpZmllZE5hbWUuc3BsaXQoJy4nKTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgaWYgKHBhcnRzW2lkeF0gPT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQZXJpb2RzIGluIFBERiBmaWVsZCBuYW1lcyBtdXN0IGJlIHNlcGFyYXRlZCBieSBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyOiBcXFwiXCIgKyBmdWxseVF1YWxpZmllZE5hbWUgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgcmV0dXJuIHsgbm9uVGVybWluYWw6IFtdLCB0ZXJtaW5hbDogcGFydHNbMF0gfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub25UZXJtaW5hbDogcGFydHMuc2xpY2UoMCwgcGFydHMubGVuZ3RoIC0gMSksXG4gICAgICAgIHRlcm1pbmFsOiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSxcbiAgICB9O1xufTtcbnZhciBhZGRGaWVsZFRvUGFyZW50ID0gZnVuY3Rpb24gKF9hLCBfYiwgcGFydGlhbE5hbWUpIHtcbiAgICB2YXIgcGFyZW50ID0gX2FbMF0sIHBhcmVudFJlZiA9IF9hWzFdO1xuICAgIHZhciBmaWVsZCA9IF9iWzBdLCBmaWVsZFJlZiA9IF9iWzFdO1xuICAgIHZhciBlbnRyaWVzID0gcGFyZW50Lm5vcm1hbGl6ZWRFbnRyaWVzKCk7XG4gICAgdmFyIGZpZWxkcyA9IGNyZWF0ZVBERkFjcm9GaWVsZHMoJ0tpZHMnIGluIGVudHJpZXMgPyBlbnRyaWVzLktpZHMgOiBlbnRyaWVzLkZpZWxkcyk7XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZmllbGRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoZmllbGRzW2lkeF1bMF0uZ2V0UGFydGlhbE5hbWUoKSA9PT0gcGFydGlhbE5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBGaWVsZEFscmVhZHlFeGlzdHNFcnJvcihwYXJ0aWFsTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyZW50LmFkZEZpZWxkKGZpZWxkUmVmKTtcbiAgICBmaWVsZC5zZXRQYXJlbnQocGFyZW50UmVmKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZGb3JtLmpzLm1hcCIsImV4cG9ydCB2YXIgUGFyc2VTcGVlZHM7XG4oZnVuY3Rpb24gKFBhcnNlU3BlZWRzKSB7XG4gICAgUGFyc2VTcGVlZHNbUGFyc2VTcGVlZHNbXCJGYXN0ZXN0XCJdID0gSW5maW5pdHldID0gXCJGYXN0ZXN0XCI7XG4gICAgUGFyc2VTcGVlZHNbUGFyc2VTcGVlZHNbXCJGYXN0XCJdID0gMTUwMF0gPSBcIkZhc3RcIjtcbiAgICBQYXJzZVNwZWVkc1tQYXJzZVNwZWVkc1tcIk1lZGl1bVwiXSA9IDUwMF0gPSBcIk1lZGl1bVwiO1xuICAgIFBhcnNlU3BlZWRzW1BhcnNlU3BlZWRzW1wiU2xvd1wiXSA9IDEwMF0gPSBcIlNsb3dcIjtcbn0pKFBhcnNlU3BlZWRzIHx8IChQYXJzZVNwZWVkcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZEb2N1bWVudE9wdGlvbnMuanMubWFwIiwiZXhwb3J0IHZhciBQYWdlU2l6ZXMgPSB7XG4gICAgJzRBMCc6IFs0NzY3Ljg3LCA2NzQwLjc5XSxcbiAgICAnMkEwJzogWzMzNzAuMzksIDQ3NjcuODddLFxuICAgIEEwOiBbMjM4My45NCwgMzM3MC4zOV0sXG4gICAgQTE6IFsxNjgzLjc4LCAyMzgzLjk0XSxcbiAgICBBMjogWzExOTAuNTUsIDE2ODMuNzhdLFxuICAgIEEzOiBbODQxLjg5LCAxMTkwLjU1XSxcbiAgICBBNDogWzU5NS4yOCwgODQxLjg5XSxcbiAgICBBNTogWzQxOS41MywgNTk1LjI4XSxcbiAgICBBNjogWzI5Ny42NCwgNDE5LjUzXSxcbiAgICBBNzogWzIwOS43NiwgMjk3LjY0XSxcbiAgICBBODogWzE0Ny40LCAyMDkuNzZdLFxuICAgIEE5OiBbMTA0Ljg4LCAxNDcuNF0sXG4gICAgQTEwOiBbNzMuNywgMTA0Ljg4XSxcbiAgICBCMDogWzI4MzQuNjUsIDQwMDguMTldLFxuICAgIEIxOiBbMjAwNC4wOSwgMjgzNC42NV0sXG4gICAgQjI6IFsxNDE3LjMyLCAyMDA0LjA5XSxcbiAgICBCMzogWzEwMDAuNjMsIDE0MTcuMzJdLFxuICAgIEI0OiBbNzA4LjY2LCAxMDAwLjYzXSxcbiAgICBCNTogWzQ5OC45LCA3MDguNjZdLFxuICAgIEI2OiBbMzU0LjMzLCA0OTguOV0sXG4gICAgQjc6IFsyNDkuNDUsIDM1NC4zM10sXG4gICAgQjg6IFsxNzUuNzUsIDI0OS40NV0sXG4gICAgQjk6IFsxMjQuNzIsIDE3NS43NV0sXG4gICAgQjEwOiBbODcuODcsIDEyNC43Ml0sXG4gICAgQzA6IFsyNTk5LjM3LCAzNjc2LjU0XSxcbiAgICBDMTogWzE4MzYuODUsIDI1OTkuMzddLFxuICAgIEMyOiBbMTI5OC4yNywgMTgzNi44NV0sXG4gICAgQzM6IFs5MTguNDMsIDEyOTguMjddLFxuICAgIEM0OiBbNjQ5LjEzLCA5MTguNDNdLFxuICAgIEM1OiBbNDU5LjIxLCA2NDkuMTNdLFxuICAgIEM2OiBbMzIzLjE1LCA0NTkuMjFdLFxuICAgIEM3OiBbMjI5LjYxLCAzMjMuMTVdLFxuICAgIEM4OiBbMTYxLjU3LCAyMjkuNjFdLFxuICAgIEM5OiBbMTEzLjM5LCAxNjEuNTddLFxuICAgIEMxMDogWzc5LjM3LCAxMTMuMzldLFxuICAgIFJBMDogWzI0MzcuOCwgMzQ1OC4yN10sXG4gICAgUkExOiBbMTcyOS4xMywgMjQzNy44XSxcbiAgICBSQTI6IFsxMjE4LjksIDE3MjkuMTNdLFxuICAgIFJBMzogWzg2NC41NywgMTIxOC45XSxcbiAgICBSQTQ6IFs2MDkuNDUsIDg2NC41N10sXG4gICAgU1JBMDogWzI1NTEuMTgsIDM2MjguMzVdLFxuICAgIFNSQTE6IFsxODE0LjE3LCAyNTUxLjE4XSxcbiAgICBTUkEyOiBbMTI3NS41OSwgMTgxNC4xN10sXG4gICAgU1JBMzogWzkwNy4wOSwgMTI3NS41OV0sXG4gICAgU1JBNDogWzYzNy44LCA5MDcuMDldLFxuICAgIEV4ZWN1dGl2ZTogWzUyMS44NiwgNzU2LjBdLFxuICAgIEZvbGlvOiBbNjEyLjAsIDkzNi4wXSxcbiAgICBMZWdhbDogWzYxMi4wLCAxMDA4LjBdLFxuICAgIExldHRlcjogWzYxMi4wLCA3OTIuMF0sXG4gICAgVGFibG9pZDogWzc5Mi4wLCAxMjI0LjBdLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFBERk5hbWUsIFBERkFycmF5LCBQREZEaWN0LCBQREZIZXhTdHJpbmcgfSBmcm9tIFwiLi4vY29yZVwiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgZmlsZSB0aGF0IGhhcyBiZWVuIGVtYmVkZGVkIGluIGEgW1tQREZEb2N1bWVudF1dLlxuICovXG52YXIgUERGRW1iZWRkZWRGaWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkVtYmVkZGVkRmlsZShyZWYsIGRvYywgZW1iZWRkZXIpIHtcbiAgICAgICAgdGhpcy5hbHJlYWR5RW1iZWRkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICB0aGlzLmVtYmVkZGVyID0gZW1iZWRkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCBuZWVkIHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIFRoZVxuICAgICAqID4gW1tQREZEb2N1bWVudC5zYXZlXV0gYW5kIFtbUERGRG9jdW1lbnQuc2F2ZUFzQmFzZTY0XV0gbWV0aG9kcyB3aWxsXG4gICAgICogPiBhdXRvbWF0aWNhbGx5IGVuc3VyZSBhbGwgZW1iZWRkYWJsZSBmaWxlcyBnZXQgZW1iZWRkZWQuXG4gICAgICpcbiAgICAgKiBFbWJlZCB0aGlzIGVtYmVkZGFibGUgZmlsZSBpbiBpdHMgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHRoZSBlbWJlZGRpbmcgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgUERGRW1iZWRkZWRGaWxlLnByb3RvdHlwZS5lbWJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlZiwgTmFtZXMsIEVtYmVkZGVkRmlsZXMsIEVGTmFtZXMsIEFGO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5hbHJlYWR5RW1iZWRkZWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5lbWJlZGRlci5lbWJlZEludG9Db250ZXh0KHRoaXMuZG9jLmNvbnRleHQsIHRoaXMucmVmKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2MuY2F0YWxvZy5oYXMoUERGTmFtZS5vZignTmFtZXMnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5jYXRhbG9nLnNldChQREZOYW1lLm9mKCdOYW1lcycpLCB0aGlzLmRvYy5jb250ZXh0Lm9iaih7fSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZXMgPSB0aGlzLmRvYy5jYXRhbG9nLmxvb2t1cChQREZOYW1lLm9mKCdOYW1lcycpLCBQREZEaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTmFtZXMuaGFzKFBERk5hbWUub2YoJ0VtYmVkZGVkRmlsZXMnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lcy5zZXQoUERGTmFtZS5vZignRW1iZWRkZWRGaWxlcycpLCB0aGlzLmRvYy5jb250ZXh0Lm9iaih7fSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgRW1iZWRkZWRGaWxlcyA9IE5hbWVzLmxvb2t1cChQREZOYW1lLm9mKCdFbWJlZGRlZEZpbGVzJyksIFBERkRpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFFbWJlZGRlZEZpbGVzLmhhcyhQREZOYW1lLm9mKCdOYW1lcycpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVtYmVkZGVkRmlsZXMuc2V0KFBERk5hbWUub2YoJ05hbWVzJyksIHRoaXMuZG9jLmNvbnRleHQub2JqKFtdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBFRk5hbWVzID0gRW1iZWRkZWRGaWxlcy5sb29rdXAoUERGTmFtZS5vZignTmFtZXMnKSwgUERGQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgRUZOYW1lcy5wdXNoKFBERkhleFN0cmluZy5mcm9tVGV4dCh0aGlzLmVtYmVkZGVyLmZpbGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFRk5hbWVzLnB1c2gocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogVGhlIEFGLVRhZyBpcyBuZWVkZWQgdG8gYWNoaWV2ZSBQREYtQTMgY29tcGxpYW5jZSBmb3IgZW1iZWRkZWQgZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGUgZm9sbG93aW5nIGRvY3VtZW50IG91dGxpbmVzIHRoZSB1c2VzIGNhc2VzIG9mIHRoZSBhc3NvY2lhdGVkIGZpbGVzIChBRikgdGFnLlxuICAgICAgICAgICAgICAgICAgICAgICAgICogU2VlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICogaHR0cHM6Ly93d3cucGRmYS5vcmcvd3AtY29udGVudC91cGxvYWRzLzIwMTgvMTAvUERGMjBfQU4wMDItQUYucGRmXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2MuY2F0YWxvZy5oYXMoUERGTmFtZS5vZignQUYnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5jYXRhbG9nLnNldChQREZOYW1lLm9mKCdBRicpLCB0aGlzLmRvYy5jb250ZXh0Lm9iaihbXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgQUYgPSB0aGlzLmRvYy5jYXRhbG9nLmxvb2t1cChQREZOYW1lLm9mKCdBRicpLCBQREZBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBRi5wdXNoKHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFscmVhZHlFbWJlZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZEb2N1bWVudC5hdHRhY2hdXSBtZXRob2QsIHdoaWNoIHdpbGwgY3JlYXRlXG4gICAgICogaW5zdGFuY2VzIG9mIFtbUERGRW1iZWRkZWRGaWxlXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERkVtYmVkZGVkRmlsZV1dIGZyb20gYW4gZXhpc3RpbmcgcmVmIGFuZCBlbWJlZGRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHJlZiBUaGUgdW5pcXVlIHJlZmVyZW5jZSBmb3IgdGhpcyBmaWxlLlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoZSBmaWxlIHdpbGwgYmVsb25nLlxuICAgICAqIEBwYXJhbSBlbWJlZGRlciBUaGUgZW1iZWRkZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gZW1iZWQgdGhlIGZpbGUuXG4gICAgICovXG4gICAgUERGRW1iZWRkZWRGaWxlLm9mID0gZnVuY3Rpb24gKHJlZiwgZG9jLCBlbWJlZGRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFBERkVtYmVkZGVkRmlsZShyZWYsIGRvYywgZW1iZWRkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkVtYmVkZGVkRmlsZTtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZFbWJlZGRlZEZpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZFbWJlZGRlZEZpbGUuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUERGTmFtZSwgUERGQXJyYXksIFBERkRpY3QsIFBERkhleFN0cmluZyB9IGZyb20gXCIuLi9jb3JlXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgSmF2YVNjcmlwdCB0aGF0IGhhcyBiZWVuIGVtYmVkZGVkIGluIGEgW1tQREZEb2N1bWVudF1dLlxuICovXG52YXIgUERGSmF2YVNjcmlwdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZKYXZhU2NyaXB0KHJlZiwgZG9jLCBlbWJlZGRlcikge1xuICAgICAgICB0aGlzLmFscmVhZHlFbWJlZGRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgIHRoaXMuZW1iZWRkZXIgPSBlbWJlZGRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gVGhlXG4gICAgICogPiBbW1BERkRvY3VtZW50LnNhdmVdXSBhbmQgW1tQREZEb2N1bWVudC5zYXZlQXNCYXNlNjRdXSBtZXRob2RzIHdpbGxcbiAgICAgKiA+IGF1dG9tYXRpY2FsbHkgZW5zdXJlIGFsbCBKYXZhU2NyaXB0cyBnZXQgZW1iZWRkZWQuXG4gICAgICpcbiAgICAgKiBFbWJlZCB0aGlzIEphdmFTY3JpcHQgaW4gaXRzIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2hlbiB0aGUgZW1iZWRkaW5nIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIFBERkphdmFTY3JpcHQucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGNhdGFsb2csIGNvbnRleHQsIHJlZiwgTmFtZXMsIEphdmFzY3JpcHQsIEpTTmFtZXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLmFscmVhZHlFbWJlZGRlZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZG9jLCBjYXRhbG9nID0gX2EuY2F0YWxvZywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmVtYmVkZGVyLmVtYmVkSW50b0NvbnRleHQodGhpcy5kb2MuY29udGV4dCwgdGhpcy5yZWYpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYXRhbG9nLmhhcyhQREZOYW1lLm9mKCdOYW1lcycpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGFsb2cuc2V0KFBERk5hbWUub2YoJ05hbWVzJyksIGNvbnRleHQub2JqKHt9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBOYW1lcyA9IGNhdGFsb2cubG9va3VwKFBERk5hbWUub2YoJ05hbWVzJyksIFBERkRpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFOYW1lcy5oYXMoUERGTmFtZS5vZignSmF2YVNjcmlwdCcpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWVzLnNldChQREZOYW1lLm9mKCdKYXZhU2NyaXB0JyksIGNvbnRleHQub2JqKHt9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBKYXZhc2NyaXB0ID0gTmFtZXMubG9va3VwKFBERk5hbWUub2YoJ0phdmFTY3JpcHQnKSwgUERGRGljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUphdmFzY3JpcHQuaGFzKFBERk5hbWUub2YoJ05hbWVzJykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSmF2YXNjcmlwdC5zZXQoUERGTmFtZS5vZignTmFtZXMnKSwgY29udGV4dC5vYmooW10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIEpTTmFtZXMgPSBKYXZhc2NyaXB0Lmxvb2t1cChQREZOYW1lLm9mKCdOYW1lcycpLCBQREZBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBKU05hbWVzLnB1c2goUERGSGV4U3RyaW5nLmZyb21UZXh0KHRoaXMuZW1iZWRkZXIuc2NyaXB0TmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgSlNOYW1lcy5wdXNoKHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFscmVhZHlFbWJlZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqID4gKipOT1RFOioqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsXG4gICAgICogPiBjb25zaWRlciB1c2luZyB0aGUgW1tQREZEb2N1bWVudC5hZGRKYXZhU2NyaXB0XV0gbWV0aG9kLCB3aGljaCB3aWxsXG4gICAgICogY3JlYXRlIGluc3RhbmNlcyBvZiBbW1BERkphdmFTY3JpcHRdXSBmb3IgeW91LlxuICAgICAqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIFtbUERGSmF2YVNjcmlwdF1dIGZyb20gYW4gZXhpc3RpbmcgcmVmIGFuZCBzY3JpcHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWYgVGhlIHVuaXF1ZSByZWZlcmVuY2UgZm9yIHRoaXMgc2NyaXB0LlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoZSBzY3JpcHQgd2lsbCBiZWxvbmcuXG4gICAgICogQHBhcmFtIGVtYmVkZGVyIFRoZSBlbWJlZGRlciB0aGF0IHdpbGwgYmUgdXNlZCB0byBlbWJlZCB0aGUgc2NyaXB0LlxuICAgICAqL1xuICAgIFBERkphdmFTY3JpcHQub2YgPSBmdW5jdGlvbiAocmVmLCBkb2MsIGVtYmVkZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGSmF2YVNjcmlwdChyZWYsIGRvYywgZW1iZWRkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkphdmFTY3JpcHQ7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGSmF2YVNjcmlwdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkphdmFTY3JpcHQuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkhleFN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZIZXhTdHJpbmdcIjtcbnZhciBKYXZhU2NyaXB0RW1iZWRkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSmF2YVNjcmlwdEVtYmVkZGVyKHNjcmlwdCwgc2NyaXB0TmFtZSkge1xuICAgICAgICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcbiAgICAgICAgdGhpcy5zY3JpcHROYW1lID0gc2NyaXB0TmFtZTtcbiAgICB9XG4gICAgSmF2YVNjcmlwdEVtYmVkZGVyLmZvciA9IGZ1bmN0aW9uIChzY3JpcHQsIHNjcmlwdE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKYXZhU2NyaXB0RW1iZWRkZXIoc2NyaXB0LCBzY3JpcHROYW1lKTtcbiAgICB9O1xuICAgIEphdmFTY3JpcHRFbWJlZGRlci5wcm90b3R5cGUuZW1iZWRJbnRvQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCByZWYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGpzQWN0aW9uRGljdDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBqc0FjdGlvbkRpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICAgICAgICAgIFR5cGU6ICdBY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICBTOiAnSmF2YVNjcmlwdCcsXG4gICAgICAgICAgICAgICAgICAgIEpTOiBQREZIZXhTdHJpbmcuZnJvbVRleHQodGhpcy5zY3JpcHQpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hc3NpZ24ocmVmLCBqc0FjdGlvbkRpY3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb250ZXh0LnJlZ2lzdGVyKGpzQWN0aW9uRGljdCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gSmF2YVNjcmlwdEVtYmVkZGVyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IEphdmFTY3JpcHRFbWJlZGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUphdmFTY3JpcHRFbWJlZGRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEVuY3J5cHRlZFBERkVycm9yLCBGb250a2l0Tm90UmVnaXN0ZXJlZEVycm9yLCBGb3JlaWduUGFnZUVycm9yLCBSZW1vdmVQYWdlRnJvbUVtcHR5RG9jdW1lbnRFcnJvciwgfSBmcm9tIFwiLi9lcnJvcnNcIjtcbmltcG9ydCBQREZFbWJlZGRlZFBhZ2UgZnJvbSBcIi4vUERGRW1iZWRkZWRQYWdlXCI7XG5pbXBvcnQgUERGRm9udCBmcm9tIFwiLi9QREZGb250XCI7XG5pbXBvcnQgUERGSW1hZ2UgZnJvbSBcIi4vUERGSW1hZ2VcIjtcbmltcG9ydCBQREZQYWdlIGZyb20gXCIuL1BERlBhZ2VcIjtcbmltcG9ydCBQREZGb3JtIGZyb20gXCIuL2Zvcm0vUERGRm9ybVwiO1xuaW1wb3J0IHsgUGFnZVNpemVzIH0gZnJvbSBcIi4vc2l6ZXNcIjtcbmltcG9ydCB7IEN1c3RvbUZvbnRFbWJlZGRlciwgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyLCBKcGVnRW1iZWRkZXIsIFBhZ2VFbWJlZGRpbmdNaXNtYXRjaGVkQ29udGV4dEVycm9yLCBQREZDYXRhbG9nLCBQREZDb250ZXh0LCBQREZEaWN0LCBQREZIZXhTdHJpbmcsIFBERk5hbWUsIFBERk9iamVjdENvcGllciwgUERGUGFnZUVtYmVkZGVyLCBQREZQYWdlTGVhZiwgUERGUGFnZVRyZWUsIFBERlBhcnNlciwgUERGU3RyZWFtV3JpdGVyLCBQREZTdHJpbmcsIFBERldyaXRlciwgUG5nRW1iZWRkZXIsIFN0YW5kYXJkRm9udEVtYmVkZGVyLCBVbmV4cGVjdGVkT2JqZWN0VHlwZUVycm9yLCB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBQYXJzZVNwZWVkcywgfSBmcm9tIFwiLi9QREZEb2N1bWVudE9wdGlvbnNcIjtcbmltcG9ydCB7IGFzc2VydElzLCBhc3NlcnRJc09uZU9mT3JVbmRlZmluZWQsIGFzc2VydE9yVW5kZWZpbmVkLCBhc3NlcnRSYW5nZSwgQ2FjaGUsIGNhbkJlQ29udmVydGVkVG9VaW50OEFycmF5LCBlbmNvZGVUb0Jhc2U2NCwgaXNTdGFuZGFyZEZvbnQsIHBsdWNrSW5kaWNlcywgcmFuZ2UsIHRvVWludDhBcnJheSwgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBGaWxlRW1iZWRkZXIsIHsgQUZSZWxhdGlvbnNoaXAgfSBmcm9tIFwiLi4vY29yZS9lbWJlZGRlcnMvRmlsZUVtYmVkZGVyXCI7XG5pbXBvcnQgUERGRW1iZWRkZWRGaWxlIGZyb20gXCIuL1BERkVtYmVkZGVkRmlsZVwiO1xuaW1wb3J0IFBERkphdmFTY3JpcHQgZnJvbSBcIi4vUERGSmF2YVNjcmlwdFwiO1xuaW1wb3J0IEphdmFTY3JpcHRFbWJlZGRlciBmcm9tIFwiLi4vY29yZS9lbWJlZGRlcnMvSmF2YVNjcmlwdEVtYmVkZGVyXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBQREYgZG9jdW1lbnQuXG4gKi9cbnZhciBQREZEb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZEb2N1bWVudChjb250ZXh0LCBpZ25vcmVFbmNyeXB0aW9uLCB1cGRhdGVNZXRhZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvKiogVGhlIGRlZmF1bHQgd29yZCBicmVha3MgdXNlZCBpbiBQREZQYWdlLmRyYXdUZXh0ICovXG4gICAgICAgIHRoaXMuZGVmYXVsdFdvcmRCcmVha3MgPSBbJyAnXTtcbiAgICAgICAgdGhpcy5jb21wdXRlUGFnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGFnZXMgPSBbXTtcbiAgICAgICAgICAgIF90aGlzLmNhdGFsb2cuUGFnZXMoKS50cmF2ZXJzZShmdW5jdGlvbiAobm9kZSwgcmVmKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQREZQYWdlTGVhZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZSA9IF90aGlzLnBhZ2VNYXAuZ2V0KG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UgPSBQREZQYWdlLm9mKG5vZGUsIHJlZiwgX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucGFnZU1hcC5zZXQobm9kZSwgcGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFnZXMucHVzaChwYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwYWdlcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRPckNyZWF0ZUZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYWNyb0Zvcm0gPSBfdGhpcy5jYXRhbG9nLmdldE9yQ3JlYXRlQWNyb0Zvcm0oKTtcbiAgICAgICAgICAgIHJldHVybiBQREZGb3JtLm9mKGFjcm9Gb3JtLCBfdGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIGFzc2VydElzKGNvbnRleHQsICdjb250ZXh0JywgW1tQREZDb250ZXh0LCAnUERGQ29udGV4dCddXSk7XG4gICAgICAgIGFzc2VydElzKGlnbm9yZUVuY3J5cHRpb24sICdpZ25vcmVFbmNyeXB0aW9uJywgWydib29sZWFuJ10pO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmNhdGFsb2cgPSBjb250ZXh0Lmxvb2t1cChjb250ZXh0LnRyYWlsZXJJbmZvLlJvb3QpO1xuICAgICAgICB0aGlzLmlzRW5jcnlwdGVkID0gISFjb250ZXh0Lmxvb2t1cChjb250ZXh0LnRyYWlsZXJJbmZvLkVuY3J5cHQpO1xuICAgICAgICB0aGlzLnBhZ2VDYWNoZSA9IENhY2hlLnBvcHVsYXRlZEJ5KHRoaXMuY29tcHV0ZVBhZ2VzKTtcbiAgICAgICAgdGhpcy5wYWdlTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmZvcm1DYWNoZSA9IENhY2hlLnBvcHVsYXRlZEJ5KHRoaXMuZ2V0T3JDcmVhdGVGb3JtKTtcbiAgICAgICAgdGhpcy5mb250cyA9IFtdO1xuICAgICAgICB0aGlzLmltYWdlcyA9IFtdO1xuICAgICAgICB0aGlzLmVtYmVkZGVkUGFnZXMgPSBbXTtcbiAgICAgICAgdGhpcy5lbWJlZGRlZEZpbGVzID0gW107XG4gICAgICAgIHRoaXMuamF2YVNjcmlwdHMgPSBbXTtcbiAgICAgICAgaWYgKCFpZ25vcmVFbmNyeXB0aW9uICYmIHRoaXMuaXNFbmNyeXB0ZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRW5jcnlwdGVkUERGRXJyb3IoKTtcbiAgICAgICAgaWYgKHVwZGF0ZU1ldGFkYXRhKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVJbmZvRGljdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkIGFuIGV4aXN0aW5nIFtbUERGRG9jdW1lbnRdXS4gVGhlIGlucHV0IGRhdGEgY2FuIGJlIHByb3ZpZGVkIGluXG4gICAgICogbXVsdGlwbGUgZm9ybWF0czpcbiAgICAgKlxuICAgICAqIHwgVHlwZSAgICAgICAgICB8IENvbnRlbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICAgKiB8IGBzdHJpbmdgICAgICAgfCBBIGJhc2U2NCBlbmNvZGVkIHN0cmluZyAob3IgZGF0YSBVUkkpIGNvbnRhaW5pbmcgYSBQREYgfFxuICAgICAqIHwgYFVpbnQ4QXJyYXlgICB8IFRoZSByYXcgYnl0ZXMgb2YgYSBQREYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBgQXJyYXlCdWZmZXJgIHwgVGhlIHJhdyBieXRlcyBvZiBhIFBERiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgUERGRG9jdW1lbnQgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqXG4gICAgICogLy8gcGRmPXN0cmluZ1xuICAgICAqIGNvbnN0IGJhc2U2NCA9XG4gICAgICogICdKVkJFUmkweExqY0tKWUdCZ1lFS0NqVWdNQ0J2WW1vS1BEd0tMMFpwYkhSbGNpQXZSbXhoZEdWRVpXTnZaR1VLTDB4bGJtJyArXG4gICAgICogICdkMGFDQXhNRFFLUGo0S2MzUnlaV0Z0Q25pY2N3cmhNbEFBd2FKMExuMlAxSnl5MUpMTTVFUmRjME1qQ3dVakU0V1FOQzRRJyArXG4gICAgICogICc2Y05sQ0Zaa3FHQ3FZR1NxRUpMTFpXTnVZR1ppWm1ia1l1WnNabWxtWkdSZ1ptbHVEQ1FOemMzTlRNMk56ZHpNWE14TWpRJyArXG4gICAgICogICd6dEZFS3l1RUswdUZ4RHVBQU9FUmRWQ21WdVpITjBjbVZoYlFwbGJtUnZZbW9LQ2pZZ01DQnZZbW9LUER3S0wwWnBiSFJsJyArXG4gICAgICogICdjaUF2Um14aGRHVkVaV052WkdVS0wxUjVjR1VnTDA5aWFsTjBiUW92VGlBMENpOUdhWEp6ZENBeU1Bb3ZUR1Z1WjNSb0lEJyArXG4gICAgICogICdJeE5RbytQZ3B6ZEhKbFlXMEtlSnhWajlHcXdqQU1odS96RkhrQnpUbzNuQ0NDaWlLSUhQRUlDdUpGM2NLb1NDdTJFOC9iJyArXG4gICAgICogICcyMHdQSXIxcDh2OS84a1ZoZ2lsbUdmYXdYMkNHYVZyZ2NBaTAvYnN5MGxyWDdJR1dwdko0aUpZRU4zZ0VtcnJHQmxRd0dzJyArXG4gICAgICogICdISE85VkJYMXdOcnhBcU1YODdSQkQ1eHBKdWRkcXdkODJ0akFIeHpWMVU1TFBneTUyREtYV25yMUxoZWcrai9jL3B6R1ZyJyArXG4gICAgICogICdpcVYwVmx3WlBYR1BDSmpFbHcveWJrd1VtZW9XZ3hlc0RYR2hISkMvRC9paWtwMUF2ODBwdEtVMEZkQkVlMjVwUGloQU0xJyArXG4gICAgICogICd1Nnl0Z2FhV2ZzMkhyejM1Q0pUMStFV21BS1pXNWtjM1J5WldGdENtVnVaRzlpYWdvS055QXdJRzlpYWdvOFBBb3ZVMmw2JyArXG4gICAgICogICdaU0E0Q2k5U2IyOTBJRElnTUNCU0NpOUdhV3gwWlhJZ0wwWnNZWFJsUkdWamIyUmxDaTlVZVhCbElDOVlVbVZtQ2k5TVpXJyArXG4gICAgICogICc1bmRHZ2dNemdLTDFjZ1d5QXhJRElnTWlCZENpOUpibVJsZUNCYklEQWdPQ0JkQ2o0K0NuTjBjbVZoYlFwNG5CWEV3UkVBJyArXG4gICAgICogICdFQkFFc0N3ejN2cnZSbU9PeXlPb0doWmR1dEhOMk1UNTVmSUFWb2NEK0FwbGJtUnpkSEpsWVcwS1pXNWtiMkpxQ2dwemRHJyArXG4gICAgICogICdGeWRIaHlaV1lLTlRFd0NpVWxSVTlHJ1xuICAgICAqXG4gICAgICogY29uc3QgZGF0YVVyaSA9ICdkYXRhOmFwcGxpY2F0aW9uL3BkZjtiYXNlNjQsJyArIGJhc2U2NFxuICAgICAqXG4gICAgICogY29uc3QgcGRmRG9jMSA9IGF3YWl0IFBERkRvY3VtZW50LmxvYWQoYmFzZTY0KVxuICAgICAqIGNvbnN0IHBkZkRvYzIgPSBhd2FpdCBQREZEb2N1bWVudC5sb2FkKGRhdGFVcmkpXG4gICAgICpcbiAgICAgKiAvLyBwZGY9VWludDhBcnJheVxuICAgICAqIGltcG9ydCBmcyBmcm9tICdmcydcbiAgICAgKiBjb25zdCB1aW50OEFycmF5ID0gZnMucmVhZEZpbGVTeW5jKCd3aXRoX3VwZGF0ZV9zZWN0aW9ucy5wZGYnKVxuICAgICAqIGNvbnN0IHBkZkRvYzMgPSBhd2FpdCBQREZEb2N1bWVudC5sb2FkKHVpbnQ4QXJyYXkpXG4gICAgICpcbiAgICAgKiAvLyBwZGY9QXJyYXlCdWZmZXJcbiAgICAgKiBjb25zdCB1cmwgPSAnaHR0cHM6Ly9wZGYtbGliLmpzLm9yZy9hc3NldHMvd2l0aF91cGRhdGVfc2VjdGlvbnMucGRmJ1xuICAgICAqIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKHJlcyA9PiByZXMuYXJyYXlCdWZmZXIoKSlcbiAgICAgKiBjb25zdCBwZGZEb2M0ID0gYXdhaXQgUERGRG9jdW1lbnQubG9hZChhcnJheUJ1ZmZlcilcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHBkZiBUaGUgaW5wdXQgZGF0YSBjb250YWluaW5nIGEgUERGIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBsb2FkaW5nIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIGEgZG9jdW1lbnQgbG9hZGVkIGZyb20gdGhlIGlucHV0LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LmxvYWQgPSBmdW5jdGlvbiAocGRmLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgaWdub3JlRW5jcnlwdGlvbiwgX2IsIHBhcnNlU3BlZWQsIF9jLCB0aHJvd09uSW52YWxpZE9iamVjdCwgX2QsIHVwZGF0ZU1ldGFkYXRhLCBfZSwgY2FwTnVtYmVycywgYnl0ZXMsIGNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9mKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IG9wdGlvbnMuaWdub3JlRW5jcnlwdGlvbiwgaWdub3JlRW5jcnlwdGlvbiA9IF9hID09PSB2b2lkIDAgPyBmYWxzZSA6IF9hLCBfYiA9IG9wdGlvbnMucGFyc2VTcGVlZCwgcGFyc2VTcGVlZCA9IF9iID09PSB2b2lkIDAgPyBQYXJzZVNwZWVkcy5TbG93IDogX2IsIF9jID0gb3B0aW9ucy50aHJvd09uSW52YWxpZE9iamVjdCwgdGhyb3dPbkludmFsaWRPYmplY3QgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBvcHRpb25zLnVwZGF0ZU1ldGFkYXRhLCB1cGRhdGVNZXRhZGF0YSA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2QsIF9lID0gb3B0aW9ucy5jYXBOdW1iZXJzLCBjYXBOdW1iZXJzID0gX2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhwZGYsICdwZGYnLCBbJ3N0cmluZycsIFVpbnQ4QXJyYXksIEFycmF5QnVmZmVyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhpZ25vcmVFbmNyeXB0aW9uLCAnaWdub3JlRW5jcnlwdGlvbicsIFsnYm9vbGVhbiddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydElzKHBhcnNlU3BlZWQsICdwYXJzZVNwZWVkJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyh0aHJvd09uSW52YWxpZE9iamVjdCwgJ3Rocm93T25JbnZhbGlkT2JqZWN0JywgWydib29sZWFuJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgPSB0b1VpbnQ4QXJyYXkocGRmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFBERlBhcnNlci5mb3JCeXRlc1dpdGhPcHRpb25zKGJ5dGVzLCBwYXJzZVNwZWVkLCB0aHJvd09uSW52YWxpZE9iamVjdCwgY2FwTnVtYmVycykucGFyc2VEb2N1bWVudCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IF9mLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUERGRG9jdW1lbnQoY29udGV4dCwgaWdub3JlRW5jcnlwdGlvbiwgdXBkYXRlTWV0YWRhdGEpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgW1tQREZEb2N1bWVudF1dLlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdpdGggdGhlIG5ld2x5IGNyZWF0ZWQgZG9jdW1lbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCB1cGRhdGVNZXRhZGF0YSwgY29udGV4dCwgcGFnZVRyZWUsIHBhZ2VUcmVlUmVmLCBjYXRhbG9nO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIF9hID0gb3B0aW9ucy51cGRhdGVNZXRhZGF0YSwgdXBkYXRlTWV0YWRhdGEgPSBfYSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hO1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBQREZDb250ZXh0LmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIHBhZ2VUcmVlID0gUERGUGFnZVRyZWUud2l0aENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgcGFnZVRyZWVSZWYgPSBjb250ZXh0LnJlZ2lzdGVyKHBhZ2VUcmVlKTtcbiAgICAgICAgICAgICAgICBjYXRhbG9nID0gUERGQ2F0YWxvZy53aXRoQ29udGV4dEFuZFBhZ2VzKGNvbnRleHQsIHBhZ2VUcmVlUmVmKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYWlsZXJJbmZvLlJvb3QgPSBjb250ZXh0LnJlZ2lzdGVyKGNhdGFsb2cpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUERGRG9jdW1lbnQoY29udGV4dCwgZmFsc2UsIHVwZGF0ZU1ldGFkYXRhKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGZvbnRraXQgaW5zdGFuY2UuIFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBjdXN0b20gZm9udHMgY2FuXG4gICAgICogYmUgZW1iZWRkZWQuIFNlZSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL0hvcGRpbmcvcGRmLWxpYi90cmVlL21hc3RlciNmb250a2l0LWluc3RhbGxhdGlvbilcbiAgICAgKiBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBpbnN0YWxsIGFuZCByZWdpc3RlciBhIGZvbnRraXQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiA+IFlvdSBkbyAqKm5vdCoqIG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCB0byBlbWJlZCBzdGFuZGFyZCBmb250cy5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgUERGRG9jdW1lbnQgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqIGltcG9ydCBmb250a2l0IGZyb20gJ0BwZGYtbGliL2ZvbnRraXQnXG4gICAgICpcbiAgICAgKiBjb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqIHBkZkRvYy5yZWdpc3RlckZvbnRraXQoZm9udGtpdClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb250a2l0IFRoZSBmb250a2l0IGluc3RhbmNlIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLnJlZ2lzdGVyRm9udGtpdCA9IGZ1bmN0aW9uIChmb250a2l0KSB7XG4gICAgICAgIHRoaXMuZm9udGtpdCA9IGZvbnRraXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFtbUERGRm9ybV1dIGNvbnRhaW5pbmcgYWxsIGludGVyYWN0aXZlIGZpZWxkcyBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgZmllbGRzID0gZm9ybS5nZXRGaWVsZHMoKVxuICAgICAqIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgKiAgIGNvbnN0IHR5cGUgPSBmaWVsZC5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICogICBjb25zdCBuYW1lID0gZmllbGQuZ2V0TmFtZSgpXG4gICAgICogICBjb25zb2xlLmxvZyhgJHt0eXBlfTogJHtuYW1lfWApXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgZm9ybSBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZvcm0gPSB0aGlzLmZvcm1DYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgaWYgKGZvcm0uaGFzWEZBKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignUmVtb3ZpbmcgWEZBIGZvcm0gZGF0YSBhcyBwZGYtbGliIGRvZXMgbm90IHN1cHBvcnQgcmVhZGluZyBvciB3cml0aW5nIFhGQScpO1xuICAgICAgICAgICAgZm9ybS5kZWxldGVYRkEoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGRvY3VtZW50J3MgdGl0bGUgbWV0YWRhdGEuIFRoZSB0aXRsZSBhcHBlYXJzIGluIHRoZVxuICAgICAqIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0aXRsZSA9IHBkZkRvYy5nZXRUaXRsZSgpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgdGl0bGUgb2YgdGhpcyBkb2N1bWVudCwgaWYgaXQgaGFzIG9uZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0SW5mb0RpY3QoKS5sb29rdXAoUERGTmFtZS5UaXRsZSk7XG4gICAgICAgIGlmICghdGl0bGUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBhc3NlcnRJc0xpdGVyYWxPckhleFN0cmluZyh0aXRsZSk7XG4gICAgICAgIHJldHVybiB0aXRsZS5kZWNvZGVUZXh0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBkb2N1bWVudCdzIGF1dGhvciBtZXRhZGF0YS4gVGhlIGF1dGhvciBhcHBlYXJzIGluIHRoZVxuICAgICAqIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBhdXRob3IgPSBwZGZEb2MuZ2V0QXV0aG9yKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyBjb250YWluaW5nIHRoZSBhdXRob3Igb2YgdGhpcyBkb2N1bWVudCwgaWYgaXQgaGFzIG9uZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0QXV0aG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXV0aG9yID0gdGhpcy5nZXRJbmZvRGljdCgpLmxvb2t1cChQREZOYW1lLkF1dGhvcik7XG4gICAgICAgIGlmICghYXV0aG9yKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgYXNzZXJ0SXNMaXRlcmFsT3JIZXhTdHJpbmcoYXV0aG9yKTtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5kZWNvZGVUZXh0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBkb2N1bWVudCdzIHN1YmplY3QgbWV0YWRhdGEuIFRoZSBzdWJqZWN0IGFwcGVhcnMgaW4gdGhlXG4gICAgICogXCJEb2N1bWVudCBQcm9wZXJ0aWVzXCIgc2VjdGlvbiBvZiBtb3N0IFBERiByZWFkZXJzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHN1YmplY3QgPSBwZGZEb2MuZ2V0U3ViamVjdCgpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc3ViamVjdCBvZiB0aGlzIGRvY3VtZW50LCBpZiBpdCBoYXMgb25lLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRTdWJqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuZ2V0SW5mb0RpY3QoKS5sb29rdXAoUERGTmFtZS5TdWJqZWN0KTtcbiAgICAgICAgaWYgKCFzdWJqZWN0KVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgYXNzZXJ0SXNMaXRlcmFsT3JIZXhTdHJpbmcoc3ViamVjdCk7XG4gICAgICAgIHJldHVybiBzdWJqZWN0LmRlY29kZVRleHQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGRvY3VtZW50J3Mga2V5d29yZHMgbWV0YWRhdGEuIFRoZSBrZXl3b3JkcyBhcHBlYXIgaW4gdGhlXG4gICAgICogXCJEb2N1bWVudCBQcm9wZXJ0aWVzXCIgc2VjdGlvbiBvZiBtb3N0IFBERiByZWFkZXJzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGtleXdvcmRzID0gcGRmRG9jLmdldEtleXdvcmRzKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyBjb250YWluaW5nIHRoZSBrZXl3b3JkcyBvZiB0aGlzIGRvY3VtZW50LCBpZiBpdCBoYXMgYW55LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRLZXl3b3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleXdvcmRzID0gdGhpcy5nZXRJbmZvRGljdCgpLmxvb2t1cChQREZOYW1lLktleXdvcmRzKTtcbiAgICAgICAgaWYgKCFrZXl3b3JkcylcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2VydElzTGl0ZXJhbE9ySGV4U3RyaW5nKGtleXdvcmRzKTtcbiAgICAgICAgcmV0dXJuIGtleXdvcmRzLmRlY29kZVRleHQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGRvY3VtZW50J3MgY3JlYXRvciBtZXRhZGF0YS4gVGhlIGNyZWF0b3IgYXBwZWFycyBpbiB0aGVcbiAgICAgKiBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIG1vc3QgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY3JlYXRvciA9IHBkZkRvYy5nZXRDcmVhdG9yKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyBjb250YWluaW5nIHRoZSBjcmVhdG9yIG9mIHRoaXMgZG9jdW1lbnQsIGlmIGl0IGhhcyBvbmUuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmdldENyZWF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjcmVhdG9yID0gdGhpcy5nZXRJbmZvRGljdCgpLmxvb2t1cChQREZOYW1lLkNyZWF0b3IpO1xuICAgICAgICBpZiAoIWNyZWF0b3IpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBhc3NlcnRJc0xpdGVyYWxPckhleFN0cmluZyhjcmVhdG9yKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0b3IuZGVjb2RlVGV4dCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoaXMgZG9jdW1lbnQncyBwcm9kdWNlciBtZXRhZGF0YS4gVGhlIHByb2R1Y2VyIGFwcGVhcnMgaW4gdGhlXG4gICAgICogXCJEb2N1bWVudCBQcm9wZXJ0aWVzXCIgc2VjdGlvbiBvZiBtb3N0IFBERiByZWFkZXJzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHByb2R1Y2VyID0gcGRmRG9jLmdldFByb2R1Y2VyKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyBjb250YWluaW5nIHRoZSBwcm9kdWNlciBvZiB0aGlzIGRvY3VtZW50LCBpZiBpdCBoYXMgb25lLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRQcm9kdWNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb2R1Y2VyID0gdGhpcy5nZXRJbmZvRGljdCgpLmxvb2t1cChQREZOYW1lLlByb2R1Y2VyKTtcbiAgICAgICAgaWYgKCFwcm9kdWNlcilcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2VydElzTGl0ZXJhbE9ySGV4U3RyaW5nKHByb2R1Y2VyKTtcbiAgICAgICAgcmV0dXJuIHByb2R1Y2VyLmRlY29kZVRleHQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGRvY3VtZW50J3MgY3JlYXRpb24gZGF0ZSBtZXRhZGF0YS4gVGhlIGNyZWF0aW9uIGRhdGUgYXBwZWFycyBpblxuICAgICAqIHRoZSBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIG1vc3QgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY3JlYXRpb25EYXRlID0gcGRmRG9jLmdldENyZWF0aW9uRGF0ZSgpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgQSBEYXRlIGNvbnRhaW5pbmcgdGhlIGNyZWF0aW9uIGRhdGUgb2YgdGhpcyBkb2N1bWVudCxcbiAgICAgKiAgICAgICAgICBpZiBpdCBoYXMgb25lLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRDcmVhdGlvbkRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjcmVhdGlvbkRhdGUgPSB0aGlzLmdldEluZm9EaWN0KCkubG9va3VwKFBERk5hbWUuQ3JlYXRpb25EYXRlKTtcbiAgICAgICAgaWYgKCFjcmVhdGlvbkRhdGUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBhc3NlcnRJc0xpdGVyYWxPckhleFN0cmluZyhjcmVhdGlvbkRhdGUpO1xuICAgICAgICByZXR1cm4gY3JlYXRpb25EYXRlLmRlY29kZURhdGUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGRvY3VtZW50J3MgbW9kaWZpY2F0aW9uIGRhdGUgbWV0YWRhdGEuIFRoZSBtb2RpZmljYXRpb24gZGF0ZVxuICAgICAqIGFwcGVhcnMgaW4gdGhlIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IG1vZGlmaWNhdGlvbiA9IHBkZkRvYy5nZXRNb2RpZmljYXRpb25EYXRlKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIERhdGUgY29udGFpbmluZyB0aGUgbW9kaWZpY2F0aW9uIGRhdGUgb2YgdGhpcyBkb2N1bWVudCxcbiAgICAgKiAgICAgICAgICBpZiBpdCBoYXMgb25lLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRNb2RpZmljYXRpb25EYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbW9kaWZpY2F0aW9uRGF0ZSA9IHRoaXMuZ2V0SW5mb0RpY3QoKS5sb29rdXAoUERGTmFtZS5Nb2REYXRlKTtcbiAgICAgICAgaWYgKCFtb2RpZmljYXRpb25EYXRlKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgYXNzZXJ0SXNMaXRlcmFsT3JIZXhTdHJpbmcobW9kaWZpY2F0aW9uRGF0ZSk7XG4gICAgICAgIHJldHVybiBtb2RpZmljYXRpb25EYXRlLmRlY29kZURhdGUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGRvY3VtZW50J3MgdGl0bGUgbWV0YWRhdGEuIFRoZSB0aXRsZSB3aWxsIGFwcGVhciBpbiB0aGVcbiAgICAgKiBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIG1vc3QgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldFRpdGxlKCfwn6WaIFRoZSBMaWZlIG9mIGFuIEVnZyDwn42zJylcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRvIGRpc3BsYXkgdGhlIHRpdGxlIGluIHRoZSB3aW5kb3cncyB0aXRsZSBiYXIsIHNldCB0aGVcbiAgICAgKiBgc2hvd0luV2luZG93VGl0bGVCYXJgIG9wdGlvbiB0byBgdHJ1ZWAgKHdvcmtzIGZvciBfbW9zdF8gUERGIHJlYWRlcnMpLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldFRpdGxlKCfwn6WaIFRoZSBMaWZlIG9mIGFuIEVnZyDwn42zJywgeyBzaG93SW5XaW5kb3dUaXRsZUJhcjogdHJ1ZSB9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGlzIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBzZXR0aW5nIHRoZSB0aXRsZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbiAodGl0bGUsIG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0SXModGl0bGUsICd0aXRsZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIga2V5ID0gUERGTmFtZS5vZignVGl0bGUnKTtcbiAgICAgICAgdGhpcy5nZXRJbmZvRGljdCgpLnNldChrZXksIFBERkhleFN0cmluZy5mcm9tVGV4dCh0aXRsZSkpO1xuICAgICAgICAvLyBJbmRpY2F0ZSB0aGF0IHJlYWRlcnMgc2hvdWxkIGRpc3BsYXkgdGhlIHRpdGxlIHJhdGhlciB0aGFuIHRoZSBmaWxlbmFtZVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNob3dJbldpbmRvd1RpdGxlQmFyKSB7XG4gICAgICAgICAgICB2YXIgcHJlZnMgPSB0aGlzLmNhdGFsb2cuZ2V0T3JDcmVhdGVWaWV3ZXJQcmVmZXJlbmNlcygpO1xuICAgICAgICAgICAgcHJlZnMuc2V0RGlzcGxheURvY1RpdGxlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyBkb2N1bWVudCdzIGF1dGhvciBtZXRhZGF0YS4gVGhlIGF1dGhvciB3aWxsIGFwcGVhciBpbiB0aGVcbiAgICAgKiBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIG1vc3QgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldEF1dGhvcignSHVtcHR5IER1bXB0eScpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGF1dGhvciBUaGUgYXV0aG9yIG9mIHRoaXMgZG9jdW1lbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLnNldEF1dGhvciA9IGZ1bmN0aW9uIChhdXRob3IpIHtcbiAgICAgICAgYXNzZXJ0SXMoYXV0aG9yLCAnYXV0aG9yJywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBrZXkgPSBQREZOYW1lLm9mKCdBdXRob3InKTtcbiAgICAgICAgdGhpcy5nZXRJbmZvRGljdCgpLnNldChrZXksIFBERkhleFN0cmluZy5mcm9tVGV4dChhdXRob3IpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGRvY3VtZW50J3Mgc3ViamVjdCBtZXRhZGF0YS4gVGhlIHN1YmplY3Qgd2lsbCBhcHBlYXIgaW4gdGhlXG4gICAgICogXCJEb2N1bWVudCBQcm9wZXJ0aWVzXCIgc2VjdGlvbiBvZiBtb3N0IFBERiByZWFkZXJzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHBkZkRvYy5zZXRTdWJqZWN0KCfwn5OYIEFuIEVwaWMgVGFsZSBvZiBXb2Ug8J+TlicpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHN1YmplY3QgVGhlIHN1YmplY3Qgb2YgdGhpcyBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuc2V0U3ViamVjdCA9IGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgICAgIGFzc2VydElzKHN1YmplY3QsICdhdXRob3InLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGtleSA9IFBERk5hbWUub2YoJ1N1YmplY3QnKTtcbiAgICAgICAgdGhpcy5nZXRJbmZvRGljdCgpLnNldChrZXksIFBERkhleFN0cmluZy5mcm9tVGV4dChzdWJqZWN0KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyBkb2N1bWVudCdzIGtleXdvcmQgbWV0YWRhdGEuIFRoZXNlIGtleXdvcmRzIHdpbGwgYXBwZWFyIGluIHRoZVxuICAgICAqIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwZGZEb2Muc2V0S2V5d29yZHMoWydlZ2dzJywgJ3dhbGwnLCAnZmFsbCcsICdraW5nJywgJ2hvcnNlcycsICdtZW4nXSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0ga2V5d29yZHMgQW4gYXJyYXkgb2Yga2V5d29yZHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZG9jdW1lbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLnNldEtleXdvcmRzID0gZnVuY3Rpb24gKGtleXdvcmRzKSB7XG4gICAgICAgIGFzc2VydElzKGtleXdvcmRzLCAna2V5d29yZHMnLCBbQXJyYXldKTtcbiAgICAgICAgdmFyIGtleSA9IFBERk5hbWUub2YoJ0tleXdvcmRzJyk7XG4gICAgICAgIHRoaXMuZ2V0SW5mb0RpY3QoKS5zZXQoa2V5LCBQREZIZXhTdHJpbmcuZnJvbVRleHQoa2V5d29yZHMuam9pbignICcpKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyBkb2N1bWVudCdzIGNyZWF0b3IgbWV0YWRhdGEuIFRoZSBjcmVhdG9yIHdpbGwgYXBwZWFyIGluIHRoZVxuICAgICAqIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwZGZEb2Muc2V0Q3JlYXRvcignUERGIEFwcCA5MDAwIPCfpJYnKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBjcmVhdG9yIFRoZSBjcmVhdG9yIG9mIHRoaXMgZG9jdW1lbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLnNldENyZWF0b3IgPSBmdW5jdGlvbiAoY3JlYXRvcikge1xuICAgICAgICBhc3NlcnRJcyhjcmVhdG9yLCAnY3JlYXRvcicsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIga2V5ID0gUERGTmFtZS5vZignQ3JlYXRvcicpO1xuICAgICAgICB0aGlzLmdldEluZm9EaWN0KCkuc2V0KGtleSwgUERGSGV4U3RyaW5nLmZyb21UZXh0KGNyZWF0b3IpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGRvY3VtZW50J3MgcHJvZHVjZXIgbWV0YWRhdGEuIFRoZSBwcm9kdWNlciB3aWxsIGFwcGVhciBpbiB0aGVcbiAgICAgKiBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIG1vc3QgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldFByb2R1Y2VyKCdQREYgQXBwIDkwMDAg8J+klicpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHByb2R1Y2VyIFRoZSBwcm9kdWNlciBvZiB0aGlzIGRvY3VtZW50LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5zZXRQcm9kdWNlciA9IGZ1bmN0aW9uIChwcm9kdWNlcikge1xuICAgICAgICBhc3NlcnRJcyhwcm9kdWNlciwgJ2NyZWF0b3InLCBbJ3N0cmluZyddKTtcbiAgICAgICAgdmFyIGtleSA9IFBERk5hbWUub2YoJ1Byb2R1Y2VyJyk7XG4gICAgICAgIHRoaXMuZ2V0SW5mb0RpY3QoKS5zZXQoa2V5LCBQREZIZXhTdHJpbmcuZnJvbVRleHQocHJvZHVjZXIpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGRvY3VtZW50J3MgbGFuZ3VhZ2UgbWV0YWRhdGEuIFRoZSBsYW5ndWFnZSB3aWxsIGFwcGVhciBpbiB0aGVcbiAgICAgKiBcIkRvY3VtZW50IFByb3BlcnRpZXNcIiBzZWN0aW9uIG9mIHNvbWUgUERGIHJlYWRlcnMuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldExhbmd1YWdlKCdlbi11cycpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgQW4gUkZDIDMwNjYgX0xhbmd1YWdlLVRhZ18gZGVub3RpbmcgdGhlIGxhbmd1YWdlIG9mIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgZG9jdW1lbnQsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgbGFuZ3VhZ2UgaXMgdW5rbm93bi5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuc2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcbiAgICAgICAgYXNzZXJ0SXMobGFuZ3VhZ2UsICdsYW5ndWFnZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICB2YXIga2V5ID0gUERGTmFtZS5vZignTGFuZycpO1xuICAgICAgICB0aGlzLmNhdGFsb2cuc2V0KGtleSwgUERGU3RyaW5nLm9mKGxhbmd1YWdlKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyBkb2N1bWVudCdzIGNyZWF0aW9uIGRhdGUgbWV0YWRhdGEuIFRoZSBjcmVhdGlvbiBkYXRlIHdpbGwgYXBwZWFyXG4gICAgICogaW4gdGhlIFwiRG9jdW1lbnQgUHJvcGVydGllc1wiIHNlY3Rpb24gb2YgbW9zdCBQREYgcmVhZGVycy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwZGZEb2Muc2V0Q3JlYXRpb25EYXRlKG5ldyBEYXRlKCkpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNyZWF0aW9uRGF0ZSBUaGUgZGF0ZSB0aGlzIGRvY3VtZW50IHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5zZXRDcmVhdGlvbkRhdGUgPSBmdW5jdGlvbiAoY3JlYXRpb25EYXRlKSB7XG4gICAgICAgIGFzc2VydElzKGNyZWF0aW9uRGF0ZSwgJ2NyZWF0aW9uRGF0ZScsIFtbRGF0ZSwgJ0RhdGUnXV0pO1xuICAgICAgICB2YXIga2V5ID0gUERGTmFtZS5vZignQ3JlYXRpb25EYXRlJyk7XG4gICAgICAgIHRoaXMuZ2V0SW5mb0RpY3QoKS5zZXQoa2V5LCBQREZTdHJpbmcuZnJvbURhdGUoY3JlYXRpb25EYXRlKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyBkb2N1bWVudCdzIG1vZGlmaWNhdGlvbiBkYXRlIG1ldGFkYXRhLiBUaGUgbW9kaWZpY2F0aW9uIGRhdGUgd2lsbFxuICAgICAqIGFwcGVhciBpbiB0aGUgXCJEb2N1bWVudCBQcm9wZXJ0aWVzXCIgc2VjdGlvbiBvZiBtb3N0IFBERiByZWFkZXJzLiBGb3JcbiAgICAgKiBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLnNldE1vZGlmaWNhdGlvbkRhdGUobmV3IERhdGUoKSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbW9kaWZpY2F0aW9uRGF0ZSBUaGUgZGF0ZSB0aGlzIGRvY3VtZW50IHdhcyBsYXN0IG1vZGlmaWVkLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5zZXRNb2RpZmljYXRpb25EYXRlID0gZnVuY3Rpb24gKG1vZGlmaWNhdGlvbkRhdGUpIHtcbiAgICAgICAgYXNzZXJ0SXMobW9kaWZpY2F0aW9uRGF0ZSwgJ21vZGlmaWNhdGlvbkRhdGUnLCBbW0RhdGUsICdEYXRlJ11dKTtcbiAgICAgICAgdmFyIGtleSA9IFBERk5hbWUub2YoJ01vZERhdGUnKTtcbiAgICAgICAgdGhpcy5nZXRJbmZvRGljdCgpLnNldChrZXksIFBERlN0cmluZy5mcm9tRGF0ZShtb2RpZmljYXRpb25EYXRlKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiBwYWdlcyBjb250YWluZWQgaW4gdGhpcyBkb2N1bWVudC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB0b3RhbFBhZ2VzID0gcGRmRG9jLmdldFBhZ2VDb3VudCgpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBwYWdlcyBpbiB0aGlzIGRvY3VtZW50LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRQYWdlQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VDb3VudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5wYWdlQ291bnQgPSB0aGlzLmdldFBhZ2VzKCkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlQ291bnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgYWxsIHRoZSBwYWdlcyBjb250YWluZWQgaW4gdGhpcyBkb2N1bWVudC4gVGhlIHBhZ2VzIGFyZVxuICAgICAqIHN0b3JlZCBpbiB0aGUgYXJyYXkgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSByZW5kZXJlZCBpbiB0aGVcbiAgICAgKiBkb2N1bWVudC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBwYWdlcyA9IHBkZkRvYy5nZXRQYWdlcygpXG4gICAgICogcGFnZXNbMF0gICAvLyBUaGUgZmlyc3QgcGFnZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBwYWdlc1syXSAgIC8vIFRoZSB0aGlyZCBwYWdlIG9mIHRoZSBkb2N1bWVudFxuICAgICAqIHBhZ2VzWzE5N10gLy8gVGhlIDE5OHRoIHBhZ2Ugb2YgdGhlIGRvY3VtZW50XG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgYWxsIHRoZSBwYWdlcyBjb250YWluZWQgaW4gdGhpcyBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0UGFnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VDYWNoZS5hY2Nlc3MoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGFnZSByZW5kZXJlZCBhdCBhIHBhcnRpY3VsYXIgYGluZGV4YCBvZiB0aGUgZG9jdW1lbnQuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGRmRG9jLmdldFBhZ2UoMCkgICAvLyBUaGUgZmlyc3QgcGFnZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBwZGZEb2MuZ2V0UGFnZSgyKSAgIC8vIFRoZSB0aGlyZCBwYWdlIG9mIHRoZSBkb2N1bWVudFxuICAgICAqIHBkZkRvYy5nZXRQYWdlKDE5NykgLy8gVGhlIDE5OHRoIHBhZ2Ugb2YgdGhlIGRvY3VtZW50XG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgVGhlIFtbUERGUGFnZV1dIHJlbmRlcmVkIGF0IHRoZSBnaXZlbiBgaW5kZXhgIG9mIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0UGFnZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgcGFnZXMgPSB0aGlzLmdldFBhZ2VzKCk7XG4gICAgICAgIGFzc2VydFJhbmdlKGluZGV4LCAnaW5kZXgnLCAwLCBwYWdlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIHBhZ2VzW2luZGV4XTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbiBhcnJheSBvZiBpbmRpY2VzIGZvciBhbGwgdGhlIHBhZ2VzIGNvbnRhaW5lZCBpbiB0aGlzIGRvY3VtZW50LiBUaGVcbiAgICAgKiBhcnJheSB3aWxsIGNvbnRhaW4gYSByYW5nZSBvZiBpbnRlZ2VycyBmcm9tXG4gICAgICogYDAuLnBkZkRvYy5nZXRQYWdlQ291bnQoKSAtIDFgLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmNyZWF0ZSgpXG4gICAgICogcGRmRG9jLmFkZFBhZ2UoKVxuICAgICAqIHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKiBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBjb25zdCBpbmRpY2VzID0gcGRmRG9jLmdldFBhZ2VJbmRpY2VzKClcbiAgICAgKiBpbmRpY2VzIC8vID0+IFswLCAxLCAyXVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGluZGljZXMgZm9yIGFsbCBwYWdlcyBjb250YWluZWQgaW4gdGhpcyBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZ2V0UGFnZUluZGljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByYW5nZSgwLCB0aGlzLmdldFBhZ2VDb3VudCgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgcGFnZSBhdCBhIGdpdmVuIGluZGV4IGZyb20gdGhpcyBkb2N1bWVudC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwZGZEb2MucmVtb3ZlUGFnZSgwKSAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgcGFnZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBwZGZEb2MucmVtb3ZlUGFnZSgyKSAgIC8vIFJlbW92ZSB0aGUgdGhpcmQgcGFnZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBwZGZEb2MucmVtb3ZlUGFnZSgxOTcpIC8vIFJlbW92ZSB0aGUgMTk4dGggcGFnZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBgYGBcbiAgICAgKiBPbmNlIGEgcGFnZSBoYXMgYmVlbiByZW1vdmVkLCBpdCB3aWxsIG5vIGxvbmdlciBiZSByZW5kZXJlZCBhdCB0aGF0IGluZGV4XG4gICAgICogaW4gdGhlIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHBhZ2UgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUucmVtb3ZlUGFnZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgcGFnZUNvdW50ID0gdGhpcy5nZXRQYWdlQ291bnQoKTtcbiAgICAgICAgaWYgKHRoaXMucGFnZUNvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW92ZVBhZ2VGcm9tRW1wdHlEb2N1bWVudEVycm9yKCk7XG4gICAgICAgIGFzc2VydFJhbmdlKGluZGV4LCAnaW5kZXgnLCAwLCBwYWdlQ291bnQgLSAxKTtcbiAgICAgICAgdGhpcy5jYXRhbG9nLnJlbW92ZUxlYWZOb2RlKGluZGV4KTtcbiAgICAgICAgdGhpcy5wYWdlQ291bnQgPSBwYWdlQ291bnQgLSAxO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGEgcGFnZSB0byB0aGUgZW5kIG9mIHRoaXMgZG9jdW1lbnQuIFRoaXMgbWV0aG9kIGFjY2VwdHMgdGhyZWVcbiAgICAgKiBkaWZmZXJlbnQgdmFsdWUgdHlwZXMgZm9yIHRoZSBgcGFnZWAgcGFyYW1ldGVyOlxuICAgICAqXG4gICAgICogfCBUeXBlICAgICAgICAgICAgICAgfCBCZWhhdmlvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCAtLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gICAgICogfCBgdW5kZWZpbmVkYCAgICAgICAgfCBDcmVhdGUgYSBuZXcgcGFnZSBhbmQgYWRkIGl0IHRvIHRoZSBlbmQgb2YgdGhpcyBkb2N1bWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBgW251bWJlciwgbnVtYmVyXWAgfCBDcmVhdGUgYSBuZXcgcGFnZSB3aXRoIHRoZSBnaXZlbiBkaW1lbnNpb25zIGFuZCBhZGQgaXQgdG8gdGhlIGVuZCBvZiB0aGlzIGRvY3VtZW50ICB8XG4gICAgICogfCBgUERGUGFnZWAgICAgICAgICAgfCBBZGQgdGhlIGV4aXN0aW5nIHBhZ2UgdG8gdGhlIGVuZCBvZiB0aGlzIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIHBhZ2U9dW5kZWZpbmVkXG4gICAgICogY29uc3QgbmV3UGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIC8vIHBhZ2U9W251bWJlciwgbnVtYmVyXVxuICAgICAqIGltcG9ydCB7IFBhZ2VTaXplcyB9IGZyb20gJ3BkZi1saWInXG4gICAgICogY29uc3QgbmV3UGFnZTEgPSBwZGZEb2MuYWRkUGFnZShQYWdlU2l6ZXMuQTcpXG4gICAgICogY29uc3QgbmV3UGFnZTIgPSBwZGZEb2MuYWRkUGFnZShQYWdlU2l6ZXMuTGV0dGVyKVxuICAgICAqIGNvbnN0IG5ld1BhZ2UzID0gcGRmRG9jLmFkZFBhZ2UoWzUwMCwgNzUwXSlcbiAgICAgKlxuICAgICAqIC8vIHBhZ2U9UERGUGFnZVxuICAgICAqIGNvbnN0IHBkZkRvYzEgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqIGNvbnN0IHBkZkRvYzIgPSBhd2FpdCBQREZEb2N1bWVudC5sb2FkKC4uLilcbiAgICAgKiBjb25zdCBbZXhpc3RpbmdQYWdlXSA9IGF3YWl0IHBkZkRvYzEuY29weVBhZ2VzKHBkZkRvYzIsIFswXSlcbiAgICAgKiBwZGZEb2MxLmFkZFBhZ2UoZXhpc3RpbmdQYWdlKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhZ2UgT3B0aW9uYWxseSwgdGhlIGRlc2lyZWQgZGltZW5zaW9ucyBvciBleGlzdGluZyBwYWdlLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIChvciBleGlzdGluZykgcGFnZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuYWRkUGFnZSA9IGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgIGFzc2VydElzKHBhZ2UsICdwYWdlJywgWyd1bmRlZmluZWQnLCBbUERGUGFnZSwgJ1BERlBhZ2UnXSwgQXJyYXldKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0UGFnZSh0aGlzLmdldFBhZ2VDb3VudCgpLCBwYWdlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluc2VydCBhIHBhZ2UgYXQgYSBnaXZlbiBpbmRleCB3aXRoaW4gdGhpcyBkb2N1bWVudC4gVGhpcyBtZXRob2QgYWNjZXB0c1xuICAgICAqIHRocmVlIGRpZmZlcmVudCB2YWx1ZSB0eXBlcyBmb3IgdGhlIGBwYWdlYCBwYXJhbWV0ZXI6XG4gICAgICpcbiAgICAgKiB8IFR5cGUgICAgICAgICAgICAgICB8IEJlaGF2aW9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCAtLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxuICAgICAqIHwgYHVuZGVmaW5lZGAgICAgICAgIHwgQ3JlYXRlIGEgbmV3IHBhZ2UgYW5kIGluc2VydCBpdCBpbnRvIHRoaXMgZG9jdW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IGBbbnVtYmVyLCBudW1iZXJdYCB8IENyZWF0ZSBhIG5ldyBwYWdlIHdpdGggdGhlIGdpdmVuIGRpbWVuc2lvbnMgYW5kIGluc2VydCBpdCBpbnRvIHRoaXMgZG9jdW1lbnQgICB8XG4gICAgICogfCBgUERGUGFnZWAgICAgICAgICAgfCBJbnNlcnQgdGhlIGV4aXN0aW5nIHBhZ2UgaW50byB0aGlzIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiAvLyBwYWdlPXVuZGVmaW5lZFxuICAgICAqIGNvbnN0IG5ld1BhZ2UgPSBwZGZEb2MuaW5zZXJ0UGFnZSgyKVxuICAgICAqXG4gICAgICogLy8gcGFnZT1bbnVtYmVyLCBudW1iZXJdXG4gICAgICogaW1wb3J0IHsgUGFnZVNpemVzIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKiBjb25zdCBuZXdQYWdlMSA9IHBkZkRvYy5pbnNlcnRQYWdlKDIsIFBhZ2VTaXplcy5BNylcbiAgICAgKiBjb25zdCBuZXdQYWdlMiA9IHBkZkRvYy5pbnNlcnRQYWdlKDAsIFBhZ2VTaXplcy5MZXR0ZXIpXG4gICAgICogY29uc3QgbmV3UGFnZTMgPSBwZGZEb2MuaW5zZXJ0UGFnZSgxOTgsIFs1MDAsIDc1MF0pXG4gICAgICpcbiAgICAgKiAvLyBwYWdlPVBERlBhZ2VcbiAgICAgKiBjb25zdCBwZGZEb2MxID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKClcbiAgICAgKiBjb25zdCBwZGZEb2MyID0gYXdhaXQgUERGRG9jdW1lbnQubG9hZCguLi4pXG4gICAgICogY29uc3QgW2V4aXN0aW5nUGFnZV0gPSBhd2FpdCBwZGZEb2MxLmNvcHlQYWdlcyhwZGZEb2MyLCBbMF0pXG4gICAgICogcGRmRG9jMS5pbnNlcnRQYWdlKDAsIGV4aXN0aW5nUGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggYXQgd2hpY2ggdGhlIHBhZ2Ugc2hvdWxkIGJlIGluc2VydGVkICh6ZXJvLWJhc2VkKS5cbiAgICAgKiBAcGFyYW0gcGFnZSBPcHRpb25hbGx5LCB0aGUgZGVzaXJlZCBkaW1lbnNpb25zIG9yIGV4aXN0aW5nIHBhZ2UuXG4gICAgICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgKG9yIGV4aXN0aW5nKSBwYWdlLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5pbnNlcnRQYWdlID0gZnVuY3Rpb24gKGluZGV4LCBwYWdlKSB7XG4gICAgICAgIHZhciBwYWdlQ291bnQgPSB0aGlzLmdldFBhZ2VDb3VudCgpO1xuICAgICAgICBhc3NlcnRSYW5nZShpbmRleCwgJ2luZGV4JywgMCwgcGFnZUNvdW50KTtcbiAgICAgICAgYXNzZXJ0SXMocGFnZSwgJ3BhZ2UnLCBbJ3VuZGVmaW5lZCcsIFtQREZQYWdlLCAnUERGUGFnZSddLCBBcnJheV0pO1xuICAgICAgICBpZiAoIXBhZ2UgfHwgQXJyYXkuaXNBcnJheShwYWdlKSkge1xuICAgICAgICAgICAgdmFyIGRpbXMgPSBBcnJheS5pc0FycmF5KHBhZ2UpID8gcGFnZSA6IFBhZ2VTaXplcy5BNDtcbiAgICAgICAgICAgIHBhZ2UgPSBQREZQYWdlLmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgICAgIHBhZ2Uuc2V0U2l6ZS5hcHBseShwYWdlLCBkaW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYWdlLmRvYyAhPT0gdGhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEZvcmVpZ25QYWdlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyZW50UmVmID0gdGhpcy5jYXRhbG9nLmluc2VydExlYWZOb2RlKHBhZ2UucmVmLCBpbmRleCk7XG4gICAgICAgIHBhZ2Uubm9kZS5zZXRQYXJlbnQocGFyZW50UmVmKTtcbiAgICAgICAgdGhpcy5wYWdlTWFwLnNldChwYWdlLm5vZGUsIHBhZ2UpO1xuICAgICAgICB0aGlzLnBhZ2VDYWNoZS5pbnZhbGlkYXRlKCk7XG4gICAgICAgIHRoaXMucGFnZUNvdW50ID0gcGFnZUNvdW50ICsgMTtcbiAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb3B5IHBhZ2VzIGZyb20gYSBzb3VyY2UgZG9jdW1lbnQgaW50byB0aGlzIGRvY3VtZW50LiBBbGxvd3MgcGFnZXMgdG8gYmVcbiAgICAgKiBjb3BpZWQgYmV0d2VlbiBkaWZmZXJlbnQgW1tQREZEb2N1bWVudF1dIGluc3RhbmNlcy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqIGNvbnN0IHNyY0RvYyA9IGF3YWl0IFBERkRvY3VtZW50LmxvYWQoLi4uKVxuICAgICAqXG4gICAgICogY29uc3QgY29waWVkUGFnZXMgPSBhd2FpdCBwZGZEb2MuY29weVBhZ2VzKHNyY0RvYywgWzAsIDMsIDg5XSlcbiAgICAgKiBjb25zdCBbZmlyc3RQYWdlLCBmb3VydGhQYWdlLCBuaW5ldGlldGhQYWdlXSA9IGNvcGllZFBhZ2VzO1xuICAgICAqXG4gICAgICogcGRmRG9jLmFkZFBhZ2UoZm91cnRoUGFnZSlcbiAgICAgKiBwZGZEb2MuaW5zZXJ0UGFnZSgwLCBuaW5ldGlldGhQYWdlKVxuICAgICAqIHBkZkRvYy5hZGRQYWdlKGZpcnN0UGFnZSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gc3JjRG9jIFRoZSBkb2N1bWVudCBmcm9tIHdoaWNoIHBhZ2VzIHNob3VsZCBiZSBjb3BpZWQuXG4gICAgICogQHBhcmFtIGluZGljZXMgVGhlIGluZGljZXMgb2YgdGhlIHBhZ2VzIHRoYXQgc2hvdWxkIGJlIGNvcGllZC5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHBhZ2VzIGNvcGllZCBpbnRvIHRoaXMgZG9jdW1lbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmNvcHlQYWdlcyA9IGZ1bmN0aW9uIChzcmNEb2MsIGluZGljZXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvcGllciwgc3JjUGFnZXMsIGNvcGllZFBhZ2VzLCBpZHgsIGxlbiwgc3JjUGFnZSwgY29waWVkUGFnZSwgcmVmO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXMoc3JjRG9jLCAnc3JjRG9jJywgW1tQREZEb2N1bWVudCwgJ1BERkRvY3VtZW50J11dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydElzKGluZGljZXMsICdpbmRpY2VzJywgW0FycmF5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzcmNEb2MuZmx1c2goKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcGllciA9IFBERk9iamVjdENvcGllci5mb3Ioc3JjRG9jLmNvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNQYWdlcyA9IHNyY0RvYy5nZXRQYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29waWVkUGFnZXMgPSBuZXcgQXJyYXkoaW5kaWNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpZHggPSAwLCBsZW4gPSBpbmRpY2VzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1BhZ2UgPSBzcmNQYWdlc1tpbmRpY2VzW2lkeF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcGllZFBhZ2UgPSBjb3BpZXIuY29weShzcmNQYWdlLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IHRoaXMuY29udGV4dC5yZWdpc3Rlcihjb3BpZWRQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3BpZWRQYWdlc1tpZHhdID0gUERGUGFnZS5vZihjb3BpZWRQYWdlLCByZWYsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvcGllZFBhZ2VzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBjb3B5IG9mIHRoaXMgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHNyY0RvYyA9IGF3YWl0IFBERkRvY3VtZW50LmxvYWQoLi4uKVxuICAgICAqIGNvbnN0IHBkZkRvYyA9IGF3YWl0IHNyY0RvYy5jb3B5KClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqID4gKipOT1RFOioqICBUaGlzIG1ldGhvZCB3b24ndCBjb3B5IGFsbCBpbmZvcm1hdGlvbiBvdmVyIHRvIHRoZSBuZXdcbiAgICAgKiA+IGRvY3VtZW50IChhY3JvZm9ybXMsIG91dGxpbmVzLCBldGMuLi4pLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2l0aCBhIGNvcHkgdGhpcyBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBkZkNvcHksIGNvbnRlbnRQYWdlcywgaWR4LCBsZW47XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIFBERkRvY3VtZW50LmNyZWF0ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGRmQ29weSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHBkZkNvcHkuY29weVBhZ2VzKHRoaXMsIHRoaXMuZ2V0UGFnZUluZGljZXMoKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50UGFnZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGlkeCA9IDAsIGxlbiA9IGNvbnRlbnRQYWdlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGZDb3B5LmFkZFBhZ2UoY29udGVudFBhZ2VzW2lkeF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QXV0aG9yKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkZkNvcHkuc2V0QXV0aG9yKHRoaXMuZ2V0QXV0aG9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Q3JlYXRpb25EYXRlKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkZkNvcHkuc2V0Q3JlYXRpb25EYXRlKHRoaXMuZ2V0Q3JlYXRpb25EYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Q3JlYXRvcigpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGZDb3B5LnNldENyZWF0b3IodGhpcy5nZXRDcmVhdG9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TW9kaWZpY2F0aW9uRGF0ZSgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGZDb3B5LnNldE1vZGlmaWNhdGlvbkRhdGUodGhpcy5nZXRNb2RpZmljYXRpb25EYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UHJvZHVjZXIoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRmQ29weS5zZXRQcm9kdWNlcih0aGlzLmdldFByb2R1Y2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0U3ViamVjdCgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGZDb3B5LnNldFN1YmplY3QodGhpcy5nZXRTdWJqZWN0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0VGl0bGUoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRmQ29weS5zZXRUaXRsZSh0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGRmQ29weS5kZWZhdWx0V29yZEJyZWFrcyA9IHRoaXMuZGVmYXVsdFdvcmRCcmVha3M7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGRmQ29weV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIEphdmFTY3JpcHQgdG8gdGhpcyBkb2N1bWVudC4gVGhlIHN1cHBsaWVkIGBzY3JpcHRgIGlzIGV4ZWN1dGVkIHdoZW4gdGhlXG4gICAgICogZG9jdW1lbnQgaXMgb3BlbmVkLiBUaGUgYHNjcmlwdGAgY2FuIGJlIHVzZWQgdG8gcGVyZm9ybSBzb21lIG9wZXJhdGlvblxuICAgICAqIHdoZW4gdGhlIGRvY3VtZW50IGlzIG9wZW5lZCAoZS5nLiBsb2dnaW5nIHRvIHRoZSBjb25zb2xlKSwgb3IgaXQgY2FuIGJlXG4gICAgICogdXNlZCB0byBkZWZpbmUgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSByZWZlcmVuY2VkIGxhdGVyIGluIGEgSmF2YVNjcmlwdFxuICAgICAqIGFjdGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiAvLyBTaG93IFwiSGVsbG8gV29ybGQhXCIgaW4gdGhlIGNvbnNvbGUgd2hlbiB0aGUgUERGIGlzIG9wZW5lZFxuICAgICAqIHBkZkRvYy5hZGRKYXZhU2NyaXB0KFxuICAgICAqICAgJ21haW4nLFxuICAgICAqICAgJ2NvbnNvbGUuc2hvdygpOyBjb25zb2xlLnByaW50bG4oXCJIZWxsbyBXb3JsZCFcIik7J1xuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyBEZWZpbmUgYSBmdW5jdGlvbiBuYW1lZCBcImZvb1wiIHRoYXQgY2FuIGJlIGNhbGxlZCBpbiBKYXZhU2NyaXB0IEFjdGlvbnNcbiAgICAgKiBwZGZEb2MuYWRkSmF2YVNjcmlwdChcbiAgICAgKiAgICdmb28nLFxuICAgICAqICAgJ2Z1bmN0aW9uIGZvbygpIHsgcmV0dXJuIFwiZm9vXCI7IH0nXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKiBTZWUgdGhlIFtKYXZhU2NyaXB0IGZvciBBY3JvYmF0IEFQSSBSZWZlcmVuY2VdKGh0dHBzOi8vd3d3LmFkb2JlLmNvbS9jb250ZW50L2RhbS9hY29tL2VuL2Rldm5ldC9hY3JvYmF0L3BkZnMvanNfYXBpX3JlZmVyZW5jZS5wZGYpXG4gICAgICogZm9yIGRldGFpbHMuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNjcmlwdC4gTXVzdCBiZSB1bmlxdWUgcGVyIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBzY3JpcHQgVGhlIEphdmFTY3JpcHQgdG8gZXhlY3V0ZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuYWRkSmF2YVNjcmlwdCA9IGZ1bmN0aW9uIChuYW1lLCBzY3JpcHQpIHtcbiAgICAgICAgYXNzZXJ0SXMobmFtZSwgJ25hbWUnLCBbJ3N0cmluZyddKTtcbiAgICAgICAgYXNzZXJ0SXMoc2NyaXB0LCAnc2NyaXB0JywgWydzdHJpbmcnXSk7XG4gICAgICAgIHZhciBlbWJlZGRlciA9IEphdmFTY3JpcHRFbWJlZGRlci5mb3Ioc2NyaXB0LCBuYW1lKTtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMuY29udGV4dC5uZXh0UmVmKCk7XG4gICAgICAgIHZhciBqYXZhU2NyaXB0ID0gUERGSmF2YVNjcmlwdC5vZihyZWYsIHRoaXMsIGVtYmVkZGVyKTtcbiAgICAgICAgdGhpcy5qYXZhU2NyaXB0cy5wdXNoKGphdmFTY3JpcHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGF0dGFjaG1lbnQgdG8gdGhpcyBkb2N1bWVudC4gQXR0YWNobWVudHMgYXJlIHZpc2libGUgaW4gdGhlXG4gICAgICogXCJBdHRhY2htZW50c1wiIHBhbmVsIG9mIEFkb2JlIEFjcm9iYXQgYW5kIHNvbWUgb3RoZXIgUERGIHJlYWRlcnMuIEFueVxuICAgICAqIHR5cGUgb2YgZmlsZSBjYW4gYmUgYWRkZWQgYXMgYW4gYXR0YWNobWVudC4gVGhpcyBpbmNsdWRlcywgYnV0IGlzIG5vdFxuICAgICAqIGxpbWl0ZWQgdG8sIGAucG5nYCwgYC5qcGdgLCBgLnBkZmAsIGAuY3N2YCwgYC5kb2N4YCwgYW5kIGAueGxzeGAgZmlsZXMuXG4gICAgICpcbiAgICAgKiBUaGUgaW5wdXQgZGF0YSBjYW4gYmUgcHJvdmlkZWQgaW4gbXVsdGlwbGUgZm9ybWF0czpcbiAgICAgKlxuICAgICAqIHwgVHlwZSAgICAgICAgICB8IENvbnRlbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gICAgICogfCBgc3RyaW5nYCAgICAgIHwgQSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgKG9yIGRhdGEgVVJJKSBjb250YWluaW5nIGFuIGF0dGFjaG1lbnQgfFxuICAgICAqIHwgYFVpbnQ4QXJyYXlgICB8IFRoZSByYXcgYnl0ZXMgb2YgYW4gYXR0YWNobWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IGBBcnJheUJ1ZmZlcmAgfCBUaGUgcmF3IGJ5dGVzIG9mIGFuIGF0dGFjaG1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIGF0dGFjaG1lbnQ9c3RyaW5nXG4gICAgICogYXdhaXQgcGRmRG9jLmF0dGFjaCgnLzlqLzRBQVFTa1pKUmdBQkFRQUFBUUFCQUFELzJ3QkQuLi4nLCAnY2F0X3JpZGluZ191bmljb3JuLmpwZycsIHtcbiAgICAgKiAgIG1pbWVUeXBlOiAnaW1hZ2UvanBlZycsXG4gICAgICogICBkZXNjcmlwdGlvbjogJ0Nvb2wgY2F0IHJpZGluZyBhIHVuaWNvcm4hIPCfpoTwn5CI8J+Vtu+4jycsXG4gICAgICogICBjcmVhdGlvbkRhdGU6IG5ldyBEYXRlKCcyMDE5LzEyLzAxJyksXG4gICAgICogICBtb2RpZmljYXRpb25EYXRlOiBuZXcgRGF0ZSgnMjAyMC8wNC8xOScpLFxuICAgICAqIH0pXG4gICAgICogYXdhaXQgcGRmRG9jLmF0dGFjaCgnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwvOWovNEFBUS4uLicsICdjYXRfcmlkaW5nX3VuaWNvcm4uanBnJywge1xuICAgICAqICAgbWltZVR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgKiAgIGRlc2NyaXB0aW9uOiAnQ29vbCBjYXQgcmlkaW5nIGEgdW5pY29ybiEg8J+mhPCfkIjwn5W277iPJyxcbiAgICAgKiAgIGNyZWF0aW9uRGF0ZTogbmV3IERhdGUoJzIwMTkvMTIvMDEnKSxcbiAgICAgKiAgIG1vZGlmaWNhdGlvbkRhdGU6IG5ldyBEYXRlKCcyMDIwLzA0LzE5JyksXG4gICAgICogfSlcbiAgICAgKlxuICAgICAqIC8vIGF0dGFjaG1lbnQ9VWludDhBcnJheVxuICAgICAqIGltcG9ydCBmcyBmcm9tICdmcydcbiAgICAgKiBjb25zdCB1aW50OEFycmF5ID0gZnMucmVhZEZpbGVTeW5jKCdjYXRfcmlkaW5nX3VuaWNvcm4uanBnJylcbiAgICAgKiBhd2FpdCBwZGZEb2MuYXR0YWNoKHVpbnQ4QXJyYXksICdjYXRfcmlkaW5nX3VuaWNvcm4uanBnJywge1xuICAgICAqICAgbWltZVR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgKiAgIGRlc2NyaXB0aW9uOiAnQ29vbCBjYXQgcmlkaW5nIGEgdW5pY29ybiEg8J+mhPCfkIjwn5W277iPJyxcbiAgICAgKiAgIGNyZWF0aW9uRGF0ZTogbmV3IERhdGUoJzIwMTkvMTIvMDEnKSxcbiAgICAgKiAgIG1vZGlmaWNhdGlvbkRhdGU6IG5ldyBEYXRlKCcyMDIwLzA0LzE5JyksXG4gICAgICogfSlcbiAgICAgKlxuICAgICAqIC8vIGF0dGFjaG1lbnQ9QXJyYXlCdWZmZXJcbiAgICAgKiBjb25zdCB1cmwgPSAnaHR0cHM6Ly9wZGYtbGliLmpzLm9yZy9hc3NldHMvY2F0X3JpZGluZ191bmljb3JuLmpwZydcbiAgICAgKiBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IGZldGNoKHVybCkudGhlbihyZXMgPT4gcmVzLmFycmF5QnVmZmVyKCkpXG4gICAgICogYXdhaXQgcGRmRG9jLmF0dGFjaChhcnJheUJ1ZmZlciwgJ2NhdF9yaWRpbmdfdW5pY29ybi5qcGcnLCB7XG4gICAgICogICBtaW1lVHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAqICAgZGVzY3JpcHRpb246ICdDb29sIGNhdCByaWRpbmcgYSB1bmljb3JuISDwn6aE8J+QiPCflbbvuI8nLFxuICAgICAqICAgY3JlYXRpb25EYXRlOiBuZXcgRGF0ZSgnMjAxOS8xMi8wMScpLFxuICAgICAqICAgbW9kaWZpY2F0aW9uRGF0ZTogbmV3IERhdGUoJzIwMjAvMDQvMTknKSxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnQgVGhlIGlucHV0IGRhdGEgY29udGFpbmluZyB0aGUgZmlsZSB0byBiZSBhdHRhY2hlZC5cbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBiZSBhdHRhY2hlZC5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHRoZSBhdHRhY2htZW50IGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoYXR0YWNobWVudCwgbmFtZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZXMsIGVtYmVkZGVyLCByZWYsIGVtYmVkZGVkRmlsZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRJcyhhdHRhY2htZW50LCAnYXR0YWNobWVudCcsIFsnc3RyaW5nJywgVWludDhBcnJheSwgQXJyYXlCdWZmZXJdKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRJcyhuYW1lLCAnbmFtZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICAgICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMubWltZVR5cGUsICdtaW1lVHlwZScsIFsnc3RyaW5nJ10pO1xuICAgICAgICAgICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMuZGVzY3JpcHRpb24sICdkZXNjcmlwdGlvbicsIFsnc3RyaW5nJ10pO1xuICAgICAgICAgICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMuY3JlYXRpb25EYXRlLCAnb3B0aW9ucy5jcmVhdGlvbkRhdGUnLCBbRGF0ZV0pO1xuICAgICAgICAgICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMubW9kaWZpY2F0aW9uRGF0ZSwgJ29wdGlvbnMubW9kaWZpY2F0aW9uRGF0ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgRGF0ZSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRJc09uZU9mT3JVbmRlZmluZWQob3B0aW9ucy5hZlJlbGF0aW9uc2hpcCwgJ29wdGlvbnMuYWZSZWxhdGlvbnNoaXAnLCBBRlJlbGF0aW9uc2hpcCk7XG4gICAgICAgICAgICAgICAgYnl0ZXMgPSB0b1VpbnQ4QXJyYXkoYXR0YWNobWVudCk7XG4gICAgICAgICAgICAgICAgZW1iZWRkZXIgPSBGaWxlRW1iZWRkZXIuZm9yKGJ5dGVzLCBuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZWYgPSB0aGlzLmNvbnRleHQubmV4dFJlZigpO1xuICAgICAgICAgICAgICAgIGVtYmVkZGVkRmlsZSA9IFBERkVtYmVkZGVkRmlsZS5vZihyZWYsIHRoaXMsIGVtYmVkZGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtYmVkZGVkRmlsZXMucHVzaChlbWJlZGRlZEZpbGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVtYmVkIGEgZm9udCBpbnRvIHRoaXMgZG9jdW1lbnQuIFRoZSBpbnB1dCBkYXRhIGNhbiBiZSBwcm92aWRlZCBpbiBtdWx0aXBsZVxuICAgICAqIGZvcm1hdHM6XG4gICAgICpcbiAgICAgKiB8IFR5cGUgICAgICAgICAgICB8IENvbnRlbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gICAgICogfCBgU3RhbmRhcmRGb250c2AgfCBPbmUgb2YgdGhlIHN0YW5kYXJkIDE0IGZvbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IGBzdHJpbmdgICAgICAgICB8IEEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIChvciBkYXRhIFVSSSkgY29udGFpbmluZyBhIGZvbnQgfFxuICAgICAqIHwgYFVpbnQ4QXJyYXlgICAgIHwgVGhlIHJhdyBieXRlcyBvZiBhIGZvbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBgQXJyYXlCdWZmZXJgICAgfCBUaGUgcmF3IGJ5dGVzIG9mIGEgZm9udCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gZm9udD1TdGFuZGFyZEZvbnRzXG4gICAgICogaW1wb3J0IHsgU3RhbmRhcmRGb250cyB9IGZyb20gJ3BkZi1saWInXG4gICAgICogY29uc3QgZm9udDEgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqXG4gICAgICogLy8gZm9udD1zdHJpbmdcbiAgICAgKiBjb25zdCBmb250MiA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoJ0FBRUFBQUFWQVFBQUJBQlFSRk5KUngvdXBlLi4uJylcbiAgICAgKiBjb25zdCBmb250MyA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoJ2RhdGE6Zm9udC9vcGVudHlwZTtiYXNlNjQsQUFFQUFBLi4uJylcbiAgICAgKlxuICAgICAqIC8vIGZvbnQ9VWludDhBcnJheVxuICAgICAqIGltcG9ydCBmcyBmcm9tICdmcydcbiAgICAgKiBjb25zdCBmb250NCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoZnMucmVhZEZpbGVTeW5jKCdVYnVudHUtUi50dGYnKSlcbiAgICAgKlxuICAgICAqIC8vIGZvbnQ9QXJyYXlCdWZmZXJcbiAgICAgKiBjb25zdCB1cmwgPSAnaHR0cHM6Ly9wZGYtbGliLmpzLm9yZy9hc3NldHMvdWJ1bnR1L1VidW50dS1SLnR0ZidcbiAgICAgKiBjb25zdCB1YnVudHVCeXRlcyA9IGF3YWl0IGZldGNoKHVybCkudGhlbihyZXMgPT4gcmVzLmFycmF5QnVmZmVyKCkpXG4gICAgICogY29uc3QgZm9udDUgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KHVidW50dUJ5dGVzKVxuICAgICAqIGBgYFxuICAgICAqIFNlZSBhbHNvOiBbW3JlZ2lzdGVyRm9udGtpdF1dXG4gICAgICogQHBhcmFtIGZvbnQgVGhlIGlucHV0IGRhdGEgZm9yIGEgZm9udC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBiZSB1c2VkIHdoZW4gZW1iZWRkaW5nIHRoZSBmb250LlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdpdGggdGhlIGVtYmVkZGVkIGZvbnQuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmVtYmVkRm9udCA9IGZ1bmN0aW9uIChmb250LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgc3Vic2V0LCBjdXN0b21OYW1lLCBmZWF0dXJlcywgZW1iZWRkZXIsIGJ5dGVzLCBmb250a2l0LCBfYiwgcmVmLCBwZGZGb250O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBvcHRpb25zLnN1YnNldCwgc3Vic2V0ID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIGN1c3RvbU5hbWUgPSBvcHRpb25zLmN1c3RvbU5hbWUsIGZlYXR1cmVzID0gb3B0aW9ucy5mZWF0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydElzKGZvbnQsICdmb250JywgWydzdHJpbmcnLCBVaW50OEFycmF5LCBBcnJheUJ1ZmZlcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXMoc3Vic2V0LCAnc3Vic2V0JywgWydib29sZWFuJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1N0YW5kYXJkRm9udChmb250KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWJlZGRlciA9IFN0YW5kYXJkRm9udEVtYmVkZGVyLmZvcihmb250LCBjdXN0b21OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbkJlQ29udmVydGVkVG9VaW50OEFycmF5KGZvbnQpKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzID0gdG9VaW50OEFycmF5KGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udGtpdCA9IHRoaXMuYXNzZXJ0Rm9udGtpdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzZXQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyLmZvcihmb250a2l0LCBieXRlcywgY3VzdG9tTmFtZSwgZmVhdHVyZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBDdXN0b21Gb250RW1iZWRkZXIuZm9yKGZvbnRraXQsIGJ5dGVzLCBjdXN0b21OYW1lLCBmZWF0dXJlcyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRkZXIgPSBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bmb250YCBtdXN0IGJlIG9uZSBvZiBgU3RhbmRhcmRGb250cyB8IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCBBcnJheUJ1ZmZlcmAnKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gdGhpcy5jb250ZXh0Lm5leHRSZWYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBkZkZvbnQgPSBQREZGb250Lm9mKHJlZiwgdGhpcywgZW1iZWRkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250cy5wdXNoKHBkZkZvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHBkZkZvbnRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVtYmVkIGEgc3RhbmRhcmQgZm9udCBpbnRvIHRoaXMgZG9jdW1lbnQuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBTdGFuZGFyZEZvbnRzIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2FGb250ID0gcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgc3RhbmRhcmQgZm9udCB0byBiZSBlbWJlZGRlZC5cbiAgICAgKiBAcGFyYW0gY3VzdG9tTmFtZSBUaGUgbmFtZSB0byBiZSB1c2VkIHdoZW4gZW1iZWRkaW5nIHRoZSBmb250LlxuICAgICAqIEByZXR1cm5zIFRoZSBlbWJlZGRlZCBmb250LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5lbWJlZFN0YW5kYXJkRm9udCA9IGZ1bmN0aW9uIChmb250LCBjdXN0b21OYW1lKSB7XG4gICAgICAgIGFzc2VydElzKGZvbnQsICdmb250JywgWydzdHJpbmcnXSk7XG4gICAgICAgIGlmICghaXNTdGFuZGFyZEZvbnQoZm9udCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bmb250YCBtdXN0IGJlIG9uZSBvZiB0eXBlIGBTdGFuZGFyZEZvbnRzYCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbWJlZGRlciA9IFN0YW5kYXJkRm9udEVtYmVkZGVyLmZvcihmb250LCBjdXN0b21OYW1lKTtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMuY29udGV4dC5uZXh0UmVmKCk7XG4gICAgICAgIHZhciBwZGZGb250ID0gUERGRm9udC5vZihyZWYsIHRoaXMsIGVtYmVkZGVyKTtcbiAgICAgICAgdGhpcy5mb250cy5wdXNoKHBkZkZvbnQpO1xuICAgICAgICByZXR1cm4gcGRmRm9udDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVtYmVkIGEgSlBFRyBpbWFnZSBpbnRvIHRoaXMgZG9jdW1lbnQuIFRoZSBpbnB1dCBkYXRhIGNhbiBiZSBwcm92aWRlZCBpblxuICAgICAqIG11bHRpcGxlIGZvcm1hdHM6XG4gICAgICpcbiAgICAgKiB8IFR5cGUgICAgICAgICAgfCBDb250ZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICAgKiB8IGBzdHJpbmdgICAgICAgfCBBIGJhc2U2NCBlbmNvZGVkIHN0cmluZyAob3IgZGF0YSBVUkkpIGNvbnRhaW5pbmcgYSBKUEVHIGltYWdlIHxcbiAgICAgKiB8IGBVaW50OEFycmF5YCAgfCBUaGUgcmF3IGJ5dGVzIG9mIGEgSlBFRyBpbWFnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IGBBcnJheUJ1ZmZlcmAgfCBUaGUgcmF3IGJ5dGVzIG9mIGEgSlBFRyBpbWFnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLy8ganBnPXN0cmluZ1xuICAgICAqIGNvbnN0IGltYWdlMSA9IGF3YWl0IHBkZkRvYy5lbWJlZEpwZygnLzlqLzRBQVFTa1pKUmdBQkFRQUFBUUFCQUFELzJ3QkQuLi4nKVxuICAgICAqIGNvbnN0IGltYWdlMiA9IGF3YWl0IHBkZkRvYy5lbWJlZEpwZygnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwvOWovNEFBUS4uLicpXG4gICAgICpcbiAgICAgKiAvLyBqcGc9VWludDhBcnJheVxuICAgICAqIGltcG9ydCBmcyBmcm9tICdmcydcbiAgICAgKiBjb25zdCB1aW50OEFycmF5ID0gZnMucmVhZEZpbGVTeW5jKCdjYXRfcmlkaW5nX3VuaWNvcm4uanBnJylcbiAgICAgKiBjb25zdCBpbWFnZTMgPSBhd2FpdCBwZGZEb2MuZW1iZWRKcGcodWludDhBcnJheSlcbiAgICAgKlxuICAgICAqIC8vIGpwZz1BcnJheUJ1ZmZlclxuICAgICAqIGNvbnN0IHVybCA9ICdodHRwczovL3BkZi1saWIuanMub3JnL2Fzc2V0cy9jYXRfcmlkaW5nX3VuaWNvcm4uanBnJ1xuICAgICAqIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKHJlcyA9PiByZXMuYXJyYXlCdWZmZXIoKSlcbiAgICAgKiBjb25zdCBpbWFnZTQgPSBhd2FpdCBwZGZEb2MuZW1iZWRKcGcoYXJyYXlCdWZmZXIpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ganBnIFRoZSBpbnB1dCBkYXRhIGZvciBhIEpQRUcgaW1hZ2UuXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2l0aCB0aGUgZW1iZWRkZWQgaW1hZ2UuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmVtYmVkSnBnID0gZnVuY3Rpb24gKGpwZykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZXMsIGVtYmVkZGVyLCByZWYsIHBkZkltYWdlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXMoanBnLCAnanBnJywgWydzdHJpbmcnLCBVaW50OEFycmF5LCBBcnJheUJ1ZmZlcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgPSB0b1VpbnQ4QXJyYXkoanBnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIEpwZWdFbWJlZGRlci5mb3IoYnl0ZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRkZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWYgPSB0aGlzLmNvbnRleHQubmV4dFJlZigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGRmSW1hZ2UgPSBQREZJbWFnZS5vZihyZWYsIHRoaXMsIGVtYmVkZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VzLnB1c2gocGRmSW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHBkZkltYWdlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbWJlZCBhIFBORyBpbWFnZSBpbnRvIHRoaXMgZG9jdW1lbnQuIFRoZSBpbnB1dCBkYXRhIGNhbiBiZSBwcm92aWRlZCBpblxuICAgICAqIG11bHRpcGxlIGZvcm1hdHM6XG4gICAgICpcbiAgICAgKiB8IFR5cGUgICAgICAgICAgfCBDb250ZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gICAgICogfCBgc3RyaW5nYCAgICAgIHwgQSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgKG9yIGRhdGEgVVJJKSBjb250YWluaW5nIGEgUE5HIGltYWdlIHxcbiAgICAgKiB8IGBVaW50OEFycmF5YCAgfCBUaGUgcmF3IGJ5dGVzIG9mIGEgUE5HIGltYWdlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgYEFycmF5QnVmZmVyYCB8IFRoZSByYXcgYnl0ZXMgb2YgYSBQTkcgaW1hZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIHBuZz1zdHJpbmdcbiAgICAgKiBjb25zdCBpbWFnZTEgPSBhd2FpdCBwZGZEb2MuZW1iZWRQbmcoJ2lWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFsZ0FBQUYzLi4uJylcbiAgICAgKiBjb25zdCBpbWFnZTIgPSBhd2FpdCBwZGZEb2MuZW1iZWRQbmcoJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnLi4uJylcbiAgICAgKlxuICAgICAqIC8vIHBuZz1VaW50OEFycmF5XG4gICAgICogaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuICAgICAqIGNvbnN0IHVpbnQ4QXJyYXkgPSBmcy5yZWFkRmlsZVN5bmMoJ3NtYWxsX21hcmlvLnBuZycpXG4gICAgICogY29uc3QgaW1hZ2UzID0gYXdhaXQgcGRmRG9jLmVtYmVkUG5nKHVpbnQ4QXJyYXkpXG4gICAgICpcbiAgICAgKiAvLyBwbmc9QXJyYXlCdWZmZXJcbiAgICAgKiBjb25zdCB1cmwgPSAnaHR0cHM6Ly9wZGYtbGliLmpzLm9yZy9hc3NldHMvc21hbGxfbWFyaW8ucG5nJ1xuICAgICAqIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKHJlcyA9PiByZXMuYXJyYXlCdWZmZXIoKSlcbiAgICAgKiBjb25zdCBpbWFnZTQgPSBhd2FpdCBwZGZEb2MuZW1iZWRQbmcoYXJyYXlCdWZmZXIpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG5nIFRoZSBpbnB1dCBkYXRhIGZvciBhIFBORyBpbWFnZS5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIHRoZSBlbWJlZGRlZCBpbWFnZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZW1iZWRQbmcgPSBmdW5jdGlvbiAocG5nKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBieXRlcywgZW1iZWRkZXIsIHJlZiwgcGRmSW1hZ2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhwbmcsICdwbmcnLCBbJ3N0cmluZycsIFVpbnQ4QXJyYXksIEFycmF5QnVmZmVyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlcyA9IHRvVWludDhBcnJheShwbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUG5nRW1iZWRkZXIuZm9yKGJ5dGVzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkZGVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gdGhpcy5jb250ZXh0Lm5leHRSZWYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBkZkltYWdlID0gUERGSW1hZ2Uub2YocmVmLCB0aGlzLCBlbWJlZGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKHBkZkltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBwZGZJbWFnZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRW1iZWQgb25lIG9yIG1vcmUgUERGIHBhZ2VzIGludG8gdGhpcyBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcGRmRG9jID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IHNvdXJjZVBkZlVybCA9ICdodHRwczovL3BkZi1saWIuanMub3JnL2Fzc2V0cy93aXRoX2xhcmdlX3BhZ2VfY291bnQucGRmJ1xuICAgICAqIGNvbnN0IHNvdXJjZVBkZiA9IGF3YWl0IGZldGNoKHNvdXJjZVBkZlVybCkudGhlbigocmVzKSA9PiByZXMuYXJyYXlCdWZmZXIoKSlcbiAgICAgKlxuICAgICAqIC8vIEVtYmVkIHBhZ2UgNzQgb2YgYHNvdXJjZVBkZmAgaW50byBgcGRmRG9jYFxuICAgICAqIGNvbnN0IFtlbWJlZGRlZFBhZ2VdID0gYXdhaXQgcGRmRG9jLmVtYmVkUGRmKHNvdXJjZVBkZiwgWzczXSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFNlZSBbW1BERkRvY3VtZW50LmxvYWRdXSBmb3IgZXhhbXBsZXMgb2YgdGhlIGFsbG93ZWQgaW5wdXQgZGF0YSBmb3JtYXRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBkZiBUaGUgaW5wdXQgZGF0YSBjb250YWluaW5nIGEgUERGIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBpbmRpY2VzIFRoZSBpbmRpY2VzIG9mIHRoZSBwYWdlcyB0aGF0IHNob3VsZCBiZSBlbWJlZGRlZC5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHRoZSBlbWJlZGRlZCBwYWdlcy5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZW1iZWRQZGYgPSBmdW5jdGlvbiAocGRmLCBpbmRpY2VzKSB7XG4gICAgICAgIGlmIChpbmRpY2VzID09PSB2b2lkIDApIHsgaW5kaWNlcyA9IFswXTsgfVxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3JjRG9jLCBfYSwgc3JjUGFnZXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhwZGYsICdwZGYnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVWludDhBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheUJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbUERGRG9jdW1lbnQsICdQREZEb2N1bWVudCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhpbmRpY2VzLCAnaW5kaWNlcycsIFtBcnJheV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocGRmIGluc3RhbmNlb2YgUERGRG9jdW1lbnQpKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gcGRmO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgUERGRG9jdW1lbnQubG9hZChwZGYpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY0RvYyA9IF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGFnZXMgPSBwbHVja0luZGljZXMoc3JjRG9jLmdldFBhZ2VzKCksIGluZGljZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuZW1iZWRQYWdlcyhzcmNQYWdlcyldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVtYmVkIGEgc2luZ2xlIFBERiBwYWdlIGludG8gdGhpcyBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgcGRmRG9jID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IHNvdXJjZVBkZlVybCA9ICdodHRwczovL3BkZi1saWIuanMub3JnL2Fzc2V0cy93aXRoX2xhcmdlX3BhZ2VfY291bnQucGRmJ1xuICAgICAqIGNvbnN0IHNvdXJjZUJ1ZmZlciA9IGF3YWl0IGZldGNoKHNvdXJjZVBkZlVybCkudGhlbigocmVzKSA9PiByZXMuYXJyYXlCdWZmZXIoKSlcbiAgICAgKiBjb25zdCBzb3VyY2VQZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5sb2FkKHNvdXJjZUJ1ZmZlcilcbiAgICAgKiBjb25zdCBzb3VyY2VQZGZQYWdlID0gc291cmNlUGRmRG9jLmdldFBhZ2VzKClbNzNdXG4gICAgICpcbiAgICAgKiBjb25zdCBlbWJlZGRlZFBhZ2UgPSBhd2FpdCBwZGZEb2MuZW1iZWRQYWdlKFxuICAgICAqICAgc291cmNlUGRmUGFnZSxcbiAgICAgKlxuICAgICAqICAgLy8gQ2xpcCBhIHNlY3Rpb24gb2YgdGhlIHNvdXJjZSBwYWdlIHNvIHRoYXQgd2Ugb25seSBlbWJlZCBwYXJ0IG9mIGl0XG4gICAgICogICB7IGxlZnQ6IDEwMCwgcmlnaHQ6IDQ1MCwgYm90dG9tOiAzMzAsIHRvcDogNTcwIH0sXG4gICAgICpcbiAgICAgKiAgIC8vIFRyYW5zbGF0ZSBhbGwgZHJhd2luZ3Mgb2YgdGhlIGVtYmVkZGVkIHBhZ2UgYnkgKDEwLCAyMDApIHVuaXRzXG4gICAgICogICBbMSwgMCwgMCwgMSwgMTAsIDIwMF0sXG4gICAgICogKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhZ2UgVGhlIHBhZ2UgdG8gYmUgZW1iZWRkZWQuXG4gICAgICogQHBhcmFtIGJvdW5kaW5nQm94XG4gICAgICogT3B0aW9uYWxseSwgYW4gYXJlYSBvZiB0aGUgc291cmNlIHBhZ2UgdGhhdCBzaG91bGQgYmUgZW1iZWRkZWRcbiAgICAgKiAoZGVmYXVsdHMgdG8gZW50aXJlIHBhZ2UpLlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbk1hdHJpeFxuICAgICAqIE9wdGlvbmFsbHksIGEgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXQgaXMgYWx3YXlzIGFwcGxpZWQgdG8gdGhlIGVtYmVkZGVkXG4gICAgICogcGFnZSBhbnl3aGVyZSBpdCBpcyBkcmF3bi5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIHRoZSBlbWJlZGRlZCBwZGYgcGFnZS5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZW1iZWRQYWdlID0gZnVuY3Rpb24gKHBhZ2UsIGJvdW5kaW5nQm94LCB0cmFuc2Zvcm1hdGlvbk1hdHJpeCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZW1iZWRkZWRQYWdlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXMocGFnZSwgJ3BhZ2UnLCBbW1BERlBhZ2UsICdQREZQYWdlJ11dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRQYWdlcyhbcGFnZV0sIFtib3VuZGluZ0JveF0sIFt0cmFuc2Zvcm1hdGlvbk1hdHJpeF0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRkZWRQYWdlID0gKF9hLnNlbnQoKSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZW1iZWRkZWRQYWdlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbWJlZCBvbmUgb3IgbW9yZSBQREYgcGFnZXMgaW50byB0aGlzIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqXG4gICAgICogY29uc3Qgc291cmNlUGRmVXJsID0gJ2h0dHBzOi8vcGRmLWxpYi5qcy5vcmcvYXNzZXRzL3dpdGhfbGFyZ2VfcGFnZV9jb3VudC5wZGYnXG4gICAgICogY29uc3Qgc291cmNlQnVmZmVyID0gYXdhaXQgZmV0Y2goc291cmNlUGRmVXJsKS50aGVuKChyZXMpID0+IHJlcy5hcnJheUJ1ZmZlcigpKVxuICAgICAqIGNvbnN0IHNvdXJjZVBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmxvYWQoc291cmNlQnVmZmVyKVxuICAgICAqXG4gICAgICogY29uc3QgcGFnZTEgPSBzb3VyY2VQZGZEb2MuZ2V0UGFnZXMoKVswXVxuICAgICAqIGNvbnN0IHBhZ2UyID0gc291cmNlUGRmRG9jLmdldFBhZ2VzKClbNTJdXG4gICAgICogY29uc3QgcGFnZTMgPSBzb3VyY2VQZGZEb2MuZ2V0UGFnZXMoKVs3M11cbiAgICAgKlxuICAgICAqIGNvbnN0IGVtYmVkZGVkUGFnZXMgPSBhd2FpdCBwZGZEb2MuZW1iZWRQYWdlcyhbcGFnZTEsIHBhZ2UyLCBwYWdlM10pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFnZVxuICAgICAqIFRoZSBwYWdlcyB0byBiZSBlbWJlZGRlZCAodGhleSBtdXN0IGFsbCBzaGFyZSB0aGUgc2FtZSBjb250ZXh0KS5cbiAgICAgKiBAcGFyYW0gYm91bmRpbmdCb3hlc1xuICAgICAqIE9wdGlvbmFsbHksIGFuIGFycmF5IG9mIGNsaXBwaW5nIGJvdW5kYXJpZXMgLSBvbmUgZm9yIGVhY2ggcGFnZVxuICAgICAqIChkZWZhdWx0cyB0byBlbnRpcmV0eSBvZiBlYWNoIHBhZ2UpLlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbk1hdHJpY2VzXG4gICAgICogT3B0aW9uYWxseSwgYW4gYXJyYXkgb2YgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgLSBvbmUgZm9yIGVhY2ggcGFnZVxuICAgICAqIChlYWNoIHBhZ2UncyB0cmFuc2Zvcm1hdGlvbiB3aWxsIGFwcGx5IGFueXdoZXJlIGl0IGlzIGRyYXduKS5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHRoZSBlbWJlZGRlZCBwZGYgcGFnZXMuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmVtYmVkUGFnZXMgPSBmdW5jdGlvbiAocGFnZXMsIGJvdW5kaW5nQm94ZXMsIHRyYW5zZm9ybWF0aW9uTWF0cmljZXMpIHtcbiAgICAgICAgaWYgKGJvdW5kaW5nQm94ZXMgPT09IHZvaWQgMCkgeyBib3VuZGluZ0JveGVzID0gW107IH1cbiAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uTWF0cmljZXMgPT09IHZvaWQgMCkgeyB0cmFuc2Zvcm1hdGlvbk1hdHJpY2VzID0gW107IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlkeCwgbGVuLCBjdXJyUGFnZSwgbmV4dFBhZ2UsIGNvbnRleHQsIG1heWJlQ29weVBhZ2UsIGVtYmVkZGVkUGFnZXMsIGlkeCwgbGVuLCBwYWdlLCBib3gsIG1hdHJpeCwgZW1iZWRkZXIsIHJlZjtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFtdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc2VydCBhbGwgcGFnZXMgaGF2ZSB0aGUgc2FtZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGlkeCA9IDAsIGxlbiA9IHBhZ2VzLmxlbmd0aCAtIDE7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyUGFnZSA9IHBhZ2VzW2lkeF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFBhZ2UgPSBwYWdlc1tpZHggKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyclBhZ2Uubm9kZS5jb250ZXh0ICE9PSBuZXh0UGFnZS5ub2RlLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhZ2VFbWJlZGRpbmdNaXNtYXRjaGVkQ29udGV4dEVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IHBhZ2VzWzBdLm5vZGUuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlQ29weVBhZ2UgPSBjb250ZXh0ID09PSB0aGlzLmNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChwKSB7IHJldHVybiBwOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBQREZPYmplY3RDb3BpZXIuZm9yKGNvbnRleHQsIHRoaXMuY29udGV4dCkuY29weTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkZGVkUGFnZXMgPSBuZXcgQXJyYXkocGFnZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IDAsIGxlbiA9IHBhZ2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaWR4IDwgbGVuKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlID0gbWF5YmVDb3B5UGFnZShwYWdlc1tpZHhdLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94ID0gYm91bmRpbmdCb3hlc1tpZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gdHJhbnNmb3JtYXRpb25NYXRyaWNlc1tpZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUERGUGFnZUVtYmVkZGVyLmZvcihwYWdlLCBib3gsIG1hdHJpeCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWJlZGRlciA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IHRoaXMuY29udGV4dC5uZXh0UmVmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWJlZGRlZFBhZ2VzW2lkeF0gPSBQREZFbWJlZGRlZFBhZ2Uub2YocmVmLCB0aGlzLCBlbWJlZGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMuZW1iZWRkZWRQYWdlcykucHVzaC5hcHBseShfYSwgZW1iZWRkZWRQYWdlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZW1iZWRkZWRQYWdlc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHNob3VsZG4ndCBuZWVkIHRvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuIFRoZSBbW3NhdmVdXVxuICAgICAqID4gYW5kIFtbc2F2ZUFzQmFzZTY0XV0gbWV0aG9kcyB3aWxsIGF1dG9tYXRpY2FsbHkgZW5zdXJlIHRoYXQgYWxsIGVtYmVkZGVkXG4gICAgICogPiBhc3NldHMgYXJlIGZsdXNoZWQgYmVmb3JlIHNlcmlhbGl6aW5nIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEZsdXNoIGFsbCBlbWJlZGRlZCBmb250cywgUERGIHBhZ2VzLCBhbmQgaW1hZ2VzIHRvIHRoaXMgZG9jdW1lbnQnc1xuICAgICAqIFtbY29udGV4dF1dLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXMgd2hlbiB0aGUgZmx1c2ggaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgUERGRG9jdW1lbnQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRBbGwodGhpcy5mb250cyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmVtYmVkQWxsKHRoaXMuaW1hZ2VzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRBbGwodGhpcy5lbWJlZGRlZFBhZ2VzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRBbGwodGhpcy5lbWJlZGRlZEZpbGVzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRBbGwodGhpcy5qYXZhU2NyaXB0cyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIHRoaXMgZG9jdW1lbnQgdG8gYW4gYXJyYXkgb2YgYnl0ZXMgbWFraW5nIHVwIGEgUERGIGZpbGUuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBwZGZCeXRlcyA9IGF3YWl0IHBkZkRvYy5zYXZlKClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSBhIG51bWJlciBvZiB0aGluZ3MgeW91IGNhbiBkbyB3aXRoIHRoZSBzZXJpYWxpemVkIGRvY3VtZW50LFxuICAgICAqIGRlcGVuZGluZyBvbiB0aGUgSmF2YVNjcmlwdCBlbnZpcm9ubWVudCB5b3UncmUgcnVubmluZyBpbjpcbiAgICAgKiAqIFdyaXRlIGl0IHRvIGEgZmlsZSBpbiBOb2RlIG9yIFJlYWN0IE5hdGl2ZVxuICAgICAqICogRG93bmxvYWQgaXQgYXMgYSBCbG9iIGluIHRoZSBicm93c2VyXG4gICAgICogKiBSZW5kZXIgaXQgaW4gYW4gYGlmcmFtZWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBzYXZpbmcgdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdpdGggdGhlIGJ5dGVzIG9mIHRoZSBzZXJpYWxpemVkIGRvY3VtZW50LlxuICAgICAqL1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCB1c2VPYmplY3RTdHJlYW1zLCBfYiwgYWRkRGVmYXVsdFBhZ2UsIF9jLCBvYmplY3RzUGVyVGljaywgX2QsIHVwZGF0ZUZpZWxkQXBwZWFyYW5jZXMsIGZvcm0sIFdyaXRlcjtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gb3B0aW9ucy51c2VPYmplY3RTdHJlYW1zLCB1c2VPYmplY3RTdHJlYW1zID0gX2EgPT09IHZvaWQgMCA/IHRydWUgOiBfYSwgX2IgPSBvcHRpb25zLmFkZERlZmF1bHRQYWdlLCBhZGREZWZhdWx0UGFnZSA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIF9jID0gb3B0aW9ucy5vYmplY3RzUGVyVGljaywgb2JqZWN0c1BlclRpY2sgPSBfYyA9PT0gdm9pZCAwID8gNTAgOiBfYywgX2QgPSBvcHRpb25zLnVwZGF0ZUZpZWxkQXBwZWFyYW5jZXMsIHVwZGF0ZUZpZWxkQXBwZWFyYW5jZXMgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXModXNlT2JqZWN0U3RyZWFtcywgJ3VzZU9iamVjdFN0cmVhbXMnLCBbJ2Jvb2xlYW4nXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhhZGREZWZhdWx0UGFnZSwgJ2FkZERlZmF1bHRQYWdlJywgWydib29sZWFuJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXMob2JqZWN0c1BlclRpY2ssICdvYmplY3RzUGVyVGljaycsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SXModXBkYXRlRmllbGRBcHBlYXJhbmNlcywgJ3VwZGF0ZUZpZWxkQXBwZWFyYW5jZXMnLCBbJ2Jvb2xlYW4nXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkRGVmYXVsdFBhZ2UgJiYgdGhpcy5nZXRQYWdlQ291bnQoKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVGaWVsZEFwcGVhcmFuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSA9IHRoaXMuZm9ybUNhY2hlLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0udXBkYXRlRmllbGRBcHBlYXJhbmNlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5mbHVzaCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGVyID0gdXNlT2JqZWN0U3RyZWFtcyA/IFBERlN0cmVhbVdyaXRlciA6IFBERldyaXRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBXcml0ZXIuZm9yQ29udGV4dCh0aGlzLmNvbnRleHQsIG9iamVjdHNQZXJUaWNrKS5zZXJpYWxpemVUb0J1ZmZlcigpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhpcyBkb2N1bWVudCB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyBvciBkYXRhIFVSSSBtYWtpbmcgdXAgYVxuICAgICAqIFBERiBmaWxlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGJhc2U2NFN0cmluZyA9IGF3YWl0IHBkZkRvYy5zYXZlQXNCYXNlNjQoKVxuICAgICAqIGJhc2U2NFN0cmluZyAvLyA9PiAnSlZCRVJpMHhMamNLSllHQmdZRUtDLi4uJ1xuICAgICAqXG4gICAgICogY29uc3QgYmFzZTY0RGF0YVVyaSA9IGF3YWl0IHBkZkRvYy5zYXZlQXNCYXNlNjQoeyBkYXRhVXJpOiB0cnVlIH0pXG4gICAgICogYmFzZTY0RGF0YVVyaSAvLyA9PiAnZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LEpWQkVSaTB4TGpjS0pZR0JnWUVLQy4uLidcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBzYXZpbmcgdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdpdGggYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgb3IgZGF0YSBVUkkgb2YgdGhlXG4gICAgICogICAgICAgICAgc2VyaWFsaXplZCBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuc2F2ZUFzQmFzZTY0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBkYXRhVXJpLCBvdGhlck9wdGlvbnMsIGJ5dGVzLCBiYXNlNjQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IG9wdGlvbnMuZGF0YVVyaSwgZGF0YVVyaSA9IF9hID09PSB2b2lkIDAgPyBmYWxzZSA6IF9hLCBvdGhlck9wdGlvbnMgPSBfX3Jlc3Qob3B0aW9ucywgW1wiZGF0YVVyaVwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRJcyhkYXRhVXJpLCAnZGF0YVVyaScsIFsnYm9vbGVhbiddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2F2ZShvdGhlck9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlNjQgPSBlbmNvZGVUb0Jhc2U2NChieXRlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGF0YVVyaSA/IFwiZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LFwiICsgYmFzZTY0IDogYmFzZTY0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUuZmluZFBhZ2VGb3JBbm5vdGF0aW9uUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgcGFnZXMgPSB0aGlzLmdldFBhZ2VzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHBhZ2VzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHBhZ2UgPSBwYWdlc1tpZHhdO1xuICAgICAgICAgICAgdmFyIGFubm90YXRpb25zID0gcGFnZS5ub2RlLkFubm90cygpO1xuICAgICAgICAgICAgaWYgKChhbm5vdGF0aW9ucyA9PT0gbnVsbCB8fCBhbm5vdGF0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW5ub3RhdGlvbnMuaW5kZXhPZihyZWYpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5lbWJlZEFsbCA9IGZ1bmN0aW9uIChlbWJlZGRhYmxlcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaWR4LCBsZW47XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSAwLCBsZW4gPSBlbWJlZGRhYmxlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlkeCA8IGxlbikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZW1iZWRkYWJsZXNbaWR4XS5lbWJlZCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZEb2N1bWVudC5wcm90b3R5cGUudXBkYXRlSW5mb0RpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwZGZMaWIgPSBcInBkZi1saWIgKGh0dHBzOi8vZ2l0aHViLmNvbS9Ib3BkaW5nL3BkZi1saWIpXCI7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgaW5mbyA9IHRoaXMuZ2V0SW5mb0RpY3QoKTtcbiAgICAgICAgdGhpcy5zZXRQcm9kdWNlcihwZGZMaWIpO1xuICAgICAgICB0aGlzLnNldE1vZGlmaWNhdGlvbkRhdGUobm93KTtcbiAgICAgICAgaWYgKCFpbmZvLmdldChQREZOYW1lLm9mKCdDcmVhdG9yJykpKVxuICAgICAgICAgICAgdGhpcy5zZXRDcmVhdG9yKHBkZkxpYik7XG4gICAgICAgIGlmICghaW5mby5nZXQoUERGTmFtZS5vZignQ3JlYXRpb25EYXRlJykpKVxuICAgICAgICAgICAgdGhpcy5zZXRDcmVhdGlvbkRhdGUobm93KTtcbiAgICB9O1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5nZXRJbmZvRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nSW5mbyA9IHRoaXMuY29udGV4dC5sb29rdXAodGhpcy5jb250ZXh0LnRyYWlsZXJJbmZvLkluZm8pO1xuICAgICAgICBpZiAoZXhpc3RpbmdJbmZvIGluc3RhbmNlb2YgUERGRGljdClcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0luZm87XG4gICAgICAgIHZhciBuZXdJbmZvID0gdGhpcy5jb250ZXh0Lm9iaih7fSk7XG4gICAgICAgIHRoaXMuY29udGV4dC50cmFpbGVySW5mby5JbmZvID0gdGhpcy5jb250ZXh0LnJlZ2lzdGVyKG5ld0luZm8pO1xuICAgICAgICByZXR1cm4gbmV3SW5mbztcbiAgICB9O1xuICAgIFBERkRvY3VtZW50LnByb3RvdHlwZS5hc3NlcnRGb250a2l0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuZm9udGtpdClcbiAgICAgICAgICAgIHRocm93IG5ldyBGb250a2l0Tm90UmVnaXN0ZXJlZEVycm9yKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZvbnRraXQ7XG4gICAgfTtcbiAgICByZXR1cm4gUERGRG9jdW1lbnQ7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGRG9jdW1lbnQ7XG4vKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgb25seS1hcnJvdy1mdW5jdGlvbnMgKi9cbmZ1bmN0aW9uIGFzc2VydElzTGl0ZXJhbE9ySGV4U3RyaW5nKHBkZk9iamVjdCkge1xuICAgIGlmICghKHBkZk9iamVjdCBpbnN0YW5jZW9mIFBERkhleFN0cmluZykgJiZcbiAgICAgICAgIShwZGZPYmplY3QgaW5zdGFuY2VvZiBQREZTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkT2JqZWN0VHlwZUVycm9yKFtQREZIZXhTdHJpbmcsIFBERlN0cmluZ10sIHBkZk9iamVjdCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGRG9jdW1lbnQuanMubWFwIiwiZXhwb3J0IHZhciBCbGVuZE1vZGU7XG4oZnVuY3Rpb24gKEJsZW5kTW9kZSkge1xuICAgIEJsZW5kTW9kZVtcIk5vcm1hbFwiXSA9IFwiTm9ybWFsXCI7XG4gICAgQmxlbmRNb2RlW1wiTXVsdGlwbHlcIl0gPSBcIk11bHRpcGx5XCI7XG4gICAgQmxlbmRNb2RlW1wiU2NyZWVuXCJdID0gXCJTY3JlZW5cIjtcbiAgICBCbGVuZE1vZGVbXCJPdmVybGF5XCJdID0gXCJPdmVybGF5XCI7XG4gICAgQmxlbmRNb2RlW1wiRGFya2VuXCJdID0gXCJEYXJrZW5cIjtcbiAgICBCbGVuZE1vZGVbXCJMaWdodGVuXCJdID0gXCJMaWdodGVuXCI7XG4gICAgQmxlbmRNb2RlW1wiQ29sb3JEb2RnZVwiXSA9IFwiQ29sb3JEb2RnZVwiO1xuICAgIEJsZW5kTW9kZVtcIkNvbG9yQnVyblwiXSA9IFwiQ29sb3JCdXJuXCI7XG4gICAgQmxlbmRNb2RlW1wiSGFyZExpZ2h0XCJdID0gXCJIYXJkTGlnaHRcIjtcbiAgICBCbGVuZE1vZGVbXCJTb2Z0TGlnaHRcIl0gPSBcIlNvZnRMaWdodFwiO1xuICAgIEJsZW5kTW9kZVtcIkRpZmZlcmVuY2VcIl0gPSBcIkRpZmZlcmVuY2VcIjtcbiAgICBCbGVuZE1vZGVbXCJFeGNsdXNpb25cIl0gPSBcIkV4Y2x1c2lvblwiO1xufSkoQmxlbmRNb2RlIHx8IChCbGVuZE1vZGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGUGFnZU9wdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHJnYiB9IGZyb20gXCIuL2NvbG9yc1wiO1xuaW1wb3J0IHsgZHJhd0ltYWdlLCBkcmF3TGluZSwgZHJhd0xpbmVzT2ZUZXh0LCBkcmF3UGFnZSwgZHJhd1JlY3RhbmdsZSwgZHJhd1N2Z1BhdGgsIGRyYXdFbGxpcHNlLCB9IGZyb20gXCIuL29wZXJhdGlvbnNcIjtcbmltcG9ydCB7IHBvcEdyYXBoaWNzU3RhdGUsIHB1c2hHcmFwaGljc1N0YXRlLCB0cmFuc2xhdGUsIExpbmVDYXBTdHlsZSwgc2NhbGUsIH0gZnJvbSBcIi4vb3BlcmF0b3JzXCI7XG5pbXBvcnQgUERGRG9jdW1lbnQgZnJvbSBcIi4vUERGRG9jdW1lbnRcIjtcbmltcG9ydCBQREZFbWJlZGRlZFBhZ2UgZnJvbSBcIi4vUERGRW1iZWRkZWRQYWdlXCI7XG5pbXBvcnQgUERGRm9udCBmcm9tIFwiLi9QREZGb250XCI7XG5pbXBvcnQgUERGSW1hZ2UgZnJvbSBcIi4vUERGSW1hZ2VcIjtcbmltcG9ydCB7IEJsZW5kTW9kZSwgfSBmcm9tIFwiLi9QREZQYWdlT3B0aW9uc1wiO1xuaW1wb3J0IHsgZGVncmVlcywgdG9EZWdyZWVzIH0gZnJvbSBcIi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBTdGFuZGFyZEZvbnRzIH0gZnJvbSBcIi4vU3RhbmRhcmRGb250c1wiO1xuaW1wb3J0IHsgUERGQ29udGVudFN0cmVhbSwgUERGTmFtZSwgUERGT3BlcmF0b3IsIFBERlBhZ2VMZWFmLCBQREZSZWYsIFBERkRpY3QsIFBERkFycmF5LCB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBhc3NlcnRFYWNoSXMsIGFzc2VydElzLCBhc3NlcnRNdWx0aXBsZSwgYXNzZXJ0T3JVbmRlZmluZWQsIGJyZWFrVGV4dEludG9MaW5lcywgY2xlYW5UZXh0LCByZWN0YW5nbGVzQXJlRXF1YWwsIGxpbmVTcGxpdCwgYXNzZXJ0UmFuZ2VPclVuZGVmaW5lZCwgYXNzZXJ0SXNPbmVPZk9yVW5kZWZpbmVkLCB9IGZyb20gXCIuLi91dGlsc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2luZ2xlIHBhZ2Ugb2YgYSBbW1BERkRvY3VtZW50XV0uXG4gKi9cbnZhciBQREZQYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERlBhZ2UobGVhZk5vZGUsIHJlZiwgZG9jKSB7XG4gICAgICAgIHRoaXMuZm9udFNpemUgPSAyNDtcbiAgICAgICAgdGhpcy5mb250Q29sb3IgPSByZ2IoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMubGluZUhlaWdodCA9IDI0O1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICBhc3NlcnRJcyhsZWFmTm9kZSwgJ2xlYWZOb2RlJywgW1tQREZQYWdlTGVhZiwgJ1BERlBhZ2VMZWFmJ11dKTtcbiAgICAgICAgYXNzZXJ0SXMocmVmLCAncmVmJywgW1tQREZSZWYsICdQREZSZWYnXV0pO1xuICAgICAgICBhc3NlcnRJcyhkb2MsICdkb2MnLCBbW1BERkRvY3VtZW50LCAnUERGRG9jdW1lbnQnXV0pO1xuICAgICAgICB0aGlzLm5vZGUgPSBsZWFmTm9kZTtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgdGhpcyBwYWdlIGJ5IGEgbXVsdGlwbGUgb2YgOTAgZGVncmVlcy4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBkZWdyZWVzIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIHBhZ2Uuc2V0Um90YXRpb24oZGVncmVlcygtOTApKVxuICAgICAqIHBhZ2Uuc2V0Um90YXRpb24oZGVncmVlcygwKSlcbiAgICAgKiBwYWdlLnNldFJvdGF0aW9uKGRlZ3JlZXMoOTApKVxuICAgICAqIHBhZ2Uuc2V0Um90YXRpb24oZGVncmVlcygxODApKVxuICAgICAqIHBhZ2Uuc2V0Um90YXRpb24oZGVncmVlcygyNzApKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBhbmdsZSBUaGUgYW5nbGUgdG8gcm90YXRlIHRoaXMgcGFnZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgICAgICB2YXIgZGVncmVlc0FuZ2xlID0gdG9EZWdyZWVzKGFuZ2xlKTtcbiAgICAgICAgYXNzZXJ0TXVsdGlwbGUoZGVncmVlc0FuZ2xlLCAnZGVncmVlc0FuZ2xlJywgOTApO1xuICAgICAgICB0aGlzLm5vZGUuc2V0KFBERk5hbWUub2YoJ1JvdGF0ZScpLCB0aGlzLmRvYy5jb250ZXh0Lm9iaihkZWdyZWVzQW5nbGUpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIHBhZ2UncyByb3RhdGlvbiBhbmdsZSBpbiBkZWdyZWVzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHJvdGF0aW9uQW5nbGUgPSBwYWdlLmdldFJvdGF0aW9uKCkuYW5nbGU7XG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgVGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBwYWdlIGluIGRlZ3JlZXMgKGFsd2F5cyBhIG11bHRpcGxlIG9mXG4gICAgICogICAgICAgICAgOTAgZGVncmVlcykuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0Um90YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBSb3RhdGUgPSB0aGlzLm5vZGUuUm90YXRlKCk7XG4gICAgICAgIHJldHVybiBkZWdyZWVzKFJvdGF0ZSA/IFJvdGF0ZS5hc051bWJlcigpIDogMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhpcyBwYWdlIGJ5IGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZyBpdHMgd2lkdGggYW5kIGhlaWdodC4gRm9yXG4gICAgICogZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHBhZ2Uuc2V0U2l6ZSgyNTAsIDUwMClcbiAgICAgKiBwYWdlLnNldFNpemUocGFnZS5nZXRXaWR0aCgpICsgNTAsIHBhZ2UuZ2V0SGVpZ2h0KCkgKyAxMDApXG4gICAgICogcGFnZS5zZXRTaXplKHBhZ2UuZ2V0V2lkdGgoKSAtIDUwLCBwYWdlLmdldEhlaWdodCgpIC0gMTAwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZSBQREYgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBmb3IgcGFnZXMgdG8gaGF2ZSBleHBsaWNpdFxuICAgICAqIHdpZHRocyBhbmQgaGVpZ2h0cy4gSW5zdGVhZCBpdCBkZWZpbmVzIHRoZSBcInNpemVcIiBvZiBhIHBhZ2UgaW4gdGVybXMgb2ZcbiAgICAgKiBmaXZlIHJlY3RhbmdsZXM6IHRoZSBNZWRpYUJveCwgQ3JvcEJveCwgQmxlZWRCb3gsIFRyaW1Cb3gsIGFuZCBBcnRCb3guIEFzIGFcbiAgICAgKiByZXN1bHQsIHRoaXMgbWV0aG9kIGNhbm5vdCBkaXJlY3RseSBjaGFuZ2UgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgYSBwYWdlLlxuICAgICAqIEluc3RlYWQsIGl0IHdvcmtzIGJ5IGFkanVzdGluZyB0aGVzZSBmaXZlIGJveGVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcGVyZm9ybXMgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgKiAgIDEuIFNldCB3aWR0aCAmIGhlaWdodCBvZiBNZWRpYUJveC5cbiAgICAgKiAgIDIuIFNldCB3aWR0aCAmIGhlaWdodCBvZiBDcm9wQm94LCBpZiBpdCBoYXMgc2FtZSBkaW1lbnNpb25zIGFzIE1lZGlhQm94LlxuICAgICAqICAgMy4gU2V0IHdpZHRoICYgaGVpZ2h0IG9mIEJsZWVkQm94LCBpZiBpdCBoYXMgc2FtZSBkaW1lbnNpb25zIGFzIE1lZGlhQm94LlxuICAgICAqICAgNC4gU2V0IHdpZHRoICYgaGVpZ2h0IG9mIFRyaW1Cb3gsIGlmIGl0IGhhcyBzYW1lIGRpbWVuc2lvbnMgYXMgTWVkaWFCb3guXG4gICAgICogICA1LiBTZXQgd2lkdGggJiBoZWlnaHQgb2YgQXJ0Qm94LCBpZiBpdCBoYXMgc2FtZSBkaW1lbnNpb25zIGFzIE1lZGlhQm94LlxuICAgICAqXG4gICAgICogVGhpcyBhcHByb2FjaCB3b3JrcyB3ZWxsIGZvciBtb3N0IFBERiBkb2N1bWVudHMgYXMgYWxsIFBERiBwYWdlcyBtdXN0XG4gICAgICogaGF2ZSBhIE1lZGlhQm94LCBidXQgcmVsYXRpdmVseSBmZXcgaGF2ZSBhIENyb3BCb3gsIEJsZWVkQm94LCBUcmltQm94LCBvclxuICAgICAqIEFydEJveC4gQW5kIHdoZW4gdGhleSBkbyBoYXZlIHRoZXNlIGFkZGl0aW9uYWwgYm94ZXMsIHRoZXkgb2Z0ZW4gaGF2ZSB0aGVcbiAgICAgKiBzYW1lIGRpbWVuc2lvbnMgYXMgdGhlIE1lZGlhQm94LiBIb3dldmVyLCBpZiB5b3UgZmluZCB0aGlzIG1ldGhvZCBkb2VzIG5vdFxuICAgICAqIHdvcmsgZm9yIHlvdXIgZG9jdW1lbnQsIGNvbnNpZGVyIHNldHRpbmcgdGhlIGJveGVzIGRpcmVjdGx5OlxuICAgICAqICAgKiBbW1BERlBhZ2Uuc2V0TWVkaWFCb3hdXVxuICAgICAqICAgKiBbW1BERlBhZ2Uuc2V0Q3JvcEJveF1dXG4gICAgICogICAqIFtbUERGUGFnZS5zZXRCbGVlZEJveF1dXG4gICAgICogICAqIFtbUERGUGFnZS5zZXRUcmltQm94XV1cbiAgICAgKiAgICogW1tQREZQYWdlLnNldEFydEJveF1dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2lkdGggVGhlIG5ldyB3aWR0aCBvZiB0aGUgcGFnZS5cbiAgICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBhc3NlcnRJcyh3aWR0aCwgJ3dpZHRoJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKGhlaWdodCwgJ2hlaWdodCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICB2YXIgbWVkaWFCb3ggPSB0aGlzLmdldE1lZGlhQm94KCk7XG4gICAgICAgIHRoaXMuc2V0TWVkaWFCb3gobWVkaWFCb3gueCwgbWVkaWFCb3gueSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHZhciBjcm9wQm94ID0gdGhpcy5nZXRDcm9wQm94KCk7XG4gICAgICAgIHZhciBibGVlZEJveCA9IHRoaXMuZ2V0QmxlZWRCb3goKTtcbiAgICAgICAgdmFyIHRyaW1Cb3ggPSB0aGlzLmdldFRyaW1Cb3goKTtcbiAgICAgICAgdmFyIGFydEJveCA9IHRoaXMuZ2V0QXJ0Qm94KCk7XG4gICAgICAgIHZhciBoYXNDcm9wQm94ID0gdGhpcy5ub2RlLkNyb3BCb3goKTtcbiAgICAgICAgdmFyIGhhc0JsZWVkQm94ID0gdGhpcy5ub2RlLkJsZWVkQm94KCk7XG4gICAgICAgIHZhciBoYXNUcmltQm94ID0gdGhpcy5ub2RlLlRyaW1Cb3goKTtcbiAgICAgICAgdmFyIGhhc0FydEJveCA9IHRoaXMubm9kZS5BcnRCb3goKTtcbiAgICAgICAgaWYgKGhhc0Nyb3BCb3ggJiYgcmVjdGFuZ2xlc0FyZUVxdWFsKGNyb3BCb3gsIG1lZGlhQm94KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDcm9wQm94KG1lZGlhQm94LngsIG1lZGlhQm94LnksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNCbGVlZEJveCAmJiByZWN0YW5nbGVzQXJlRXF1YWwoYmxlZWRCb3gsIG1lZGlhQm94KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRCbGVlZEJveChtZWRpYUJveC54LCBtZWRpYUJveC55LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVHJpbUJveCAmJiByZWN0YW5nbGVzQXJlRXF1YWwodHJpbUJveCwgbWVkaWFCb3gpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRyaW1Cb3gobWVkaWFCb3gueCwgbWVkaWFCb3gueSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0FydEJveCAmJiByZWN0YW5nbGVzQXJlRXF1YWwoYXJ0Qm94LCBtZWRpYUJveCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXJ0Qm94KG1lZGlhQm94LngsIG1lZGlhQm94LnksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhpcyBwYWdlIGJ5IGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZyBpdHMgd2lkdGguIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGFnZS5zZXRXaWR0aCgyNTApXG4gICAgICogcGFnZS5zZXRXaWR0aChwYWdlLmdldFdpZHRoKCkgKyA1MClcbiAgICAgKiBwYWdlLnNldFdpZHRoKHBhZ2UuZ2V0V2lkdGgoKSAtIDUwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgdXNlcyBbW1BERlBhZ2Uuc2V0U2l6ZV1dIHRvIHNldCB0aGUgcGFnZSdzIHdpZHRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHdpZHRoIFRoZSBuZXcgd2lkdGggb2YgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgYXNzZXJ0SXMod2lkdGgsICd3aWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIHRoaXMuZ2V0U2l6ZSgpLmhlaWdodCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhpcyBwYWdlIGJ5IGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZyBpdHMgaGVpZ2h0LiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHBhZ2Uuc2V0SGVpZ2h0KDUwMClcbiAgICAgKiBwYWdlLnNldEhlaWdodChwYWdlLmdldFdpZHRoKCkgKyAxMDApXG4gICAgICogcGFnZS5zZXRIZWlnaHQocGFnZS5nZXRXaWR0aCgpIC0gMTAwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgdXNlcyBbW1BERlBhZ2Uuc2V0U2l6ZV1dIHRvIHNldCB0aGUgcGFnZSdzIGhlaWdodC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIG5ldyBoZWlnaHQgb2YgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICBhc3NlcnRJcyhoZWlnaHQsICdoZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgdGhpcy5zZXRTaXplKHRoaXMuZ2V0U2l6ZSgpLndpZHRoLCBoZWlnaHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBNZWRpYUJveCBvZiB0aGlzIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgbWVkaWFCb3ggPSBwYWdlLmdldE1lZGlhQm94KClcbiAgICAgKlxuICAgICAqIHBhZ2Uuc2V0TWVkaWFCb3goMCwgMCwgMjUwLCA1MDApXG4gICAgICogcGFnZS5zZXRNZWRpYUJveChtZWRpYUJveC54LCBtZWRpYUJveC55LCA1MCwgMTAwKVxuICAgICAqIHBhZ2Uuc2V0TWVkaWFCb3goMTUsIDUsIG1lZGlhQm94LndpZHRoIC0gNTAsIG1lZGlhQm94LmhlaWdodCAtIDEwMClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFNlZSBbW1BERlBhZ2UuZ2V0TWVkaWFCb3hdXSBmb3IgZGV0YWlscyBhYm91dCB3aGF0IHRoZSBNZWRpYUJveCByZXByZXNlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHggVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIG5ldyBNZWRpYUJveC5cbiAgICAgKiBAcGFyYW0geSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgbmV3IE1lZGlhQm94LlxuICAgICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggb2YgdGhlIG5ldyBNZWRpYUJveC5cbiAgICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBoZWlnaHQgb2YgdGhlIG5ldyBNZWRpYUJveC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zZXRNZWRpYUJveCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGFzc2VydElzKHgsICd4JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHksICd5JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHdpZHRoLCAnd2lkdGgnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoaGVpZ2h0LCAnaGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgICAgIHZhciBtZWRpYUJveCA9IHRoaXMuZG9jLmNvbnRleHQub2JqKFt4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHRdKTtcbiAgICAgICAgdGhpcy5ub2RlLnNldChQREZOYW1lLk1lZGlhQm94LCBtZWRpYUJveCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIENyb3BCb3ggb2YgdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNyb3BCb3ggPSBwYWdlLmdldENyb3BCb3goKVxuICAgICAqXG4gICAgICogcGFnZS5zZXRDcm9wQm94KDAsIDAsIDI1MCwgNTAwKVxuICAgICAqIHBhZ2Uuc2V0Q3JvcEJveChjcm9wQm94LngsIGNyb3BCb3gueSwgNTAsIDEwMClcbiAgICAgKiBwYWdlLnNldENyb3BCb3goMTUsIDUsIGNyb3BCb3gud2lkdGggLSA1MCwgY3JvcEJveC5oZWlnaHQgLSAxMDApXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUgW1tQREZQYWdlLmdldENyb3BCb3hdXSBmb3IgZGV0YWlscyBhYm91dCB3aGF0IHRoZSBDcm9wQm94IHJlcHJlc2VudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgbmV3IENyb3BCb3guXG4gICAgICogQHBhcmFtIHkgVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIG5ldyBDcm9wQm94LlxuICAgICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggb2YgdGhlIG5ldyBDcm9wQm94LlxuICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgbmV3IENyb3BCb3guXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuc2V0Q3JvcEJveCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGFzc2VydElzKHgsICd4JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHksICd5JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHdpZHRoLCAnd2lkdGgnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoaGVpZ2h0LCAnaGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgICAgIHZhciBjcm9wQm94ID0gdGhpcy5kb2MuY29udGV4dC5vYmooW3gsIHksIHggKyB3aWR0aCwgeSArIGhlaWdodF0pO1xuICAgICAgICB0aGlzLm5vZGUuc2V0KFBERk5hbWUuQ3JvcEJveCwgY3JvcEJveCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIEJsZWVkQm94IG9mIHRoaXMgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBibGVlZEJveCA9IHBhZ2UuZ2V0QmxlZWRCb3goKVxuICAgICAqXG4gICAgICogcGFnZS5zZXRCbGVlZEJveCgwLCAwLCAyNTAsIDUwMClcbiAgICAgKiBwYWdlLnNldEJsZWVkQm94KGJsZWVkQm94LngsIGJsZWVkQm94LnksIDUwLCAxMDApXG4gICAgICogcGFnZS5zZXRCbGVlZEJveCgxNSwgNSwgYmxlZWRCb3gud2lkdGggLSA1MCwgYmxlZWRCb3guaGVpZ2h0IC0gMTAwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogU2VlIFtbUERGUGFnZS5nZXRCbGVlZEJveF1dIGZvciBkZXRhaWxzIGFib3V0IHdoYXQgdGhlIEJsZWVkQm94IHJlcHJlc2VudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgbmV3IEJsZWVkQm94LlxuICAgICAqIEBwYXJhbSB5IFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBuZXcgQmxlZWRCb3guXG4gICAgICogQHBhcmFtIHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgbmV3IEJsZWVkQm94LlxuICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgbmV3IEJsZWVkQm94LlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldEJsZWVkQm94ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgYXNzZXJ0SXMoeCwgJ3gnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoeSwgJ3knLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMod2lkdGgsICd3aWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRJcyhoZWlnaHQsICdoZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgdmFyIGJsZWVkQm94ID0gdGhpcy5kb2MuY29udGV4dC5vYmooW3gsIHksIHggKyB3aWR0aCwgeSArIGhlaWdodF0pO1xuICAgICAgICB0aGlzLm5vZGUuc2V0KFBERk5hbWUuQmxlZWRCb3gsIGJsZWVkQm94KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgVHJpbUJveCBvZiB0aGlzIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdHJpbUJveCA9IHBhZ2UuZ2V0VHJpbUJveCgpXG4gICAgICpcbiAgICAgKiBwYWdlLnNldFRyaW1Cb3goMCwgMCwgMjUwLCA1MDApXG4gICAgICogcGFnZS5zZXRUcmltQm94KHRyaW1Cb3gueCwgdHJpbUJveC55LCA1MCwgMTAwKVxuICAgICAqIHBhZ2Uuc2V0VHJpbUJveCgxNSwgNSwgdHJpbUJveC53aWR0aCAtIDUwLCB0cmltQm94LmhlaWdodCAtIDEwMClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFNlZSBbW1BERlBhZ2UuZ2V0VHJpbUJveF1dIGZvciBkZXRhaWxzIGFib3V0IHdoYXQgdGhlIFRyaW1Cb3ggcmVwcmVzZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBuZXcgVHJpbUJveC5cbiAgICAgKiBAcGFyYW0geSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgbmV3IFRyaW1Cb3guXG4gICAgICogQHBhcmFtIHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgbmV3IFRyaW1Cb3guXG4gICAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBuZXcgVHJpbUJveC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zZXRUcmltQm94ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgYXNzZXJ0SXMoeCwgJ3gnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoeSwgJ3knLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMod2lkdGgsICd3aWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRJcyhoZWlnaHQsICdoZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgdmFyIHRyaW1Cb3ggPSB0aGlzLmRvYy5jb250ZXh0Lm9iaihbeCwgeSwgeCArIHdpZHRoLCB5ICsgaGVpZ2h0XSk7XG4gICAgICAgIHRoaXMubm9kZS5zZXQoUERGTmFtZS5UcmltQm94LCB0cmltQm94KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQXJ0Qm94IG9mIHRoaXMgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBhcnRCb3ggPSBwYWdlLmdldEFydEJveCgpXG4gICAgICpcbiAgICAgKiBwYWdlLnNldEFydEJveCgwLCAwLCAyNTAsIDUwMClcbiAgICAgKiBwYWdlLnNldEFydEJveChhcnRCb3gueCwgYXJ0Qm94LnksIDUwLCAxMDApXG4gICAgICogcGFnZS5zZXRBcnRCb3goMTUsIDUsIGFydEJveC53aWR0aCAtIDUwLCBhcnRCb3guaGVpZ2h0IC0gMTAwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogU2VlIFtbUERGUGFnZS5nZXRBcnRCb3hdXSBmb3IgZGV0YWlscyBhYm91dCB3aGF0IHRoZSBBcnRCb3ggcmVwcmVzZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBuZXcgQXJ0Qm94LlxuICAgICAqIEBwYXJhbSB5IFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBuZXcgQXJ0Qm94LlxuICAgICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggb2YgdGhlIG5ldyBBcnRCb3guXG4gICAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBuZXcgQXJ0Qm94LlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldEFydEJveCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGFzc2VydElzKHgsICd4JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHksICd5JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHdpZHRoLCAnd2lkdGgnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoaGVpZ2h0LCAnaGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgICAgIHZhciBhcnRCb3ggPSB0aGlzLmRvYy5jb250ZXh0Lm9iaihbeCwgeSwgeCArIHdpZHRoLCB5ICsgaGVpZ2h0XSk7XG4gICAgICAgIHRoaXMubm9kZS5zZXQoUERGTmFtZS5BcnRCb3gsIGFydEJveCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBwYWdlJ3Mgd2lkdGggYW5kIGhlaWdodC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHBhZ2UuZ2V0U2l6ZSgpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB1c2VzIFtbUERGUGFnZS5nZXRNZWRpYUJveF1dIHRvIG9idGFpbiB0aGUgcGFnZSdzXG4gICAgICogd2lkdGggYW5kIGhlaWdodC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0TWVkaWFCb3goKSwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0O1xuICAgICAgICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBwYWdlJ3Mgd2lkdGguIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3Qgd2lkdGggPSBwYWdlLmdldFdpZHRoKClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgW1tQREZQYWdlLmdldFNpemVdXSB0byBvYnRhaW4gdGhlIHBhZ2UncyBzaXplLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHdpZHRoIG9mIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTaXplKCkud2lkdGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBwYWdlJ3MgaGVpZ2h0LiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGhlaWdodCA9IHBhZ2UuZ2V0SGVpZ2h0KClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHVzZXMgW1tQREZQYWdlLmdldFNpemVdXSB0byBvYnRhaW4gdGhlIHBhZ2UncyBzaXplLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGhlaWdodCBvZiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNpemUoKS5oZWlnaHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlY3RhbmdsZSBkZWZpbmluZyB0aGlzIHBhZ2UncyBNZWRpYUJveC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHBhZ2UuZ2V0TWVkaWFCb3goKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIE1lZGlhQm94IG9mIGEgcGFnZSBkZWZpbmVzIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwaHlzaWNhbCBtZWRpdW0gb25cbiAgICAgKiB3aGljaCB0aGUgcGFnZSBpcyB0byBiZSBkaXNwbGF5ZWQvcHJpbnRlZC4gSXQgbWF5IGluY2x1ZGUgZXh0ZW5kZWQgYXJlYVxuICAgICAqIHN1cnJvdW5kaW5nIHRoZSBwYWdlIGNvbnRlbnQgZm9yIGJsZWVkIG1hcmtzLCBwcmludGluZyBtYXJrcywgZXRjLi4uXG4gICAgICogSXQgbWF5IGFsc28gaW5jbHVkZSBhcmVhcyBjbG9zZSB0byB0aGUgZWRnZXMgb2YgdGhlIG1lZGl1bSB0aGF0IGNhbm5vdCBiZVxuICAgICAqIG1hcmtlZCBiZWNhdXNlIG9mIHBoeXNpY2FsIGxpbWl0YXRpb25zIG9mIHRoZSBvdXRwdXQgZGV2aWNlLiBDb250ZW50XG4gICAgICogZmFsbGluZyBvdXRzaWRlIHRoaXMgYm91bmRhcnkgbWF5IHNhZmVseSBiZSBkaXNjYXJkZWQgd2l0aG91dCBhZmZlY3RpbmdcbiAgICAgKiB0aGUgbWVhbmluZyBvZiB0aGUgUERGIGZpbGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBvYmplY3QgZGVmaW5pbmcgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBNZWRpYUJveCBhbmQgaXRzXG4gICAgICogICAgICAgICAgd2lkdGggJiBoZWlnaHQuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0TWVkaWFCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZWRpYUJveCA9IHRoaXMubm9kZS5NZWRpYUJveCgpO1xuICAgICAgICByZXR1cm4gbWVkaWFCb3guYXNSZWN0YW5nbGUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVjdGFuZ2xlIGRlZmluaW5nIHRoaXMgcGFnZSdzIENyb3BCb3guIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBwYWdlLmdldENyb3BCb3goKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIENyb3BCb3ggb2YgYSBwYWdlIGRlZmluZXMgdGhlIHJlZ2lvbiB0byB3aGljaCB0aGUgY29udGVudHMgb2YgdGhlIHBhZ2VcbiAgICAgKiBzaGFsbCBiZSBjbGlwcGVkIHdoZW4gZGlzcGxheWVkIG9yIHByaW50ZWQuIFVubGlrZSB0aGUgb3RoZXIgYm94ZXMsIHRoZVxuICAgICAqIENyb3BCb3ggZG9lcyBub3QgbmVjZXNzYXJpbHkgcmVwcmVzZW50IHRoZSBwaHlzaWNhbCBwYWdlIGdlb21ldHJ5LiBJdFxuICAgICAqIG1lcmVseSBpbXBvc2VzIGNsaXBwaW5nIG9uIHRoZSBwYWdlIGNvbnRlbnRzLlxuICAgICAqXG4gICAgICogVGhlIENyb3BCb3gncyBkZWZhdWx0IHZhbHVlIGlzIHRoZSBwYWdlJ3MgTWVkaWFCb3guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBvYmplY3QgZGVmaW5pbmcgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBDcm9wQm94IGFuZCBpdHNcbiAgICAgKiAgICAgICAgICB3aWR0aCAmIGhlaWdodC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5nZXRDcm9wQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjcm9wQm94ID0gdGhpcy5ub2RlLkNyb3BCb3goKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGNyb3BCb3ggPT09IG51bGwgfHwgY3JvcEJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3JvcEJveC5hc1JlY3RhbmdsZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmdldE1lZGlhQm94KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlY3RhbmdsZSBkZWZpbmluZyB0aGlzIHBhZ2UncyBCbGVlZEJveC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHBhZ2UuZ2V0QmxlZWRCb3goKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIEJsZWVkQm94IG9mIGEgcGFnZSBkZWZpbmVzIHRoZSByZWdpb24gdG8gd2hpY2ggdGhlIGNvbnRlbnRzIG9mIHRoZVxuICAgICAqIHBhZ2Ugc2hhbGwgYmUgY2xpcHBlZCB3aGVuIG91dHB1dCBpbiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQuIFRoaXMgbWF5XG4gICAgICogaW5jbHVkZSBhbnkgZXh0cmEgYmxlZWQgYXJlYSBuZWVkZWQgdG8gYWNjb21tb2RhdGUgdGhlIHBoeXNpY2FsXG4gICAgICogbGltaXRhdGlvbnMgb2YgY3V0dGluZywgZm9sZGluZywgYW5kIHRyaW1taW5nIGVxdWlwbWVudC4gVGhlIGFjdHVhbFxuICAgICAqIHByaW50ZWQgcGFnZSBtYXkgaW5jbHVkZSBwcmludGluZyBtYXJrcyB0aGF0IGZhbGwgb3V0c2lkZSB0aGUgQmxlZWRCb3guXG4gICAgICpcbiAgICAgKiBUaGUgQmxlZWRCb3gncyBkZWZhdWx0IHZhbHVlIGlzIHRoZSBwYWdlJ3MgQ3JvcEJveC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIG9iamVjdCBkZWZpbmluZyB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIEJsZWVkQm94IGFuZCBpdHNcbiAgICAgKiAgICAgICAgICB3aWR0aCAmIGhlaWdodC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5nZXRCbGVlZEJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYmxlZWRCb3ggPSB0aGlzLm5vZGUuQmxlZWRCb3goKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGJsZWVkQm94ID09PSBudWxsIHx8IGJsZWVkQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBibGVlZEJveC5hc1JlY3RhbmdsZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmdldENyb3BCb3goKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVjdGFuZ2xlIGRlZmluaW5nIHRoaXMgcGFnZSdzIFRyaW1Cb3guIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBwYWdlLmdldFRyaW1Cb3goKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIFRyaW1Cb3ggb2YgYSBwYWdlIGRlZmluZXMgdGhlIGludGVuZGVkIGRpbWVuc2lvbnMgb2YgdGhlIGZpbmlzaGVkXG4gICAgICogcGFnZSBhZnRlciB0cmltbWluZy4gSXQgbWF5IGJlIHNtYWxsZXIgdGhhbiB0aGUgTWVkaWFCb3ggdG8gYWxsb3cgZm9yXG4gICAgICogcHJvZHVjdGlvbi1yZWxhdGVkIGNvbnRlbnQsIHN1Y2ggYXMgcHJpbnRpbmcgaW5zdHJ1Y3Rpb25zLCBjdXQgbWFya3MsIG9yXG4gICAgICogY29sb3IgYmFycy5cbiAgICAgKlxuICAgICAqIFRoZSBUcmltQm94J3MgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgcGFnZSdzIENyb3BCb3guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBvYmplY3QgZGVmaW5pbmcgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBUcmltQm94IGFuZCBpdHNcbiAgICAgKiAgICAgICAgICB3aWR0aCAmIGhlaWdodC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5nZXRUcmltQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB0cmltQm94ID0gdGhpcy5ub2RlLlRyaW1Cb3goKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRyaW1Cb3ggPT09IG51bGwgfHwgdHJpbUJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJpbUJveC5hc1JlY3RhbmdsZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmdldENyb3BCb3goKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVjdGFuZ2xlIGRlZmluaW5nIHRoaXMgcGFnZSdzIEFydEJveC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHBhZ2UuZ2V0QXJ0Qm94KClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSBBcnRCb3ggb2YgYSBwYWdlIGRlZmluZXMgdGhlIGV4dGVudCBvZiB0aGUgcGFnZSdzIG1lYW5pbmdmdWwgY29udGVudFxuICAgICAqIChpbmNsdWRpbmcgcG90ZW50aWFsIHdoaXRlIHNwYWNlKS5cbiAgICAgKlxuICAgICAqIFRoZSBBcnRCb3gncyBkZWZhdWx0IHZhbHVlIGlzIHRoZSBwYWdlJ3MgQ3JvcEJveC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIG9iamVjdCBkZWZpbmluZyB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIEFydEJveCBhbmQgaXRzXG4gICAgICogICAgICAgICAgd2lkdGggJiBoZWlnaHQuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0QXJ0Qm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcnRCb3ggPSB0aGlzLm5vZGUuQXJ0Qm94KCk7XG4gICAgICAgIHJldHVybiAoX2EgPSBhcnRCb3ggPT09IG51bGwgfHwgYXJ0Qm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcnRCb3guYXNSZWN0YW5nbGUoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5nZXRDcm9wQm94KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgdGhpcyBwYWdlJ3MgY29udGVudCB0byBhIG5ldyBsb2NhdGlvbiBvbiB0aGUgcGFnZS4gVGhpcyBvcGVyYXRpb25cbiAgICAgKiBpcyBvZnRlbiB1c2VmdWwgYWZ0ZXIgcmVzaXppbmcgdGhlIHBhZ2Ugd2l0aCBbW3NldFNpemVdXS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiAvLyBBZGQgNTAgdW5pdHMgb2Ygd2hpdGVzcGFjZSB0byB0aGUgdG9wIGFuZCByaWdodCBvZiB0aGUgcGFnZVxuICAgICAqIHBhZ2Uuc2V0U2l6ZShwYWdlLmdldFdpZHRoKCkgKyA1MCwgcGFnZS5nZXRIZWlnaHQoKSArIDUwKVxuICAgICAqXG4gICAgICogLy8gTW92ZSB0aGUgcGFnZSdzIGNvbnRlbnQgZnJvbSB0aGUgbG93ZXItbGVmdCBjb3JuZXIgb2YgdGhlIHBhZ2VcbiAgICAgKiAvLyB0byB0aGUgdG9wLXJpZ2h0IGNvcm5lci5cbiAgICAgKiBwYWdlLnRyYW5zbGF0ZUNvbnRlbnQoNTAsIDUwKVxuICAgICAqXG4gICAgICogLy8gTm93IHRoZXJlIGFyZSA1MCB1bml0cyBvZiB3aGl0ZXNwYWNlIHRvIHRoZSBsZWZ0IGFuZCBib3R0b20gb2YgdGhlIHBhZ2VcbiAgICAgKiBgYGBcbiAgICAgKiBTZWUgYWxzbzogW1tyZXNldFBvc2l0aW9uXV1cbiAgICAgKiBAcGFyYW0geCBUaGUgbmV3IHBvc2l0aW9uIG9uIHRoZSB4LWF4aXMgZm9yIHRoaXMgcGFnZSdzIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHkgVGhlIG5ldyBwb3NpdGlvbiBvbiB0aGUgeS1heGlzIGZvciB0aGlzIHBhZ2UncyBjb250ZW50LlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnRyYW5zbGF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBhc3NlcnRJcyh4LCAneCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRJcyh5LCAneScsIFsnbnVtYmVyJ10pO1xuICAgICAgICB0aGlzLm5vZGUubm9ybWFsaXplKCk7XG4gICAgICAgIHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmNyZWF0ZUNvbnRlbnRTdHJlYW0ocHVzaEdyYXBoaWNzU3RhdGUoKSwgdHJhbnNsYXRlKHgsIHkpKTtcbiAgICAgICAgdmFyIHN0YXJ0UmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3RlcihzdGFydCk7XG4gICAgICAgIHZhciBlbmQgPSB0aGlzLmNyZWF0ZUNvbnRlbnRTdHJlYW0ocG9wR3JhcGhpY3NTdGF0ZSgpKTtcbiAgICAgICAgdmFyIGVuZFJlZiA9IHRoaXMuZG9jLmNvbnRleHQucmVnaXN0ZXIoZW5kKTtcbiAgICAgICAgdGhpcy5ub2RlLndyYXBDb250ZW50U3RyZWFtcyhzdGFydFJlZiwgZW5kUmVmKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBzaXplLCBjb250ZW50LCBhbmQgYW5ub3RhdGlvbnMgb2YgYSBwYWdlLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwYWdlLnNjYWxlKDAuNSwgMC41KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFRoZSBmYWN0b3IgYnkgd2hpY2ggdGhlIHdpZHRoIGZvciB0aGUgcGFnZSBzaG91bGQgYmUgc2NhbGVkXG4gICAgICogICAgICAgICAgKGUuZy4gYDAuNWAgaXMgNTAlKS5cbiAgICAgKiBAcGFyYW0geSBUaGUgZmFjdG9yIGJ5IHdoaWNoIHRoZSBoZWlnaHQgZm9yIHRoZSBwYWdlIHNob3VsZCBiZSBzY2FsZWRcbiAgICAgKiAgICAgICAgICAoZS5nLiBgMi4wYCBpcyAyMDAlKS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIGFzc2VydElzKHgsICd4JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKHksICd5JywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMuc2V0U2l6ZSh0aGlzLmdldFdpZHRoKCkgKiB4LCB0aGlzLmdldEhlaWdodCgpICogeSk7XG4gICAgICAgIHRoaXMuc2NhbGVDb250ZW50KHgsIHkpO1xuICAgICAgICB0aGlzLnNjYWxlQW5ub3RhdGlvbnMoeCwgeSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY29udGVudCBvZiBhIHBhZ2UuIFRoaXMgaXMgdXNlZnVsIGFmdGVyIHJlc2l6aW5nIGFuIGV4aXN0aW5nXG4gICAgICogcGFnZS4gVGhpcyBzY2FsZXMgb25seSB0aGUgY29udGVudCwgbm90IHRoZSBhbm5vdGF0aW9ucy5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQmlzZWN0IHRoZSBzaXplIG9mIHRoZSBwYWdlXG4gICAgICogcGFnZS5zZXRTaXplKHBhZ2UuZ2V0V2lkdGgoKSAvIDIsIHBhZ2UuZ2V0SGVpZ2h0KCkgLyAyKTtcbiAgICAgKlxuICAgICAqIC8vIFNjYWxlIHRoZSBjb250ZW50IG9mIHRoZSBwYWdlIGRvd24gYnkgNTAlIGluIHggYW5kIHlcbiAgICAgKiBwYWdlLnNjYWxlQ29udGVudCgwLjUsIDAuNSk7XG4gICAgICogYGBgXG4gICAgICogU2VlIGFsc286IFtbc2NhbGVBbm5vdGF0aW9uc11dXG4gICAgICogQHBhcmFtIHggVGhlIGZhY3RvciBieSB3aGljaCB0aGUgeC1heGlzIGZvciB0aGUgY29udGVudCBzaG91bGQgYmUgc2NhbGVkXG4gICAgICogICAgICAgICAgKGUuZy4gYDAuNWAgaXMgNTAlKS5cbiAgICAgKiBAcGFyYW0geSBUaGUgZmFjdG9yIGJ5IHdoaWNoIHRoZSB5LWF4aXMgZm9yIHRoZSBjb250ZW50IHNob3VsZCBiZSBzY2FsZWRcbiAgICAgKiAgICAgICAgICAoZS5nLiBgMi4wYCBpcyAyMDAlKS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zY2FsZUNvbnRlbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBhc3NlcnRJcyh4LCAneCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRJcyh5LCAneScsIFsnbnVtYmVyJ10pO1xuICAgICAgICB0aGlzLm5vZGUubm9ybWFsaXplKCk7XG4gICAgICAgIHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmNyZWF0ZUNvbnRlbnRTdHJlYW0ocHVzaEdyYXBoaWNzU3RhdGUoKSwgc2NhbGUoeCwgeSkpO1xuICAgICAgICB2YXIgc3RhcnRSZWYgPSB0aGlzLmRvYy5jb250ZXh0LnJlZ2lzdGVyKHN0YXJ0KTtcbiAgICAgICAgdmFyIGVuZCA9IHRoaXMuY3JlYXRlQ29udGVudFN0cmVhbShwb3BHcmFwaGljc1N0YXRlKCkpO1xuICAgICAgICB2YXIgZW5kUmVmID0gdGhpcy5kb2MuY29udGV4dC5yZWdpc3RlcihlbmQpO1xuICAgICAgICB0aGlzLm5vZGUud3JhcENvbnRlbnRTdHJlYW1zKHN0YXJ0UmVmLCBlbmRSZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGFubm90YXRpb25zIG9mIGEgcGFnZS4gVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gc2NhbGUgYVxuICAgICAqIHBhZ2Ugd2l0aCBjb21tZW50cyBvciBvdGhlciBhbm5vdGF0aW9ucy5cbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIFNjYWxlIHRoZSBjb250ZW50IG9mIHRoZSBwYWdlIGRvd24gYnkgNTAlIGluIHggYW5kIHlcbiAgICAgKiBwYWdlLnNjYWxlQ29udGVudCgwLjUsIDAuNSk7XG4gICAgICpcbiAgICAgKiAvLyBTY2FsZSB0aGUgY29udGVudCBvZiB0aGUgcGFnZSBkb3duIGJ5IDUwJSBpbiB4IGFuZCB5XG4gICAgICogcGFnZS5zY2FsZUFubm90YXRpb25zKDAuNSwgMC41KTtcbiAgICAgKiBgYGBcbiAgICAgKiBTZWUgYWxzbzogW1tzY2FsZUNvbnRlbnRdXVxuICAgICAqIEBwYXJhbSB4IFRoZSBmYWN0b3IgYnkgd2hpY2ggdGhlIHgtYXhpcyBmb3IgdGhlIGFubm90YXRpb25zIHNob3VsZCBiZVxuICAgICAqICAgICAgICAgIHNjYWxlZCAoZS5nLiBgMC41YCBpcyA1MCUpLlxuICAgICAqIEBwYXJhbSB5IFRoZSBmYWN0b3IgYnkgd2hpY2ggdGhlIHktYXhpcyBmb3IgdGhlIGFubm90YXRpb25zIHNob3VsZCBiZVxuICAgICAqICAgICAgICAgIHNjYWxlZCAoZS5nLiBgMi4wYCBpcyAyMDAlKS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5zY2FsZUFubm90YXRpb25zID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgYXNzZXJ0SXMoeCwgJ3gnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMoeSwgJ3knLCBbJ251bWJlciddKTtcbiAgICAgICAgdmFyIGFubm90cyA9IHRoaXMubm9kZS5Bbm5vdHMoKTtcbiAgICAgICAgaWYgKCFhbm5vdHMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFubm90cy5zaXplKCk7IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgYW5ub3QgPSBhbm5vdHMubG9va3VwKGlkeCk7XG4gICAgICAgICAgICBpZiAoYW5ub3QgaW5zdGFuY2VvZiBQREZEaWN0KVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVBbm5vdChhbm5vdCwgeCwgeSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoaXMgcGFnZSB0byBgKDAsIDApYC4gVGhpcyBvcGVyYXRpb24gaXNcbiAgICAgKiBvZnRlbiB1c2VmdWwgYWZ0ZXIgY2FsbGluZyBbW3RyYW5zbGF0ZUNvbnRlbnRdXS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiAvLyBTaGlmdCB0aGUgcGFnZSdzIGNvbnRlbnRzIHVwIGFuZCB0byB0aGUgcmlnaHQgYnkgNTAgdW5pdHNcbiAgICAgKiBwYWdlLnRyYW5zbGF0ZUNvbnRlbnQoNTAsIDUwKVxuICAgICAqXG4gICAgICogLy8gVGhpcyB0ZXh0IHdpbGwgc2hpZnRlZCAtIGl0IHdpbGwgYmUgZHJhd24gYXQgKDUwLCA1MClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIGFtIHNoaWZ0ZWQnKVxuICAgICAqXG4gICAgICogLy8gTW92ZSBiYWNrIHRvICgwLCAwKVxuICAgICAqIHBhZ2UucmVzZXRQb3NpdGlvbigpXG4gICAgICpcbiAgICAgKiAvLyBUaGlzIHRleHQgd2lsbCBub3QgYmUgc2hpZnRlZCAtIGl0IHdpbGwgYmUgZHJhd24gYXQgKDAsIDApXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSBhbSBub3Qgc2hpZnRlZCcpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5nZXRDb250ZW50U3RyZWFtKGZhbHNlKTtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSBhIGRlZmF1bHQgZm9udCBmb3IgdGhpcyBwYWdlLiBUaGUgZGVmYXVsdCBmb250IHdpbGwgYmUgdXNlZCB3aGVuZXZlclxuICAgICAqIHRleHQgaXMgZHJhd24gb24gdGhpcyBwYWdlIGFuZCBubyBmb250IGlzIHNwZWNpZmllZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBTdGFuZGFyZEZvbnRzIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIGNvbnN0IHRpbWVzUm9tYW5Gb250ID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLlRpbWVzUm9tYW4pXG4gICAgICogY29uc3QgaGVsdmV0aWNhRm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgY291cmllckZvbnQgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuQ291cmllcilcbiAgICAgKlxuICAgICAqIGNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpXG4gICAgICpcbiAgICAgKiBwYWdlLnNldEZvbnQoaGVsdmV0aWNhRm9udClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gaW4gSGVsdmV0aWNhJylcbiAgICAgKlxuICAgICAqIHBhZ2Uuc2V0Rm9udCh0aW1lc1JvbWFuRm9udClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gaW4gQ291cmllcicsIHsgZm9udDogY291cmllckZvbnQgfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgZGVmYXVsdCBmb250IHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRleHQgb24gdGhpcyBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldEZvbnQgPSBmdW5jdGlvbiAoZm9udCkge1xuICAgICAgICAvLyBUT0RPOiBSZXVzZSBpbWFnZSBGb250IG5hbWUgaWYgd2UndmUgYWxyZWFkeSBhZGRlZCB0aGlzIGltYWdlIHRvIFJlc291cmNlcy5Gb250c1xuICAgICAgICBhc3NlcnRJcyhmb250LCAnZm9udCcsIFtbUERGRm9udCwgJ1BERkZvbnQnXV0pO1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmZvbnRLZXkgPSB0aGlzLm5vZGUubmV3Rm9udERpY3Rpb25hcnkodGhpcy5mb250Lm5hbWUsIHRoaXMuZm9udC5yZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIGEgZGVmYXVsdCBmb250IHNpemUgZm9yIHRoaXMgcGFnZS4gVGhlIGRlZmF1bHQgZm9udCBzaXplIHdpbGwgYmVcbiAgICAgKiB1c2VkIHdoZW5ldmVyIHRleHQgaXMgZHJhd24gb24gdGhpcyBwYWdlIGFuZCBubyBmb250IHNpemUgaXMgc3BlY2lmaWVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGFnZS5zZXRGb250U2l6ZSgxMilcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gaW4gc2l6ZSAxMicpXG4gICAgICpcbiAgICAgKiBwYWdlLnNldEZvbnRTaXplKDM2KVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biBpbiBzaXplIDI0JywgeyBmb250U2l6ZTogMjQgfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udFNpemUgVGhlIGRlZmF1bHQgZm9udCBzaXplIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRleHQgb24gdGhpc1xuICAgICAqICAgICAgICAgICAgICAgICBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKGZvbnRTaXplKSB7XG4gICAgICAgIGFzc2VydElzKGZvbnRTaXplLCAnZm9udFNpemUnLCBbJ251bWJlciddKTtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIGEgZGVmYXVsdCBmb250IGNvbG9yIGZvciB0aGlzIHBhZ2UuIFRoZSBkZWZhdWx0IGZvbnQgY29sb3Igd2lsbCBiZVxuICAgICAqIHVzZWQgd2hlbmV2ZXIgdGV4dCBpcyBkcmF3biBvbiB0aGlzIHBhZ2UgYW5kIG5vIGZvbnQgY29sb3IgaXMgc3BlY2lmaWVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgcmdiLCBjbXlrLCBncmF5c2NhbGUgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqXG4gICAgICogcGFnZS5zZXRGb250Q29sb3IocmdiKDAuOTcsIDAuMDIsIDAuOTcpKVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biBpbiBwaW5rJylcbiAgICAgKlxuICAgICAqIHBhZ2Uuc2V0Rm9udENvbG9yKGNteWsoMC40LCAwLjcsIDAuMzksIDAuMTUpKVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biBpbiBncmF5JywgeyBjb2xvcjogZ3JheXNjYWxlKDAuNSkgfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udENvbG9yIFRoZSBkZWZhdWx0IGZvbnQgY29sb3IgdG8gYmUgdXNlZCB3aGVuIGRyYXdpbmcgdGV4dCBvblxuICAgICAqICAgICAgICAgICAgICAgICAgdGhpcyBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldEZvbnRDb2xvciA9IGZ1bmN0aW9uIChmb250Q29sb3IpIHtcbiAgICAgICAgYXNzZXJ0SXMoZm9udENvbG9yLCAnZm9udENvbG9yJywgW1tPYmplY3QsICdDb2xvciddXSk7XG4gICAgICAgIHRoaXMuZm9udENvbG9yID0gZm9udENvbG9yO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIGEgZGVmYXVsdCBsaW5lIGhlaWdodCBmb3IgdGhpcyBwYWdlLiBUaGUgZGVmYXVsdCBsaW5lIGhlaWdodCB3aWxsIGJlXG4gICAgICogdXNlZCB3aGVuZXZlciB0ZXh0IGlzIGRyYXduIG9uIHRoaXMgcGFnZSBhbmQgbm8gbGluZSBoZWlnaHQgaXMgc3BlY2lmaWVkLlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogcGFnZS5zZXRMaW5lSGVpZ2h0KDEyKTtcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdUaGVzZSBsaW5lcyB3aWxsIGJlIHZlcnRpY2FsbHkgXFxuIHNlcGFyYXRlZCBieSAxMiB1bml0cycpXG4gICAgICpcbiAgICAgKiBwYWdlLnNldExpbmVIZWlnaHQoMzYpO1xuICAgICAqIHBhZ2UuZHJhd1RleHQoJ1RoZXNlIGxpbmVzIHdpbGwgYmUgdmVydGljYWxseSBcXG4gc2VwYXJhdGVkIGJ5IDI0IHVuaXRzJywge1xuICAgICAqICAgbGluZUhlaWdodDogMjRcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBsaW5lSGVpZ2h0IFRoZSBkZWZhdWx0IGxpbmUgaGVpZ2h0IHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRleHQgb25cbiAgICAgKiAgICAgICAgICAgICAgICAgICB0aGlzIHBhZ2UuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuc2V0TGluZUhlaWdodCA9IGZ1bmN0aW9uIChsaW5lSGVpZ2h0KSB7XG4gICAgICAgIGFzc2VydElzKGxpbmVIZWlnaHQsICdsaW5lSGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMubGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlZmF1bHQgcG9zaXRpb24gb2YgdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHsgeCwgeSB9ID0gcGFnZS5nZXRQb3NpdGlvbigpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgcG9zaXRpb24gb2YgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHRoaXMueCwgeTogdGhpcy55IH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlZmF1bHQgeCBjb29yZGluYXRlIG9mIHRoaXMgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB4ID0gcGFnZS5nZXRYKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBUaGUgZGVmYXVsdCB4IGNvb3JkaW5hdGUgb2YgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGVmYXVsdCB5IGNvb3JkaW5hdGUgb2YgdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHkgPSBwYWdlLmdldFkoKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIFRoZSBkZWZhdWx0IHkgY29vcmRpbmF0ZSBvZiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBkZWZhdWx0IHBvc2l0aW9uIG9mIHRoaXMgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwYWdlLm1vdmVUbygwLCAwKVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biBhdCB0aGUgb3JpZ2luJylcbiAgICAgKlxuICAgICAqIHBhZ2UubW92ZVRvKDAsIDI1KVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biAyNSB1bml0cyB1cCcpXG4gICAgICpcbiAgICAgKiBwYWdlLm1vdmVUbygyNSwgMjUpXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSB3aWxsIGJlIGRyYXduIDI1IHVuaXRzIHVwIGFuZCAyNSB1bml0cyB0byB0aGUgcmlnaHQnKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB4IFRoZSBuZXcgZGVmYXVsdCBwb3NpdGlvbiBvbiB0aGUgeC1heGlzIGZvciB0aGlzIHBhZ2UuXG4gICAgICogQHBhcmFtIHkgVGhlIG5ldyBkZWZhdWx0IHBvc2l0aW9uIG9uIHRoZSB5LWF4aXMgZm9yIHRoaXMgcGFnZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5tb3ZlVG8gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBhc3NlcnRJcyh4LCAneCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRJcyh5LCAneScsIFsnbnVtYmVyJ10pO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBkZWZhdWx0IHBvc2l0aW9uIG9mIHRoaXMgcGFnZSB0byBiZSBmdXJ0aGVyIGRvd24gdGhlIHktYXhpcy5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHBhZ2UubW92ZVRvKDUwLCA1MClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gYXQgKDUwLCA1MCknKVxuICAgICAqXG4gICAgICogcGFnZS5tb3ZlRG93bigxMClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gYXQgKDUwLCA0MCknKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB5RGVjcmVhc2UgVGhlIGFtb3VudCBieSB3aGljaCB0aGUgcGFnZSdzIGRlZmF1bHQgcG9zaXRpb24gYWxvbmcgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICB5LWF4aXMgc2hvdWxkIGJlIGRlY3JlYXNlZC5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5tb3ZlRG93biA9IGZ1bmN0aW9uICh5RGVjcmVhc2UpIHtcbiAgICAgICAgYXNzZXJ0SXMoeURlY3JlYXNlLCAneURlY3JlYXNlJywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMueSAtPSB5RGVjcmVhc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIGRlZmF1bHQgcG9zaXRpb24gb2YgdGhpcyBwYWdlIHRvIGJlIGZ1cnRoZXIgdXAgdGhlIHktYXhpcy5cbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIHBhZ2UubW92ZVRvKDUwLCA1MClcbiAgICAgKiBwYWdlLmRyYXdUZXh0KCdJIHdpbGwgYmUgZHJhd24gYXQgKDUwLCA1MCknKVxuICAgICAqXG4gICAgICogcGFnZS5tb3ZlVXAoMTApXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSB3aWxsIGJlIGRyYXduIGF0ICg1MCwgNjApJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0geUluY3JlYXNlIFRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIHBhZ2UncyBkZWZhdWx0IHBvc2l0aW9uIGFsb25nIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgeS1heGlzIHNob3VsZCBiZSBpbmNyZWFzZWQuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUubW92ZVVwID0gZnVuY3Rpb24gKHlJbmNyZWFzZSkge1xuICAgICAgICBhc3NlcnRJcyh5SW5jcmVhc2UsICd5SW5jcmVhc2UnLCBbJ251bWJlciddKTtcbiAgICAgICAgdGhpcy55ICs9IHlJbmNyZWFzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgZGVmYXVsdCBwb3NpdGlvbiBvZiB0aGlzIHBhZ2UgdG8gYmUgZnVydGhlciBsZWZ0IG9uIHRoZSB4LWF4aXMuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwYWdlLm1vdmVUbyg1MCwgNTApXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSB3aWxsIGJlIGRyYXduIGF0ICg1MCwgNTApJylcbiAgICAgKlxuICAgICAqIHBhZ2UubW92ZUxlZnQoMTApXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSB3aWxsIGJlIGRyYXduIGF0ICg0MCwgNTApJylcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0geERlY3JlYXNlIFRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIHBhZ2UncyBkZWZhdWx0IHBvc2l0aW9uIGFsb25nIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgeC1heGlzIHNob3VsZCBiZSBkZWNyZWFzZWQuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUubW92ZUxlZnQgPSBmdW5jdGlvbiAoeERlY3JlYXNlKSB7XG4gICAgICAgIGFzc2VydElzKHhEZWNyZWFzZSwgJ3hEZWNyZWFzZScsIFsnbnVtYmVyJ10pO1xuICAgICAgICB0aGlzLnggLT0geERlY3JlYXNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBkZWZhdWx0IHBvc2l0aW9uIG9mIHRoaXMgcGFnZSB0byBiZSBmdXJ0aGVyIHJpZ2h0IG9uIHRoZSB5LWF4aXMuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBwYWdlLm1vdmVUbyg1MCwgNTApXG4gICAgICogcGFnZS5kcmF3VGV4dCgnSSB3aWxsIGJlIGRyYXduIGF0ICg1MCwgNTApJylcbiAgICAgKlxuICAgICAqIHBhZ2UubW92ZVJpZ2h0KDEwKVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ0kgd2lsbCBiZSBkcmF3biBhdCAoNjAsIDUwKScpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHhJbmNyZWFzZSBUaGUgYW1vdW50IGJ5IHdoaWNoIHRoZSBwYWdlJ3MgZGVmYXVsdCBwb3NpdGlvbiBhbG9uZyB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgIHgtYXhpcyBzaG91bGQgYmUgaW5jcmVhc2VkLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLm1vdmVSaWdodCA9IGZ1bmN0aW9uICh4SW5jcmVhc2UpIHtcbiAgICAgICAgYXNzZXJ0SXMoeEluY3JlYXNlLCAneEluY3JlYXNlJywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMueCArPSB4SW5jcmVhc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQdXNoIG9uZSBvciBtb3JlIG9wZXJhdG9ycyB0byB0aGUgZW5kIG9mIHRoaXMgcGFnZSdzIGN1cnJlbnQgY29udGVudFxuICAgICAqIHN0cmVhbS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQge1xuICAgICAqICAgcHVzaEdyYXBoaWNzU3RhdGUsXG4gICAgICogICBtb3ZlVG8sXG4gICAgICogICBsaW5lVG8sXG4gICAgICogICBjbG9zZVBhdGgsXG4gICAgICogICBzZXRGaWxsaW5nQ29sb3IsXG4gICAgICogICByZ2IsXG4gICAgICogICBmaWxsLFxuICAgICAqICAgcG9wR3JhcGhpY3NTdGF0ZSxcbiAgICAgKiB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiAvLyBEcmF3IGEgZ3JlZW4gdHJpYW5nbGUgaW4gdGhlIGxvd2VyLWxlZnQgY29ybmVyIG9mIHRoZSBwYWdlXG4gICAgICogcGFnZS5wdXNoT3BlcmF0b3JzKFxuICAgICAqICAgcHVzaEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgKiAgIG1vdmVUbygwLCAwKSxcbiAgICAgKiAgIGxpbmVUbygxMDAsIDApLFxuICAgICAqICAgbGluZVRvKDUwLCAxMDApLFxuICAgICAqICAgY2xvc2VQYXRoKCksXG4gICAgICogICBzZXRGaWxsaW5nQ29sb3IocmdiKDAuMCwgMS4wLCAwLjApKSxcbiAgICAgKiAgIGZpbGwoKSxcbiAgICAgKiAgIHBvcEdyYXBoaWNzU3RhdGUoKSxcbiAgICAgKiApXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9wZXJhdG9yIFRoZSBvcGVyYXRvcnMgdG8gYmUgcHVzaGVkLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnB1c2hPcGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0b3JbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRFYWNoSXMob3BlcmF0b3IsICdvcGVyYXRvcicsIFtbUERGT3BlcmF0b3IsICdQREZPcGVyYXRvciddXSk7XG4gICAgICAgIHZhciBjb250ZW50U3RyZWFtID0gdGhpcy5nZXRDb250ZW50U3RyZWFtKCk7XG4gICAgICAgIGNvbnRlbnRTdHJlYW0ucHVzaC5hcHBseShjb250ZW50U3RyZWFtLCBvcGVyYXRvcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEcmF3IG9uZSBvciBtb3JlIGxpbmVzIG9mIHRleHQgb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IFN0YW5kYXJkRm9udHMsIHJnYiB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2FGb250ID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSlcbiAgICAgKiBjb25zdCB0aW1lc1JvbWFuRm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5UaW1lc1JvbWFuKVxuICAgICAqXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIHBhZ2Uuc2V0Rm9udChoZWx2ZXRpY2FGb250KVxuICAgICAqXG4gICAgICogcGFnZS5tb3ZlVG8oNSwgMjAwKVxuICAgICAqIHBhZ2UuZHJhd1RleHQoJ1RoZSBMaWZlIG9mIGFuIEVnZycsIHsgc2l6ZTogMzYgfSlcbiAgICAgKlxuICAgICAqIHBhZ2UubW92ZURvd24oMzYpXG4gICAgICogcGFnZS5kcmF3VGV4dCgnQW4gRXBpYyBUYWxlIG9mIFdvZScsIHsgc2l6ZTogMzAgfSlcbiAgICAgKlxuICAgICAqIHBhZ2UuZHJhd1RleHQoXG4gICAgICogICBgSHVtcHR5IER1bXB0eSBzYXQgb24gYSB3YWxsIFxcbmAgK1xuICAgICAqICAgYEh1bXB0eSBEdW1wdHkgaGFkIGEgZ3JlYXQgZmFsbDsgXFxuYCArXG4gICAgICogICBgQWxsIHRoZSBraW5nJ3MgaG9yc2VzIGFuZCBhbGwgdGhlIGtpbmcncyBtZW4gXFxuYCArXG4gICAgICogICBgQ291bGRuJ3QgcHV0IEh1bXB0eSB0b2dldGhlciBhZ2Fpbi4gXFxuYCxcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgeDogMjUsXG4gICAgICogICAgIHk6IDEwMCxcbiAgICAgKiAgICAgZm9udDogdGltZXNSb21hbkZvbnQsXG4gICAgICogICAgIHNpemU6IDI0LFxuICAgICAqICAgICBjb2xvcjogcmdiKDEsIDAsIDApLFxuICAgICAqICAgICBsaW5lSGVpZ2h0OiAyNCxcbiAgICAgKiAgICAgb3BhY2l0eTogMC43NSxcbiAgICAgKiAgIH0sXG4gICAgICogKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIGJlIGRyYXduLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRoZSB0ZXh0LlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmRyYXdUZXh0ID0gZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICBhc3NlcnRJcyh0ZXh0LCAndGV4dCcsIFsnc3RyaW5nJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmNvbG9yLCAnb3B0aW9ucy5jb2xvcicsIFtbT2JqZWN0LCAnQ29sb3InXV0pO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmZvbnQsICdvcHRpb25zLmZvbnQnLCBbW1BERkZvbnQsICdQREZGb250J11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5zaXplLCAnb3B0aW9ucy5zaXplJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMucm90YXRlLCAnb3B0aW9ucy5yb3RhdGUnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54U2tldywgJ29wdGlvbnMueFNrZXcnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy55U2tldywgJ29wdGlvbnMueVNrZXcnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54LCAnb3B0aW9ucy54JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueSwgJ29wdGlvbnMueScsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmxpbmVIZWlnaHQsICdvcHRpb25zLmxpbmVIZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5tYXhXaWR0aCwgJ29wdGlvbnMubWF4V2lkdGgnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy53b3JkQnJlYWtzLCAnb3B0aW9ucy53b3JkQnJlYWtzJywgW0FycmF5XSk7XG4gICAgICAgIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZChvcHRpb25zLmJsZW5kTW9kZSwgJ29wdGlvbnMuYmxlbmRNb2RlJywgQmxlbmRNb2RlKTtcbiAgICAgICAgdmFyIF9oID0gdGhpcy5zZXRPckVtYmVkRm9udChvcHRpb25zLmZvbnQpLCBvbGRGb250ID0gX2gub2xkRm9udCwgbmV3Rm9udCA9IF9oLm5ld0ZvbnQsIG5ld0ZvbnRLZXkgPSBfaC5uZXdGb250S2V5O1xuICAgICAgICB2YXIgZm9udFNpemUgPSBvcHRpb25zLnNpemUgfHwgdGhpcy5mb250U2l6ZTtcbiAgICAgICAgdmFyIHdvcmRCcmVha3MgPSBvcHRpb25zLndvcmRCcmVha3MgfHwgdGhpcy5kb2MuZGVmYXVsdFdvcmRCcmVha3M7XG4gICAgICAgIHZhciB0ZXh0V2lkdGggPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gbmV3Rm9udC53aWR0aE9mVGV4dEF0U2l6ZSh0LCBmb250U2l6ZSk7IH07XG4gICAgICAgIHZhciBsaW5lcyA9IG9wdGlvbnMubWF4V2lkdGggPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBsaW5lU3BsaXQoY2xlYW5UZXh0KHRleHQpKVxuICAgICAgICAgICAgOiBicmVha1RleHRJbnRvTGluZXModGV4dCwgd29yZEJyZWFrcywgb3B0aW9ucy5tYXhXaWR0aCwgdGV4dFdpZHRoKTtcbiAgICAgICAgdmFyIGVuY29kZWRMaW5lcyA9IG5ldyBBcnJheShsaW5lcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIGVuY29kZWRMaW5lc1tpZHhdID0gbmV3Rm9udC5lbmNvZGVUZXh0KGxpbmVzW2lkeF0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncmFwaGljc1N0YXRlS2V5ID0gdGhpcy5tYXliZUVtYmVkR3JhcGhpY3NTdGF0ZSh7XG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBibGVuZE1vZGU6IG9wdGlvbnMuYmxlbmRNb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNvbnRlbnRTdHJlYW0gPSB0aGlzLmdldENvbnRlbnRTdHJlYW0oKTtcbiAgICAgICAgY29udGVudFN0cmVhbS5wdXNoLmFwcGx5KGNvbnRlbnRTdHJlYW0sIGRyYXdMaW5lc09mVGV4dChlbmNvZGVkTGluZXMsIHtcbiAgICAgICAgICAgIGNvbG9yOiAoX2EgPSBvcHRpb25zLmNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmZvbnRDb2xvcixcbiAgICAgICAgICAgIGZvbnQ6IG5ld0ZvbnRLZXksXG4gICAgICAgICAgICBzaXplOiBmb250U2l6ZSxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9iID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICB4U2tldzogKF9jID0gb3B0aW9ucy54U2tldykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIHlTa2V3OiAoX2QgPSBvcHRpb25zLnlTa2V3KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgeDogKF9lID0gb3B0aW9ucy54KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB0aGlzLngsXG4gICAgICAgICAgICB5OiAoX2YgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IHRoaXMueSxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IChfZyA9IG9wdGlvbnMubGluZUhlaWdodCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogdGhpcy5saW5lSGVpZ2h0LFxuICAgICAgICAgICAgZ3JhcGhpY3NTdGF0ZTogZ3JhcGhpY3NTdGF0ZUtleSxcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAob3B0aW9ucy5mb250KSB7XG4gICAgICAgICAgICBpZiAob2xkRm9udClcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZvbnQob2xkRm9udCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldEZvbnQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRHJhdyBhbiBpbWFnZSBvbiB0aGlzIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgZGVncmVlcyB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiBjb25zdCBqcGdVcmwgPSAnaHR0cHM6Ly9wZGYtbGliLmpzLm9yZy9hc3NldHMvY2F0X3JpZGluZ191bmljb3JuLmpwZydcbiAgICAgKiBjb25zdCBqcGdJbWFnZUJ5dGVzID0gYXdhaXQgZmV0Y2goanBnVXJsKS50aGVuKChyZXMpID0+IHJlcy5hcnJheUJ1ZmZlcigpKVxuICAgICAqXG4gICAgICogY29uc3QganBnSW1hZ2UgPSBhd2FpdCBwZGZEb2MuZW1iZWRKcGcoanBnSW1hZ2VCeXRlcylcbiAgICAgKiBjb25zdCBqcGdEaW1zID0ganBnSW1hZ2Uuc2NhbGUoMC41KVxuICAgICAqXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIHBhZ2UuZHJhd0ltYWdlKGpwZ0ltYWdlLCB7XG4gICAgICogICB4OiAyNSxcbiAgICAgKiAgIHk6IDI1LFxuICAgICAqICAgd2lkdGg6IGpwZ0RpbXMud2lkdGgsXG4gICAgICogICBoZWlnaHQ6IGpwZ0RpbXMuaGVpZ2h0LFxuICAgICAqICAgcm90YXRlOiBkZWdyZWVzKDMwKSxcbiAgICAgKiAgIG9wYWNpdHk6IDAuNzUsXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRvIGJlIGRyYXduLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5kcmF3SW1hZ2UgPSBmdW5jdGlvbiAoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAvLyBUT0RPOiBSZXVzZSBpbWFnZSBYT2JqZWN0IG5hbWUgaWYgd2UndmUgYWxyZWFkeSBhZGRlZCB0aGlzIGltYWdlIHRvIFJlc291cmNlcy5YT2JqZWN0c1xuICAgICAgICBhc3NlcnRJcyhpbWFnZSwgJ2ltYWdlJywgW1tQREZJbWFnZSwgJ1BERkltYWdlJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54LCAnb3B0aW9ucy54JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueSwgJ29wdGlvbnMueScsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLndpZHRoLCAnb3B0aW9ucy53aWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmhlaWdodCwgJ29wdGlvbnMuaGVpZ2h0JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMucm90YXRlLCAnb3B0aW9ucy5yb3RhdGUnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54U2tldywgJ29wdGlvbnMueFNrZXcnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy55U2tldywgJ29wdGlvbnMueVNrZXcnLCBbW09iamVjdCwgJ1JvdGF0aW9uJ11dKTtcbiAgICAgICAgYXNzZXJ0UmFuZ2VPclVuZGVmaW5lZChvcHRpb25zLm9wYWNpdHksICdvcGFjaXR5Lm9wYWNpdHknLCAwLCAxKTtcbiAgICAgICAgYXNzZXJ0SXNPbmVPZk9yVW5kZWZpbmVkKG9wdGlvbnMuYmxlbmRNb2RlLCAnb3B0aW9ucy5ibGVuZE1vZGUnLCBCbGVuZE1vZGUpO1xuICAgICAgICB2YXIgeE9iamVjdEtleSA9IHRoaXMubm9kZS5uZXdYT2JqZWN0KCdJbWFnZScsIGltYWdlLnJlZik7XG4gICAgICAgIHZhciBncmFwaGljc1N0YXRlS2V5ID0gdGhpcy5tYXliZUVtYmVkR3JhcGhpY3NTdGF0ZSh7XG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBibGVuZE1vZGU6IG9wdGlvbnMuYmxlbmRNb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNvbnRlbnRTdHJlYW0gPSB0aGlzLmdldENvbnRlbnRTdHJlYW0oKTtcbiAgICAgICAgY29udGVudFN0cmVhbS5wdXNoLmFwcGx5KGNvbnRlbnRTdHJlYW0sIGRyYXdJbWFnZSh4T2JqZWN0S2V5LCB7XG4gICAgICAgICAgICB4OiAoX2EgPSBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IChfYiA9IG9wdGlvbnMueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy55LFxuICAgICAgICAgICAgd2lkdGg6IChfYyA9IG9wdGlvbnMud2lkdGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGltYWdlLnNpemUoKS53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogKF9kID0gb3B0aW9ucy5oZWlnaHQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGltYWdlLnNpemUoKS5oZWlnaHQsXG4gICAgICAgICAgICByb3RhdGU6IChfZSA9IG9wdGlvbnMucm90YXRlKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgeFNrZXc6IChfZiA9IG9wdGlvbnMueFNrZXcpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICB5U2tldzogKF9nID0gb3B0aW9ucy55U2tldykgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERyYXcgYW4gZW1iZWRkZWQgUERGIHBhZ2Ugb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IGRlZ3JlZXMgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqXG4gICAgICogY29uc3QgcGRmRG9jID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKClcbiAgICAgKiBjb25zdCBwYWdlID0gcGRmRG9jLmFkZFBhZ2UoKVxuICAgICAqXG4gICAgICogY29uc3Qgc291cmNlUGRmVXJsID0gJ2h0dHBzOi8vcGRmLWxpYi5qcy5vcmcvYXNzZXRzL3dpdGhfbGFyZ2VfcGFnZV9jb3VudC5wZGYnXG4gICAgICogY29uc3Qgc291cmNlUGRmID0gYXdhaXQgZmV0Y2goc291cmNlUGRmVXJsKS50aGVuKChyZXMpID0+IHJlcy5hcnJheUJ1ZmZlcigpKVxuICAgICAqXG4gICAgICogLy8gRW1iZWQgcGFnZSA3NCBmcm9tIHRoZSBQREZcbiAgICAgKiBjb25zdCBbZW1iZWRkZWRQYWdlXSA9IGF3YWl0IHBkZkRvYy5lbWJlZFBkZihzb3VyY2VQZGYsIDczKVxuICAgICAqXG4gICAgICogcGFnZS5kcmF3UGFnZShlbWJlZGRlZFBhZ2UsIHtcbiAgICAgKiAgIHg6IDI1MCxcbiAgICAgKiAgIHk6IDIwMCxcbiAgICAgKiAgIHhTY2FsZTogMC41LFxuICAgICAqICAgeVNjYWxlOiAwLjUsXG4gICAgICogICByb3RhdGU6IGRlZ3JlZXMoMzApLFxuICAgICAqICAgb3BhY2l0eTogMC43NSxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIGBvcHRpb25zYCBhcmd1bWVudCBhY2NlcHRzIGJvdGggYHdpZHRoYC9gaGVpZ2h0YCBhbmQgYHhTY2FsZWAvYHlTY2FsZWBcbiAgICAgKiBhcyBvcHRpb25zLiBTaW5jZSBlYWNoIG9mIHRoZXNlIG9wdGlvbnMgZGVmaW5lcyB0aGUgc2l6ZSBvZiB0aGUgZHJhd24gcGFnZSxcbiAgICAgKiBpZiBib3RoIG9wdGlvbnMgYXJlIGdpdmVuLCBgd2lkdGhgIGFuZCBgaGVpZ2h0YCB0YWtlIHByZWNlZGVuY2UgYW5kIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgc2NhbGUgdmFyaWFudHMgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW1iZWRkZWRQYWdlIFRoZSBlbWJlZGRlZCBwYWdlIHRvIGJlIGRyYXduLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRoZSBlbWJlZGRlZCBwYWdlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmRyYXdQYWdlID0gZnVuY3Rpb24gKGVtYmVkZGVkUGFnZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAvLyBUT0RPOiBSZXVzZSBlbWJlZGRlZFBhZ2UgWE9iamVjdCBuYW1lIGlmIHdlJ3ZlIGFscmVhZHkgYWRkZWQgdGhpcyBlbWJlZGRlZFBhZ2UgdG8gUmVzb3VyY2VzLlhPYmplY3RzXG4gICAgICAgIGFzc2VydElzKGVtYmVkZGVkUGFnZSwgJ2VtYmVkZGVkUGFnZScsIFtcbiAgICAgICAgICAgIFtQREZFbWJlZGRlZFBhZ2UsICdQREZFbWJlZGRlZFBhZ2UnXSxcbiAgICAgICAgXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueCwgJ29wdGlvbnMueCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnksICdvcHRpb25zLnknLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54U2NhbGUsICdvcHRpb25zLnhTY2FsZScsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnlTY2FsZSwgJ29wdGlvbnMueVNjYWxlJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMud2lkdGgsICdvcHRpb25zLndpZHRoJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMuaGVpZ2h0LCAnb3B0aW9ucy5oZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5yb3RhdGUsICdvcHRpb25zLnJvdGF0ZScsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnhTa2V3LCAnb3B0aW9ucy54U2tldycsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnlTa2V3LCAnb3B0aW9ucy55U2tldycsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRJc09uZU9mT3JVbmRlZmluZWQob3B0aW9ucy5ibGVuZE1vZGUsICdvcHRpb25zLmJsZW5kTW9kZScsIEJsZW5kTW9kZSk7XG4gICAgICAgIHZhciB4T2JqZWN0S2V5ID0gdGhpcy5ub2RlLm5ld1hPYmplY3QoJ0VtYmVkZGVkUGRmUGFnZScsIGVtYmVkZGVkUGFnZS5yZWYpO1xuICAgICAgICB2YXIgZ3JhcGhpY3NTdGF0ZUtleSA9IHRoaXMubWF5YmVFbWJlZEdyYXBoaWNzU3RhdGUoe1xuICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5LFxuICAgICAgICAgICAgYmxlbmRNb2RlOiBvcHRpb25zLmJsZW5kTW9kZSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB2YXIgeFNjYWxlID0gKG9wdGlvbnMud2lkdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMud2lkdGggLyBlbWJlZGRlZFBhZ2Uud2lkdGhcbiAgICAgICAgICAgIDogb3B0aW9ucy54U2NhbGUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMueFNjYWxlXG4gICAgICAgICAgICAgICAgOiAxKTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHZhciB5U2NhbGUgPSAob3B0aW9ucy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaGVpZ2h0IC8gZW1iZWRkZWRQYWdlLmhlaWdodFxuICAgICAgICAgICAgOiBvcHRpb25zLnlTY2FsZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy55U2NhbGVcbiAgICAgICAgICAgICAgICA6IDEpO1xuICAgICAgICB2YXIgY29udGVudFN0cmVhbSA9IHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICBjb250ZW50U3RyZWFtLnB1c2guYXBwbHkoY29udGVudFN0cmVhbSwgZHJhd1BhZ2UoeE9iamVjdEtleSwge1xuICAgICAgICAgICAgeDogKF9hID0gb3B0aW9ucy54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLngsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMueSxcbiAgICAgICAgICAgIHhTY2FsZTogeFNjYWxlLFxuICAgICAgICAgICAgeVNjYWxlOiB5U2NhbGUsXG4gICAgICAgICAgICByb3RhdGU6IChfYyA9IG9wdGlvbnMucm90YXRlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgeFNrZXc6IChfZCA9IG9wdGlvbnMueFNrZXcpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICB5U2tldzogKF9lID0gb3B0aW9ucy55U2tldykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERyYXcgYW4gU1ZHIHBhdGggb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IHJnYiB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiBjb25zdCBzdmdQYXRoID0gJ00gMCwyMCBMIDEwMCwxNjAgUSAxMzAsMjAwIDE1MCwxMjAgQyAxOTAsLTQwIDIwMCwyMDAgMzAwLDE1MCBMIDQwMCw5MCdcbiAgICAgKlxuICAgICAqIC8vIERyYXcgcGF0aCBhcyBibGFjayBsaW5lXG4gICAgICogcGFnZS5kcmF3U3ZnUGF0aChzdmdQYXRoLCB7IHg6IDI1LCB5OiA3NSB9KVxuICAgICAqXG4gICAgICogLy8gQ2hhbmdlIGJvcmRlciBzdHlsZSBhbmQgb3BhY2l0eVxuICAgICAqIHBhZ2UuZHJhd1N2Z1BhdGgoc3ZnUGF0aCwge1xuICAgICAqICAgeDogMjUsXG4gICAgICogICB5OiAyNzUsXG4gICAgICogICBib3JkZXJDb2xvcjogcmdiKDAuNSwgMC41LCAwLjUpLFxuICAgICAqICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICogICBib3JkZXJPcGFjaXR5OiAwLjc1LFxuICAgICAqIH0pXG4gICAgICpcbiAgICAgKiAvLyBTZXQgZmlsbCBjb2xvciBhbmQgb3BhY2l0eVxuICAgICAqIHBhZ2UuZHJhd1N2Z1BhdGgoc3ZnUGF0aCwge1xuICAgICAqICAgeDogMjUsXG4gICAgICogICB5OiA0NzUsXG4gICAgICogICBjb2xvcjogcmdiKDEuMCwgMCwgMCksXG4gICAgICogICBvcGFjaXR5OiAwLjc1LFxuICAgICAqIH0pXG4gICAgICpcbiAgICAgKiAvLyBEcmF3IDUwJSBvZiBvcmlnaW5hbCBzaXplXG4gICAgICogcGFnZS5kcmF3U3ZnUGF0aChzdmdQYXRoLCB7XG4gICAgICogICB4OiAyNSxcbiAgICAgKiAgIHk6IDY3NSxcbiAgICAgKiAgIHNjYWxlOiAwLjUsXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgU1ZHIHBhdGggdG8gYmUgZHJhd24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGRyYXdpbmcgdGhlIFNWRyBwYXRoLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmRyYXdTdmdQYXRoID0gZnVuY3Rpb24gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGFzc2VydElzKHBhdGgsICdwYXRoJywgWydzdHJpbmcnXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueCwgJ29wdGlvbnMueCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnksICdvcHRpb25zLnknLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5zY2FsZSwgJ29wdGlvbnMuc2NhbGUnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5yb3RhdGUsICdvcHRpb25zLnJvdGF0ZScsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlcldpZHRoLCAnb3B0aW9ucy5ib3JkZXJXaWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmNvbG9yLCAnb3B0aW9ucy5jb2xvcicsIFtbT2JqZWN0LCAnQ29sb3InXV0pO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlckNvbG9yLCAnb3B0aW9ucy5ib3JkZXJDb2xvcicsIFtcbiAgICAgICAgICAgIFtPYmplY3QsICdDb2xvciddLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoQXJyYXksICdvcHRpb25zLmJvcmRlckRhc2hBcnJheScsIFtcbiAgICAgICAgICAgIEFycmF5LFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UsICdvcHRpb25zLmJvcmRlckRhc2hQaGFzZScsIFtcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0SXNPbmVPZk9yVW5kZWZpbmVkKG9wdGlvbnMuYm9yZGVyTGluZUNhcCwgJ29wdGlvbnMuYm9yZGVyTGluZUNhcCcsIExpbmVDYXBTdHlsZSk7XG4gICAgICAgIGFzc2VydFJhbmdlT3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJPcGFjaXR5LCAnb3B0aW9ucy5ib3JkZXJPcGFjaXR5JywgMCwgMSk7XG4gICAgICAgIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZChvcHRpb25zLmJsZW5kTW9kZSwgJ29wdGlvbnMuYmxlbmRNb2RlJywgQmxlbmRNb2RlKTtcbiAgICAgICAgdmFyIGdyYXBoaWNzU3RhdGVLZXkgPSB0aGlzLm1heWJlRW1iZWRHcmFwaGljc1N0YXRlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgIGJvcmRlck9wYWNpdHk6IG9wdGlvbnMuYm9yZGVyT3BhY2l0eSxcbiAgICAgICAgICAgIGJsZW5kTW9kZTogb3B0aW9ucy5ibGVuZE1vZGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoISgnY29sb3InIGluIG9wdGlvbnMpICYmICEoJ2JvcmRlckNvbG9yJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJDb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudFN0cmVhbSA9IHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICBjb250ZW50U3RyZWFtLnB1c2guYXBwbHkoY29udGVudFN0cmVhbSwgZHJhd1N2Z1BhdGgocGF0aCwge1xuICAgICAgICAgICAgeDogKF9hID0gb3B0aW9ucy54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLngsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMueSxcbiAgICAgICAgICAgIHNjYWxlOiBvcHRpb25zLnNjYWxlLFxuICAgICAgICAgICAgcm90YXRlOiAoX2MgPSBvcHRpb25zLnJvdGF0ZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIGNvbG9yOiAoX2QgPSBvcHRpb25zLmNvbG9yKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogKF9lID0gb3B0aW9ucy5ib3JkZXJDb2xvcikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IChfZiA9IG9wdGlvbnMuYm9yZGVyV2lkdGgpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IDAsXG4gICAgICAgICAgICBib3JkZXJEYXNoQXJyYXk6IChfZyA9IG9wdGlvbnMuYm9yZGVyRGFzaEFycmF5KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJEYXNoUGhhc2U6IChfaCA9IG9wdGlvbnMuYm9yZGVyRGFzaFBoYXNlKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJMaW5lQ2FwOiAoX2ogPSBvcHRpb25zLmJvcmRlckxpbmVDYXApICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERyYXcgYSBsaW5lIG9uIHRoaXMgcGFnZS4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyByZ2IgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqXG4gICAgICogcGFnZS5kcmF3TGluZSh7XG4gICAgICogICBzdGFydDogeyB4OiAyNSwgeTogNzUgfSxcbiAgICAgKiAgIGVuZDogeyB4OiAxMjUsIHk6IDE3NSB9LFxuICAgICAqICAgdGhpY2tuZXNzOiAyLFxuICAgICAqICAgY29sb3I6IHJnYigwLjc1LCAwLjIsIDAuMiksXG4gICAgICogICBvcGFjaXR5OiAwLjc1LFxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGRyYXdpbmcgdGhlIGxpbmUuXG4gICAgICovXG4gICAgUERGUGFnZS5wcm90b3R5cGUuZHJhd0xpbmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBhc3NlcnRJcyhvcHRpb25zLnN0YXJ0LCAnb3B0aW9ucy5zdGFydCcsIFtcbiAgICAgICAgICAgIFtPYmplY3QsICd7IHg6IG51bWJlciwgeTogbnVtYmVyIH0nXSxcbiAgICAgICAgXSk7XG4gICAgICAgIGFzc2VydElzKG9wdGlvbnMuZW5kLCAnb3B0aW9ucy5lbmQnLCBbXG4gICAgICAgICAgICBbT2JqZWN0LCAneyB4OiBudW1iZXIsIHk6IG51bWJlciB9J10sXG4gICAgICAgIF0pO1xuICAgICAgICBhc3NlcnRJcyhvcHRpb25zLnN0YXJ0LngsICdvcHRpb25zLnN0YXJ0LngnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0SXMob3B0aW9ucy5zdGFydC55LCAnb3B0aW9ucy5zdGFydC55JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKG9wdGlvbnMuZW5kLngsICdvcHRpb25zLmVuZC54JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzKG9wdGlvbnMuZW5kLnksICdvcHRpb25zLmVuZC55JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMudGhpY2tuZXNzLCAnb3B0aW9ucy50aGlja25lc3MnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5jb2xvciwgJ29wdGlvbnMuY29sb3InLCBbW09iamVjdCwgJ0NvbG9yJ11dKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5kYXNoQXJyYXksICdvcHRpb25zLmRhc2hBcnJheScsIFtBcnJheV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmRhc2hQaGFzZSwgJ29wdGlvbnMuZGFzaFBoYXNlJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZChvcHRpb25zLmxpbmVDYXAsICdvcHRpb25zLmxpbmVDYXAnLCBMaW5lQ2FwU3R5bGUpO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRJc09uZU9mT3JVbmRlZmluZWQob3B0aW9ucy5ibGVuZE1vZGUsICdvcHRpb25zLmJsZW5kTW9kZScsIEJsZW5kTW9kZSk7XG4gICAgICAgIHZhciBncmFwaGljc1N0YXRlS2V5ID0gdGhpcy5tYXliZUVtYmVkR3JhcGhpY3NTdGF0ZSh7XG4gICAgICAgICAgICBib3JkZXJPcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBibGVuZE1vZGU6IG9wdGlvbnMuYmxlbmRNb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCEoJ2NvbG9yJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudFN0cmVhbSA9IHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICBjb250ZW50U3RyZWFtLnB1c2guYXBwbHkoY29udGVudFN0cmVhbSwgZHJhd0xpbmUoe1xuICAgICAgICAgICAgc3RhcnQ6IG9wdGlvbnMuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IG9wdGlvbnMuZW5kLFxuICAgICAgICAgICAgdGhpY2tuZXNzOiAoX2EgPSBvcHRpb25zLnRoaWNrbmVzcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSxcbiAgICAgICAgICAgIGNvbG9yOiAoX2IgPSBvcHRpb25zLmNvbG9yKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXNoQXJyYXk6IChfYyA9IG9wdGlvbnMuZGFzaEFycmF5KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXNoUGhhc2U6IChfZCA9IG9wdGlvbnMuZGFzaFBoYXNlKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsaW5lQ2FwOiAoX2UgPSBvcHRpb25zLmxpbmVDYXApICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERyYXcgYSByZWN0YW5nbGUgb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IGRlZ3JlZXMsIGdyYXlzY2FsZSwgcmdiIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIHBhZ2UuZHJhd1JlY3RhbmdsZSh7XG4gICAgICogICB4OiAyNSxcbiAgICAgKiAgIHk6IDc1LFxuICAgICAqICAgd2lkdGg6IDI1MCxcbiAgICAgKiAgIGhlaWdodDogNzUsXG4gICAgICogICByb3RhdGU6IGRlZ3JlZXMoLTE1KSxcbiAgICAgKiAgIGJvcmRlcldpZHRoOiA1LFxuICAgICAqICAgYm9yZGVyQ29sb3I6IGdyYXlzY2FsZSgwLjUpLFxuICAgICAqICAgY29sb3I6IHJnYigwLjc1LCAwLjIsIDAuMiksXG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBib3JkZXJPcGFjaXR5OiAwLjc1LFxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGRyYXdpbmcgdGhlIHJlY3RhbmdsZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5kcmF3UmVjdGFuZ2xlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX20sIF9vO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLngsICdvcHRpb25zLngnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy55LCAnb3B0aW9ucy55JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMud2lkdGgsICdvcHRpb25zLndpZHRoJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMuaGVpZ2h0LCAnb3B0aW9ucy5oZWlnaHQnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5yb3RhdGUsICdvcHRpb25zLnJvdGF0ZScsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnhTa2V3LCAnb3B0aW9ucy54U2tldycsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnlTa2V3LCAnb3B0aW9ucy55U2tldycsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlcldpZHRoLCAnb3B0aW9ucy5ib3JkZXJXaWR0aCcsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmNvbG9yLCAnb3B0aW9ucy5jb2xvcicsIFtbT2JqZWN0LCAnQ29sb3InXV0pO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlckNvbG9yLCAnb3B0aW9ucy5ib3JkZXJDb2xvcicsIFtcbiAgICAgICAgICAgIFtPYmplY3QsICdDb2xvciddLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoQXJyYXksICdvcHRpb25zLmJvcmRlckRhc2hBcnJheScsIFtcbiAgICAgICAgICAgIEFycmF5LFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UsICdvcHRpb25zLmJvcmRlckRhc2hQaGFzZScsIFtcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0SXNPbmVPZk9yVW5kZWZpbmVkKG9wdGlvbnMuYm9yZGVyTGluZUNhcCwgJ29wdGlvbnMuYm9yZGVyTGluZUNhcCcsIExpbmVDYXBTdHlsZSk7XG4gICAgICAgIGFzc2VydFJhbmdlT3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJPcGFjaXR5LCAnb3B0aW9ucy5ib3JkZXJPcGFjaXR5JywgMCwgMSk7XG4gICAgICAgIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZChvcHRpb25zLmJsZW5kTW9kZSwgJ29wdGlvbnMuYmxlbmRNb2RlJywgQmxlbmRNb2RlKTtcbiAgICAgICAgdmFyIGdyYXBoaWNzU3RhdGVLZXkgPSB0aGlzLm1heWJlRW1iZWRHcmFwaGljc1N0YXRlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgIGJvcmRlck9wYWNpdHk6IG9wdGlvbnMuYm9yZGVyT3BhY2l0eSxcbiAgICAgICAgICAgIGJsZW5kTW9kZTogb3B0aW9ucy5ibGVuZE1vZGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoISgnY29sb3InIGluIG9wdGlvbnMpICYmICEoJ2JvcmRlckNvbG9yJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudFN0cmVhbSA9IHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICBjb250ZW50U3RyZWFtLnB1c2guYXBwbHkoY29udGVudFN0cmVhbSwgZHJhd1JlY3RhbmdsZSh7XG4gICAgICAgICAgICB4OiAoX2EgPSBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IChfYiA9IG9wdGlvbnMueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy55LFxuICAgICAgICAgICAgd2lkdGg6IChfYyA9IG9wdGlvbnMud2lkdGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDE1MCxcbiAgICAgICAgICAgIGhlaWdodDogKF9kID0gb3B0aW9ucy5oZWlnaHQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEwMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9lID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IGRlZ3JlZXMoMCksXG4gICAgICAgICAgICB4U2tldzogKF9mID0gb3B0aW9ucy54U2tldykgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIHlTa2V3OiAoX2cgPSBvcHRpb25zLnlTa2V3KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBkZWdyZWVzKDApLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IChfaCA9IG9wdGlvbnMuYm9yZGVyV2lkdGgpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IDAsXG4gICAgICAgICAgICBjb2xvcjogKF9qID0gb3B0aW9ucy5jb2xvcikgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IChfayA9IG9wdGlvbnMuYm9yZGVyQ29sb3IpICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hBcnJheTogKF9sID0gb3B0aW9ucy5ib3JkZXJEYXNoQXJyYXkpICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hQaGFzZTogKF9tID0gb3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UpICE9PSBudWxsICYmIF9tICE9PSB2b2lkIDAgPyBfbSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgICAgICBib3JkZXJMaW5lQ2FwOiAoX28gPSBvcHRpb25zLmJvcmRlckxpbmVDYXApICE9PSBudWxsICYmIF9vICE9PSB2b2lkIDAgPyBfbyA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRHJhdyBhIHNxdWFyZSBvbiB0aGlzIHBhZ2UuIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgZGVncmVlcywgZ3JheXNjYWxlLCByZ2IgfSBmcm9tICdwZGYtbGliJ1xuICAgICAqXG4gICAgICogcGFnZS5kcmF3U3F1YXJlKHtcbiAgICAgKiAgIHg6IDI1LFxuICAgICAqICAgeTogNzUsXG4gICAgICogICBzaXplOiAxMDAsXG4gICAgICogICByb3RhdGU6IGRlZ3JlZXMoLTE1KSxcbiAgICAgKiAgIGJvcmRlcldpZHRoOiA1LFxuICAgICAqICAgYm9yZGVyQ29sb3I6IGdyYXlzY2FsZSgwLjUpLFxuICAgICAqICAgY29sb3I6IHJnYigwLjc1LCAwLjIsIDAuMiksXG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBib3JkZXJPcGFjaXR5OiAwLjc1LFxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgdXNlZCB3aGVuIGRyYXdpbmcgdGhlIHNxdWFyZS5cbiAgICAgKi9cbiAgICBQREZQYWdlLnByb3RvdHlwZS5kcmF3U3F1YXJlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHNpemUgPSBvcHRpb25zLnNpemU7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKHNpemUsICdzaXplJywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMuZHJhd1JlY3RhbmdsZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEcmF3IGFuIGVsbGlwc2Ugb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IGdyYXlzY2FsZSwgcmdiIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIHBhZ2UuZHJhd0VsbGlwc2Uoe1xuICAgICAqICAgeDogMjAwLFxuICAgICAqICAgeTogNzUsXG4gICAgICogICB4U2NhbGU6IDEwMCxcbiAgICAgKiAgIHlTY2FsZTogNTAsXG4gICAgICogICBib3JkZXJXaWR0aDogNSxcbiAgICAgKiAgIGJvcmRlckNvbG9yOiBncmF5c2NhbGUoMC41KSxcbiAgICAgKiAgIGNvbG9yOiByZ2IoMC43NSwgMC4yLCAwLjIpLFxuICAgICAqICAgb3BhY2l0eTogMC41LFxuICAgICAqICAgYm9yZGVyT3BhY2l0eTogMC43NSxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRoZSBlbGxpcHNlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmRyYXdFbGxpcHNlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbDtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy54LCAnb3B0aW9ucy54JywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueSwgJ29wdGlvbnMueScsIFsnbnVtYmVyJ10pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLnhTY2FsZSwgJ29wdGlvbnMueFNjYWxlJywgWydudW1iZXInXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKG9wdGlvbnMueVNjYWxlLCAnb3B0aW9ucy55U2NhbGUnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5yb3RhdGUsICdvcHRpb25zLnJvdGF0ZScsIFtbT2JqZWN0LCAnUm90YXRpb24nXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmNvbG9yLCAnb3B0aW9ucy5jb2xvcicsIFtbT2JqZWN0LCAnQ29sb3InXV0pO1xuICAgICAgICBhc3NlcnRSYW5nZU9yVW5kZWZpbmVkKG9wdGlvbnMub3BhY2l0eSwgJ29wYWNpdHkub3BhY2l0eScsIDAsIDEpO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlckNvbG9yLCAnb3B0aW9ucy5ib3JkZXJDb2xvcicsIFtcbiAgICAgICAgICAgIFtPYmplY3QsICdDb2xvciddLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0UmFuZ2VPclVuZGVmaW5lZChvcHRpb25zLmJvcmRlck9wYWNpdHksICdvcHRpb25zLmJvcmRlck9wYWNpdHknLCAwLCAxKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJXaWR0aCwgJ29wdGlvbnMuYm9yZGVyV2lkdGgnLCBbJ251bWJlciddKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoQXJyYXksICdvcHRpb25zLmJvcmRlckRhc2hBcnJheScsIFtcbiAgICAgICAgICAgIEFycmF5LFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0T3JVbmRlZmluZWQob3B0aW9ucy5ib3JkZXJEYXNoUGhhc2UsICdvcHRpb25zLmJvcmRlckRhc2hQaGFzZScsIFtcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICBdKTtcbiAgICAgICAgYXNzZXJ0SXNPbmVPZk9yVW5kZWZpbmVkKG9wdGlvbnMuYm9yZGVyTGluZUNhcCwgJ29wdGlvbnMuYm9yZGVyTGluZUNhcCcsIExpbmVDYXBTdHlsZSk7XG4gICAgICAgIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZChvcHRpb25zLmJsZW5kTW9kZSwgJ29wdGlvbnMuYmxlbmRNb2RlJywgQmxlbmRNb2RlKTtcbiAgICAgICAgdmFyIGdyYXBoaWNzU3RhdGVLZXkgPSB0aGlzLm1heWJlRW1iZWRHcmFwaGljc1N0YXRlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgIGJvcmRlck9wYWNpdHk6IG9wdGlvbnMuYm9yZGVyT3BhY2l0eSxcbiAgICAgICAgICAgIGJsZW5kTW9kZTogb3B0aW9ucy5ibGVuZE1vZGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoISgnY29sb3InIGluIG9wdGlvbnMpICYmICEoJ2JvcmRlckNvbG9yJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb2xvciA9IHJnYigwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudFN0cmVhbSA9IHRoaXMuZ2V0Q29udGVudFN0cmVhbSgpO1xuICAgICAgICBjb250ZW50U3RyZWFtLnB1c2guYXBwbHkoY29udGVudFN0cmVhbSwgZHJhd0VsbGlwc2Uoe1xuICAgICAgICAgICAgeDogKF9hID0gb3B0aW9ucy54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLngsXG4gICAgICAgICAgICB5OiAoX2IgPSBvcHRpb25zLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMueSxcbiAgICAgICAgICAgIHhTY2FsZTogKF9jID0gb3B0aW9ucy54U2NhbGUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDEwMCxcbiAgICAgICAgICAgIHlTY2FsZTogKF9kID0gb3B0aW9ucy55U2NhbGUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEwMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9lID0gb3B0aW9ucy5yb3RhdGUpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbG9yOiAoX2YgPSBvcHRpb25zLmNvbG9yKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogKF9nID0gb3B0aW9ucy5ib3JkZXJDb2xvcikgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IChfaCA9IG9wdGlvbnMuYm9yZGVyV2lkdGgpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IDAsXG4gICAgICAgICAgICBib3JkZXJEYXNoQXJyYXk6IChfaiA9IG9wdGlvbnMuYm9yZGVyRGFzaEFycmF5KSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJEYXNoUGhhc2U6IChfayA9IG9wdGlvbnMuYm9yZGVyRGFzaFBoYXNlKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3JkZXJMaW5lQ2FwOiAoX2wgPSBvcHRpb25zLmJvcmRlckxpbmVDYXApICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyYXBoaWNzU3RhdGU6IGdyYXBoaWNzU3RhdGVLZXksXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERyYXcgYSBjaXJjbGUgb24gdGhpcyBwYWdlLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCB7IGdyYXlzY2FsZSwgcmdiIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIHBhZ2UuZHJhd0NpcmNsZSh7XG4gICAgICogICB4OiAyMDAsXG4gICAgICogICB5OiAxNTAsXG4gICAgICogICBzaXplOiAxMDAsXG4gICAgICogICBib3JkZXJXaWR0aDogNSxcbiAgICAgKiAgIGJvcmRlckNvbG9yOiBncmF5c2NhbGUoMC41KSxcbiAgICAgKiAgIGNvbG9yOiByZ2IoMC43NSwgMC4yLCAwLjIpLFxuICAgICAqICAgb3BhY2l0eTogMC41LFxuICAgICAqICAgYm9yZGVyT3BhY2l0eTogMC43NSxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBkcmF3aW5nIHRoZSBlbGxpcHNlLlxuICAgICAqL1xuICAgIFBERlBhZ2UucHJvdG90eXBlLmRyYXdDaXJjbGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX2EgPSBvcHRpb25zLnNpemUsIHNpemUgPSBfYSA9PT0gdm9pZCAwID8gMTAwIDogX2E7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKHNpemUsICdzaXplJywgWydudW1iZXInXSk7XG4gICAgICAgIHRoaXMuZHJhd0VsbGlwc2UoX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHhTY2FsZTogc2l6ZSwgeVNjYWxlOiBzaXplIH0pKTtcbiAgICB9O1xuICAgIFBERlBhZ2UucHJvdG90eXBlLnNldE9yRW1iZWRGb250ID0gZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgdmFyIG9sZEZvbnQgPSB0aGlzLmZvbnQ7XG4gICAgICAgIHZhciBvbGRGb250S2V5ID0gdGhpcy5mb250S2V5O1xuICAgICAgICBpZiAoZm9udClcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9udChmb250KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5nZXRGb250KCk7XG4gICAgICAgIHZhciBuZXdGb250ID0gdGhpcy5mb250O1xuICAgICAgICB2YXIgbmV3Rm9udEtleSA9IHRoaXMuZm9udEtleTtcbiAgICAgICAgcmV0dXJuIHsgb2xkRm9udDogb2xkRm9udCwgb2xkRm9udEtleTogb2xkRm9udEtleSwgbmV3Rm9udDogbmV3Rm9udCwgbmV3Rm9udEtleTogbmV3Rm9udEtleSB9O1xuICAgIH07XG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0Rm9udCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZvbnQgfHwgIXRoaXMuZm9udEtleSkge1xuICAgICAgICAgICAgdmFyIGZvbnQgPSB0aGlzLmRvYy5lbWJlZFN0YW5kYXJkRm9udChTdGFuZGFyZEZvbnRzLkhlbHZldGljYSk7XG4gICAgICAgICAgICB0aGlzLnNldEZvbnQoZm9udCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmZvbnQsIHRoaXMuZm9udEtleV07XG4gICAgfTtcbiAgICBQREZQYWdlLnByb3RvdHlwZS5yZXNldEZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm9udCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mb250S2V5ID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUERGUGFnZS5wcm90b3R5cGUuZ2V0Q29udGVudFN0cmVhbSA9IGZ1bmN0aW9uICh1c2VFeGlzdGluZykge1xuICAgICAgICBpZiAodXNlRXhpc3RpbmcgPT09IHZvaWQgMCkgeyB1c2VFeGlzdGluZyA9IHRydWU7IH1cbiAgICAgICAgaWYgKHVzZUV4aXN0aW5nICYmIHRoaXMuY29udGVudFN0cmVhbSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTdHJlYW07XG4gICAgICAgIHRoaXMuY29udGVudFN0cmVhbSA9IHRoaXMuY3JlYXRlQ29udGVudFN0cmVhbSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRTdHJlYW1SZWYgPSB0aGlzLmRvYy5jb250ZXh0LnJlZ2lzdGVyKHRoaXMuY29udGVudFN0cmVhbSk7XG4gICAgICAgIHRoaXMubm9kZS5hZGRDb250ZW50U3RyZWFtKHRoaXMuY29udGVudFN0cmVhbVJlZik7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTdHJlYW07XG4gICAgfTtcbiAgICBQREZQYWdlLnByb3RvdHlwZS5jcmVhdGVDb250ZW50U3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0b3JzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRvcnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGljdCA9IHRoaXMuZG9jLmNvbnRleHQub2JqKHt9KTtcbiAgICAgICAgdmFyIGNvbnRlbnRTdHJlYW0gPSBQREZDb250ZW50U3RyZWFtLm9mKGRpY3QsIG9wZXJhdG9ycyk7XG4gICAgICAgIHJldHVybiBjb250ZW50U3RyZWFtO1xuICAgIH07XG4gICAgUERGUGFnZS5wcm90b3R5cGUubWF5YmVFbWJlZEdyYXBoaWNzU3RhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgb3BhY2l0eSA9IG9wdGlvbnMub3BhY2l0eSwgYm9yZGVyT3BhY2l0eSA9IG9wdGlvbnMuYm9yZGVyT3BhY2l0eSwgYmxlbmRNb2RlID0gb3B0aW9ucy5ibGVuZE1vZGU7XG4gICAgICAgIGlmIChvcGFjaXR5ID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGJvcmRlck9wYWNpdHkgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgYmxlbmRNb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdyYXBoaWNzU3RhdGUgPSB0aGlzLmRvYy5jb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBUeXBlOiAnRXh0R1N0YXRlJyxcbiAgICAgICAgICAgIGNhOiBvcGFjaXR5LFxuICAgICAgICAgICAgQ0E6IGJvcmRlck9wYWNpdHksXG4gICAgICAgICAgICBCTTogYmxlbmRNb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMubm9kZS5uZXdFeHRHU3RhdGUoJ0dTJywgZ3JhcGhpY3NTdGF0ZSk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgICBQREZQYWdlLnByb3RvdHlwZS5zY2FsZUFubm90ID0gZnVuY3Rpb24gKGFubm90LCB4LCB5KSB7XG4gICAgICAgIHZhciBzZWxlY3RvcnMgPSBbJ1JEJywgJ0NMJywgJ1ZlcnRpY2VzJywgJ1F1YWRQb2ludHMnLCAnTCcsICdSZWN0J107XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHNlbGVjdG9ycy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gYW5ub3QubG9va3VwKFBERk5hbWUub2Yoc2VsZWN0b3JzW2lkeF0pKTtcbiAgICAgICAgICAgIGlmIChsaXN0IGluc3RhbmNlb2YgUERGQXJyYXkpXG4gICAgICAgICAgICAgICAgbGlzdC5zY2FsZVBERk51bWJlcnMoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlua0xpc3RzID0gYW5ub3QubG9va3VwKFBERk5hbWUub2YoJ0lua0xpc3QnKSk7XG4gICAgICAgIGlmIChpbmtMaXN0cyBpbnN0YW5jZW9mIFBERkFycmF5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBpbmtMaXN0cy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJyID0gaW5rTGlzdHMubG9va3VwKGlkeCk7XG4gICAgICAgICAgICAgICAgaWYgKGFyciBpbnN0YW5jZW9mIFBERkFycmF5KVxuICAgICAgICAgICAgICAgICAgICBhcnIuc2NhbGVQREZOdW1iZXJzKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiA+ICoqTk9URToqKiBZb3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJbnN0ZWFkLFxuICAgICAqID4gY29uc2lkZXIgdXNpbmcgdGhlIFtbUERGRG9jdW1lbnQuYWRkUGFnZV1dIGFuZCBbW1BERkRvY3VtZW50Lmluc2VydFBhZ2VdXVxuICAgICAqID4gbWV0aG9kcywgd2hpY2ggY2FuIGNyZWF0ZSBpbnN0YW5jZXMgb2YgW1tQREZQYWdlXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERlBhZ2VdXSBmcm9tIGFuIGV4aXN0aW5nIGxlYWYgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsZWFmTm9kZSBUaGUgbGVhZiBub2RlIHRvIGJlIHdyYXBwZWQuXG4gICAgICogQHBhcmFtIHJlZiBUaGUgdW5pcXVlIHJlZmVyZW5jZSBmb3IgdGhlIHBhZ2UuXG4gICAgICogQHBhcmFtIGRvYyBUaGUgZG9jdW1lbnQgdG8gd2hpY2ggdGhlIHBhZ2Ugd2lsbCBiZWxvbmcuXG4gICAgICovXG4gICAgUERGUGFnZS5vZiA9IGZ1bmN0aW9uIChsZWFmTm9kZSwgcmVmLCBkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZQYWdlKGxlYWZOb2RlLCByZWYsIGRvYyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiA+ICoqTk9URToqKiBZb3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJbnN0ZWFkLFxuICAgICAqID4gY29uc2lkZXIgdXNpbmcgdGhlIFtbUERGRG9jdW1lbnQuYWRkUGFnZV1dIGFuZCBbW1BERkRvY3VtZW50Lmluc2VydFBhZ2VdXVxuICAgICAqID4gbWV0aG9kcywgd2hpY2ggY2FuIGNyZWF0ZSBpbnN0YW5jZXMgb2YgW1tQREZQYWdlXV0gZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbW1BERlBhZ2VdXS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2MgVGhlIGRvY3VtZW50IHRvIHdoaWNoIHRoZSBwYWdlIHdpbGwgYmVsb25nLlxuICAgICAqL1xuICAgIFBERlBhZ2UuY3JlYXRlID0gZnVuY3Rpb24gKGRvYykge1xuICAgICAgICBhc3NlcnRJcyhkb2MsICdkb2MnLCBbW1BERkRvY3VtZW50LCAnUERGRG9jdW1lbnQnXV0pO1xuICAgICAgICB2YXIgZHVtbXlSZWYgPSBQREZSZWYub2YoLTEpO1xuICAgICAgICB2YXIgcGFnZUxlYWYgPSBQREZQYWdlTGVhZi53aXRoQ29udGV4dEFuZFBhcmVudChkb2MuY29udGV4dCwgZHVtbXlSZWYpO1xuICAgICAgICB2YXIgcGFnZVJlZiA9IGRvYy5jb250ZXh0LnJlZ2lzdGVyKHBhZ2VMZWFmKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZQYWdlKHBhZ2VMZWFmLCBwYWdlUmVmLCBkb2MpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERlBhZ2U7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlBhZ2UuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGUGFnZSBmcm9tIFwiLi4vUERGUGFnZVwiO1xuaW1wb3J0IFBERkZvbnQgZnJvbSBcIi4uL1BERkZvbnRcIjtcbmltcG9ydCB7IEltYWdlQWxpZ25tZW50IH0gZnJvbSBcIi4uL2ltYWdlL2FsaWdubWVudFwiO1xuaW1wb3J0IHsgbm9ybWFsaXplQXBwZWFyYW5jZSwgZGVmYXVsdEJ1dHRvbkFwcGVhcmFuY2VQcm92aWRlciwgfSBmcm9tIFwiLi9hcHBlYXJhbmNlc1wiO1xuaW1wb3J0IFBERkZpZWxkLCB7IGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMsIH0gZnJvbSBcIi4vUERGRmllbGRcIjtcbmltcG9ydCB7IHJnYiB9IGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCB7IGRlZ3JlZXMgfSBmcm9tIFwiLi4vcm90YXRpb25zXCI7XG5pbXBvcnQgeyBQREZTdHJlYW0sIFBERkFjcm9QdXNoQnV0dG9uLCB9IGZyb20gXCIuLi8uLi9jb3JlXCI7XG5pbXBvcnQgeyBhc3NlcnRJcywgYXNzZXJ0T3JVbmRlZmluZWQsIGFzc2VydFBvc2l0aXZlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBidXR0b24gZmllbGQgb2YgYSBbW1BERkZvcm1dXS5cbiAqXG4gKiBbW1BERkJ1dHRvbl1dIGZpZWxkcyBhcmUgaW50ZXJhY3RpdmUgY29udHJvbHMgdGhhdCB1c2VycyBjYW4gY2xpY2sgd2l0aCB0aGVpclxuICogbW91c2UuIFRoaXMgdHlwZSBvZiBbW1BERkZpZWxkXV0gaXMgbm90IHN0YXRlZnVsLiBUaGUgcHVycG9zZSBvZiBhIGJ1dHRvblxuICogaXMgdG8gcGVyZm9ybSBhbiBhY3Rpb24gd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gaXQsIHN1Y2ggYXMgb3BlbmluZyBhIHByaW50XG4gKiBtb2RhbCBvciByZXNldHRpbmcgdGhlIGZvcm0uIEJ1dHRvbnMgYXJlIHR5cGljYWxseSByZWN0YW5ndWxhciBpbiBzaGFwZSBhbmRcbiAqIGhhdmUgYSB0ZXh0IGxhYmVsIGRlc2NyaWJpbmcgdGhlIGFjdGlvbiB0aGF0IHRoZXkgcGVyZm9ybSB3aGVuIGNsaWNrZWQuXG4gKi9cbnZhciBQREZCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkJ1dHRvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZCdXR0b24oYWNyb1B1c2hCdXR0b24sIHJlZiwgZG9jKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGFjcm9QdXNoQnV0dG9uLCByZWYsIGRvYykgfHwgdGhpcztcbiAgICAgICAgYXNzZXJ0SXMoYWNyb1B1c2hCdXR0b24sICdhY3JvQnV0dG9uJywgW1xuICAgICAgICAgICAgW1BERkFjcm9QdXNoQnV0dG9uLCAnUERGQWNyb1B1c2hCdXR0b24nXSxcbiAgICAgICAgXSk7XG4gICAgICAgIF90aGlzLmFjcm9GaWVsZCA9IGFjcm9QdXNoQnV0dG9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgYW4gaW1hZ2UgaW5zaWRlIHRoZSBib3VuZHMgb2YgdGhpcyBidXR0b24ncyB3aWRnZXRzLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IHBuZ0ltYWdlID0gYXdhaXQgcGRmRG9jLmVtYmVkUG5nKC4uLilcbiAgICAgKiBjb25zdCBidXR0b24gPSBmb3JtLmdldEJ1dHRvbignc29tZS5idXR0b24uZmllbGQnKVxuICAgICAqIGJ1dHRvbi5zZXRJbWFnZShwbmdJbWFnZSwgSW1hZ2VBbGlnbm1lbnQuQ2VudGVyKVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgd2lsbCB1cGRhdGUgdGhlIGFwcGVhcmFuY2VzIHN0cmVhbXMgZm9yIGVhY2ggb2YgdGhpcyBidXR0b24ncyB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSBpbWFnZSBUaGUgaW1hZ2UgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkLlxuICAgICAqIEBwYXJhbSBhbGlnbm1lbnQgVGhlIGFsaWdubWVudCBvZiB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgUERGQnV0dG9uLnByb3RvdHlwZS5zZXRJbWFnZSA9IGZ1bmN0aW9uIChpbWFnZSwgYWxpZ25tZW50KSB7XG4gICAgICAgIGlmIChhbGlnbm1lbnQgPT09IHZvaWQgMCkgeyBhbGlnbm1lbnQgPSBJbWFnZUFsaWdubWVudC5DZW50ZXI7IH1cbiAgICAgICAgdmFyIHdpZGdldHMgPSB0aGlzLmFjcm9GaWVsZC5nZXRXaWRnZXRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0ID0gd2lkZ2V0c1tpZHhdO1xuICAgICAgICAgICAgdmFyIHN0cmVhbVJlZiA9IHRoaXMuY3JlYXRlSW1hZ2VBcHBlYXJhbmNlU3RyZWFtKHdpZGdldCwgaW1hZ2UsIGFsaWdubWVudCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldEFwcGVhcmFuY2VzKHdpZGdldCwgeyBub3JtYWw6IHN0cmVhbVJlZiB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtBc0NsZWFuKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhpcyBmaWVsZC4gTGFyZ2VyIGZvbnQgc2l6ZXMgd2lsbCByZXN1bHQgaW4gbGFyZ2VyXG4gICAgICogdGV4dCBiZWluZyBkaXNwbGF5ZWQgd2hlbiBQREYgcmVhZGVycyByZW5kZXIgdGhpcyBidXR0b24uIEZvbnQgc2l6ZXMgbWF5XG4gICAgICogYmUgaW50ZWdlciBvciBmbG9hdGluZyBwb2ludCBudW1iZXJzLiBTdXBwbHlpbmcgYSBuZWdhdGl2ZSBmb250IHNpemUgd2lsbFxuICAgICAqIGNhdXNlIHRoaXMgbWV0aG9kIHRvIHRocm93IGFuIGVycm9yLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBidXR0b24gPSBmb3JtLmdldEJ1dHRvbignc29tZS5idXR0b24uZmllbGQnKVxuICAgICAqIGJ1dHRvbi5zZXRGb250U2l6ZSg0KVxuICAgICAqIGJ1dHRvbi5zZXRGb250U2l6ZSgxNS43KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogPiBUaGlzIG1ldGhvZCBkZXBlbmRzIHVwb24gdGhlIGV4aXN0ZW5jZSBvZiBhIGRlZmF1bHQgYXBwZWFyYW5jZVxuICAgICAqID4gKGAvREFgKSBzdHJpbmcuIElmIHRoaXMgZmllbGQgZG9lcyBub3QgaGF2ZSBhIGRlZmF1bHQgYXBwZWFyYW5jZSBzdHJpbmcsXG4gICAgICogPiBvciB0aGF0IHN0cmluZyBkb2VzIG5vdCBjb250YWluIGEgZm9udCBzaXplICh2aWEgdGhlIGBUZmAgb3BlcmF0b3IpLFxuICAgICAqID4gdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvbnRTaXplIFRoZSBmb250IHNpemUgdG8gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyB0ZXh0IGluIHRoaXMgZmllbGQuXG4gICAgICovXG4gICAgUERGQnV0dG9uLnByb3RvdHlwZS5zZXRGb250U2l6ZSA9IGZ1bmN0aW9uIChmb250U2l6ZSkge1xuICAgICAgICBhc3NlcnRQb3NpdGl2ZShmb250U2l6ZSwgJ2ZvbnRTaXplJyk7XG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLnNldEZvbnRTaXplKGZvbnRTaXplKTtcbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2hvdyB0aGlzIGJ1dHRvbiBvbiB0aGUgc3BlY2lmaWVkIHBhZ2Ugd2l0aCB0aGUgZ2l2ZW4gdGV4dC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB1YnVudHVGb250ID0gYXdhaXQgcGRmRG9jLmVtYmVkRm9udCh1YnVudHVGb250Qnl0ZXMpXG4gICAgICogY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKClcbiAgICAgKlxuICAgICAqIGNvbnN0IGZvcm0gPSBwZGZEb2MuZ2V0Rm9ybSgpXG4gICAgICogY29uc3QgYnV0dG9uID0gZm9ybS5jcmVhdGVCdXR0b24oJ3NvbWUuYnV0dG9uLmZpZWxkJylcbiAgICAgKlxuICAgICAqIGJ1dHRvbi5hZGRUb1BhZ2UoJ0RvIFN0dWZmJywgcGFnZSwge1xuICAgICAqICAgeDogNTAsXG4gICAgICogICB5OiA3NSxcbiAgICAgKiAgIHdpZHRoOiAyMDAsXG4gICAgICogICBoZWlnaHQ6IDEwMCxcbiAgICAgKiAgIHRleHRDb2xvcjogcmdiKDEsIDAsIDApLFxuICAgICAqICAgYmFja2dyb3VuZENvbG9yOiByZ2IoMCwgMSwgMCksXG4gICAgICogICBib3JkZXJDb2xvcjogcmdiKDAsIDAsIDEpLFxuICAgICAqICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICogICByb3RhdGU6IGRlZ3JlZXMoOTApLFxuICAgICAqICAgZm9udDogdWJ1bnR1Rm9udCxcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgd2lkZ2V0IGZvciB0aGlzIGJ1dHRvbiBmaWVsZC5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgZm9yIHRoaXMgYnV0dG9uIHdpZGdldC5cbiAgICAgKiBAcGFyYW0gcGFnZSBUaGUgcGFnZSB0byB3aGljaCB0aGlzIGJ1dHRvbiB3aWRnZXQgc2hvdWxkIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgd2hlbiBhZGRpbmcgdGhpcyBidXR0b24gd2lkZ2V0LlxuICAgICAqL1xuICAgIFBERkJ1dHRvbi5wcm90b3R5cGUuYWRkVG9QYWdlID0gZnVuY3Rpb24gKFxuICAgIC8vIFRPRE86IFRoaXMgbmVlZHMgdG8gYmUgb3B0aW9uYWwsIGUuZy4gZm9yIGltYWdlIGJ1dHRvbnNcbiAgICB0ZXh0LCBwYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2w7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKHRleHQsICd0ZXh0JywgWydzdHJpbmcnXSk7XG4gICAgICAgIGFzc2VydE9yVW5kZWZpbmVkKHBhZ2UsICdwYWdlJywgW1tQREZQYWdlLCAnUERGUGFnZSddXSk7XG4gICAgICAgIGFzc2VydEZpZWxkQXBwZWFyYW5jZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIC8vIENyZWF0ZSBhIHdpZGdldCBmb3IgdGhpcyBidXR0b25cbiAgICAgICAgdmFyIHdpZGdldCA9IHRoaXMuY3JlYXRlV2lkZ2V0KHtcbiAgICAgICAgICAgIHg6ICgoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMueCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgLSAoKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJvcmRlcldpZHRoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSAvIDIsXG4gICAgICAgICAgICB5OiAoKF9jID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDApIC0gKChfZCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ib3JkZXJXaWR0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMCkgLyAyLFxuICAgICAgICAgICAgd2lkdGg6IChfZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAoX2YgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiA1MCxcbiAgICAgICAgICAgIHRleHRDb2xvcjogKF9nID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRleHRDb2xvcikgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogcmdiKDAsIDAsIDApLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoX2ggPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiByZ2IoMC43NSwgMC43NSwgMC43NSksXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IChfaiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ib3JkZXJXaWR0aCkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogMCxcbiAgICAgICAgICAgIHJvdGF0ZTogKF9rID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvdGF0ZSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogZGVncmVlcygwKSxcbiAgICAgICAgICAgIGNhcHRpb246IHRleHQsXG4gICAgICAgICAgICBoaWRkZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oaWRkZW4sXG4gICAgICAgICAgICBwYWdlOiBwYWdlLnJlZixcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB3aWRnZXRSZWYgPSB0aGlzLmRvYy5jb250ZXh0LnJlZ2lzdGVyKHdpZGdldC5kaWN0KTtcbiAgICAgICAgLy8gQWRkIHdpZGdldCB0byB0aGlzIGZpZWxkXG4gICAgICAgIHRoaXMuYWNyb0ZpZWxkLmFkZFdpZGdldCh3aWRnZXRSZWYpO1xuICAgICAgICAvLyBTZXQgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciB3aWRnZXRcbiAgICAgICAgdmFyIGZvbnQgPSAoX2wgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9udCkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogdGhpcy5kb2MuZ2V0Rm9ybSgpLmdldERlZmF1bHRGb250KCk7XG4gICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIGZvbnQpO1xuICAgICAgICAvLyBBZGQgd2lkZ2V0IHRvIHRoZSBnaXZlbiBwYWdlXG4gICAgICAgIHBhZ2Uubm9kZS5hZGRBbm5vdCh3aWRnZXRSZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBidXR0b24gaGFzIGJlZW4gbWFya2VkIGFzIGRpcnR5LCBvciBpZiBhbnkgb2YgdGhpc1xuICAgICAqIGJ1dHRvbidzIHdpZGdldHMgZG8gbm90IGhhdmUgYW4gYXBwZWFyYW5jZSBzdHJlYW0uIEZvciBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgYnV0dG9uID0gZm9ybS5nZXRCdXR0b24oJ3NvbWUuYnV0dG9uLmZpZWxkJylcbiAgICAgKiBpZiAoYnV0dG9uLm5lZWRzQXBwZWFyYW5jZXNVcGRhdGUoKSkgY29uc29sZS5sb2coJ05lZWRzIHVwZGF0ZScpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhpcyBidXR0b24gbmVlZHMgYW4gYXBwZWFyYW5jZSB1cGRhdGUuXG4gICAgICovXG4gICAgUERGQnV0dG9uLnByb3RvdHlwZS5uZWVkc0FwcGVhcmFuY2VzVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmlzRGlydHkoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuYWNyb0ZpZWxkLmdldFdpZGdldHMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciB3aWRnZXQgPSB3aWRnZXRzW2lkeF07XG4gICAgICAgICAgICB2YXIgaGFzQXBwZWFyYW5jZXMgPSAoKF9hID0gd2lkZ2V0LmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWwpIGluc3RhbmNlb2YgUERGU3RyZWFtO1xuICAgICAgICAgICAgaWYgKCFoYXNBcHBlYXJhbmNlcylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugc3RyZWFtcyBmb3IgZWFjaCBvZiB0aGlzIGJ1dHRvbidzIHdpZGdldHMgdXNpbmdcbiAgICAgKiB0aGUgZGVmYXVsdCBhcHBlYXJhbmNlIHByb3ZpZGVyIGZvciBidXR0b25zLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGhlbHZldGljYSA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoU3RhbmRhcmRGb250cy5IZWx2ZXRpY2EpXG4gICAgICogY29uc3QgYnV0dG9uID0gZm9ybS5nZXRCdXR0b24oJ3NvbWUuYnV0dG9uLmZpZWxkJylcbiAgICAgKiBidXR0b24uZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzKGhlbHZldGljYSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZm9udCBUaGUgZm9udCB0byBiZSB1c2VkIGZvciBjcmVhdGluZyB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zLlxuICAgICAqL1xuICAgIFBERkJ1dHRvbi5wcm90b3R5cGUuZGVmYXVsdFVwZGF0ZUFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgYXNzZXJ0SXMoZm9udCwgJ2ZvbnQnLCBbW1BERkZvbnQsICdQREZGb250J11dKTtcbiAgICAgICAgdGhpcy51cGRhdGVBcHBlYXJhbmNlcyhmb250KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYXBwZWFyYW5jZSBzdHJlYW1zIGZvciBlYWNoIG9mIHRoaXMgYnV0dG9uJ3Mgd2lkZ2V0cyB1c2luZ1xuICAgICAqIHRoZSBnaXZlbiBhcHBlYXJhbmNlIHByb3ZpZGVyLiBJZiBubyBgcHJvdmlkZXJgIGlzIHBhc3NlZCwgdGhlIGRlZmF1bHRcbiAgICAgKiBhcHBlYXJhbmNlIHByb3ZpZGVyIGZvciBidXR0b25zIHdpbGwgYmUgdXNlZC4gRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBoZWx2ZXRpY2EgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KFN0YW5kYXJkRm9udHMuSGVsdmV0aWNhKVxuICAgICAqIGNvbnN0IGJ1dHRvbiA9IGZvcm0uZ2V0QnV0dG9uKCdzb21lLmJ1dHRvbi5maWVsZCcpXG4gICAgICogYnV0dG9uLnVwZGF0ZUFwcGVhcmFuY2VzKGhlbHZldGljYSwgKGZpZWxkLCB3aWRnZXQsIGZvbnQpID0+IHtcbiAgICAgKiAgIC4uLlxuICAgICAqICAgcmV0dXJuIHtcbiAgICAgKiAgICAgbm9ybWFsOiBkcmF3QnV0dG9uKC4uLiksXG4gICAgICogICAgIGRvd246IGRyYXdCdXR0b24oLi4uKSxcbiAgICAgKiAgIH1cbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBmb250IFRoZSBmb250IHRvIGJlIHVzZWQgZm9yIGNyZWF0aW5nIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMuXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIE9wdGlvbmFsbHksIHRoZSBhcHBlYXJhbmNlIHByb3ZpZGVyIHRvIGJlIHVzZWQgZm9yXG4gICAgICogICAgICAgICAgICAgICAgIGdlbmVyYXRpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBhcHBlYXJhbmNlIHN0cmVhbXMuXG4gICAgICovXG4gICAgUERGQnV0dG9uLnByb3RvdHlwZS51cGRhdGVBcHBlYXJhbmNlcyA9IGZ1bmN0aW9uIChmb250LCBwcm92aWRlcikge1xuICAgICAgICBhc3NlcnRJcyhmb250LCAnZm9udCcsIFtbUERGRm9udCwgJ1BERkZvbnQnXV0pO1xuICAgICAgICBhc3NlcnRPclVuZGVmaW5lZChwcm92aWRlciwgJ3Byb3ZpZGVyJywgW0Z1bmN0aW9uXSk7XG4gICAgICAgIHZhciB3aWRnZXRzID0gdGhpcy5hY3JvRmllbGQuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZSh3aWRnZXQsIGZvbnQsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGQnV0dG9uLnByb3RvdHlwZS51cGRhdGVXaWRnZXRBcHBlYXJhbmNlID0gZnVuY3Rpb24gKHdpZGdldCwgZm9udCwgcHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIGFwUHJvdmlkZXIgPSBwcm92aWRlciAhPT0gbnVsbCAmJiBwcm92aWRlciAhPT0gdm9pZCAwID8gcHJvdmlkZXIgOiBkZWZhdWx0QnV0dG9uQXBwZWFyYW5jZVByb3ZpZGVyO1xuICAgICAgICB2YXIgYXBwZWFyYW5jZXMgPSBub3JtYWxpemVBcHBlYXJhbmNlKGFwUHJvdmlkZXIodGhpcywgd2lkZ2V0LCBmb250KSk7XG4gICAgICAgIHRoaXMudXBkYXRlV2lkZ2V0QXBwZWFyYW5jZVdpdGhGb250KHdpZGdldCwgZm9udCwgYXBwZWFyYW5jZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogPiAqKk5PVEU6KiogWW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gSW5zdGVhZCxcbiAgICAgKiA+IGNvbnNpZGVyIHVzaW5nIHRoZSBbW1BERkZvcm0uZ2V0QnV0dG9uXV0gbWV0aG9kLCB3aGljaCB3aWxsIGNyZWF0ZSBhblxuICAgICAqID4gaW5zdGFuY2Ugb2YgW1tQREZCdXR0b25dXSBmb3IgeW91LlxuICAgICAqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIFtbUERGQnV0dG9uXV0gZnJvbSBhbiBleGlzdGluZyBhY3JvUHVzaEJ1dHRvbiBhbmQgcmVmXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWNyb1B1c2hCdXR0b24gVGhlIHVuZGVybHlpbmcgYFBERkFjcm9QdXNoQnV0dG9uYCBmb3IgdGhpcyBidXR0b24uXG4gICAgICogQHBhcmFtIHJlZiBUaGUgdW5pcXVlIHJlZmVyZW5jZSBmb3IgdGhpcyBidXR0b24uXG4gICAgICogQHBhcmFtIGRvYyBUaGUgZG9jdW1lbnQgdG8gd2hpY2ggdGhpcyBidXR0b24gd2lsbCBiZWxvbmcuXG4gICAgICovXG4gICAgUERGQnV0dG9uLm9mID0gZnVuY3Rpb24gKGFjcm9QdXNoQnV0dG9uLCByZWYsIGRvYykgeyByZXR1cm4gbmV3IFBERkJ1dHRvbihhY3JvUHVzaEJ1dHRvbiwgcmVmLCBkb2MpOyB9O1xuICAgIHJldHVybiBQREZCdXR0b247XG59KFBERkZpZWxkKSk7XG5leHBvcnQgZGVmYXVsdCBQREZCdXR0b247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZCdXR0b24uanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERlN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJpbmdcIjtcbmltcG9ydCBQREZIZXhTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGSGV4U3RyaW5nXCI7XG4vKipcbiAqIEZyb20gdGhlIFBERi1BMyBzcGVjaWZpY2F0aW9uLCBzZWN0aW9uICoqMy4xLiBSZXF1aXJlbWVudHMgLSBHZW5lcmFsKiouXG4gKiBTZWU6XG4gKiAqIGh0dHBzOi8vd3d3LnBkZmEub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzEwL1BERjIwX0FOMDAyLUFGLnBkZlxuICovXG5leHBvcnQgdmFyIEFGUmVsYXRpb25zaGlwO1xuKGZ1bmN0aW9uIChBRlJlbGF0aW9uc2hpcCkge1xuICAgIEFGUmVsYXRpb25zaGlwW1wiU291cmNlXCJdID0gXCJTb3VyY2VcIjtcbiAgICBBRlJlbGF0aW9uc2hpcFtcIkRhdGFcIl0gPSBcIkRhdGFcIjtcbiAgICBBRlJlbGF0aW9uc2hpcFtcIkFsdGVybmF0aXZlXCJdID0gXCJBbHRlcm5hdGl2ZVwiO1xuICAgIEFGUmVsYXRpb25zaGlwW1wiU3VwcGxlbWVudFwiXSA9IFwiU3VwcGxlbWVudFwiO1xuICAgIEFGUmVsYXRpb25zaGlwW1wiRW5jcnlwdGVkUGF5bG9hZFwiXSA9IFwiRW5jcnlwdGVkUGF5bG9hZFwiO1xuICAgIEFGUmVsYXRpb25zaGlwW1wiRm9ybURhdGFcIl0gPSBcIkVuY3J5cHRlZFBheWxvYWRcIjtcbiAgICBBRlJlbGF0aW9uc2hpcFtcIlNjaGVtYVwiXSA9IFwiU2NoZW1hXCI7XG4gICAgQUZSZWxhdGlvbnNoaXBbXCJVbnNwZWNpZmllZFwiXSA9IFwiVW5zcGVjaWZpZWRcIjtcbn0pKEFGUmVsYXRpb25zaGlwIHx8IChBRlJlbGF0aW9uc2hpcCA9IHt9KSk7XG52YXIgRmlsZUVtYmVkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGVFbWJlZGRlcihmaWxlRGF0YSwgZmlsZU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5maWxlRGF0YSA9IGZpbGVEYXRhO1xuICAgICAgICB0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIEZpbGVFbWJlZGRlci5mb3IgPSBmdW5jdGlvbiAoYnl0ZXMsIGZpbGVOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBuZXcgRmlsZUVtYmVkZGVyKGJ5dGVzLCBmaWxlTmFtZSwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBGaWxlRW1iZWRkZXIucHJvdG90eXBlLmVtYmVkSW50b0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgbWltZVR5cGUsIGRlc2NyaXB0aW9uLCBjcmVhdGlvbkRhdGUsIG1vZGlmaWNhdGlvbkRhdGUsIGFmUmVsYXRpb25zaGlwLCBlbWJlZGRlZEZpbGVTdHJlYW0sIGVtYmVkZGVkRmlsZVN0cmVhbVJlZiwgZmlsZVNwZWNEaWN0O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIF9hID0gdGhpcy5vcHRpb25zLCBtaW1lVHlwZSA9IF9hLm1pbWVUeXBlLCBkZXNjcmlwdGlvbiA9IF9hLmRlc2NyaXB0aW9uLCBjcmVhdGlvbkRhdGUgPSBfYS5jcmVhdGlvbkRhdGUsIG1vZGlmaWNhdGlvbkRhdGUgPSBfYS5tb2RpZmljYXRpb25EYXRlLCBhZlJlbGF0aW9uc2hpcCA9IF9hLmFmUmVsYXRpb25zaGlwO1xuICAgICAgICAgICAgICAgIGVtYmVkZGVkRmlsZVN0cmVhbSA9IGNvbnRleHQuZmxhdGVTdHJlYW0odGhpcy5maWxlRGF0YSwge1xuICAgICAgICAgICAgICAgICAgICBUeXBlOiAnRW1iZWRkZWRGaWxlJyxcbiAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogbWltZVR5cGUgIT09IG51bGwgJiYgbWltZVR5cGUgIT09IHZvaWQgMCA/IG1pbWVUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBQYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpemU6IHRoaXMuZmlsZURhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRpb25EYXRlOiBjcmVhdGlvbkRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFBERlN0cmluZy5mcm9tRGF0ZShjcmVhdGlvbkRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBNb2REYXRlOiBtb2RpZmljYXRpb25EYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBQREZTdHJpbmcuZnJvbURhdGUobW9kaWZpY2F0aW9uRGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbWJlZGRlZEZpbGVTdHJlYW1SZWYgPSBjb250ZXh0LnJlZ2lzdGVyKGVtYmVkZGVkRmlsZVN0cmVhbSk7XG4gICAgICAgICAgICAgICAgZmlsZVNwZWNEaWN0ID0gY29udGV4dC5vYmooe1xuICAgICAgICAgICAgICAgICAgICBUeXBlOiAnRmlsZXNwZWMnLFxuICAgICAgICAgICAgICAgICAgICBGOiBQREZTdHJpbmcub2YodGhpcy5maWxlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgIFVGOiBQREZIZXhTdHJpbmcuZnJvbVRleHQodGhpcy5maWxlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgIEVGOiB7IEY6IGVtYmVkZGVkRmlsZVN0cmVhbVJlZiB9LFxuICAgICAgICAgICAgICAgICAgICBEZXNjOiBkZXNjcmlwdGlvbiA/IFBERkhleFN0cmluZy5mcm9tVGV4dChkZXNjcmlwdGlvbikgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIEFGUmVsYXRpb25zaGlwOiBhZlJlbGF0aW9uc2hpcCAhPT0gbnVsbCAmJiBhZlJlbGF0aW9uc2hpcCAhPT0gdm9pZCAwID8gYWZSZWxhdGlvbnNoaXAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFzc2lnbihyZWYsIGZpbGVTcGVjRGljdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZWZdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbnRleHQucmVnaXN0ZXIoZmlsZVNwZWNEaWN0KV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBGaWxlRW1iZWRkZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgRmlsZUVtYmVkZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZUVtYmVkZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXJyYXlBc1N0cmluZyB9IGZyb20gXCIuLi91dGlsc1wiO1xudmFyIE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcihjbGFzc05hbWUsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiTWV0aG9kIFwiICsgY2xhc3NOYW1lICsgXCIuXCIgKyBtZXRob2ROYW1lICsgXCIoKSBub3QgaW1wbGVtZW50ZWRcIjtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yIH07XG52YXIgUHJpdmF0ZUNvbnN0cnVjdG9yRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFByaXZhdGVDb25zdHJ1Y3RvckVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByaXZhdGVDb25zdHJ1Y3RvckVycm9yKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJDYW5ub3QgY29uc3RydWN0IFwiICsgY2xhc3NOYW1lICsgXCIgLSBpdCBoYXMgYSBwcml2YXRlIGNvbnN0cnVjdG9yXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlQ29uc3RydWN0b3JFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFByaXZhdGVDb25zdHJ1Y3RvckVycm9yIH07XG52YXIgVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVbmV4cGVjdGVkT2JqZWN0VHlwZUVycm9yKGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG5hbWUgPSBmdW5jdGlvbiAodCkgeyB2YXIgX2EsIF9iOyByZXR1cm4gKF9hID0gdCA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0Lm5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYiA9IHQgPT09IG51bGwgfHwgdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdC5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm5hbWU7IH07XG4gICAgICAgIHZhciBleHBlY3RlZFR5cGVzID0gQXJyYXkuaXNBcnJheShleHBlY3RlZClcbiAgICAgICAgICAgID8gZXhwZWN0ZWQubWFwKG5hbWUpXG4gICAgICAgICAgICA6IFtuYW1lKGV4cGVjdGVkKV07XG4gICAgICAgIHZhciBtc2cgPSBcIkV4cGVjdGVkIGluc3RhbmNlIG9mIFwiICsgZXhwZWN0ZWRUeXBlcy5qb2luKCcgb3IgJykgKyBcIiwgXCIgK1xuICAgICAgICAgICAgKFwiYnV0IGdvdCBpbnN0YW5jZSBvZiBcIiArIChhY3R1YWwgPyBuYW1lKGFjdHVhbCkgOiBhY3R1YWwpKTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFVuZXhwZWN0ZWRPYmplY3RUeXBlRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBVbmV4cGVjdGVkT2JqZWN0VHlwZUVycm9yIH07XG52YXIgVW5zdXBwb3J0ZWRFbmNvZGluZ0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVbnN1cHBvcnRlZEVuY29kaW5nRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdXBwb3J0ZWRFbmNvZGluZ0Vycm9yKGVuY29kaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBlbmNvZGluZyArIFwiIHN0cmVhbSBlbmNvZGluZyBub3Qgc3VwcG9ydGVkXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBVbnN1cHBvcnRlZEVuY29kaW5nRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBVbnN1cHBvcnRlZEVuY29kaW5nRXJyb3IgfTtcbnZhciBSZXBhcnNlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcGFyc2VFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBhcnNlRXJyb3IoY2xhc3NOYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkNhbm5vdCBjYWxsIFwiICsgY2xhc3NOYW1lICsgXCIuXCIgKyBtZXRob2ROYW1lICsgXCIoKSBtb3JlIHRoYW4gb25jZVwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUmVwYXJzZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgUmVwYXJzZUVycm9yIH07XG52YXIgTWlzc2luZ0NhdGFsb2dFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ0NhdGFsb2dFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nQ2F0YWxvZ0Vycm9yKHJlZikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJNaXNzaW5nIGNhdGFsb2cgKHJlZj1cIiArIHJlZiArIFwiKVwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ0NhdGFsb2dFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IE1pc3NpbmdDYXRhbG9nRXJyb3IgfTtcbnZhciBNaXNzaW5nUGFnZUNvbnRlbnRzRW1iZWRkaW5nRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1pc3NpbmdQYWdlQ29udGVudHNFbWJlZGRpbmdFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nUGFnZUNvbnRlbnRzRW1iZWRkaW5nRXJyb3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkNhbid0IGVtYmVkIHBhZ2Ugd2l0aCBtaXNzaW5nIENvbnRlbnRzXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBNaXNzaW5nUGFnZUNvbnRlbnRzRW1iZWRkaW5nRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nUGFnZUNvbnRlbnRzRW1iZWRkaW5nRXJyb3IgfTtcbnZhciBVbnJlY29nbml6ZWRTdHJlYW1UeXBlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVucmVjb2duaXplZFN0cmVhbVR5cGVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVbnJlY29nbml6ZWRTdHJlYW1UeXBlRXJyb3Ioc3RyZWFtKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3RyZWFtVHlwZSA9IChfYyA9IChfYiA9IChfYSA9IHN0cmVhbSA9PT0gbnVsbCB8fCBzdHJlYW0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0cmVhbS5jb250cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogc3RyZWFtID09PSBudWxsIHx8IHN0cmVhbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RyZWFtLm5hbWUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHN0cmVhbTtcbiAgICAgICAgdmFyIG1zZyA9IFwiVW5yZWNvZ25pemVkIHN0cmVhbSB0eXBlOiBcIiArIHN0cmVhbVR5cGU7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBVbnJlY29nbml6ZWRTdHJlYW1UeXBlRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBVbnJlY29nbml6ZWRTdHJlYW1UeXBlRXJyb3IgfTtcbnZhciBQYWdlRW1iZWRkaW5nTWlzbWF0Y2hlZENvbnRleHRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUGFnZUVtYmVkZGluZ01pc21hdGNoZWRDb250ZXh0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFnZUVtYmVkZGluZ01pc21hdGNoZWRDb250ZXh0RXJyb3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkZvdW5kIG1pc21hdGNoZWQgY29udGV4dHMgd2hpbGUgZW1iZWRkaW5nIHBhZ2VzLiBBbGwgcGFnZXMgaW4gdGhlIGFycmF5IHBhc3NlZCB0byBgUERGRG9jdW1lbnQuZW1iZWRQYWdlcygpYCBtdXN0IGJlIGZyb20gdGhlIHNhbWUgZG9jdW1lbnQuXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQYWdlRW1iZWRkaW5nTWlzbWF0Y2hlZENvbnRleHRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFBhZ2VFbWJlZGRpbmdNaXNtYXRjaGVkQ29udGV4dEVycm9yIH07XG52YXIgUERGQXJyYXlJc05vdFJlY3RhbmdsZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBcnJheUlzTm90UmVjdGFuZ2xlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQXJyYXlJc05vdFJlY3RhbmdsZUVycm9yKHNpemUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiQXR0ZW1wdGVkIHRvIGNvbnZlcnQgUERGQXJyYXkgd2l0aCBcIiArIHNpemUgKyBcIiBlbGVtZW50cyB0byByZWN0YW5nbGUsIGJ1dCBtdXN0IGhhdmUgZXhhY3RseSA0IGVsZW1lbnRzLlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUERGQXJyYXlJc05vdFJlY3RhbmdsZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgUERGQXJyYXlJc05vdFJlY3RhbmdsZUVycm9yIH07XG52YXIgSW52YWxpZFBERkRhdGVTdHJpbmdFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFBERkRhdGVTdHJpbmdFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkUERGRGF0ZVN0cmluZ0Vycm9yKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkF0dGVtcHRlZCB0byBjb252ZXJ0IFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHRvIGEgZGF0ZSwgYnV0IGl0IGRvZXMgbm90IG1hdGNoIHRoZSBQREYgZGF0ZSBzdHJpbmcgZm9ybWF0LlwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFBERkRhdGVTdHJpbmdFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRQREZEYXRlU3RyaW5nRXJyb3IgfTtcbnZhciBJbnZhbGlkVGFyZ2V0SW5kZXhFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFRhcmdldEluZGV4RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZFRhcmdldEluZGV4RXJyb3IodGFyZ2V0SW5kZXgsIENvdW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkludmFsaWQgdGFyZ2V0SW5kZXggc3BlY2lmaWVkOiB0YXJnZXRJbmRleD1cIiArIHRhcmdldEluZGV4ICsgXCIgbXVzdCBiZSBsZXNzIHRoYW4gQ291bnQ9XCIgKyBDb3VudDtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRUYXJnZXRJbmRleEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgSW52YWxpZFRhcmdldEluZGV4RXJyb3IgfTtcbnZhciBDb3JydXB0UGFnZVRyZWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ycnVwdFBhZ2VUcmVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ycnVwdFBhZ2VUcmVlRXJyb3IodGFyZ2V0SW5kZXgsIG9wZXJhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gXCIgKyBvcGVyYXRpb24gKyBcIiBhdCB0YXJnZXRJbmRleD1cIiArIHRhcmdldEluZGV4ICsgXCIgZHVlIHRvIGNvcnJ1cHQgcGFnZSB0cmVlOiBJdCBpcyBsaWtlbHkgdGhhdCBvbmUgb3IgbW9yZSAnQ291bnQnIGVudHJpZXMgYXJlIGludmFsaWRcIjtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvcnJ1cHRQYWdlVHJlZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgQ29ycnVwdFBhZ2VUcmVlRXJyb3IgfTtcbnZhciBJbmRleE91dE9mQm91bmRzRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEluZGV4T3V0T2ZCb3VuZHNFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmRleE91dE9mQm91bmRzRXJyb3IoaW5kZXgsIG1pbiwgbWF4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcImluZGV4IHNob3VsZCBiZSBhdCBsZWFzdCBcIiArIG1pbiArIFwiIGFuZCBhdCBtb3N0IFwiICsgbWF4ICsgXCIsIGJ1dCB3YXMgYWN0dWFsbHkgXCIgKyBpbmRleDtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEluZGV4T3V0T2ZCb3VuZHNFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEluZGV4T3V0T2ZCb3VuZHNFcnJvciB9O1xudmFyIEludmFsaWRBY3JvRmllbGRWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkQWNyb0ZpZWxkVmFsdWVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkQWNyb0ZpZWxkVmFsdWVFcnJvcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1zZyA9IFwiQXR0ZW1wdGVkIHRvIHNldCBpbnZhbGlkIGZpZWxkIHZhbHVlXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkQWNyb0ZpZWxkVmFsdWVFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRBY3JvRmllbGRWYWx1ZUVycm9yIH07XG52YXIgTXVsdGlTZWxlY3RWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNdWx0aVNlbGVjdFZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTXVsdGlTZWxlY3RWYWx1ZUVycm9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJBdHRlbXB0ZWQgdG8gc2VsZWN0IG11bHRpcGxlIHZhbHVlcyBmb3Igc2luZ2xlLXNlbGVjdCBmaWVsZFwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTXVsdGlTZWxlY3RWYWx1ZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTXVsdGlTZWxlY3RWYWx1ZUVycm9yIH07XG52YXIgTWlzc2luZ0RBRW50cnlFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ0RBRW50cnlFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nREFFbnRyeUVycm9yKGZpZWxkTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJObyAvREEgKGRlZmF1bHQgYXBwZWFyYW5jZSkgZW50cnkgZm91bmQgZm9yIGZpZWxkOiBcIiArIGZpZWxkTmFtZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdEQUVudHJ5RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nREFFbnRyeUVycm9yIH07XG52YXIgTWlzc2luZ1RmT3BlcmF0b3JFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ1RmT3BlcmF0b3JFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nVGZPcGVyYXRvckVycm9yKGZpZWxkTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJObyBUZiBvcGVyYXRvciBmb3VuZCBmb3IgREEgb2YgZmllbGQ6IFwiICsgZmllbGROYW1lO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ1RmT3BlcmF0b3JFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IE1pc3NpbmdUZk9wZXJhdG9yRXJyb3IgfTtcbnZhciBOdW1iZXJQYXJzaW5nRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE51bWJlclBhcnNpbmdFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOdW1iZXJQYXJzaW5nRXJyb3IocG9zLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcGFyc2UgbnVtYmVyIFwiICtcbiAgICAgICAgICAgIChcIihsaW5lOlwiICsgcG9zLmxpbmUgKyBcIiBjb2w6XCIgKyBwb3MuY29sdW1uICsgXCIgb2Zmc2V0PVwiICsgcG9zLm9mZnNldCArIFwiKTogXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIik7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBOdW1iZXJQYXJzaW5nRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBOdW1iZXJQYXJzaW5nRXJyb3IgfTtcbnZhciBQREZQYXJzaW5nRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERlBhcnNpbmdFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZQYXJzaW5nRXJyb3IocG9zLCBkZXRhaWxzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byBwYXJzZSBQREYgZG9jdW1lbnQgXCIgK1xuICAgICAgICAgICAgKFwiKGxpbmU6XCIgKyBwb3MubGluZSArIFwiIGNvbDpcIiArIHBvcy5jb2x1bW4gKyBcIiBvZmZzZXQ9XCIgKyBwb3Mub2Zmc2V0ICsgXCIpOiBcIiArIGRldGFpbHMpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUERGUGFyc2luZ0Vycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgUERGUGFyc2luZ0Vycm9yIH07XG52YXIgTmV4dEJ5dGVBc3NlcnRpb25FcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTmV4dEJ5dGVBc3NlcnRpb25FcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOZXh0Qnl0ZUFzc2VydGlvbkVycm9yKHBvcywgZXhwZWN0ZWRCeXRlLCBhY3R1YWxCeXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkV4cGVjdGVkIG5leHQgYnl0ZSB0byBiZSBcIiArIGV4cGVjdGVkQnl0ZSArIFwiIGJ1dCBpdCB3YXMgYWN0dWFsbHkgXCIgKyBhY3R1YWxCeXRlO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBvcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBOZXh0Qnl0ZUFzc2VydGlvbkVycm9yO1xufShQREZQYXJzaW5nRXJyb3IpKTtcbmV4cG9ydCB7IE5leHRCeXRlQXNzZXJ0aW9uRXJyb3IgfTtcbnZhciBQREZPYmplY3RQYXJzaW5nRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERk9iamVjdFBhcnNpbmdFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZPYmplY3RQYXJzaW5nRXJyb3IocG9zLCBieXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byBwYXJzZSBQREYgb2JqZWN0IHN0YXJ0aW5nIHdpdGggdGhlIGZvbGxvd2luZyBieXRlOiBcIiArIGJ5dGU7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcG9zLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBERk9iamVjdFBhcnNpbmdFcnJvcjtcbn0oUERGUGFyc2luZ0Vycm9yKSk7XG5leHBvcnQgeyBQREZPYmplY3RQYXJzaW5nRXJyb3IgfTtcbnZhciBQREZJbnZhbGlkT2JqZWN0UGFyc2luZ0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZJbnZhbGlkT2JqZWN0UGFyc2luZ0Vycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkludmFsaWRPYmplY3RQYXJzaW5nRXJyb3IocG9zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byBwYXJzZSBpbnZhbGlkIFBERiBvYmplY3RcIjtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwb3MsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUERGSW52YWxpZE9iamVjdFBhcnNpbmdFcnJvcjtcbn0oUERGUGFyc2luZ0Vycm9yKSk7XG5leHBvcnQgeyBQREZJbnZhbGlkT2JqZWN0UGFyc2luZ0Vycm9yIH07XG52YXIgUERGU3RyZWFtUGFyc2luZ0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZTdHJlYW1QYXJzaW5nRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGU3RyZWFtUGFyc2luZ0Vycm9yKHBvcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcGFyc2UgUERGIHN0cmVhbVwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBvcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQREZTdHJlYW1QYXJzaW5nRXJyb3I7XG59KFBERlBhcnNpbmdFcnJvcikpO1xuZXhwb3J0IHsgUERGU3RyZWFtUGFyc2luZ0Vycm9yIH07XG52YXIgVW5iYWxhbmNlZFBhcmVudGhlc2lzRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuYmFsYW5jZWRQYXJlbnRoZXNpc0Vycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVuYmFsYW5jZWRQYXJlbnRoZXNpc0Vycm9yKHBvcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcGFyc2UgUERGIGxpdGVyYWwgc3RyaW5nIGR1ZSB0byB1bmJhbGFuY2VkIHBhcmVudGhlc2lzXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcG9zLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFVuYmFsYW5jZWRQYXJlbnRoZXNpc0Vycm9yO1xufShQREZQYXJzaW5nRXJyb3IpKTtcbmV4cG9ydCB7IFVuYmFsYW5jZWRQYXJlbnRoZXNpc0Vycm9yIH07XG52YXIgU3RhbGxlZFBhcnNlckVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGFsbGVkUGFyc2VyRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3RhbGxlZFBhcnNlckVycm9yKHBvcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJQYXJzZXIgc3RhbGxlZFwiO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBvcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdGFsbGVkUGFyc2VyRXJyb3I7XG59KFBERlBhcnNpbmdFcnJvcikpO1xuZXhwb3J0IHsgU3RhbGxlZFBhcnNlckVycm9yIH07XG52YXIgTWlzc2luZ1BERkhlYWRlckVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nUERGSGVhZGVyRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ1BERkhlYWRlckVycm9yKHBvcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXNnID0gXCJObyBQREYgaGVhZGVyIGZvdW5kXCI7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcG9zLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdQREZIZWFkZXJFcnJvcjtcbn0oUERGUGFyc2luZ0Vycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nUERGSGVhZGVyRXJyb3IgfTtcbnZhciBNaXNzaW5nS2V5d29yZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nS2V5d29yZEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1pc3NpbmdLZXl3b3JkRXJyb3IocG9zLCBrZXl3b3JkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtc2cgPSBcIkRpZCBub3QgZmluZCBleHBlY3RlZCBrZXl3b3JkICdcIiArIGFycmF5QXNTdHJpbmcoa2V5d29yZCkgKyBcIidcIjtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwb3MsIG1zZykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ0tleXdvcmRFcnJvcjtcbn0oUERGUGFyc2luZ0Vycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nS2V5d29yZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi4vc3ludGF4L0NoYXJDb2Rlc1wiO1xuaW1wb3J0IHsgY2hhckZyb21Db2RlLCBjb3B5U3RyaW5nSW50b0J1ZmZlciB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIFBERkhlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZIZWFkZXIobWFqb3IsIG1pbm9yKSB7XG4gICAgICAgIHRoaXMubWFqb3IgPSBTdHJpbmcobWFqb3IpO1xuICAgICAgICB0aGlzLm1pbm9yID0gU3RyaW5nKG1pbm9yKTtcbiAgICB9XG4gICAgUERGSGVhZGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJjID0gY2hhckZyb21Db2RlKDEyOSk7XG4gICAgICAgIHJldHVybiBcIiVQREYtXCIgKyB0aGlzLm1ham9yICsgXCIuXCIgKyB0aGlzLm1pbm9yICsgXCJcXG4lXCIgKyBiYyArIGJjICsgYmMgKyBiYztcbiAgICB9O1xuICAgIFBERkhlYWRlci5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxMiArIHRoaXMubWFqb3IubGVuZ3RoICsgdGhpcy5taW5vci5sZW5ndGg7XG4gICAgfTtcbiAgICBQREZIZWFkZXIucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuUGVyY2VudDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5QO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLkQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuRjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5EYXNoO1xuICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIodGhpcy5tYWpvciwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlBlcmlvZDtcbiAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKHRoaXMubWlub3IsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlBlcmNlbnQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAxMjk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAxMjk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAxMjk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAxMjk7XG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBpbml0aWFsT2Zmc2V0O1xuICAgIH07XG4gICAgUERGSGVhZGVyLmZvclZlcnNpb24gPSBmdW5jdGlvbiAobWFqb3IsIG1pbm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGSGVhZGVyKG1ham9yLCBtaW5vcik7XG4gICAgfTtcbiAgICByZXR1cm4gUERGSGVhZGVyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkhlYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkhlYWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNvcHlTdHJpbmdJbnRvQnVmZmVyLCBudW1iZXJUb1N0cmluZyB9IGZyb20gXCIuLi8uLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbnZhciBQREZOdW1iZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERk51bWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubnVtYmVyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgX3RoaXMuc3RyaW5nVmFsdWUgPSBudW1iZXJUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUERGTnVtYmVyLnByb3RvdHlwZS5hc051bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyVmFsdWU7XG4gICAgfTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgW1tQREZOdW1iZXIuYXNOdW1iZXJdXSAqL1xuICAgIFBERk51bWJlci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlclZhbHVlO1xuICAgIH07XG4gICAgUERGTnVtYmVyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFBERk51bWJlci5vZih0aGlzLm51bWJlclZhbHVlKTtcbiAgICB9O1xuICAgIFBERk51bWJlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZ1ZhbHVlO1xuICAgIH07XG4gICAgUERGTnVtYmVyLnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nVmFsdWUubGVuZ3RoO1xuICAgIH07XG4gICAgUERGTnVtYmVyLnByb3RvdHlwZS5jb3B5Qnl0ZXNJbnRvID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCArPSBjb3B5U3RyaW5nSW50b0J1ZmZlcih0aGlzLnN0cmluZ1ZhbHVlLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZ1ZhbHVlLmxlbmd0aDtcbiAgICB9O1xuICAgIFBERk51bWJlci5vZiA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFBERk51bWJlcih2YWx1ZSk7IH07XG4gICAgcmV0dXJuIFBERk51bWJlcjtcbn0oUERGT2JqZWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZOdW1iZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZOdW1iZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZPYmplY3QgZnJvbSBcIi4vUERGT2JqZWN0XCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBQREZBcnJheUlzTm90UmVjdGFuZ2xlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG52YXIgUERGQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkFycmF5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkFycmF5KGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYXJyYXkgPSBbXTtcbiAgICAgICAgX3RoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUERGQXJyYXkucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgICB9O1xuICAgIFBERkFycmF5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICB0aGlzLmFycmF5LnB1c2gob2JqZWN0KTtcbiAgICB9O1xuICAgIFBERkFycmF5LnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAoaW5kZXgsIG9iamVjdCkge1xuICAgICAgICB0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMCwgb2JqZWN0KTtcbiAgICB9O1xuICAgIFBERkFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmFycmF5LmluZGV4T2Yob2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAtMSA/IHVuZGVmaW5lZCA6IGluZGV4O1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgICBQREZBcnJheS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGlkeCwgb2JqZWN0KSB7XG4gICAgICAgIHRoaXMuYXJyYXlbaWR4XSA9IG9iamVjdDtcbiAgICB9O1xuICAgIFBERkFycmF5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXlbaW5kZXhdO1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLmxvb2t1cE1heWJlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHR5cGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0eXBlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jb250ZXh0KS5sb29rdXBNYXliZS5hcHBseShfYSwgX19zcHJlYWRBcnJheXMoW3RoaXMuZ2V0KGluZGV4KV0sIHR5cGVzKSk7XG4gICAgfTtcbiAgICBQREZBcnJheS5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHR5cGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0eXBlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jb250ZXh0KS5sb29rdXAuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLmdldChpbmRleCldLCB0eXBlcykpO1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLmFzUmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zaXplKCkgIT09IDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUERGQXJyYXlJc05vdFJlY3RhbmdsZUVycm9yKHRoaXMuc2l6ZSgpKTtcbiAgICAgICAgdmFyIGxvd2VyTGVmdFggPSB0aGlzLmxvb2t1cCgwLCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgICAgIHZhciBsb3dlckxlZnRZID0gdGhpcy5sb29rdXAoMSwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgICAgICB2YXIgdXBwZXJSaWdodFggPSB0aGlzLmxvb2t1cCgyLCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgICAgIHZhciB1cHBlclJpZ2h0WSA9IHRoaXMubG9va3VwKDMsIFBERk51bWJlcikuYXNOdW1iZXIoKTtcbiAgICAgICAgdmFyIHggPSBsb3dlckxlZnRYO1xuICAgICAgICB2YXIgeSA9IGxvd2VyTGVmdFk7XG4gICAgICAgIHZhciB3aWR0aCA9IHVwcGVyUmlnaHRYIC0gbG93ZXJMZWZ0WDtcbiAgICAgICAgdmFyIGhlaWdodCA9IHVwcGVyUmlnaHRZIC0gbG93ZXJMZWZ0WTtcbiAgICAgICAgcmV0dXJuIHsgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLmFzQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5LnNsaWNlKCk7XG4gICAgfTtcbiAgICBQREZBcnJheS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBQREZBcnJheS53aXRoQ29udGV4dChjb250ZXh0IHx8IHRoaXMuY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBjbG9uZS5wdXNoKHRoaXMuYXJyYXlbaWR4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJyYXlTdHJpbmcgPSAnWyAnO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgYXJyYXlTdHJpbmcgKz0gdGhpcy5nZXQoaWR4KS50b1N0cmluZygpO1xuICAgICAgICAgICAgYXJyYXlTdHJpbmcgKz0gJyAnO1xuICAgICAgICB9XG4gICAgICAgIGFycmF5U3RyaW5nICs9ICddJztcbiAgICAgICAgcmV0dXJuIGFycmF5U3RyaW5nO1xuICAgIH07XG4gICAgUERGQXJyYXkucHJvdG90eXBlLnNpemVJbkJ5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2l6ZSA9IDM7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBzaXplICs9IHRoaXMuZ2V0KGlkeCkuc2l6ZUluQnl0ZXMoKSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfTtcbiAgICBQREZBcnJheS5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICB2YXIgaW5pdGlhbE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5MZWZ0U3F1YXJlQnJhY2tldDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIG9mZnNldCArPSB0aGlzLmdldChpZHgpLmNvcHlCeXRlc0ludG8oYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlJpZ2h0U3F1YXJlQnJhY2tldDtcbiAgICAgICAgcmV0dXJuIG9mZnNldCAtIGluaXRpYWxPZmZzZXQ7XG4gICAgfTtcbiAgICBQREZBcnJheS5wcm90b3R5cGUuc2NhbGVQREZOdW1iZXJzID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBlbCA9IHRoaXMubG9va3VwKGlkeCk7XG4gICAgICAgICAgICBpZiAoZWwgaW5zdGFuY2VvZiBQREZOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmFjdG9yID0gaWR4ICUgMiA9PT0gMCA/IHggOiB5O1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGlkeCwgUERGTnVtYmVyLm9mKGVsLmFzTnVtYmVyKCkgKiBmYWN0b3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGQXJyYXkud2l0aENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkgeyByZXR1cm4gbmV3IFBERkFycmF5KGNvbnRleHQpOyB9O1xuICAgIHJldHVybiBQREZBcnJheTtcbn0oUERGT2JqZWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkFycmF5LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUHJpdmF0ZUNvbnN0cnVjdG9yRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGT2JqZWN0IGZyb20gXCIuL1BERk9iamVjdFwiO1xuaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi4vc3ludGF4L0NoYXJDb2Rlc1wiO1xudmFyIEVORk9SQ0VSID0ge307XG52YXIgUERGQm9vbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQm9vbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZCb29sKGVuZm9yY2VyLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZW5mb3JjZXIgIT09IEVORk9SQ0VSKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFByaXZhdGVDb25zdHJ1Y3RvckVycm9yKCdQREZCb29sJyk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZCb29sLnByb3RvdHlwZS5hc0Jvb2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG4gICAgUERGQm9vbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUERGQm9vbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgfTtcbiAgICBQREZCb29sLnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPyA0IDogNTtcbiAgICB9O1xuICAgIFBERkJvb2wucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMudDtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucjtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMudTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuZTtcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5mO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5hO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5sO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5zO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5lO1xuICAgICAgICAgICAgcmV0dXJuIDU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERkJvb2wuVHJ1ZSA9IG5ldyBQREZCb29sKEVORk9SQ0VSLCB0cnVlKTtcbiAgICBQREZCb29sLkZhbHNlID0gbmV3IFBERkJvb2woRU5GT1JDRVIsIGZhbHNlKTtcbiAgICByZXR1cm4gUERGQm9vbDtcbn0oUERGT2JqZWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZCb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQm9vbC5qcy5tYXAiLCJpbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuL0NoYXJDb2Rlc1wiO1xuZXhwb3J0IHZhciBJc0RlbGltaXRlciA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5Jc0RlbGltaXRlcltDaGFyQ29kZXMuTGVmdFBhcmVuXSA9IDE7XG5Jc0RlbGltaXRlcltDaGFyQ29kZXMuUmlnaHRQYXJlbl0gPSAxO1xuSXNEZWxpbWl0ZXJbQ2hhckNvZGVzLkxlc3NUaGFuXSA9IDE7XG5Jc0RlbGltaXRlcltDaGFyQ29kZXMuR3JlYXRlclRoYW5dID0gMTtcbklzRGVsaW1pdGVyW0NoYXJDb2Rlcy5MZWZ0U3F1YXJlQnJhY2tldF0gPSAxO1xuSXNEZWxpbWl0ZXJbQ2hhckNvZGVzLlJpZ2h0U3F1YXJlQnJhY2tldF0gPSAxO1xuSXNEZWxpbWl0ZXJbQ2hhckNvZGVzLkxlZnRDdXJseV0gPSAxO1xuSXNEZWxpbWl0ZXJbQ2hhckNvZGVzLlJpZ2h0Q3VybHldID0gMTtcbklzRGVsaW1pdGVyW0NoYXJDb2Rlcy5Gb3J3YXJkU2xhc2hdID0gMTtcbklzRGVsaW1pdGVyW0NoYXJDb2Rlcy5QZXJjZW50XSA9IDE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWxpbWl0ZXJzLmpzLm1hcCIsImltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4vQ2hhckNvZGVzXCI7XG5leHBvcnQgdmFyIElzV2hpdGVzcGFjZSA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5Jc1doaXRlc3BhY2VbQ2hhckNvZGVzLk51bGxdID0gMTtcbklzV2hpdGVzcGFjZVtDaGFyQ29kZXMuVGFiXSA9IDE7XG5Jc1doaXRlc3BhY2VbQ2hhckNvZGVzLk5ld2xpbmVdID0gMTtcbklzV2hpdGVzcGFjZVtDaGFyQ29kZXMuRm9ybUZlZWRdID0gMTtcbklzV2hpdGVzcGFjZVtDaGFyQ29kZXMuQ2FycmlhZ2VSZXR1cm5dID0gMTtcbklzV2hpdGVzcGFjZVtDaGFyQ29kZXMuU3BhY2VdID0gMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdoaXRlc3BhY2UuanMubWFwIiwiaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IElzRGVsaW1pdGVyIH0gZnJvbSBcIi4vRGVsaW1pdGVyc1wiO1xuaW1wb3J0IHsgSXNXaGl0ZXNwYWNlIH0gZnJvbSBcIi4vV2hpdGVzcGFjZVwiO1xuZXhwb3J0IHZhciBJc0lycmVndWxhciA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5mb3IgKHZhciBpZHggPSAwLCBsZW4gPSAyNTY7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICBJc0lycmVndWxhcltpZHhdID0gSXNXaGl0ZXNwYWNlW2lkeF0gfHwgSXNEZWxpbWl0ZXJbaWR4XSA/IDEgOiAwO1xufVxuSXNJcnJlZ3VsYXJbQ2hhckNvZGVzLkhhc2hdID0gMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlycmVndWxhci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFByaXZhdGVDb25zdHJ1Y3RvckVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IElzSXJyZWd1bGFyIH0gZnJvbSBcIi4uL3N5bnRheC9JcnJlZ3VsYXJcIjtcbmltcG9ydCB7IGNoYXJGcm9tSGV4Q29kZSwgY29weVN0cmluZ0ludG9CdWZmZXIsIHRvQ2hhckNvZGUsIHRvSGV4U3RyaW5nLCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIGRlY29kZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoLyMoW1xcZEFCQ0RFRl17Mn0pL2csIGZ1bmN0aW9uIChfLCBoZXgpIHsgcmV0dXJuIGNoYXJGcm9tSGV4Q29kZShoZXgpOyB9KTtcbn07XG52YXIgaXNSZWd1bGFyQ2hhciA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICAgIHJldHVybiBjaGFyQ29kZSA+PSBDaGFyQ29kZXMuRXhjbGFtYXRpb25Qb2ludCAmJlxuICAgICAgICBjaGFyQ29kZSA8PSBDaGFyQ29kZXMuVGlsZGUgJiZcbiAgICAgICAgIUlzSXJyZWd1bGFyW2NoYXJDb2RlXTtcbn07XG52YXIgRU5GT1JDRVIgPSB7fTtcbnZhciBwb29sID0gbmV3IE1hcCgpO1xudmFyIFBERk5hbWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERk5hbWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGTmFtZShlbmZvcmNlciwgbmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZW5mb3JjZXIgIT09IEVORk9SQ0VSKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFByaXZhdGVDb25zdHJ1Y3RvckVycm9yKCdQREZOYW1lJyk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIGVuY29kZWROYW1lID0gJy8nO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBuYW1lLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXJhY3RlciA9IG5hbWVbaWR4XTtcbiAgICAgICAgICAgIHZhciBjb2RlID0gdG9DaGFyQ29kZShjaGFyYWN0ZXIpO1xuICAgICAgICAgICAgZW5jb2RlZE5hbWUgKz0gaXNSZWd1bGFyQ2hhcihjb2RlKSA/IGNoYXJhY3RlciA6IFwiI1wiICsgdG9IZXhTdHJpbmcoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZW5jb2RlZE5hbWUgPSBlbmNvZGVkTmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZOYW1lLnByb3RvdHlwZS5hc0J5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICAgICAgdmFyIGhleCA9ICcnO1xuICAgICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgcHVzaEJ5dGUgPSBmdW5jdGlvbiAoYnl0ZSkge1xuICAgICAgICAgICAgaWYgKGJ5dGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBieXRlcy5wdXNoKGJ5dGUpO1xuICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpZHggPSAxLCBsZW4gPSB0aGlzLmVuY29kZWROYW1lLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXIgPSB0aGlzLmVuY29kZWROYW1lW2lkeF07XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRvQ2hhckNvZGUoY2hhcik7XG4gICAgICAgICAgICB2YXIgbmV4dENoYXIgPSB0aGlzLmVuY29kZWROYW1lW2lkeCArIDFdO1xuICAgICAgICAgICAgaWYgKCFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5IYXNoKVxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHB1c2hCeXRlKGJ5dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKChieXRlID49IENoYXJDb2Rlcy5aZXJvICYmIGJ5dGUgPD0gQ2hhckNvZGVzLk5pbmUpIHx8XG4gICAgICAgICAgICAgICAgICAgIChieXRlID49IENoYXJDb2Rlcy5hICYmIGJ5dGUgPD0gQ2hhckNvZGVzLmYpIHx8XG4gICAgICAgICAgICAgICAgICAgIChieXRlID49IENoYXJDb2Rlcy5BICYmIGJ5dGUgPD0gQ2hhckNvZGVzLkYpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhleCArPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgISgobmV4dENoYXIgPj0gJzAnICYmIG5leHRDaGFyIDw9ICc5JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV4dENoYXIgPj0gJ2EnICYmIG5leHRDaGFyIDw9ICdmJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV4dENoYXIgPj0gJ0EnICYmIG5leHRDaGFyIDw9ICdGJykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZShwYXJzZUludChoZXgsIDE2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXggPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaEJ5dGUoYnl0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShieXRlcyk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBwcm9iYWJseSB1c2UgYHV0ZjhEZWNvZGUoKWBcbiAgICAvLyBUT0RPOiBQb2x5ZmlsbCBBcnJheS5mcm9tP1xuICAgIFBERk5hbWUucHJvdG90eXBlLmRlY29kZVRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBieXRlcyA9IHRoaXMuYXNCeXRlcygpO1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIEFycmF5LmZyb20oYnl0ZXMpKTtcbiAgICB9O1xuICAgIFBERk5hbWUucHJvdG90eXBlLmFzU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVkTmFtZTtcbiAgICB9O1xuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBbW1BERk5hbWUuYXNTdHJpbmddXSAqL1xuICAgIFBERk5hbWUucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVkTmFtZTtcbiAgICB9O1xuICAgIFBERk5hbWUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFBERk5hbWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVkTmFtZTtcbiAgICB9O1xuICAgIFBERk5hbWUucHJvdG90eXBlLnNpemVJbkJ5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVkTmFtZS5sZW5ndGg7XG4gICAgfTtcbiAgICBQREZOYW1lLnByb3RvdHlwZS5jb3B5Qnl0ZXNJbnRvID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCArPSBjb3B5U3RyaW5nSW50b0J1ZmZlcih0aGlzLmVuY29kZWROYW1lLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZWROYW1lLmxlbmd0aDtcbiAgICB9O1xuICAgIFBERk5hbWUub2YgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgZGVjb2RlZFZhbHVlID0gZGVjb2RlTmFtZShuYW1lKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gcG9vbC5nZXQoZGVjb2RlZFZhbHVlKTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgUERGTmFtZShFTkZPUkNFUiwgZGVjb2RlZFZhbHVlKTtcbiAgICAgICAgICAgIHBvb2wuc2V0KGRlY29kZWRWYWx1ZSwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qIHRzbGludDpkaXNhYmxlIG1lbWJlci1vcmRlcmluZyAqL1xuICAgIFBERk5hbWUuTGVuZ3RoID0gUERGTmFtZS5vZignTGVuZ3RoJyk7XG4gICAgUERGTmFtZS5GbGF0ZURlY29kZSA9IFBERk5hbWUub2YoJ0ZsYXRlRGVjb2RlJyk7XG4gICAgUERGTmFtZS5SZXNvdXJjZXMgPSBQREZOYW1lLm9mKCdSZXNvdXJjZXMnKTtcbiAgICBQREZOYW1lLkZvbnQgPSBQREZOYW1lLm9mKCdGb250Jyk7XG4gICAgUERGTmFtZS5YT2JqZWN0ID0gUERGTmFtZS5vZignWE9iamVjdCcpO1xuICAgIFBERk5hbWUuRXh0R1N0YXRlID0gUERGTmFtZS5vZignRXh0R1N0YXRlJyk7XG4gICAgUERGTmFtZS5Db250ZW50cyA9IFBERk5hbWUub2YoJ0NvbnRlbnRzJyk7XG4gICAgUERGTmFtZS5UeXBlID0gUERGTmFtZS5vZignVHlwZScpO1xuICAgIFBERk5hbWUuUGFyZW50ID0gUERGTmFtZS5vZignUGFyZW50Jyk7XG4gICAgUERGTmFtZS5NZWRpYUJveCA9IFBERk5hbWUub2YoJ01lZGlhQm94Jyk7XG4gICAgUERGTmFtZS5QYWdlID0gUERGTmFtZS5vZignUGFnZScpO1xuICAgIFBERk5hbWUuQW5ub3RzID0gUERGTmFtZS5vZignQW5ub3RzJyk7XG4gICAgUERGTmFtZS5UcmltQm94ID0gUERGTmFtZS5vZignVHJpbUJveCcpO1xuICAgIFBERk5hbWUuQXJ0Qm94ID0gUERGTmFtZS5vZignQXJ0Qm94Jyk7XG4gICAgUERGTmFtZS5CbGVlZEJveCA9IFBERk5hbWUub2YoJ0JsZWVkQm94Jyk7XG4gICAgUERGTmFtZS5Dcm9wQm94ID0gUERGTmFtZS5vZignQ3JvcEJveCcpO1xuICAgIFBERk5hbWUuUm90YXRlID0gUERGTmFtZS5vZignUm90YXRlJyk7XG4gICAgUERGTmFtZS5UaXRsZSA9IFBERk5hbWUub2YoJ1RpdGxlJyk7XG4gICAgUERGTmFtZS5BdXRob3IgPSBQREZOYW1lLm9mKCdBdXRob3InKTtcbiAgICBQREZOYW1lLlN1YmplY3QgPSBQREZOYW1lLm9mKCdTdWJqZWN0Jyk7XG4gICAgUERGTmFtZS5DcmVhdG9yID0gUERGTmFtZS5vZignQ3JlYXRvcicpO1xuICAgIFBERk5hbWUuS2V5d29yZHMgPSBQREZOYW1lLm9mKCdLZXl3b3JkcycpO1xuICAgIFBERk5hbWUuUHJvZHVjZXIgPSBQREZOYW1lLm9mKCdQcm9kdWNlcicpO1xuICAgIFBERk5hbWUuQ3JlYXRpb25EYXRlID0gUERGTmFtZS5vZignQ3JlYXRpb25EYXRlJyk7XG4gICAgUERGTmFtZS5Nb2REYXRlID0gUERGTmFtZS5vZignTW9kRGF0ZScpO1xuICAgIHJldHVybiBQREZOYW1lO1xufShQREZPYmplY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERk5hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZOYW1lLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbnZhciBQREZOdWxsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZOdWxsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERk51bGwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGTnVsbC5wcm90b3R5cGUuYXNOdWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIFBERk51bGwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFBERk51bGwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH07XG4gICAgUERGTnVsbC5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH07XG4gICAgUERGTnVsbC5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLm47XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMudTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5sO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmw7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH07XG4gICAgcmV0dXJuIFBERk51bGw7XG59KFBERk9iamVjdCkpO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFBERk51bGwoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERk51bGwuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4vUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bGwgZnJvbSBcIi4vUERGTnVsbFwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbnZhciBQREZEaWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZEaWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkRpY3QobWFwLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRpY3QgPSBtYXA7XG4gICAgICAgIF90aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERkRpY3QucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZGljdC5rZXlzKCkpO1xuICAgIH07XG4gICAgUERGRGljdC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmRpY3QudmFsdWVzKCkpO1xuICAgIH07XG4gICAgUERGRGljdC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5kaWN0LmVudHJpZXMoKSk7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgUERGRGljdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgXG4gICAgLy8gVE9ETzogYHByZXNlcnZlUERGTnVsbGAgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBTaG91bGQgYmVcbiAgICAvLyByZW1vdmVkIGluIG5leHQgYnJlYWtpbmcgQVBJIGNoYW5nZS5cbiAgICBwcmVzZXJ2ZVBERk51bGwpIHtcbiAgICAgICAgaWYgKHByZXNlcnZlUERGTnVsbCA9PT0gdm9pZCAwKSB7IHByZXNlcnZlUERGTnVsbCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGljdC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBQREZOdWxsICYmICFwcmVzZXJ2ZVBERk51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGljdC5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IFBERk51bGw7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5sb29rdXBNYXliZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgdHlwZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHR5cGVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGBwcmVzZXJ2ZVBERk51bGxgIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gU2hvdWxkIGJlXG4gICAgICAgIC8vIHJlbW92ZWQgaW4gbmV4dCBicmVha2luZyBBUEkgY2hhbmdlLlxuICAgICAgICB2YXIgcHJlc2VydmVQREZOdWxsID0gdHlwZXMuaW5jbHVkZXMoUERGTnVsbCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IChfYSA9IHRoaXMuY29udGV4dCkubG9va3VwTWF5YmUuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLmdldChrZXksIHByZXNlcnZlUERGTnVsbCldLCB0eXBlcykpO1xuICAgICAgICBpZiAodmFsdWUgPT09IFBERk51bGwgJiYgIXByZXNlcnZlUERGTnVsbClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIFBERkRpY3QucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgdHlwZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHR5cGVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGBwcmVzZXJ2ZVBERk51bGxgIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gU2hvdWxkIGJlXG4gICAgICAgIC8vIHJlbW92ZWQgaW4gbmV4dCBicmVha2luZyBBUEkgY2hhbmdlLlxuICAgICAgICB2YXIgcHJlc2VydmVQREZOdWxsID0gdHlwZXMuaW5jbHVkZXMoUERGTnVsbCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IChfYSA9IHRoaXMuY29udGV4dCkubG9va3VwLmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5cyhbdGhpcy5nZXQoa2V5LCBwcmVzZXJ2ZVBERk51bGwpXSwgdHlwZXMpKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBQREZOdWxsICYmICFwcmVzZXJ2ZVBERk51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QuZGVsZXRlKGtleSk7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5hc01hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAodGhpcy5kaWN0KTtcbiAgICB9O1xuICAgIC8qKiBHZW5lcmF0ZSBhIHJhbmRvbSBrZXkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIGN1cnJlbnQga2V5IHNldCAqL1xuICAgIFBERkRpY3QucHJvdG90eXBlLnVuaXF1ZUtleSA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgaWYgKHRhZyA9PT0gdm9pZCAwKSB7IHRhZyA9ICcnOyB9XG4gICAgICAgIHZhciBleGlzdGluZ0tleXMgPSB0aGlzLmtleXMoKTtcbiAgICAgICAgdmFyIGtleSA9IFBERk5hbWUub2YodGhpcy5jb250ZXh0LmFkZFJhbmRvbVN1ZmZpeCh0YWcsIDEwKSk7XG4gICAgICAgIHdoaWxlIChleGlzdGluZ0tleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAga2V5ID0gUERGTmFtZS5vZih0aGlzLmNvbnRleHQuYWRkUmFuZG9tU3VmZml4KHRhZywgMTApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gICAgUERGRGljdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBQREZEaWN0LndpdGhDb250ZXh0KGNvbnRleHQgfHwgdGhpcy5jb250ZXh0KTtcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGVudHJpZXNbaWR4XSwga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICBjbG9uZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgUERGRGljdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaWN0U3RyaW5nID0gJzw8XFxuJztcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGVudHJpZXNbaWR4XSwga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICBkaWN0U3RyaW5nICs9IGtleS50b1N0cmluZygpICsgJyAnICsgdmFsdWUudG9TdHJpbmcoKSArICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGRpY3RTdHJpbmcgKz0gJz4+JztcbiAgICAgICAgcmV0dXJuIGRpY3RTdHJpbmc7XG4gICAgfTtcbiAgICBQREZEaWN0LnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNpemUgPSA1O1xuICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gZW50cmllc1tpZHhdLCBrZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgIHNpemUgKz0ga2V5LnNpemVJbkJ5dGVzKCkgKyB2YWx1ZS5zaXplSW5CeXRlcygpICsgMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFBERkRpY3QucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTGVzc1RoYW47XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTGVzc1RoYW47XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGVudHJpZXNbaWR4XSwga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICBvZmZzZXQgKz0ga2V5LmNvcHlCeXRlc0ludG8oYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgICAgIG9mZnNldCArPSB2YWx1ZS5jb3B5Qnl0ZXNJbnRvKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLkdyZWF0ZXJUaGFuO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLkdyZWF0ZXJUaGFuO1xuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gaW5pdGlhbE9mZnNldDtcbiAgICB9O1xuICAgIFBERkRpY3Qud2l0aENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkgeyByZXR1cm4gbmV3IFBERkRpY3QobmV3IE1hcCgpLCBjb250ZXh0KTsgfTtcbiAgICBQREZEaWN0LmZyb21NYXBXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIChtYXAsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZEaWN0KG1hcCwgY29udGV4dCk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGRGljdDtcbn0oUERGT2JqZWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZEaWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGRGljdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuL1BERk51bWJlclwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbnZhciBQREZTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERlN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZTdHJlYW0oZGljdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kaWN0ID0gZGljdDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZTdHJlYW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKF9jb250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSwgJ2Nsb25lJyk7XG4gICAgfTtcbiAgICBQREZTdHJlYW0ucHJvdG90eXBlLmdldENvbnRlbnRzU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdnZXRDb250ZW50c1N0cmluZycpO1xuICAgIH07XG4gICAgUERGU3RyZWFtLnByb3RvdHlwZS5nZXRDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnZ2V0Q29udGVudHMnKTtcbiAgICB9O1xuICAgIFBERlN0cmVhbS5wcm90b3R5cGUuZ2V0Q29udGVudHNTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdnZXRDb250ZW50c1NpemUnKTtcbiAgICB9O1xuICAgIFBERlN0cmVhbS5wcm90b3R5cGUudXBkYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRzU2l6ZSA9IHRoaXMuZ2V0Q29udGVudHNTaXplKCk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5MZW5ndGgsIFBERk51bWJlci5vZihjb250ZW50c1NpemUpKTtcbiAgICB9O1xuICAgIFBERlN0cmVhbS5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRGljdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaWN0LnNpemVJbkJ5dGVzKCkgKyB0aGlzLmdldENvbnRlbnRzU2l6ZSgpICsgMTg7XG4gICAgfTtcbiAgICBQREZTdHJlYW0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZURpY3QoKTtcbiAgICAgICAgdmFyIHN0cmVhbVN0cmluZyA9IHRoaXMuZGljdC50b1N0cmluZygpO1xuICAgICAgICBzdHJlYW1TdHJpbmcgKz0gJ1xcbnN0cmVhbVxcbic7XG4gICAgICAgIHN0cmVhbVN0cmluZyArPSB0aGlzLmdldENvbnRlbnRzU3RyaW5nKCk7XG4gICAgICAgIHN0cmVhbVN0cmluZyArPSAnXFxuZW5kc3RyZWFtJztcbiAgICAgICAgcmV0dXJuIHN0cmVhbVN0cmluZztcbiAgICB9O1xuICAgIFBERlN0cmVhbS5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICB0aGlzLnVwZGF0ZURpY3QoKTtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIG9mZnNldCArPSB0aGlzLmRpY3QuY29weUJ5dGVzSW50byhidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5zO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLnQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmE7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMubTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICB2YXIgY29udGVudHMgPSB0aGlzLmdldENvbnRlbnRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGNvbnRlbnRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGNvbnRlbnRzW2lkeF07XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmU7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMubjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5kO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLnM7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMudDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5yO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmU7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuYTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5tO1xuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gaW5pdGlhbE9mZnNldDtcbiAgICB9O1xuICAgIHJldHVybiBQREZTdHJlYW07XG59KFBERk9iamVjdCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGU3RyZWFtLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERlN0cmVhbSBmcm9tIFwiLi9QREZTdHJlYW1cIjtcbmltcG9ydCB7IGFycmF5QXNTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBQREZSYXdTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERlJhd1N0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZSYXdTdHJlYW0oZGljdCwgY29udGVudHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGljdCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29udGVudHMgPSBjb250ZW50cztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZSYXdTdHJlYW0ucHJvdG90eXBlLmFzVWludDhBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuc2xpY2UoKTtcbiAgICB9O1xuICAgIFBERlJhd1N0cmVhbS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gUERGUmF3U3RyZWFtLm9mKHRoaXMuZGljdC5jbG9uZShjb250ZXh0KSwgdGhpcy5jb250ZW50cy5zbGljZSgpKTtcbiAgICB9O1xuICAgIFBERlJhd1N0cmVhbS5wcm90b3R5cGUuZ2V0Q29udGVudHNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcnJheUFzU3RyaW5nKHRoaXMuY29udGVudHMpO1xuICAgIH07XG4gICAgUERGUmF3U3RyZWFtLnByb3RvdHlwZS5nZXRDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gICAgfTtcbiAgICBQREZSYXdTdHJlYW0ucHJvdG90eXBlLmdldENvbnRlbnRzU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMubGVuZ3RoO1xuICAgIH07XG4gICAgUERGUmF3U3RyZWFtLm9mID0gZnVuY3Rpb24gKGRpY3QsIGNvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGUmF3U3RyZWFtKGRpY3QsIGNvbnRlbnRzKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZSYXdTdHJlYW07XG59KFBERlN0cmVhbSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGUmF3U3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGUmF3U3RyZWFtLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUHJpdmF0ZUNvbnN0cnVjdG9yRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGT2JqZWN0IGZyb20gXCIuL1BERk9iamVjdFwiO1xuaW1wb3J0IHsgY29weVN0cmluZ0ludG9CdWZmZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBFTkZPUkNFUiA9IHt9O1xudmFyIHBvb2wgPSBuZXcgTWFwKCk7XG52YXIgUERGUmVmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZSZWYsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGUmVmKGVuZm9yY2VyLCBvYmplY3ROdW1iZXIsIGdlbmVyYXRpb25OdW1iZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGVuZm9yY2VyICE9PSBFTkZPUkNFUilcbiAgICAgICAgICAgIHRocm93IG5ldyBQcml2YXRlQ29uc3RydWN0b3JFcnJvcignUERGUmVmJyk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JqZWN0TnVtYmVyID0gb2JqZWN0TnVtYmVyO1xuICAgICAgICBfdGhpcy5nZW5lcmF0aW9uTnVtYmVyID0gZ2VuZXJhdGlvbk51bWJlcjtcbiAgICAgICAgX3RoaXMudGFnID0gb2JqZWN0TnVtYmVyICsgXCIgXCIgKyBnZW5lcmF0aW9uTnVtYmVyICsgXCIgUlwiO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERlJlZi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUERGUmVmLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnO1xuICAgIH07XG4gICAgUERGUmVmLnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnLmxlbmd0aDtcbiAgICB9O1xuICAgIFBERlJlZi5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIodGhpcy50YWcsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnLmxlbmd0aDtcbiAgICB9O1xuICAgIFBERlJlZi5vZiA9IGZ1bmN0aW9uIChvYmplY3ROdW1iZXIsIGdlbmVyYXRpb25OdW1iZXIpIHtcbiAgICAgICAgaWYgKGdlbmVyYXRpb25OdW1iZXIgPT09IHZvaWQgMCkgeyBnZW5lcmF0aW9uTnVtYmVyID0gMDsgfVxuICAgICAgICB2YXIgdGFnID0gb2JqZWN0TnVtYmVyICsgXCIgXCIgKyBnZW5lcmF0aW9uTnVtYmVyICsgXCIgUlwiO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBwb29sLmdldCh0YWcpO1xuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBQREZSZWYoRU5GT1JDRVIsIG9iamVjdE51bWJlciwgZ2VuZXJhdGlvbk51bWJlcik7XG4gICAgICAgICAgICBwb29sLnNldCh0YWcsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgICByZXR1cm4gUERGUmVmO1xufShQREZPYmplY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlJlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlJlZi5qcy5tYXAiLCJpbXBvcnQgUERGT2JqZWN0IGZyb20gXCIuLi9vYmplY3RzL1BERk9iamVjdFwiO1xuaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi4vc3ludGF4L0NoYXJDb2Rlc1wiO1xuaW1wb3J0IHsgY29weVN0cmluZ0ludG9CdWZmZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBQREZPcGVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZPcGVyYXRvcihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3MgfHwgW107XG4gICAgfVxuICAgIFBERk9wZXJhdG9yLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KHRoaXMuYXJncy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBhcmdzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGFyZyA9IHRoaXMuYXJnc1tpZHhdO1xuICAgICAgICAgICAgYXJnc1tpZHhdID0gYXJnIGluc3RhbmNlb2YgUERGT2JqZWN0ID8gYXJnLmNsb25lKGNvbnRleHQpIDogYXJnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQREZPcGVyYXRvci5vZih0aGlzLm5hbWUsIGFyZ3MpO1xuICAgIH07XG4gICAgUERGT3BlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5hcmdzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFsdWUgKz0gU3RyaW5nKHRoaXMuYXJnc1tpZHhdKSArICcgJztcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSB0aGlzLm5hbWU7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIFBERk9wZXJhdG9yLnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNpemUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLmFyZ3MubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgYXJnID0gdGhpcy5hcmdzW2lkeF07XG4gICAgICAgICAgICBzaXplICs9IChhcmcgaW5zdGFuY2VvZiBQREZPYmplY3QgPyBhcmcuc2l6ZUluQnl0ZXMoKSA6IGFyZy5sZW5ndGgpICsgMTtcbiAgICAgICAgfVxuICAgICAgICBzaXplICs9IHRoaXMubmFtZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH07XG4gICAgUERGT3BlcmF0b3IucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMuYXJncy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBhcmcgPSB0aGlzLmFyZ3NbaWR4XTtcbiAgICAgICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBQREZPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYXJnLmNvcHlCeXRlc0ludG8oYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKGFyZywgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIodGhpcy5uYW1lLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBpbml0aWFsT2Zmc2V0O1xuICAgIH07XG4gICAgUERGT3BlcmF0b3Iub2YgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IFBERk9wZXJhdG9yKG5hbWUsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERk9wZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT3BlcmF0b3IuanMubWFwIiwidmFyIFBERk9wZXJhdG9yTmFtZXM7XG4oZnVuY3Rpb24gKFBERk9wZXJhdG9yTmFtZXMpIHtcbiAgICAvLyBOb24gU3Ryb2tpbmcgQ29sb3IgT3BlcmF0b3JzXG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIk5vblN0cm9raW5nQ29sb3JcIl0gPSBcInNjXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIk5vblN0cm9raW5nQ29sb3JOXCJdID0gXCJzY25cIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiTm9uU3Ryb2tpbmdDb2xvclJnYlwiXSA9IFwicmdcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiTm9uU3Ryb2tpbmdDb2xvckdyYXlcIl0gPSBcImdcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiTm9uU3Ryb2tpbmdDb2xvckNteWtcIl0gPSBcImtcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiTm9uU3Ryb2tpbmdDb2xvcnNwYWNlXCJdID0gXCJjc1wiO1xuICAgIC8vIFN0cm9raW5nIENvbG9yIE9wZXJhdG9yc1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTdHJva2luZ0NvbG9yXCJdID0gXCJTQ1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTdHJva2luZ0NvbG9yTlwiXSA9IFwiU0NOXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlN0cm9raW5nQ29sb3JSZ2JcIl0gPSBcIlJHXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlN0cm9raW5nQ29sb3JHcmF5XCJdID0gXCJHXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlN0cm9raW5nQ29sb3JDbXlrXCJdID0gXCJLXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlN0cm9raW5nQ29sb3JzcGFjZVwiXSA9IFwiQ1NcIjtcbiAgICAvLyBNYXJrZWQgQ29udGVudCBPcGVyYXRvcnNcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiQmVnaW5NYXJrZWRDb250ZW50U2VxdWVuY2VcIl0gPSBcIkJEQ1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJCZWdpbk1hcmtlZENvbnRlbnRcIl0gPSBcIkJNQ1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJFbmRNYXJrZWRDb250ZW50XCJdID0gXCJFTUNcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiTWFya2VkQ29udGVudFBvaW50V2l0aFByb3BzXCJdID0gXCJEUFwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJNYXJrZWRDb250ZW50UG9pbnRcIl0gPSBcIk1QXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkRyYXdPYmplY3RcIl0gPSBcIkRvXCI7XG4gICAgLy8gR3JhcGhpY3MgU3RhdGUgT3BlcmF0b3JzXG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkNvbmNhdFRyYW5zZm9ybWF0aW9uTWF0cml4XCJdID0gXCJjbVwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJQb3BHcmFwaGljc1N0YXRlXCJdID0gXCJRXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlB1c2hHcmFwaGljc1N0YXRlXCJdID0gXCJxXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNldEZsYXRuZXNzXCJdID0gXCJpXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNldEdyYXBoaWNzU3RhdGVQYXJhbXNcIl0gPSBcImdzXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNldExpbmVDYXBTdHlsZVwiXSA9IFwiSlwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRMaW5lRGFzaFBhdHRlcm5cIl0gPSBcImRcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2V0TGluZUpvaW5TdHlsZVwiXSA9IFwialwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRMaW5lTWl0ZXJMaW1pdFwiXSA9IFwiTVwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRMaW5lV2lkdGhcIl0gPSBcIndcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2V0VGV4dE1hdHJpeFwiXSA9IFwiVG1cIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2V0UmVuZGVyaW5nSW50ZW50XCJdID0gXCJyaVwiO1xuICAgIC8vIEdyYXBoaWNzIE9wZXJhdG9yc1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJBcHBlbmRSZWN0YW5nbGVcIl0gPSBcInJlXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkJlZ2luSW5saW5lSW1hZ2VcIl0gPSBcIkJJXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkJlZ2luSW5saW5lSW1hZ2VEYXRhXCJdID0gXCJJRFwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJFbmRJbmxpbmVJbWFnZVwiXSA9IFwiRUlcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiQ2xpcEV2ZW5PZGRcIl0gPSBcIlcqXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkNsaXBOb25aZXJvXCJdID0gXCJXXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkNsb3NlQW5kU3Ryb2tlXCJdID0gXCJzXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkNsb3NlRmlsbEV2ZW5PZGRBbmRTdHJva2VcIl0gPSBcImIqXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkNsb3NlRmlsbE5vblplcm9BbmRTdHJva2VcIl0gPSBcImJcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiQ2xvc2VQYXRoXCJdID0gXCJoXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkFwcGVuZEJlemllckN1cnZlXCJdID0gXCJjXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkN1cnZlVG9SZXBsaWNhdGVGaW5hbFBvaW50XCJdID0gXCJ5XCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkN1cnZlVG9SZXBsaWNhdGVJbml0aWFsUG9pbnRcIl0gPSBcInZcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiRW5kUGF0aFwiXSA9IFwiblwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJGaWxsRXZlbk9kZEFuZFN0cm9rZVwiXSA9IFwiQipcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiRmlsbEV2ZW5PZGRcIl0gPSBcImYqXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkZpbGxOb25aZXJvQW5kU3Ryb2tlXCJdID0gXCJCXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkZpbGxOb25aZXJvXCJdID0gXCJmXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkxlZ2FjeUZpbGxOb25aZXJvXCJdID0gXCJGXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkxpbmVUb1wiXSA9IFwibFwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJNb3ZlVG9cIl0gPSBcIm1cIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2hhZGluZ0ZpbGxcIl0gPSBcInNoXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlN0cm9rZVBhdGhcIl0gPSBcIlNcIjtcbiAgICAvLyBUZXh0IE9wZXJhdG9yc1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJCZWdpblRleHRcIl0gPSBcIkJUXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIkVuZFRleHRcIl0gPSBcIkVUXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIk1vdmVUZXh0XCJdID0gXCJUZFwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJNb3ZlVGV4dFNldExlYWRpbmdcIl0gPSBcIlREXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIk5leHRMaW5lXCJdID0gXCJUKlwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRDaGFyYWN0ZXJTcGFjaW5nXCJdID0gXCJUY1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRGb250QW5kU2l6ZVwiXSA9IFwiVGZcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2V0VGV4dEhvcml6b250YWxTY2FsaW5nXCJdID0gXCJUelwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRUZXh0TGluZUhlaWdodFwiXSA9IFwiVExcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2V0VGV4dFJlbmRlcmluZ01vZGVcIl0gPSBcIlRyXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNldFRleHRSaXNlXCJdID0gXCJUc1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTZXRXb3JkU3BhY2luZ1wiXSA9IFwiVHdcIjtcbiAgICBQREZPcGVyYXRvck5hbWVzW1wiU2hvd1RleHRcIl0gPSBcIlRqXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNob3dUZXh0QWRqdXN0ZWRcIl0gPSBcIlRKXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlNob3dUZXh0TGluZVwiXSA9IFwiJ1wiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJTaG93VGV4dExpbmVBbmRTcGFjZVwiXSA9IFwiXFxcIlwiO1xuICAgIC8vIFR5cGUzIEZvbnQgT3BlcmF0b3JzXG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlR5cGUzRDBcIl0gPSBcImQwXCI7XG4gICAgUERGT3BlcmF0b3JOYW1lc1tcIlR5cGUzRDFcIl0gPSBcImQxXCI7XG4gICAgLy8gQ29tcGF0aWJpbGl0eSBTZWN0aW9uIE9wZXJhdG9yc1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJCZWdpbkNvbXBhdGliaWxpdHlTZWN0aW9uXCJdID0gXCJCWFwiO1xuICAgIFBERk9wZXJhdG9yTmFtZXNbXCJFbmRDb21wYXRpYmlsaXR5U2VjdGlvblwiXSA9IFwiRVhcIjtcbn0pKFBERk9wZXJhdG9yTmFtZXMgfHwgKFBERk9wZXJhdG9yTmFtZXMgPSB7fSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGT3BlcmF0b3JOYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERk9wZXJhdG9yTmFtZXMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgcGFrbyBmcm9tICdwYWtvJztcbmltcG9ydCB7IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGU3RyZWFtIGZyb20gXCIuLi9vYmplY3RzL1BERlN0cmVhbVwiO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBQREZGbGF0ZVN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGRmxhdGVTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGRmxhdGVTdHJlYW0oZGljdCwgZW5jb2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRpY3QpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbXB1dGVDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1bmVuY29kZWRDb250ZW50cyA9IF90aGlzLmdldFVuZW5jb2RlZENvbnRlbnRzKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW5jb2RlID8gcGFrby5kZWZsYXRlKHVuZW5jb2RlZENvbnRlbnRzKSA6IHVuZW5jb2RlZENvbnRlbnRzO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5lbmNvZGUgPSBlbmNvZGU7XG4gICAgICAgIGlmIChlbmNvZGUpXG4gICAgICAgICAgICBkaWN0LnNldChQREZOYW1lLm9mKCdGaWx0ZXInKSwgUERGTmFtZS5vZignRmxhdGVEZWNvZGUnKSk7XG4gICAgICAgIF90aGlzLmNvbnRlbnRzQ2FjaGUgPSBDYWNoZS5wb3B1bGF0ZWRCeShfdGhpcy5jb21wdXRlQ29udGVudHMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERkZsYXRlU3RyZWFtLnByb3RvdHlwZS5nZXRDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHNDYWNoZS5hY2Nlc3MoKTtcbiAgICB9O1xuICAgIFBERkZsYXRlU3RyZWFtLnByb3RvdHlwZS5nZXRDb250ZW50c1NpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzQ2FjaGUuYWNjZXNzKCkubGVuZ3RoO1xuICAgIH07XG4gICAgUERGRmxhdGVTdHJlYW0ucHJvdG90eXBlLmdldFVuZW5jb2RlZENvbnRlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdnZXRVbmVuY29kZWRDb250ZW50cycpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkZsYXRlU3RyZWFtO1xufShQREZTdHJlYW0pKTtcbmV4cG9ydCBkZWZhdWx0IFBERkZsYXRlU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGRmxhdGVTdHJlYW0uanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGRmxhdGVTdHJlYW0gZnJvbSBcIi4vUERGRmxhdGVTdHJlYW1cIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbnZhciBQREZDb250ZW50U3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZDb250ZW50U3RyZWFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkNvbnRlbnRTdHJlYW0oZGljdCwgb3BlcmF0b3JzLCBlbmNvZGUpIHtcbiAgICAgICAgaWYgKGVuY29kZSA9PT0gdm9pZCAwKSB7IGVuY29kZSA9IHRydWU7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGljdCwgZW5jb2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcGVyYXRvcnMgPSBvcGVyYXRvcnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUERGQ29udGVudFN0cmVhbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgb3BlcmF0b3JzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRvcnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLm9wZXJhdG9ycykucHVzaC5hcHBseShfYSwgb3BlcmF0b3JzKTtcbiAgICB9O1xuICAgIFBERkNvbnRlbnRTdHJlYW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9ycyA9IG5ldyBBcnJheSh0aGlzLm9wZXJhdG9ycy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLm9wZXJhdG9ycy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIG9wZXJhdG9yc1tpZHhdID0gdGhpcy5vcGVyYXRvcnNbaWR4XS5jbG9uZShjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBkaWN0ID0gX2EuZGljdCwgZW5jb2RlID0gX2EuZW5jb2RlO1xuICAgICAgICByZXR1cm4gUERGQ29udGVudFN0cmVhbS5vZihkaWN0LmNsb25lKGNvbnRleHQpLCBvcGVyYXRvcnMsIGVuY29kZSk7XG4gICAgfTtcbiAgICBQREZDb250ZW50U3RyZWFtLnByb3RvdHlwZS5nZXRDb250ZW50c1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMub3BlcmF0b3JzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5vcGVyYXRvcnNbaWR4XSArIFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgUERGQ29udGVudFN0cmVhbS5wcm90b3R5cGUuZ2V0VW5lbmNvZGVkQ29udGVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheSh0aGlzLmdldFVuZW5jb2RlZENvbnRlbnRzU2l6ZSgpKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMub3BlcmF0b3JzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHRoaXMub3BlcmF0b3JzW2lkeF0uY29weUJ5dGVzSW50byhidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuICAgIFBERkNvbnRlbnRTdHJlYW0ucHJvdG90eXBlLmdldFVuZW5jb2RlZENvbnRlbnRzU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNpemUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLm9wZXJhdG9ycy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHNpemUgKz0gdGhpcy5vcGVyYXRvcnNbaWR4XS5zaXplSW5CeXRlcygpICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFBERkNvbnRlbnRTdHJlYW0ub2YgPSBmdW5jdGlvbiAoZGljdCwgb3BlcmF0b3JzLCBlbmNvZGUpIHtcbiAgICAgICAgaWYgKGVuY29kZSA9PT0gdm9pZCAwKSB7IGVuY29kZSA9IHRydWU7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBQREZDb250ZW50U3RyZWFtKGRpY3QsIG9wZXJhdG9ycywgZW5jb2RlKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZDb250ZW50U3RyZWFtO1xufShQREZGbGF0ZVN0cmVhbSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGQ29udGVudFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkNvbnRlbnRTdHJlYW0uanMubWFwIiwiLyoqXG4gKiBHZW5lcmF0ZXMgYSBwc2V1ZG8gcmFuZG9tIG51bWJlci4gQWx0aG91Z2ggaXQgaXMgbm90IGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZVxuICogYW5kIHVuaWZvcm1seSBkaXN0cmlidXRlZCwgaXQgaXMgbm90IGEgY29uY2VybiBmb3IgdGhlIGludGVuZGVkIHVzZS1jYXNlLFxuICogd2hpY2ggaXMgdG8gZ2VuZXJhdGUgZGlzdGluY3QgbnVtYmVycy5cbiAqXG4gKiBDcmVkaXQ6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTMwMzcyNS8xMDI1NDA0OVxuICovXG52YXIgU2ltcGxlUk5HID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbXBsZVJORyhzZWVkKSB7XG4gICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgfVxuICAgIFNpbXBsZVJORy5wcm90b3R5cGUubmV4dEludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHggPSBNYXRoLnNpbih0aGlzLnNlZWQrKykgKiAxMDAwMDtcbiAgICAgICAgcmV0dXJuIHggLSBNYXRoLmZsb29yKHgpO1xuICAgIH07XG4gICAgU2ltcGxlUk5HLndpdGhTZWVkID0gZnVuY3Rpb24gKHNlZWQpIHsgcmV0dXJuIG5ldyBTaW1wbGVSTkcoc2VlZCk7IH07XG4gICAgcmV0dXJuIFNpbXBsZVJORztcbn0oKSk7XG5leHBvcnQgeyBTaW1wbGVSTkcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJuZy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHBha28gZnJvbSAncGFrbyc7XG5pbXBvcnQgUERGSGVhZGVyIGZyb20gXCIuL2RvY3VtZW50L1BERkhlYWRlclwiO1xuaW1wb3J0IHsgVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuL29iamVjdHMvUERGQXJyYXlcIjtcbmltcG9ydCBQREZCb29sIGZyb20gXCIuL29iamVjdHMvUERGQm9vbFwiO1xuaW1wb3J0IFBERkRpY3QgZnJvbSBcIi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCBQREZOdWxsIGZyb20gXCIuL29iamVjdHMvUERGTnVsbFwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9vYmplY3RzL1BERk9iamVjdFwiO1xuaW1wb3J0IFBERlJhd1N0cmVhbSBmcm9tIFwiLi9vYmplY3RzL1BERlJhd1N0cmVhbVwiO1xuaW1wb3J0IFBERlJlZiBmcm9tIFwiLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERk9wZXJhdG9yIGZyb20gXCIuL29wZXJhdG9ycy9QREZPcGVyYXRvclwiO1xuaW1wb3J0IE9wcyBmcm9tIFwiLi9vcGVyYXRvcnMvUERGT3BlcmF0b3JOYW1lc1wiO1xuaW1wb3J0IFBERkNvbnRlbnRTdHJlYW0gZnJvbSBcIi4vc3RydWN0dXJlcy9QREZDb250ZW50U3RyZWFtXCI7XG5pbXBvcnQgeyB0eXBlZEFycmF5Rm9yIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBTaW1wbGVSTkcgfSBmcm9tIFwiLi4vdXRpbHMvcm5nXCI7XG52YXIgYnlBc2NlbmRpbmdPYmplY3ROdW1iZXIgPSBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgdmFyIGEgPSBfYVswXTtcbiAgICB2YXIgYiA9IF9iWzBdO1xuICAgIHJldHVybiBhLm9iamVjdE51bWJlciAtIGIub2JqZWN0TnVtYmVyO1xufTtcbnZhciBQREZDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkNvbnRleHQoKSB7XG4gICAgICAgIHRoaXMubGFyZ2VzdE9iamVjdE51bWJlciA9IDA7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gUERGSGVhZGVyLmZvclZlcnNpb24oMSwgNyk7XG4gICAgICAgIHRoaXMudHJhaWxlckluZm8gPSB7fTtcbiAgICAgICAgdGhpcy5pbmRpcmVjdE9iamVjdHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMucm5nID0gU2ltcGxlUk5HLndpdGhTZWVkKDEpO1xuICAgIH1cbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5hc3NpZ24gPSBmdW5jdGlvbiAocmVmLCBvYmplY3QpIHtcbiAgICAgICAgdGhpcy5pbmRpcmVjdE9iamVjdHMuc2V0KHJlZiwgb2JqZWN0KTtcbiAgICAgICAgaWYgKHJlZi5vYmplY3ROdW1iZXIgPiB0aGlzLmxhcmdlc3RPYmplY3ROdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGFyZ2VzdE9iamVjdE51bWJlciA9IHJlZi5vYmplY3ROdW1iZXI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLm5leHRSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFyZ2VzdE9iamVjdE51bWJlciArPSAxO1xuICAgICAgICByZXR1cm4gUERGUmVmLm9mKHRoaXMubGFyZ2VzdE9iamVjdE51bWJlcik7XG4gICAgfTtcbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMubmV4dFJlZigpO1xuICAgICAgICB0aGlzLmFzc2lnbihyZWYsIG9iamVjdCk7XG4gICAgICAgIHJldHVybiByZWY7XG4gICAgfTtcbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGlyZWN0T2JqZWN0cy5kZWxldGUocmVmKTtcbiAgICB9O1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLmxvb2t1cE1heWJlID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgdHlwZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHR5cGVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGBwcmVzZXJ2ZVBERk51bGxgIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gU2hvdWxkIGJlXG4gICAgICAgIC8vIHJlbW92ZWQgaW4gbmV4dCBicmVha2luZyBBUEkgY2hhbmdlLlxuICAgICAgICB2YXIgcHJlc2VydmVQREZOdWxsID0gdHlwZXMuaW5jbHVkZXMoUERGTnVsbCk7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWYgaW5zdGFuY2VvZiBQREZSZWYgPyB0aGlzLmluZGlyZWN0T2JqZWN0cy5nZXQocmVmKSA6IHJlZjtcbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgKHJlc3VsdCA9PT0gUERGTnVsbCAmJiAhcHJlc2VydmVQREZOdWxsKSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHR5cGVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1tpZHhdO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFBERk51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBQREZOdWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIHR5cGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRPYmplY3RUeXBlRXJyb3IodHlwZXMsIHJlc3VsdCk7XG4gICAgfTtcbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciB0eXBlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdHlwZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZiBpbnN0YW5jZW9mIFBERlJlZiA/IHRoaXMuaW5kaXJlY3RPYmplY3RzLmdldChyZWYpIDogcmVmO1xuICAgICAgICBpZiAodHlwZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdHlwZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVzW2lkeF07XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gUERGTnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IFBERk51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvcih0eXBlcywgcmVzdWx0KTtcbiAgICB9O1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLmdldE9iamVjdFJlZiA9IGZ1bmN0aW9uIChwZGZPYmplY3QpIHtcbiAgICAgICAgdmFyIGVudHJpZXMgPSBBcnJheS5mcm9tKHRoaXMuaW5kaXJlY3RPYmplY3RzLmVudHJpZXMoKSk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBlbnRyaWVzW2lkeF0sIHJlZiA9IF9hWzBdLCBvYmplY3QgPSBfYVsxXTtcbiAgICAgICAgICAgIGlmIChvYmplY3QgPT09IHBkZk9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLmVudW1lcmF0ZUluZGlyZWN0T2JqZWN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5pbmRpcmVjdE9iamVjdHMuZW50cmllcygpKS5zb3J0KGJ5QXNjZW5kaW5nT2JqZWN0TnVtYmVyKTtcbiAgICB9O1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLm9iaiA9IGZ1bmN0aW9uIChsaXRlcmFsKSB7XG4gICAgICAgIGlmIChsaXRlcmFsIGluc3RhbmNlb2YgUERGT2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGl0ZXJhbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsaXRlcmFsID09PSBudWxsIHx8IGxpdGVyYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFBERk51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxpdGVyYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gUERGTmFtZS5vZihsaXRlcmFsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbGl0ZXJhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBQREZOdW1iZXIub2YobGl0ZXJhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxpdGVyYWwgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIGxpdGVyYWwgPyBQREZCb29sLlRydWUgOiBQREZCb29sLkZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobGl0ZXJhbCkpIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFBERkFycmF5LndpdGhDb250ZXh0KHRoaXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gbGl0ZXJhbC5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBhcnJheS5wdXNoKHRoaXMub2JqKGxpdGVyYWxbaWR4XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRpY3QgPSBQREZEaWN0LndpdGhDb250ZXh0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhsaXRlcmFsKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaWR4XTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsaXRlcmFsW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGRpY3Quc2V0KFBERk5hbWUub2Yoa2V5KSwgdGhpcy5vYmoodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaWN0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5zdHJlYW0gPSBmdW5jdGlvbiAoY29udGVudHMsIGRpY3QpIHtcbiAgICAgICAgaWYgKGRpY3QgPT09IHZvaWQgMCkgeyBkaWN0ID0ge307IH1cbiAgICAgICAgcmV0dXJuIFBERlJhd1N0cmVhbS5vZih0aGlzLm9iaihkaWN0KSwgdHlwZWRBcnJheUZvcihjb250ZW50cykpO1xuICAgIH07XG4gICAgUERGQ29udGV4dC5wcm90b3R5cGUuZmxhdGVTdHJlYW0gPSBmdW5jdGlvbiAoY29udGVudHMsIGRpY3QpIHtcbiAgICAgICAgaWYgKGRpY3QgPT09IHZvaWQgMCkgeyBkaWN0ID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtKHBha28uZGVmbGF0ZSh0eXBlZEFycmF5Rm9yKGNvbnRlbnRzKSksIF9fYXNzaWduKF9fYXNzaWduKHt9LCBkaWN0KSwgeyBGaWx0ZXI6ICdGbGF0ZURlY29kZScgfSkpO1xuICAgIH07XG4gICAgUERGQ29udGV4dC5wcm90b3R5cGUuY29udGVudFN0cmVhbSA9IGZ1bmN0aW9uIChvcGVyYXRvcnMsIGRpY3QpIHtcbiAgICAgICAgaWYgKGRpY3QgPT09IHZvaWQgMCkgeyBkaWN0ID0ge307IH1cbiAgICAgICAgcmV0dXJuIFBERkNvbnRlbnRTdHJlYW0ub2YodGhpcy5vYmooZGljdCksIG9wZXJhdG9ycyk7XG4gICAgfTtcbiAgICBQREZDb250ZXh0LnByb3RvdHlwZS5mb3JtWE9iamVjdCA9IGZ1bmN0aW9uIChvcGVyYXRvcnMsIGRpY3QpIHtcbiAgICAgICAgaWYgKGRpY3QgPT09IHZvaWQgMCkgeyBkaWN0ID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFN0cmVhbShvcGVyYXRvcnMsIF9fYXNzaWduKF9fYXNzaWduKHsgQkJveDogdGhpcy5vYmooWzAsIDAsIDAsIDBdKSwgTWF0cml4OiB0aGlzLm9iaihbMSwgMCwgMCwgMSwgMCwgMF0pIH0sIGRpY3QpLCB7IFR5cGU6ICdYT2JqZWN0JywgU3VidHlwZTogJ0Zvcm0nIH0pKTtcbiAgICB9O1xuICAgIC8qXG4gICAgICogUmVmZXJlbmNlIHRvIFBERkNvbnRlbnRTdHJlYW0gdGhhdCBjb250YWlucyBhIHNpbmdsZSBQREZPcGVyYXRvcjogYHFgLlxuICAgICAqIFVzZWQgYnkgW1tQREZQYWdlTGVhZl1dIGluc3RhbmNlcyB0byBlbnN1cmUgdGhhdCB3aGVuIGNvbnRlbnQgc3RyZWFtcyBhcmVcbiAgICAgKiBhZGRlZCB0byBhIG1vZGlmaWVkIFBERiwgdGhleSBzdGFydCBpbiB0aGUgZGVmYXVsdCwgdW5jaGFuZ2VkIGdyYXBoaWNzXG4gICAgICogc3RhdGUuXG4gICAgICovXG4gICAgUERGQ29udGV4dC5wcm90b3R5cGUuZ2V0UHVzaEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wdXNoR3JhcGhpY3NTdGF0ZUNvbnRlbnRTdHJlYW1SZWYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hHcmFwaGljc1N0YXRlQ29udGVudFN0cmVhbVJlZjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGljdCA9IHRoaXMub2JqKHt9KTtcbiAgICAgICAgdmFyIG9wID0gUERGT3BlcmF0b3Iub2YoT3BzLlB1c2hHcmFwaGljc1N0YXRlKTtcbiAgICAgICAgdmFyIHN0cmVhbSA9IFBERkNvbnRlbnRTdHJlYW0ub2YoZGljdCwgW29wXSk7XG4gICAgICAgIHRoaXMucHVzaEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtUmVmID0gdGhpcy5yZWdpc3RlcihzdHJlYW0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wdXNoR3JhcGhpY3NTdGF0ZUNvbnRlbnRTdHJlYW1SZWY7XG4gICAgfTtcbiAgICAvKlxuICAgICAqIFJlZmVyZW5jZSB0byBQREZDb250ZW50U3RyZWFtIHRoYXQgY29udGFpbnMgYSBzaW5nbGUgUERGT3BlcmF0b3I6IGBRYC5cbiAgICAgKiBVc2VkIGJ5IFtbUERGUGFnZUxlYWZdXSBpbnN0YW5jZXMgdG8gZW5zdXJlIHRoYXQgd2hlbiBjb250ZW50IHN0cmVhbXMgYXJlXG4gICAgICogYWRkZWQgdG8gYSBtb2RpZmllZCBQREYsIHRoZXkgc3RhcnQgaW4gdGhlIGRlZmF1bHQsIHVuY2hhbmdlZCBncmFwaGljc1xuICAgICAqIHN0YXRlLlxuICAgICAqL1xuICAgIFBERkNvbnRleHQucHJvdG90eXBlLmdldFBvcEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wb3BHcmFwaGljc1N0YXRlQ29udGVudFN0cmVhbVJlZikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9wR3JhcGhpY3NTdGF0ZUNvbnRlbnRTdHJlYW1SZWY7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRpY3QgPSB0aGlzLm9iaih7fSk7XG4gICAgICAgIHZhciBvcCA9IFBERk9wZXJhdG9yLm9mKE9wcy5Qb3BHcmFwaGljc1N0YXRlKTtcbiAgICAgICAgdmFyIHN0cmVhbSA9IFBERkNvbnRlbnRTdHJlYW0ub2YoZGljdCwgW29wXSk7XG4gICAgICAgIHRoaXMucG9wR3JhcGhpY3NTdGF0ZUNvbnRlbnRTdHJlYW1SZWYgPSB0aGlzLnJlZ2lzdGVyKHN0cmVhbSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtUmVmO1xuICAgIH07XG4gICAgUERGQ29udGV4dC5wcm90b3R5cGUuYWRkUmFuZG9tU3VmZml4ID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4TGVuZ3RoKSB7XG4gICAgICAgIGlmIChzdWZmaXhMZW5ndGggPT09IHZvaWQgMCkgeyBzdWZmaXhMZW5ndGggPSA0OyB9XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBcIi1cIiArIE1hdGguZmxvb3IodGhpcy5ybmcubmV4dEludCgpICogTWF0aC5wb3coMTAsIHN1ZmZpeExlbmd0aCkpO1xuICAgIH07XG4gICAgUERGQ29udGV4dC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUERGQ29udGV4dCgpOyB9O1xuICAgIHJldHVybiBQREZDb250ZXh0O1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkNvbnRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERlN0cmVhbSBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJlYW1cIjtcbnZhciBQREZQYWdlTGVhZiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGUGFnZUxlYWYsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGUGFnZUxlYWYobWFwLCBjb250ZXh0LCBhdXRvTm9ybWFsaXplQ1RNKSB7XG4gICAgICAgIGlmIChhdXRvTm9ybWFsaXplQ1RNID09PSB2b2lkIDApIHsgYXV0b05vcm1hbGl6ZUNUTSA9IHRydWU7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWFwLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmF1dG9Ob3JtYWxpemVDVE0gPSBhdXRvTm9ybWFsaXplQ1RNO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBjbG9uZSA9IFBERlBhZ2VMZWFmLmZyb21NYXBXaXRoQ29udGV4dChuZXcgTWFwKCksIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0LCB0aGlzLmF1dG9Ob3JtYWxpemVDVE0pO1xuICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gZW50cmllc1tpZHhdLCBrZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgIGNsb25lLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuUGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBNYXliZShQREZOYW1lLlBhcmVudCwgUERGRGljdCk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuQ29udGVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cChQREZOYW1lLm9mKCdDb250ZW50cycpKTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5Bbm5vdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE1heWJlKFBERk5hbWUuQW5ub3RzLCBQREZBcnJheSk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuQmxlZWRCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE1heWJlKFBERk5hbWUuQmxlZWRCb3gsIFBERkFycmF5KTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5UcmltQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBNYXliZShQREZOYW1lLlRyaW1Cb3gsIFBERkFycmF5KTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5BcnRCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE1heWJlKFBERk5hbWUuQXJ0Qm94LCBQREZBcnJheSk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuUmVzb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGljdE9yUmVmID0gdGhpcy5nZXRJbmhlcml0YWJsZUF0dHJpYnV0ZShQREZOYW1lLlJlc291cmNlcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQubG9va3VwTWF5YmUoZGljdE9yUmVmLCBQREZEaWN0KTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5NZWRpYUJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFycmF5T3JSZWYgPSB0aGlzLmdldEluaGVyaXRhYmxlQXR0cmlidXRlKFBERk5hbWUuTWVkaWFCb3gpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lmxvb2t1cChhcnJheU9yUmVmLCBQREZBcnJheSk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuQ3JvcEJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFycmF5T3JSZWYgPSB0aGlzLmdldEluaGVyaXRhYmxlQXR0cmlidXRlKFBERk5hbWUuQ3JvcEJveCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQubG9va3VwTWF5YmUoYXJyYXlPclJlZiwgUERGQXJyYXkpO1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYucHJvdG90eXBlLlJvdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG51bWJlck9yUmVmID0gdGhpcy5nZXRJbmhlcml0YWJsZUF0dHJpYnV0ZShQREZOYW1lLlJvdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQubG9va3VwTWF5YmUobnVtYmVyT3JSZWYsIFBERk51bWJlcik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuZ2V0SW5oZXJpdGFibGVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlO1xuICAgICAgICB0aGlzLmFzY2VuZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGUpXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlID0gbm9kZS5nZXQobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlO1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYucHJvdG90eXBlLnNldFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnRSZWYpIHtcbiAgICAgICAgdGhpcy5zZXQoUERGTmFtZS5QYXJlbnQsIHBhcmVudFJlZik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuYWRkQ29udGVudFN0cmVhbSA9IGZ1bmN0aW9uIChjb250ZW50U3RyZWFtUmVmKSB7XG4gICAgICAgIHZhciBDb250ZW50cyA9IHRoaXMubm9ybWFsaXplZEVudHJpZXMoKS5Db250ZW50cyB8fCB0aGlzLmNvbnRleHQub2JqKFtdKTtcbiAgICAgICAgdGhpcy5zZXQoUERGTmFtZS5Db250ZW50cywgQ29udGVudHMpO1xuICAgICAgICBDb250ZW50cy5wdXNoKGNvbnRlbnRTdHJlYW1SZWYpO1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYucHJvdG90eXBlLndyYXBDb250ZW50U3RyZWFtcyA9IGZ1bmN0aW9uIChzdGFydFN0cmVhbSwgZW5kU3RyZWFtKSB7XG4gICAgICAgIHZhciBDb250ZW50cyA9IHRoaXMuQ29udGVudHMoKTtcbiAgICAgICAgaWYgKENvbnRlbnRzIGluc3RhbmNlb2YgUERGQXJyYXkpIHtcbiAgICAgICAgICAgIENvbnRlbnRzLmluc2VydCgwLCBzdGFydFN0cmVhbSk7XG4gICAgICAgICAgICBDb250ZW50cy5wdXNoKGVuZFN0cmVhbSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUuYWRkQW5ub3QgPSBmdW5jdGlvbiAoYW5ub3RSZWYpIHtcbiAgICAgICAgdmFyIEFubm90cyA9IHRoaXMubm9ybWFsaXplZEVudHJpZXMoKS5Bbm5vdHM7XG4gICAgICAgIEFubm90cy5wdXNoKGFubm90UmVmKTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5yZW1vdmVBbm5vdCA9IGZ1bmN0aW9uIChhbm5vdFJlZikge1xuICAgICAgICB2YXIgQW5ub3RzID0gdGhpcy5ub3JtYWxpemVkRW50cmllcygpLkFubm90cztcbiAgICAgICAgdmFyIGluZGV4ID0gQW5ub3RzLmluZGV4T2YoYW5ub3RSZWYpO1xuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQW5ub3RzLnJlbW92ZShpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5zZXRGb250RGljdGlvbmFyeSA9IGZ1bmN0aW9uIChuYW1lLCBmb250RGljdFJlZikge1xuICAgICAgICB2YXIgRm9udCA9IHRoaXMubm9ybWFsaXplZEVudHJpZXMoKS5Gb250O1xuICAgICAgICBGb250LnNldChuYW1lLCBmb250RGljdFJlZik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUubmV3Rm9udERpY3Rpb25hcnlLZXkgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIHZhciBGb250ID0gdGhpcy5ub3JtYWxpemVkRW50cmllcygpLkZvbnQ7XG4gICAgICAgIHJldHVybiBGb250LnVuaXF1ZUtleSh0YWcpO1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYucHJvdG90eXBlLm5ld0ZvbnREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKHRhZywgZm9udERpY3RSZWYpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMubmV3Rm9udERpY3Rpb25hcnlLZXkodGFnKTtcbiAgICAgICAgdGhpcy5zZXRGb250RGljdGlvbmFyeShrZXksIGZvbnREaWN0UmVmKTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5zZXRYT2JqZWN0ID0gZnVuY3Rpb24gKG5hbWUsIHhPYmplY3RSZWYpIHtcbiAgICAgICAgdmFyIFhPYmplY3QgPSB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzKCkuWE9iamVjdDtcbiAgICAgICAgWE9iamVjdC5zZXQobmFtZSwgeE9iamVjdFJlZik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUubmV3WE9iamVjdEtleSA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgdmFyIFhPYmplY3QgPSB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzKCkuWE9iamVjdDtcbiAgICAgICAgcmV0dXJuIFhPYmplY3QudW5pcXVlS2V5KHRhZyk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUubmV3WE9iamVjdCA9IGZ1bmN0aW9uICh0YWcsIHhPYmplY3RSZWYpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMubmV3WE9iamVjdEtleSh0YWcpO1xuICAgICAgICB0aGlzLnNldFhPYmplY3Qoa2V5LCB4T2JqZWN0UmVmKTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5zZXRFeHRHU3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgZXh0R1N0YXRlUmVmKSB7XG4gICAgICAgIHZhciBFeHRHU3RhdGUgPSB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzKCkuRXh0R1N0YXRlO1xuICAgICAgICBFeHRHU3RhdGUuc2V0KG5hbWUsIGV4dEdTdGF0ZVJlZik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUubmV3RXh0R1N0YXRlS2V5ID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgICB2YXIgRXh0R1N0YXRlID0gdGhpcy5ub3JtYWxpemVkRW50cmllcygpLkV4dEdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIEV4dEdTdGF0ZS51bmlxdWVLZXkodGFnKTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5uZXdFeHRHU3RhdGUgPSBmdW5jdGlvbiAodGFnLCBleHRHU3RhdGVSZWYpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMubmV3RXh0R1N0YXRlS2V5KHRhZyk7XG4gICAgICAgIHRoaXMuc2V0RXh0R1N0YXRlKGtleSwgZXh0R1N0YXRlUmVmKTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICAgIFBERlBhZ2VMZWFmLnByb3RvdHlwZS5hc2NlbmQgPSBmdW5jdGlvbiAodmlzaXRvcikge1xuICAgICAgICB2aXNpdG9yKHRoaXMpO1xuICAgICAgICB2YXIgUGFyZW50ID0gdGhpcy5QYXJlbnQoKTtcbiAgICAgICAgaWYgKFBhcmVudClcbiAgICAgICAgICAgIFBhcmVudC5hc2NlbmQodmlzaXRvcik7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5ub3JtYWxpemVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgdmFyIGNvbnRlbnRzUmVmID0gdGhpcy5nZXQoUERGTmFtZS5Db250ZW50cyk7XG4gICAgICAgIHZhciBjb250ZW50cyA9IHRoaXMuY29udGV4dC5sb29rdXAoY29udGVudHNSZWYpO1xuICAgICAgICBpZiAoY29udGVudHMgaW5zdGFuY2VvZiBQREZTdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KFBERk5hbWUuQ29udGVudHMsIGNvbnRleHQub2JqKFtjb250ZW50c1JlZl0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hdXRvTm9ybWFsaXplQ1RNKSB7XG4gICAgICAgICAgICB0aGlzLndyYXBDb250ZW50U3RyZWFtcyh0aGlzLmNvbnRleHQuZ2V0UHVzaEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtKCksIHRoaXMuY29udGV4dC5nZXRQb3BHcmFwaGljc1N0YXRlQ29udGVudFN0cmVhbSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBDbG9uZSBgUmVzb3VyY2VzYCBpZiBpdCBpcyBpbmhlcml0ZWRcbiAgICAgICAgdmFyIGRpY3RPclJlZiA9IHRoaXMuZ2V0SW5oZXJpdGFibGVBdHRyaWJ1dGUoUERGTmFtZS5SZXNvdXJjZXMpO1xuICAgICAgICB2YXIgUmVzb3VyY2VzID0gY29udGV4dC5sb29rdXBNYXliZShkaWN0T3JSZWYsIFBERkRpY3QpIHx8IGNvbnRleHQub2JqKHt9KTtcbiAgICAgICAgdGhpcy5zZXQoUERGTmFtZS5SZXNvdXJjZXMsIFJlc291cmNlcyk7XG4gICAgICAgIC8vIFRPRE86IENsb25lIGBGb250YCBpZiBpdCBpcyBpbmhlcml0ZWRcbiAgICAgICAgdmFyIEZvbnQgPSBSZXNvdXJjZXMubG9va3VwTWF5YmUoUERGTmFtZS5Gb250LCBQREZEaWN0KSB8fCBjb250ZXh0Lm9iaih7fSk7XG4gICAgICAgIFJlc291cmNlcy5zZXQoUERGTmFtZS5Gb250LCBGb250KTtcbiAgICAgICAgLy8gVE9ETzogQ2xvbmUgYFhPYmplY3RgIGlmIGl0IGlzIGluaGVyaXRlZFxuICAgICAgICB2YXIgWE9iamVjdCA9IFJlc291cmNlcy5sb29rdXBNYXliZShQREZOYW1lLlhPYmplY3QsIFBERkRpY3QpIHx8IGNvbnRleHQub2JqKHt9KTtcbiAgICAgICAgUmVzb3VyY2VzLnNldChQREZOYW1lLlhPYmplY3QsIFhPYmplY3QpO1xuICAgICAgICAvLyBUT0RPOiBDbG9uZSBgRXh0R1N0YXRlYCBpZiBpdCBpcyBpbmhlcml0ZWRcbiAgICAgICAgdmFyIEV4dEdTdGF0ZSA9IFJlc291cmNlcy5sb29rdXBNYXliZShQREZOYW1lLkV4dEdTdGF0ZSwgUERGRGljdCkgfHwgY29udGV4dC5vYmooe30pO1xuICAgICAgICBSZXNvdXJjZXMuc2V0KFBERk5hbWUuRXh0R1N0YXRlLCBFeHRHU3RhdGUpO1xuICAgICAgICB2YXIgQW5ub3RzID0gdGhpcy5Bbm5vdHMoKSB8fCBjb250ZXh0Lm9iaihbXSk7XG4gICAgICAgIHRoaXMuc2V0KFBERk5hbWUuQW5ub3RzLCBBbm5vdHMpO1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYucHJvdG90eXBlLm5vcm1hbGl6ZWRFbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICB2YXIgQW5ub3RzID0gdGhpcy5Bbm5vdHMoKTtcbiAgICAgICAgdmFyIFJlc291cmNlcyA9IHRoaXMuUmVzb3VyY2VzKCk7XG4gICAgICAgIHZhciBDb250ZW50cyA9IHRoaXMuQ29udGVudHMoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEFubm90czogQW5ub3RzLFxuICAgICAgICAgICAgUmVzb3VyY2VzOiBSZXNvdXJjZXMsXG4gICAgICAgICAgICBDb250ZW50czogQ29udGVudHMsXG4gICAgICAgICAgICBGb250OiBSZXNvdXJjZXMubG9va3VwKFBERk5hbWUuRm9udCwgUERGRGljdCksXG4gICAgICAgICAgICBYT2JqZWN0OiBSZXNvdXJjZXMubG9va3VwKFBERk5hbWUuWE9iamVjdCwgUERGRGljdCksXG4gICAgICAgICAgICBFeHRHU3RhdGU6IFJlc291cmNlcy5sb29rdXAoUERGTmFtZS5FeHRHU3RhdGUsIFBERkRpY3QpLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgUERGUGFnZUxlYWYuSW5oZXJpdGFibGVFbnRyaWVzID0gW1xuICAgICAgICAnUmVzb3VyY2VzJyxcbiAgICAgICAgJ01lZGlhQm94JyxcbiAgICAgICAgJ0Nyb3BCb3gnLFxuICAgICAgICAnUm90YXRlJyxcbiAgICBdO1xuICAgIFBERlBhZ2VMZWFmLndpdGhDb250ZXh0QW5kUGFyZW50ID0gZnVuY3Rpb24gKGNvbnRleHQsIHBhcmVudCkge1xuICAgICAgICB2YXIgZGljdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZGljdC5zZXQoUERGTmFtZS5UeXBlLCBQREZOYW1lLlBhZ2UpO1xuICAgICAgICBkaWN0LnNldChQREZOYW1lLlBhcmVudCwgcGFyZW50KTtcbiAgICAgICAgZGljdC5zZXQoUERGTmFtZS5SZXNvdXJjZXMsIGNvbnRleHQub2JqKHt9KSk7XG4gICAgICAgIGRpY3Quc2V0KFBERk5hbWUuTWVkaWFCb3gsIGNvbnRleHQub2JqKFswLCAwLCA2MTIsIDc5Ml0pKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZQYWdlTGVhZihkaWN0LCBjb250ZXh0LCBmYWxzZSk7XG4gICAgfTtcbiAgICBQREZQYWdlTGVhZi5mcm9tTWFwV2l0aENvbnRleHQgPSBmdW5jdGlvbiAobWFwLCBjb250ZXh0LCBhdXRvTm9ybWFsaXplQ1RNKSB7XG4gICAgICAgIGlmIChhdXRvTm9ybWFsaXplQ1RNID09PSB2b2lkIDApIHsgYXV0b05vcm1hbGl6ZUNUTSA9IHRydWU7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBQREZQYWdlTGVhZihtYXAsIGNvbnRleHQsIGF1dG9Ob3JtYWxpemVDVE0pO1xuICAgIH07XG4gICAgcmV0dXJuIFBERlBhZ2VMZWFmO1xufShQREZEaWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZQYWdlTGVhZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlBhZ2VMZWFmLmpzLm1hcCIsImltcG9ydCBQREZBcnJheSBmcm9tIFwiLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi9vYmplY3RzL1BERkRpY3RcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERlJlZiBmcm9tIFwiLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERlN0cmVhbSBmcm9tIFwiLi9vYmplY3RzL1BERlN0cmVhbVwiO1xuaW1wb3J0IFBERlBhZ2VMZWFmIGZyb20gXCIuL3N0cnVjdHVyZXMvUERGUGFnZUxlYWZcIjtcbi8qKlxuICogUERGT2JqZWN0Q29waWVyIGNvcGllcyBQREZPYmplY3RzIGZyb20gYSBzcmMgY29udGV4dCB0byBhIGRlc3QgY29udGV4dC5cbiAqIFRoZSBwcmltYXJ5IHVzZSBjYXNlIGZvciB0aGlzIGlzIHRvIGNvcHkgcGFnZXMgYmV0d2VlbiBQREZzLlxuICpcbiAqIF9Db3B5aW5nXyBhbiBvYmplY3Qgd2l0aCBhIFBERk9iamVjdENvcGllciBpcyBkaWZmZXJlbnQgZnJvbSBfY2xvbmluZ18gYW5cbiAqIG9iamVjdCB3aXRoIGl0cyBbW1BERk9iamVjdC5jbG9uZV1dIG1ldGhvZDpcbiAqXG4gKiBgYGBcbiAqICAgY29uc3Qgc3JjOiBQREZDb250ZXh0ID0gLi4uXG4gKiAgIGNvbnN0IGRlc3Q6IFBERkNvbnRleHQgPSAuLi5cbiAqICAgY29uc3Qgb3JpZ2luYWxPYmplY3Q6IFBERk9iamVjdCA9IC4uLlxuICogICBjb25zdCBjb3BpZWRPYmplY3QgPSBQREZPYmplY3RDb3BpZXIuZm9yKHNyYywgZGVzdCkuY29weShvcmlnaW5hbE9iamVjdCk7XG4gKiAgIGNvbnN0IGNsb25lZE9iamVjdCA9IG9yaWdpbmFsT2JqZWN0LmNsb25lKCk7XG4gKiBgYGBcbiAqXG4gKiBDb3B5aW5nIGFuIG9iamVjdCBpcyBlcXVpdmFsZW50IHRvIGNsb25pbmcgaXQgYW5kIHRoZW4gY29weWluZyBvdmVyIGFueSBvdGhlclxuICogb2JqZWN0cyB0aGF0IGl0IHJlZmVyZW5jZXMuIE5vdGUgdGhhdCBvbmx5IGRpY3Rpb25hcmllcywgYXJyYXlzLCBhbmQgc3RyZWFtc1xuICogKG9yIHN0cnVjdHVyZXMgYnVpbGQgZnJvbSB0aGVtKSBjYW4gY29udGFpbiBpbmRpcmVjdCByZWZlcmVuY2VzIHRvIG90aGVyXG4gKiBvYmplY3RzLiBDb3B5aW5nIGEgUERGT2JqZWN0IHRoYXQgaXMgbm90IGEgZGljdGlvbmFyeSwgYXJyYXksIG9yIHN0cmVhbSBpc1xuICogc3VwcG9ydGVkLCBidXQgaXMgZXF1aXZhbGVudCB0byBjbG9uaW5nIGl0LlxuICovXG52YXIgUERGT2JqZWN0Q29waWVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERk9iamVjdENvcGllcihzcmMsIGRlc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy50cmF2ZXJzZWRPYmplY3RzID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgdGhpcy5jb3B5ID0gZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gKG9iamVjdCBpbnN0YW5jZW9mIFBERlBhZ2VMZWFmID8gX3RoaXMuY29weVBERlBhZ2Uob2JqZWN0KVxuICAgICAgICAgICAgOiBvYmplY3QgaW5zdGFuY2VvZiBQREZEaWN0ID8gX3RoaXMuY29weVBERkRpY3Qob2JqZWN0KVxuICAgICAgICAgICAgICAgIDogb2JqZWN0IGluc3RhbmNlb2YgUERGQXJyYXkgPyBfdGhpcy5jb3B5UERGQXJyYXkob2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICA6IG9iamVjdCBpbnN0YW5jZW9mIFBERlN0cmVhbSA/IF90aGlzLmNvcHlQREZTdHJlYW0ob2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBvYmplY3QgaW5zdGFuY2VvZiBQREZSZWYgPyBfdGhpcy5jb3B5UERGSW5kaXJlY3RPYmplY3Qob2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogb2JqZWN0LmNsb25lKCkpOyB9O1xuICAgICAgICB0aGlzLmNvcHlQREZQYWdlID0gZnVuY3Rpb24gKG9yaWdpbmFsUGFnZSkge1xuICAgICAgICAgICAgdmFyIGNsb25lZFBhZ2UgPSBvcmlnaW5hbFBhZ2UuY2xvbmUoKTtcbiAgICAgICAgICAgIC8vIE1vdmUgYW55IGVudHJpZXMgdGhhdCB0aGUgb3JpZ2luYWxQYWdlIGlzIGluaGVyaXRpbmcgZnJvbSBpdHMgcGFyZW50XG4gICAgICAgICAgICAvLyB0cmVlIG5vZGVzIGRpcmVjdGx5IGludG8gb3JpZ2luYWxQYWdlIHNvIHRoZXkgYXJlIHByZXNlcnZlZCBkdXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBjb3B5LlxuICAgICAgICAgICAgdmFyIEluaGVyaXRhYmxlRW50cmllcyA9IFBERlBhZ2VMZWFmLkluaGVyaXRhYmxlRW50cmllcztcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IEluaGVyaXRhYmxlRW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gUERGTmFtZS5vZihJbmhlcml0YWJsZUVudHJpZXNbaWR4XSk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY2xvbmVkUGFnZS5nZXRJbmhlcml0YWJsZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIGlmICghY2xvbmVkUGFnZS5nZXQoa2V5KSAmJiB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFnZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHBhcmVudCByZWZlcmVuY2UgdG8gcHJldmVudCB0aGUgd2hvbGUgZG9ub3IgZG9jdW1lbnQncyBwYWdlXG4gICAgICAgICAgICAvLyB0cmVlIGZyb20gYmVpbmcgY29waWVkIHdoZW4gd2Ugb25seSBuZWVkIGEgc2luZ2xlIHBhZ2UuXG4gICAgICAgICAgICBjbG9uZWRQYWdlLmRlbGV0ZShQREZOYW1lLm9mKCdQYXJlbnQnKSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY29weVBERkRpY3QoY2xvbmVkUGFnZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29weVBERkRpY3QgPSBmdW5jdGlvbiAob3JpZ2luYWxEaWN0KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMudHJhdmVyc2VkT2JqZWN0cy5oYXMob3JpZ2luYWxEaWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmdldChvcmlnaW5hbERpY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsb25lZERpY3QgPSBvcmlnaW5hbERpY3QuY2xvbmUoX3RoaXMuZGVzdCk7XG4gICAgICAgICAgICBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLnNldChvcmlnaW5hbERpY3QsIGNsb25lZERpY3QpO1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBvcmlnaW5hbERpY3QuZW50cmllcygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBlbnRyaWVzW2lkeF0sIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIGNsb25lZERpY3Quc2V0KGtleSwgX3RoaXMuY29weSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lZERpY3Q7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29weVBERkFycmF5ID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmhhcyhvcmlnaW5hbEFycmF5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmdldChvcmlnaW5hbEFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjbG9uZWRBcnJheSA9IG9yaWdpbmFsQXJyYXkuY2xvbmUoX3RoaXMuZGVzdCk7XG4gICAgICAgICAgICBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLnNldChvcmlnaW5hbEFycmF5LCBjbG9uZWRBcnJheSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvcmlnaW5hbEFycmF5LnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9yaWdpbmFsQXJyYXkuZ2V0KGlkeCk7XG4gICAgICAgICAgICAgICAgY2xvbmVkQXJyYXkuc2V0KGlkeCwgX3RoaXMuY29weSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lZEFycmF5O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvcHlQREZTdHJlYW0gPSBmdW5jdGlvbiAob3JpZ2luYWxTdHJlYW0pIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmhhcyhvcmlnaW5hbFN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudHJhdmVyc2VkT2JqZWN0cy5nZXQob3JpZ2luYWxTdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsb25lZFN0cmVhbSA9IG9yaWdpbmFsU3RyZWFtLmNsb25lKF90aGlzLmRlc3QpO1xuICAgICAgICAgICAgX3RoaXMudHJhdmVyc2VkT2JqZWN0cy5zZXQob3JpZ2luYWxTdHJlYW0sIGNsb25lZFN0cmVhbSk7XG4gICAgICAgICAgICB2YXIgZW50cmllcyA9IG9yaWdpbmFsU3RyZWFtLmRpY3QuZW50cmllcygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBlbnRyaWVzW2lkeF0sIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIGNsb25lZFN0cmVhbS5kaWN0LnNldChrZXksIF90aGlzLmNvcHkodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbG9uZWRTdHJlYW07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29weVBERkluZGlyZWN0T2JqZWN0ID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGFscmVhZHlNYXBwZWQgPSBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmhhcyhyZWYpO1xuICAgICAgICAgICAgaWYgKCFhbHJlYWR5TWFwcGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1JlZiA9IF90aGlzLmRlc3QubmV4dFJlZigpO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyYXZlcnNlZE9iamVjdHMuc2V0KHJlZiwgbmV3UmVmKTtcbiAgICAgICAgICAgICAgICB2YXIgZGVyZWZlcmVuY2VkVmFsdWUgPSBfdGhpcy5zcmMubG9va3VwKHJlZik7XG4gICAgICAgICAgICAgICAgaWYgKGRlcmVmZXJlbmNlZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWQgPSBfdGhpcy5jb3B5KGRlcmVmZXJlbmNlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdC5hc3NpZ24obmV3UmVmLCBjbG9uZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmF2ZXJzZWRPYmplY3RzLmdldChyZWYpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5kZXN0ID0gZGVzdDtcbiAgICB9XG4gICAgUERGT2JqZWN0Q29waWVyLmZvciA9IGZ1bmN0aW9uIChzcmMsIGRlc3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZPYmplY3RDb3BpZXIoc3JjLCBkZXN0KTtcbiAgICB9O1xuICAgIHJldHVybiBQREZPYmplY3RDb3BpZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGT2JqZWN0Q29waWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT2JqZWN0Q29waWVyLmpzLm1hcCIsImltcG9ydCBQREZSZWYgZnJvbSBcIi4uL29iamVjdHMvUERGUmVmXCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBjb3B5U3RyaW5nSW50b0J1ZmZlciwgcGFkU3RhcnQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbi8qKlxuICogRW50cmllcyBzaG91bGQgYmUgYWRkZWQgdXNpbmcgdGhlIFtbYWRkRW50cnldXSBhbmQgW1thZGREZWxldGVkRW50cnldXVxuICogbWV0aG9kcyAqKmluIG9yZGVyIG9mIGFzY2VuZGluZyBvYmplY3QgbnVtYmVyKiouXG4gKi9cbnZhciBQREZDcm9zc1JlZlNlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUERGQ3Jvc3NSZWZTZWN0aW9uKGZpcnN0RW50cnkpIHtcbiAgICAgICAgdGhpcy5zdWJzZWN0aW9ucyA9IGZpcnN0RW50cnkgPyBbW2ZpcnN0RW50cnldXSA6IFtdO1xuICAgICAgICB0aGlzLmNodW5rSWR4ID0gMDtcbiAgICAgICAgdGhpcy5jaHVua0xlbmd0aCA9IGZpcnN0RW50cnkgPyAxIDogMDtcbiAgICB9XG4gICAgUERGQ3Jvc3NSZWZTZWN0aW9uLnByb3RvdHlwZS5hZGRFbnRyeSA9IGZ1bmN0aW9uIChyZWYsIG9mZnNldCkge1xuICAgICAgICB0aGlzLmFwcGVuZCh7IHJlZjogcmVmLCBvZmZzZXQ6IG9mZnNldCwgZGVsZXRlZDogZmFsc2UgfSk7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlNlY3Rpb24ucHJvdG90eXBlLmFkZERlbGV0ZWRFbnRyeSA9IGZ1bmN0aW9uIChyZWYsIG5leHRGcmVlT2JqZWN0TnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKHsgcmVmOiByZWYsIG9mZnNldDogbmV4dEZyZWVPYmplY3ROdW1iZXIsIGRlbGV0ZWQ6IHRydWUgfSk7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlNlY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IFwieHJlZlxcblwiO1xuICAgICAgICBmb3IgKHZhciByYW5nZUlkeCA9IDAsIHJhbmdlTGVuID0gdGhpcy5zdWJzZWN0aW9ucy5sZW5ndGg7IHJhbmdlSWR4IDwgcmFuZ2VMZW47IHJhbmdlSWR4KyspIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc3Vic2VjdGlvbnNbcmFuZ2VJZHhdO1xuICAgICAgICAgICAgc2VjdGlvbiArPSByYW5nZVswXS5yZWYub2JqZWN0TnVtYmVyICsgXCIgXCIgKyByYW5nZS5sZW5ndGggKyBcIlxcblwiO1xuICAgICAgICAgICAgZm9yICh2YXIgZW50cnlJZHggPSAwLCBlbnRyeUxlbiA9IHJhbmdlLmxlbmd0aDsgZW50cnlJZHggPCBlbnRyeUxlbjsgZW50cnlJZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHJhbmdlW2VudHJ5SWR4XTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9IHBhZFN0YXJ0KFN0cmluZyhlbnRyeS5vZmZzZXQpLCAxMCwgJzAnKTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9ICcgJztcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9IHBhZFN0YXJ0KFN0cmluZyhlbnRyeS5yZWYuZ2VuZXJhdGlvbk51bWJlciksIDUsICcwJyk7XG4gICAgICAgICAgICAgICAgc2VjdGlvbiArPSAnICc7XG4gICAgICAgICAgICAgICAgc2VjdGlvbiArPSBlbnRyeS5kZWxldGVkID8gJ2YnIDogJ24nO1xuICAgICAgICAgICAgICAgIHNlY3Rpb24gKz0gJyBcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgIH07XG4gICAgUERGQ3Jvc3NSZWZTZWN0aW9uLnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNpemUgPSA1O1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLnN1YnNlY3Rpb25zLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHN1YnNlY3Rpb24gPSB0aGlzLnN1YnNlY3Rpb25zW2lkeF07XG4gICAgICAgICAgICB2YXIgc3Vic2VjdGlvbkxlbmd0aCA9IHN1YnNlY3Rpb24ubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGZpcnN0RW50cnkgPSBzdWJzZWN0aW9uWzBdO1xuICAgICAgICAgICAgc2l6ZSArPSAyO1xuICAgICAgICAgICAgc2l6ZSArPSBTdHJpbmcoZmlyc3RFbnRyeS5yZWYub2JqZWN0TnVtYmVyKS5sZW5ndGg7XG4gICAgICAgICAgICBzaXplICs9IFN0cmluZyhzdWJzZWN0aW9uTGVuZ3RoKS5sZW5ndGg7XG4gICAgICAgICAgICBzaXplICs9IDIwICogc3Vic2VjdGlvbkxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFBERkNyb3NzUmVmU2VjdGlvbi5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICB2YXIgaW5pdGlhbE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy54O1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLnI7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuZTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5mO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgIG9mZnNldCArPSB0aGlzLmNvcHlTdWJzZWN0aW9uc0ludG9CdWZmZXIodGhpcy5zdWJzZWN0aW9ucywgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gaW5pdGlhbE9mZnNldDtcbiAgICB9O1xuICAgIFBERkNyb3NzUmVmU2VjdGlvbi5wcm90b3R5cGUuY29weVN1YnNlY3Rpb25zSW50b0J1ZmZlciA9IGZ1bmN0aW9uIChzdWJzZWN0aW9ucywgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHZhciBsZW5ndGggPSBzdWJzZWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBzdWJzZWN0aW9uID0gdGhpcy5zdWJzZWN0aW9uc1tpZHhdO1xuICAgICAgICAgICAgdmFyIGZpcnN0T2JqZWN0TnVtYmVyID0gU3RyaW5nKHN1YnNlY3Rpb25bMF0ucmVmLm9iamVjdE51bWJlcik7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIoZmlyc3RPYmplY3ROdW1iZXIsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuU3BhY2U7XG4gICAgICAgICAgICB2YXIgcmFuZ2VMZW5ndGggPSBTdHJpbmcoc3Vic2VjdGlvbi5sZW5ndGgpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKHJhbmdlTGVuZ3RoLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgICAgICBvZmZzZXQgKz0gdGhpcy5jb3B5RW50cmllc0ludG9CdWZmZXIoc3Vic2VjdGlvbiwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBpbml0aWFsT2Zmc2V0O1xuICAgIH07XG4gICAgUERGQ3Jvc3NSZWZTZWN0aW9uLnByb3RvdHlwZS5jb3B5RW50cmllc0ludG9CdWZmZXIgPSBmdW5jdGlvbiAoZW50cmllcywgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2lkeF07XG4gICAgICAgICAgICB2YXIgZW50cnlPZmZzZXQgPSBwYWRTdGFydChTdHJpbmcoZW50cnkub2Zmc2V0KSwgMTAsICcwJyk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIoZW50cnlPZmZzZXQsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuU3BhY2U7XG4gICAgICAgICAgICB2YXIgZW50cnlHZW4gPSBwYWRTdGFydChTdHJpbmcoZW50cnkucmVmLmdlbmVyYXRpb25OdW1iZXIpLCA1LCAnMCcpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKGVudHJ5R2VuLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlNwYWNlO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGVudHJ5LmRlbGV0ZWQgPyBDaGFyQ29kZXMuZiA6IENoYXJDb2Rlcy5uO1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMjAgKiBsZW5ndGg7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlNlY3Rpb24ucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIChjdXJyRW50cnkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2h1bmtMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2VjdGlvbnMucHVzaChbY3VyckVudHJ5XSk7XG4gICAgICAgICAgICB0aGlzLmNodW5rSWR4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtMZW5ndGggPSAxO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaHVuayA9IHRoaXMuc3Vic2VjdGlvbnNbdGhpcy5jaHVua0lkeF07XG4gICAgICAgIHZhciBwcmV2RW50cnkgPSBjaHVua1t0aGlzLmNodW5rTGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChjdXJyRW50cnkucmVmLm9iamVjdE51bWJlciAtIHByZXZFbnRyeS5yZWYub2JqZWN0TnVtYmVyID4gMSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzZWN0aW9ucy5wdXNoKFtjdXJyRW50cnldKTtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtJZHggKz0gMTtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtMZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2h1bmsucHVzaChjdXJyRW50cnkpO1xuICAgICAgICAgICAgdGhpcy5jaHVua0xlbmd0aCArPSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlNlY3Rpb24uY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBERkNyb3NzUmVmU2VjdGlvbih7XG4gICAgICAgICAgICByZWY6IFBERlJlZi5vZigwLCA2NTUzNSksXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBkZWxldGVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBERkNyb3NzUmVmU2VjdGlvbi5jcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBQREZDcm9zc1JlZlNlY3Rpb24oKTsgfTtcbiAgICByZXR1cm4gUERGQ3Jvc3NSZWZTZWN0aW9uO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkNyb3NzUmVmU2VjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkNyb3NzUmVmU2VjdGlvbi5qcy5tYXAiLCJpbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBjb3B5U3RyaW5nSW50b0J1ZmZlciB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIFBERlRyYWlsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUERGVHJhaWxlcihsYXN0WFJlZk9mZnNldCkge1xuICAgICAgICB0aGlzLmxhc3RYUmVmT2Zmc2V0ID0gU3RyaW5nKGxhc3RYUmVmT2Zmc2V0KTtcbiAgICB9XG4gICAgUERGVHJhaWxlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcInN0YXJ0eHJlZlxcblwiICsgdGhpcy5sYXN0WFJlZk9mZnNldCArIFwiXFxuJSVFT0ZcIjtcbiAgICB9O1xuICAgIFBERlRyYWlsZXIucHJvdG90eXBlLnNpemVJbkJ5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gMTYgKyB0aGlzLmxhc3RYUmVmT2Zmc2V0Lmxlbmd0aDtcbiAgICB9O1xuICAgIFBERlRyYWlsZXIucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucztcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy50O1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmE7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy50O1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLng7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmY7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKHRoaXMubGFzdFhSZWZPZmZzZXQsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlBlcmNlbnQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuUGVyY2VudDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5FO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk87XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuRjtcbiAgICAgICAgcmV0dXJuIG9mZnNldCAtIGluaXRpYWxPZmZzZXQ7XG4gICAgfTtcbiAgICBQREZUcmFpbGVyLmZvckxhc3RDcm9zc1JlZlNlY3Rpb25PZmZzZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGVHJhaWxlcihvZmZzZXQpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERlRyYWlsZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGVHJhaWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlRyYWlsZXIuanMubWFwIiwiaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi4vc3ludGF4L0NoYXJDb2Rlc1wiO1xudmFyIFBERlRyYWlsZXJEaWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERlRyYWlsZXJEaWN0KGRpY3QpIHtcbiAgICAgICAgdGhpcy5kaWN0ID0gZGljdDtcbiAgICB9XG4gICAgUERGVHJhaWxlckRpY3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJ0cmFpbGVyXFxuXCIgKyB0aGlzLmRpY3QudG9TdHJpbmcoKTtcbiAgICB9O1xuICAgIFBERlRyYWlsZXJEaWN0LnByb3RvdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDggKyB0aGlzLmRpY3Quc2l6ZUluQnl0ZXMoKTtcbiAgICB9O1xuICAgIFBERlRyYWlsZXJEaWN0LnByb3RvdHlwZS5jb3B5Qnl0ZXNJbnRvID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBpbml0aWFsT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLnQ7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMucjtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5hO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMubDtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5lO1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLnI7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgb2Zmc2V0ICs9IHRoaXMuZGljdC5jb3B5Qnl0ZXNJbnRvKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIG9mZnNldCAtIGluaXRpYWxPZmZzZXQ7XG4gICAgfTtcbiAgICBQREZUcmFpbGVyRGljdC5vZiA9IGZ1bmN0aW9uIChkaWN0KSB7IHJldHVybiBuZXcgUERGVHJhaWxlckRpY3QoZGljdCk7IH07XG4gICAgcmV0dXJuIFBERlRyYWlsZXJEaWN0O1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlRyYWlsZXJEaWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGVHJhaWxlckRpY3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERkZsYXRlU3RyZWFtIGZyb20gXCIuL1BERkZsYXRlU3RyZWFtXCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBjb3B5U3RyaW5nSW50b0J1ZmZlciwgbGFzdCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIFBERk9iamVjdFN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGT2JqZWN0U3RyZWFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERk9iamVjdFN0cmVhbShjb250ZXh0LCBvYmplY3RzLCBlbmNvZGUpIHtcbiAgICAgICAgaWYgKGVuY29kZSA9PT0gdm9pZCAwKSB7IGVuY29kZSA9IHRydWU7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dC5vYmooe30pLCBlbmNvZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9iamVjdHMgPSBvYmplY3RzO1xuICAgICAgICBfdGhpcy5vZmZzZXRzID0gX3RoaXMuY29tcHV0ZU9iamVjdE9mZnNldHMoKTtcbiAgICAgICAgX3RoaXMub2Zmc2V0c1N0cmluZyA9IF90aGlzLmNvbXB1dGVPZmZzZXRzU3RyaW5nKCk7XG4gICAgICAgIF90aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1R5cGUnKSwgUERGTmFtZS5vZignT2JqU3RtJykpO1xuICAgICAgICBfdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdOJyksIFBERk51bWJlci5vZihfdGhpcy5vYmplY3RzLmxlbmd0aCkpO1xuICAgICAgICBfdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdGaXJzdCcpLCBQREZOdW1iZXIub2YoX3RoaXMub2Zmc2V0c1N0cmluZy5sZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZPYmplY3RTdHJlYW0ucHJvdG90eXBlLmdldE9iamVjdHNDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0cy5sZW5ndGg7XG4gICAgfTtcbiAgICBQREZPYmplY3RTdHJlYW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIFBERk9iamVjdFN0cmVhbS53aXRoQ29udGV4dEFuZE9iamVjdHMoY29udGV4dCB8fCB0aGlzLmRpY3QuY29udGV4dCwgdGhpcy5vYmplY3RzLnNsaWNlKCksIHRoaXMuZW5jb2RlKTtcbiAgICB9O1xuICAgIFBERk9iamVjdFN0cmVhbS5wcm90b3R5cGUuZ2V0Q29udGVudHNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMub2Zmc2V0c1N0cmluZztcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5vYmplY3RzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5vYmplY3RzW2lkeF0sIG9iamVjdCA9IF9hWzFdO1xuICAgICAgICAgICAgdmFsdWUgKz0gb2JqZWN0ICsgXCJcXG5cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBQREZPYmplY3RTdHJlYW0ucHJvdG90eXBlLmdldFVuZW5jb2RlZENvbnRlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5nZXRVbmVuY29kZWRDb250ZW50c1NpemUoKSk7XG4gICAgICAgIHZhciBvZmZzZXQgPSBjb3B5U3RyaW5nSW50b0J1ZmZlcih0aGlzLm9mZnNldHNTdHJpbmcsIGJ1ZmZlciwgMCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMub2JqZWN0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMub2JqZWN0c1tpZHhdLCBvYmplY3QgPSBfYVsxXTtcbiAgICAgICAgICAgIG9mZnNldCArPSBvYmplY3QuY29weUJ5dGVzSW50byhidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuICAgIFBERk9iamVjdFN0cmVhbS5wcm90b3R5cGUuZ2V0VW5lbmNvZGVkQ29udGVudHNTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMub2Zmc2V0c1N0cmluZy5sZW5ndGggK1xuICAgICAgICAgICAgbGFzdCh0aGlzLm9mZnNldHMpWzFdICtcbiAgICAgICAgICAgIGxhc3QodGhpcy5vYmplY3RzKVsxXS5zaXplSW5CeXRlcygpICtcbiAgICAgICAgICAgIDEpO1xuICAgIH07XG4gICAgUERGT2JqZWN0U3RyZWFtLnByb3RvdHlwZS5jb21wdXRlT2Zmc2V0c1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldHNTdHJpbmcgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5vZmZzZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5vZmZzZXRzW2lkeF0sIG9iamVjdE51bWJlciA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgICAgIG9mZnNldHNTdHJpbmcgKz0gb2JqZWN0TnVtYmVyICsgXCIgXCIgKyBvZmZzZXQgKyBcIiBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2Zmc2V0c1N0cmluZztcbiAgICB9O1xuICAgIFBERk9iamVjdFN0cmVhbS5wcm90b3R5cGUuY29tcHV0ZU9iamVjdE9mZnNldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0cyA9IG5ldyBBcnJheSh0aGlzLm9iamVjdHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdGhpcy5vYmplY3RzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5vYmplY3RzW2lkeF0sIHJlZiA9IF9hWzBdLCBvYmplY3QgPSBfYVsxXTtcbiAgICAgICAgICAgIG9mZnNldHNbaWR4XSA9IFtyZWYub2JqZWN0TnVtYmVyLCBvZmZzZXRdO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IG9iamVjdC5zaXplSW5CeXRlcygpICsgMTsgLy8gJ1xcbidcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2Zmc2V0cztcbiAgICB9O1xuICAgIFBERk9iamVjdFN0cmVhbS53aXRoQ29udGV4dEFuZE9iamVjdHMgPSBmdW5jdGlvbiAoY29udGV4dCwgb2JqZWN0cywgZW5jb2RlKSB7XG4gICAgICAgIGlmIChlbmNvZGUgPT09IHZvaWQgMCkgeyBlbmNvZGUgPSB0cnVlOyB9XG4gICAgICAgIHJldHVybiBuZXcgUERGT2JqZWN0U3RyZWFtKGNvbnRleHQsIG9iamVjdHMsIGVuY29kZSk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGT2JqZWN0U3RyZWFtO1xufShQREZGbGF0ZVN0cmVhbSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGT2JqZWN0U3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT2JqZWN0U3RyZWFtLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZDcm9zc1JlZlNlY3Rpb24gZnJvbSBcIi4uL2RvY3VtZW50L1BERkNyb3NzUmVmU2VjdGlvblwiO1xuaW1wb3J0IFBERkhlYWRlciBmcm9tIFwiLi4vZG9jdW1lbnQvUERGSGVhZGVyXCI7XG5pbXBvcnQgUERGVHJhaWxlciBmcm9tIFwiLi4vZG9jdW1lbnQvUERGVHJhaWxlclwiO1xuaW1wb3J0IFBERlRyYWlsZXJEaWN0IGZyb20gXCIuLi9kb2N1bWVudC9QREZUcmFpbGVyRGljdFwiO1xuaW1wb3J0IFBERk9iamVjdFN0cmVhbSBmcm9tIFwiLi4vc3RydWN0dXJlcy9QREZPYmplY3RTdHJlYW1cIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IGNvcHlTdHJpbmdJbnRvQnVmZmVyLCB3YWl0Rm9yVGljayB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIFBERldyaXRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZXcml0ZXIoY29udGV4dCwgb2JqZWN0c1BlclRpY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wYXJzZWRPYmplY3RzID0gMDtcbiAgICAgICAgdGhpcy5zaG91bGRXYWl0Rm9yVGljayA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICBfdGhpcy5wYXJzZWRPYmplY3RzICs9IG47XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucGFyc2VkT2JqZWN0cyAlIF90aGlzLm9iamVjdHNQZXJUaWNrID09PSAwO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLm9iamVjdHNQZXJUaWNrID0gb2JqZWN0c1BlclRpY2s7XG4gICAgfVxuICAgIFBERldyaXRlci5wcm90b3R5cGUuc2VyaWFsaXplVG9CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgc2l6ZSwgaGVhZGVyLCBpbmRpcmVjdE9iamVjdHMsIHhyZWYsIHRyYWlsZXJEaWN0LCB0cmFpbGVyLCBvZmZzZXQsIGJ1ZmZlciwgaWR4LCBsZW4sIF9iLCByZWYsIG9iamVjdCwgb2JqZWN0TnVtYmVyLCBnZW5lcmF0aW9uTnVtYmVyLCBuO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNvbXB1dGVCdWZmZXJTaXplKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IF9jLnNlbnQoKSwgc2l6ZSA9IF9hLnNpemUsIGhlYWRlciA9IF9hLmhlYWRlciwgaW5kaXJlY3RPYmplY3RzID0gX2EuaW5kaXJlY3RPYmplY3RzLCB4cmVmID0gX2EueHJlZiwgdHJhaWxlckRpY3QgPSBfYS50cmFpbGVyRGljdCwgdHJhaWxlciA9IF9hLnRyYWlsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gaGVhZGVyLmNvcHlCeXRlc0ludG8oYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gMCwgbGVuID0gaW5kaXJlY3RPYmplY3RzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaWR4IDwgbGVuKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IGluZGlyZWN0T2JqZWN0c1tpZHhdLCByZWYgPSBfYlswXSwgb2JqZWN0ID0gX2JbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3ROdW1iZXIgPSBTdHJpbmcocmVmLm9iamVjdE51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIob2JqZWN0TnVtYmVyLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLlNwYWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbk51bWJlciA9IFN0cmluZyhyZWYuZ2VuZXJhdGlvbk51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gY29weVN0cmluZ0ludG9CdWZmZXIoZ2VuZXJhdGlvbk51bWJlciwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5TcGFjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMubztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBvYmplY3QuY29weUJ5dGVzSW50byhidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLm47XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLm87XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmI7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLmo7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gb2JqZWN0IGluc3RhbmNlb2YgUERGT2JqZWN0U3RyZWFtID8gb2JqZWN0LmdldE9iamVjdHNDb3VudCgpIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG91bGRXYWl0Rm9yVGljayhuKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB3YWl0Rm9yVGljaygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB4cmVmLmNvcHlCeXRlc0ludG8oYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuTmV3bGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFpbGVyRGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB0cmFpbGVyRGljdC5jb3B5Qnl0ZXNJbnRvKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gQ2hhckNvZGVzLk5ld2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHRyYWlsZXIuY29weUJ5dGVzSW50byhidWZmZXIsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYnVmZmVyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZXcml0ZXIucHJvdG90eXBlLmNvbXB1dGVJbmRpcmVjdE9iamVjdFNpemUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHJlZiA9IF9hWzBdLCBvYmplY3QgPSBfYVsxXTtcbiAgICAgICAgdmFyIHJlZlNpemUgPSByZWYuc2l6ZUluQnl0ZXMoKSArIDM7IC8vICdSJyAtPiAnb2JqXFxuJ1xuICAgICAgICB2YXIgb2JqZWN0U2l6ZSA9IG9iamVjdC5zaXplSW5CeXRlcygpICsgOTsgLy8gJ1xcbmVuZG9ialxcblxcbidcbiAgICAgICAgcmV0dXJuIHJlZlNpemUgKyBvYmplY3RTaXplO1xuICAgIH07XG4gICAgUERGV3JpdGVyLnByb3RvdHlwZS5jcmVhdGVUcmFpbGVyRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5vYmooe1xuICAgICAgICAgICAgU2l6ZTogdGhpcy5jb250ZXh0Lmxhcmdlc3RPYmplY3ROdW1iZXIgKyAxLFxuICAgICAgICAgICAgUm9vdDogdGhpcy5jb250ZXh0LnRyYWlsZXJJbmZvLlJvb3QsXG4gICAgICAgICAgICBFbmNyeXB0OiB0aGlzLmNvbnRleHQudHJhaWxlckluZm8uRW5jcnlwdCxcbiAgICAgICAgICAgIEluZm86IHRoaXMuY29udGV4dC50cmFpbGVySW5mby5JbmZvLFxuICAgICAgICAgICAgSUQ6IHRoaXMuY29udGV4dC50cmFpbGVySW5mby5JRCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZXcml0ZXIucHJvdG90eXBlLmNvbXB1dGVCdWZmZXJTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyLCBzaXplLCB4cmVmLCBpbmRpcmVjdE9iamVjdHMsIGlkeCwgbGVuLCBpbmRpcmVjdE9iamVjdCwgcmVmLCB4cmVmT2Zmc2V0LCB0cmFpbGVyRGljdCwgdHJhaWxlcjtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IFBERkhlYWRlci5mb3JWZXJzaW9uKDEsIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IGhlYWRlci5zaXplSW5CeXRlcygpICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhyZWYgPSBQREZDcm9zc1JlZlNlY3Rpb24uY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpcmVjdE9iamVjdHMgPSB0aGlzLmNvbnRleHQuZW51bWVyYXRlSW5kaXJlY3RPYmplY3RzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSAwLCBsZW4gPSBpbmRpcmVjdE9iamVjdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpZHggPCBsZW4pKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGlyZWN0T2JqZWN0ID0gaW5kaXJlY3RPYmplY3RzW2lkeF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBpbmRpcmVjdE9iamVjdFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhyZWYuYWRkRW50cnkocmVmLCBzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gdGhpcy5jb21wdXRlSW5kaXJlY3RPYmplY3RTaXplKGluZGlyZWN0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG91bGRXYWl0Rm9yVGljaygxKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB3YWl0Rm9yVGljaygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB4cmVmT2Zmc2V0ID0gc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0geHJlZi5zaXplSW5CeXRlcygpICsgMTsgLy8gJ1xcbidcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsZXJEaWN0ID0gUERGVHJhaWxlckRpY3Qub2YodGhpcy5jcmVhdGVUcmFpbGVyRGljdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gdHJhaWxlckRpY3Quc2l6ZUluQnl0ZXMoKSArIDI7IC8vICdcXG5cXG4nXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFpbGVyID0gUERGVHJhaWxlci5mb3JMYXN0Q3Jvc3NSZWZTZWN0aW9uT2Zmc2V0KHhyZWZPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSB0cmFpbGVyLnNpemVJbkJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgeyBzaXplOiBzaXplLCBoZWFkZXI6IGhlYWRlciwgaW5kaXJlY3RPYmplY3RzOiBpbmRpcmVjdE9iamVjdHMsIHhyZWY6IHhyZWYsIHRyYWlsZXJEaWN0OiB0cmFpbGVyRGljdCwgdHJhaWxlcjogdHJhaWxlciB9XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZXcml0ZXIuZm9yQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCBvYmplY3RzUGVyVGljaykge1xuICAgICAgICByZXR1cm4gbmV3IFBERldyaXRlcihjb250ZXh0LCBvYmplY3RzUGVyVGljayk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGV3JpdGVyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFBERldyaXRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERldyaXRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZPYmplY3QgZnJvbSBcIi4vUERGT2JqZWN0XCI7XG52YXIgUERGSW52YWxpZE9iamVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGSW52YWxpZE9iamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZJbnZhbGlkT2JqZWN0KGRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUERGSW52YWxpZE9iamVjdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBQREZJbnZhbGlkT2JqZWN0Lm9mKHRoaXMuZGF0YS5zbGljZSgpKTtcbiAgICB9O1xuICAgIFBERkludmFsaWRPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJQREZJbnZhbGlkT2JqZWN0KFwiICsgdGhpcy5kYXRhLmxlbmd0aCArIFwiIGJ5dGVzKVwiO1xuICAgIH07XG4gICAgUERGSW52YWxpZE9iamVjdC5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIH07XG4gICAgUERGSW52YWxpZE9iamVjdC5wcm90b3R5cGUuY29weUJ5dGVzSW50byA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IHRoaXMuZGF0YVtpZHhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfTtcbiAgICBQREZJbnZhbGlkT2JqZWN0Lm9mID0gZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIG5ldyBQREZJbnZhbGlkT2JqZWN0KGRhdGEpOyB9O1xuICAgIHJldHVybiBQREZJbnZhbGlkT2JqZWN0O1xufShQREZPYmplY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkludmFsaWRPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZJbnZhbGlkT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERlJlZiBmcm9tIFwiLi4vb2JqZWN0cy9QREZSZWZcIjtcbmltcG9ydCBQREZGbGF0ZVN0cmVhbSBmcm9tIFwiLi9QREZGbGF0ZVN0cmVhbVwiO1xuaW1wb3J0IHsgYnl0ZXNGb3IsIENhY2hlLCByZXZlcnNlQXJyYXksIHNpemVJbkJ5dGVzLCBzdW0gfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmV4cG9ydCB2YXIgRW50cnlUeXBlO1xuKGZ1bmN0aW9uIChFbnRyeVR5cGUpIHtcbiAgICBFbnRyeVR5cGVbRW50cnlUeXBlW1wiRGVsZXRlZFwiXSA9IDBdID0gXCJEZWxldGVkXCI7XG4gICAgRW50cnlUeXBlW0VudHJ5VHlwZVtcIlVuY29tcHJlc3NlZFwiXSA9IDFdID0gXCJVbmNvbXByZXNzZWRcIjtcbiAgICBFbnRyeVR5cGVbRW50cnlUeXBlW1wiQ29tcHJlc3NlZFwiXSA9IDJdID0gXCJDb21wcmVzc2VkXCI7XG59KShFbnRyeVR5cGUgfHwgKEVudHJ5VHlwZSA9IHt9KSk7XG4vKipcbiAqIEVudHJpZXMgc2hvdWxkIGJlIGFkZGVkIHVzaW5nIHRoZSBbW2FkZERlbGV0ZWRFbnRyeV1dLFxuICogW1thZGRVbmNvbXByZXNzZWRFbnRyeV1dLCBhbmQgW1thZGRDb21wcmVzc2VkRW50cnldXSBtZXRob2RzXG4gKiAqKmluIG9yZGVyIG9mIGFzY2VuZGluZyBvYmplY3QgbnVtYmVyKiouXG4gKi9cbnZhciBQREZDcm9zc1JlZlN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQ3Jvc3NSZWZTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQ3Jvc3NSZWZTdHJlYW0oZGljdCwgZW50cmllcywgZW5jb2RlKSB7XG4gICAgICAgIGlmIChlbmNvZGUgPT09IHZvaWQgMCkgeyBlbmNvZGUgPSB0cnVlOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRpY3QsIGVuY29kZSkgfHwgdGhpcztcbiAgICAgICAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiBpbnRlZ2VyIHBhaXJzIGZvciBlYWNoIHN1YnNlY3Rpb24gb2YgdGhlIGNyb3NzIHJlZlxuICAgICAgICAvLyBzZWN0aW9uLCB3aGVyZSBlYWNoIGludGVnZXIgcGFpciByZXByZXNlbnRzOlxuICAgICAgICAvLyAgIGZpcnN0T2JqZWN0TnVtYmVyKE9mU2VjdGlvbiksIGxlbmd0aChPZlNlY3Rpb24pXG4gICAgICAgIF90aGlzLmNvbXB1dGVJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdWJzZWN0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFyIHN1YnNlY3Rpb25MZW5ndGggPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gX3RoaXMuZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VyckVudHJ5ID0gX3RoaXMuZW50cmllc1tpZHhdO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2RW50cnkgPSBfdGhpcy5lbnRyaWVzW2lkeCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2VjdGlvbnMucHVzaChjdXJyRW50cnkucmVmLm9iamVjdE51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJFbnRyeS5yZWYub2JqZWN0TnVtYmVyIC0gcHJldkVudHJ5LnJlZi5vYmplY3ROdW1iZXIgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNlY3Rpb25zLnB1c2goc3Vic2VjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNlY3Rpb25zLnB1c2goY3VyckVudHJ5LnJlZi5vYmplY3ROdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzZWN0aW9uTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2VjdGlvbkxlbmd0aCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2VjdGlvbnMucHVzaChzdWJzZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzZWN0aW9ucztcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuY29tcHV0ZUVudHJ5VHVwbGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5VHVwbGVzID0gbmV3IEFycmF5KF90aGlzLmVudHJpZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IF90aGlzLmVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX3RoaXMuZW50cmllc1tpZHhdO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSBFbnRyeVR5cGUuRGVsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGVudHJ5LnR5cGUsIG5leHRGcmVlT2JqZWN0TnVtYmVyID0gZW50cnkubmV4dEZyZWVPYmplY3ROdW1iZXIsIHJlZiA9IGVudHJ5LnJlZjtcbiAgICAgICAgICAgICAgICAgICAgZW50cnlUdXBsZXNbaWR4XSA9IFt0eXBlLCBuZXh0RnJlZU9iamVjdE51bWJlciwgcmVmLmdlbmVyYXRpb25OdW1iZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gRW50cnlUeXBlLlVuY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGVudHJ5LnR5cGUsIG9mZnNldCA9IGVudHJ5Lm9mZnNldCwgcmVmID0gZW50cnkucmVmO1xuICAgICAgICAgICAgICAgICAgICBlbnRyeVR1cGxlc1tpZHhdID0gW3R5cGUsIG9mZnNldCwgcmVmLmdlbmVyYXRpb25OdW1iZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gRW50cnlUeXBlLkNvbXByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBlbnRyeS50eXBlLCBvYmplY3RTdHJlYW1SZWYgPSBlbnRyeS5vYmplY3RTdHJlYW1SZWYsIGluZGV4ID0gZW50cnkuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5VHVwbGVzW2lkeF0gPSBbdHlwZSwgb2JqZWN0U3RyZWFtUmVmLm9iamVjdE51bWJlciwgaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnRyeVR1cGxlcztcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuY29tcHV0ZU1heEVudHJ5Qnl0ZVdpZHRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeVR1cGxlcyA9IF90aGlzLmVudHJ5VHVwbGVzQ2FjaGUuYWNjZXNzKCk7XG4gICAgICAgICAgICB2YXIgd2lkdGhzID0gWzAsIDAsIDBdO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZW50cnlUdXBsZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gZW50cnlUdXBsZXNbaWR4XSwgZmlyc3QgPSBfYVswXSwgc2Vjb25kID0gX2FbMV0sIHRoaXJkID0gX2FbMl07XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0U2l6ZSA9IHNpemVJbkJ5dGVzKGZpcnN0KTtcbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kU2l6ZSA9IHNpemVJbkJ5dGVzKHNlY29uZCk7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXJkU2l6ZSA9IHNpemVJbkJ5dGVzKHRoaXJkKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RTaXplID4gd2lkdGhzWzBdKVxuICAgICAgICAgICAgICAgICAgICB3aWR0aHNbMF0gPSBmaXJzdFNpemU7XG4gICAgICAgICAgICAgICAgaWYgKHNlY29uZFNpemUgPiB3aWR0aHNbMV0pXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoc1sxXSA9IHNlY29uZFNpemU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXJkU2l6ZSA+IHdpZHRoc1syXSlcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhzWzJdID0gdGhpcmRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpZHRocztcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZW50cmllcyA9IGVudHJpZXMgfHwgW107XG4gICAgICAgIF90aGlzLmVudHJ5VHVwbGVzQ2FjaGUgPSBDYWNoZS5wb3B1bGF0ZWRCeShfdGhpcy5jb21wdXRlRW50cnlUdXBsZXMpO1xuICAgICAgICBfdGhpcy5tYXhCeXRlV2lkdGhzQ2FjaGUgPSBDYWNoZS5wb3B1bGF0ZWRCeShfdGhpcy5jb21wdXRlTWF4RW50cnlCeXRlV2lkdGhzKTtcbiAgICAgICAgX3RoaXMuaW5kZXhDYWNoZSA9IENhY2hlLnBvcHVsYXRlZEJ5KF90aGlzLmNvbXB1dGVJbmRleCk7XG4gICAgICAgIGRpY3Quc2V0KFBERk5hbWUub2YoJ1R5cGUnKSwgUERGTmFtZS5vZignWFJlZicpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZDcm9zc1JlZlN0cmVhbS5wcm90b3R5cGUuYWRkRGVsZXRlZEVudHJ5ID0gZnVuY3Rpb24gKHJlZiwgbmV4dEZyZWVPYmplY3ROdW1iZXIpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBFbnRyeVR5cGUuRGVsZXRlZDtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnB1c2goeyB0eXBlOiB0eXBlLCByZWY6IHJlZiwgbmV4dEZyZWVPYmplY3ROdW1iZXI6IG5leHRGcmVlT2JqZWN0TnVtYmVyIH0pO1xuICAgICAgICB0aGlzLmVudHJ5VHVwbGVzQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLm1heEJ5dGVXaWR0aHNDYWNoZS5pbnZhbGlkYXRlKCk7XG4gICAgICAgIHRoaXMuaW5kZXhDYWNoZS5pbnZhbGlkYXRlKCk7XG4gICAgICAgIHRoaXMuY29udGVudHNDYWNoZS5pbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlN0cmVhbS5wcm90b3R5cGUuYWRkVW5jb21wcmVzc2VkRW50cnkgPSBmdW5jdGlvbiAocmVmLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBFbnRyeVR5cGUuVW5jb21wcmVzc2VkO1xuICAgICAgICB0aGlzLmVudHJpZXMucHVzaCh7IHR5cGU6IHR5cGUsIHJlZjogcmVmLCBvZmZzZXQ6IG9mZnNldCB9KTtcbiAgICAgICAgdGhpcy5lbnRyeVR1cGxlc0NhY2hlLmludmFsaWRhdGUoKTtcbiAgICAgICAgdGhpcy5tYXhCeXRlV2lkdGhzQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLmluZGV4Q2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRzQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgIH07XG4gICAgUERGQ3Jvc3NSZWZTdHJlYW0ucHJvdG90eXBlLmFkZENvbXByZXNzZWRFbnRyeSA9IGZ1bmN0aW9uIChyZWYsIG9iamVjdFN0cmVhbVJlZiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBFbnRyeVR5cGUuQ29tcHJlc3NlZDtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnB1c2goeyB0eXBlOiB0eXBlLCByZWY6IHJlZiwgb2JqZWN0U3RyZWFtUmVmOiBvYmplY3RTdHJlYW1SZWYsIGluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgdGhpcy5lbnRyeVR1cGxlc0NhY2hlLmludmFsaWRhdGUoKTtcbiAgICAgICAgdGhpcy5tYXhCeXRlV2lkdGhzQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLmluZGV4Q2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRzQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgIH07XG4gICAgUERGQ3Jvc3NSZWZTdHJlYW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZGljdCA9IF9hLmRpY3QsIGVudHJpZXMgPSBfYS5lbnRyaWVzLCBlbmNvZGUgPSBfYS5lbmNvZGU7XG4gICAgICAgIHJldHVybiBQREZDcm9zc1JlZlN0cmVhbS5vZihkaWN0LmNsb25lKGNvbnRleHQpLCBlbnRyaWVzLnNsaWNlKCksIGVuY29kZSk7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlN0cmVhbS5wcm90b3R5cGUuZ2V0Q29udGVudHNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbnRyeVR1cGxlcyA9IHRoaXMuZW50cnlUdXBsZXNDYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgdmFyIGJ5dGVXaWR0aHMgPSB0aGlzLm1heEJ5dGVXaWR0aHNDYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgIGZvciAodmFyIGVudHJ5SWR4ID0gMCwgZW50cmllc0xlbiA9IGVudHJ5VHVwbGVzLmxlbmd0aDsgZW50cnlJZHggPCBlbnRyaWVzTGVuOyBlbnRyeUlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBlbnRyeVR1cGxlc1tlbnRyeUlkeF0sIGZpcnN0ID0gX2FbMF0sIHNlY29uZCA9IF9hWzFdLCB0aGlyZCA9IF9hWzJdO1xuICAgICAgICAgICAgdmFyIGZpcnN0Qnl0ZXMgPSByZXZlcnNlQXJyYXkoYnl0ZXNGb3IoZmlyc3QpKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmRCeXRlcyA9IHJldmVyc2VBcnJheShieXRlc0ZvcihzZWNvbmQpKTtcbiAgICAgICAgICAgIHZhciB0aGlyZEJ5dGVzID0gcmV2ZXJzZUFycmF5KGJ5dGVzRm9yKHRoaXJkKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSBieXRlV2lkdGhzWzBdIC0gMTsgaWR4ID49IDA7IGlkeC0tKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gKGZpcnN0Qnl0ZXNbaWR4XSB8fCAwKS50b1N0cmluZygyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGJ5dGVXaWR0aHNbMV0gLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAoc2Vjb25kQnl0ZXNbaWR4XSB8fCAwKS50b1N0cmluZygyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGJ5dGVXaWR0aHNbMl0gLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAodGhpcmRCeXRlc1tpZHhdIHx8IDApLnRvU3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIFBERkNyb3NzUmVmU3RyZWFtLnByb3RvdHlwZS5nZXRVbmVuY29kZWRDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVudHJ5VHVwbGVzID0gdGhpcy5lbnRyeVR1cGxlc0NhY2hlLmFjY2VzcygpO1xuICAgICAgICB2YXIgYnl0ZVdpZHRocyA9IHRoaXMubWF4Qnl0ZVdpZHRoc0NhY2hlLmFjY2VzcygpO1xuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5nZXRVbmVuY29kZWRDb250ZW50c1NpemUoKSk7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKHZhciBlbnRyeUlkeCA9IDAsIGVudHJpZXNMZW4gPSBlbnRyeVR1cGxlcy5sZW5ndGg7IGVudHJ5SWR4IDwgZW50cmllc0xlbjsgZW50cnlJZHgrKykge1xuICAgICAgICAgICAgdmFyIF9hID0gZW50cnlUdXBsZXNbZW50cnlJZHhdLCBmaXJzdCA9IF9hWzBdLCBzZWNvbmQgPSBfYVsxXSwgdGhpcmQgPSBfYVsyXTtcbiAgICAgICAgICAgIHZhciBmaXJzdEJ5dGVzID0gcmV2ZXJzZUFycmF5KGJ5dGVzRm9yKGZpcnN0KSk7XG4gICAgICAgICAgICB2YXIgc2Vjb25kQnl0ZXMgPSByZXZlcnNlQXJyYXkoYnl0ZXNGb3Ioc2Vjb25kKSk7XG4gICAgICAgICAgICB2YXIgdGhpcmRCeXRlcyA9IHJldmVyc2VBcnJheShieXRlc0Zvcih0aGlyZCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gYnl0ZVdpZHRoc1swXSAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBmaXJzdEJ5dGVzW2lkeF0gfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGJ5dGVXaWR0aHNbMV0gLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gc2Vjb25kQnl0ZXNbaWR4XSB8fCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gYnl0ZVdpZHRoc1syXSAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB0aGlyZEJ5dGVzW2lkeF0gfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH07XG4gICAgUERGQ3Jvc3NSZWZTdHJlYW0ucHJvdG90eXBlLmdldFVuZW5jb2RlZENvbnRlbnRzU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ5dGVXaWR0aHMgPSB0aGlzLm1heEJ5dGVXaWR0aHNDYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgdmFyIGVudHJ5V2lkdGggPSBzdW0oYnl0ZVdpZHRocyk7XG4gICAgICAgIHJldHVybiBlbnRyeVdpZHRoICogdGhpcy5lbnRyaWVzLmxlbmd0aDtcbiAgICB9O1xuICAgIFBERkNyb3NzUmVmU3RyZWFtLnByb3RvdHlwZS51cGRhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZURpY3QuY2FsbCh0aGlzKTtcbiAgICAgICAgdmFyIGJ5dGVXaWR0aHMgPSB0aGlzLm1heEJ5dGVXaWR0aHNDYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleENhY2hlLmFjY2VzcygpO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuZGljdC5jb250ZXh0O1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1cnKSwgY29udGV4dC5vYmooYnl0ZVdpZHRocykpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0luZGV4JyksIGNvbnRleHQub2JqKGluZGV4KSk7XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbiAoZGljdCwgZW5jb2RlKSB7XG4gICAgICAgIGlmIChlbmNvZGUgPT09IHZvaWQgMCkgeyBlbmNvZGUgPSB0cnVlOyB9XG4gICAgICAgIHZhciBzdHJlYW0gPSBuZXcgUERGQ3Jvc3NSZWZTdHJlYW0oZGljdCwgW10sIGVuY29kZSk7XG4gICAgICAgIHN0cmVhbS5hZGREZWxldGVkRW50cnkoUERGUmVmLm9mKDAsIDY1NTM1KSwgMCk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfTtcbiAgICBQREZDcm9zc1JlZlN0cmVhbS5vZiA9IGZ1bmN0aW9uIChkaWN0LCBlbnRyaWVzLCBlbmNvZGUpIHtcbiAgICAgICAgaWYgKGVuY29kZSA9PT0gdm9pZCAwKSB7IGVuY29kZSA9IHRydWU7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBQREZDcm9zc1JlZlN0cmVhbShkaWN0LCBlbnRyaWVzLCBlbmNvZGUpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkNyb3NzUmVmU3RyZWFtO1xufShQREZGbGF0ZVN0cmVhbSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGQ3Jvc3NSZWZTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZDcm9zc1JlZlN0cmVhbS5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZIZWFkZXIgZnJvbSBcIi4uL2RvY3VtZW50L1BERkhlYWRlclwiO1xuaW1wb3J0IFBERlRyYWlsZXIgZnJvbSBcIi4uL2RvY3VtZW50L1BERlRyYWlsZXJcIjtcbmltcG9ydCBQREZJbnZhbGlkT2JqZWN0IGZyb20gXCIuLi9vYmplY3RzL1BERkludmFsaWRPYmplY3RcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCBQREZOdW1iZXIgZnJvbSBcIi4uL29iamVjdHMvUERGTnVtYmVyXCI7XG5pbXBvcnQgUERGUmVmIGZyb20gXCIuLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERlN0cmVhbSBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJlYW1cIjtcbmltcG9ydCBQREZDcm9zc1JlZlN0cmVhbSBmcm9tIFwiLi4vc3RydWN0dXJlcy9QREZDcm9zc1JlZlN0cmVhbVwiO1xuaW1wb3J0IFBERk9iamVjdFN0cmVhbSBmcm9tIFwiLi4vc3RydWN0dXJlcy9QREZPYmplY3RTdHJlYW1cIjtcbmltcG9ydCBQREZXcml0ZXIgZnJvbSBcIi4vUERGV3JpdGVyXCI7XG5pbXBvcnQgeyBsYXN0LCB3YWl0Rm9yVGljayB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xudmFyIFBERlN0cmVhbVdyaXRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGU3RyZWFtV3JpdGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERlN0cmVhbVdyaXRlcihjb250ZXh0LCBvYmplY3RzUGVyVGljaywgZW5jb2RlU3RyZWFtcywgb2JqZWN0c1BlclN0cmVhbSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0LCBvYmplY3RzUGVyVGljaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZW5jb2RlU3RyZWFtcyA9IGVuY29kZVN0cmVhbXM7XG4gICAgICAgIF90aGlzLm9iamVjdHNQZXJTdHJlYW0gPSBvYmplY3RzUGVyU3RyZWFtO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERlN0cmVhbVdyaXRlci5wcm90b3R5cGUuY29tcHV0ZUJ1ZmZlclNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvYmplY3ROdW1iZXIsIGhlYWRlciwgc2l6ZSwgeHJlZlN0cmVhbSwgdW5jb21wcmVzc2VkT2JqZWN0cywgY29tcHJlc3NlZE9iamVjdHMsIG9iamVjdFN0cmVhbVJlZnMsIGluZGlyZWN0T2JqZWN0cywgaWR4LCBsZW4sIGluZGlyZWN0T2JqZWN0LCByZWYsIG9iamVjdCwgc2hvdWxkTm90Q29tcHJlc3MsIGNodW5rLCBvYmplY3RTdHJlYW1SZWYsIGlkeCwgbGVuLCBjaHVuaywgcmVmLCBvYmplY3RTdHJlYW0sIHhyZWZTdHJlYW1SZWYsIHhyZWZPZmZzZXQsIHRyYWlsZXI7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3ROdW1iZXIgPSB0aGlzLmNvbnRleHQubGFyZ2VzdE9iamVjdE51bWJlciArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIgPSBQREZIZWFkZXIuZm9yVmVyc2lvbigxLCA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBoZWFkZXIuc2l6ZUluQnl0ZXMoKSArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB4cmVmU3RyZWFtID0gUERGQ3Jvc3NSZWZTdHJlYW0uY3JlYXRlKHRoaXMuY3JlYXRlVHJhaWxlckRpY3QoKSwgdGhpcy5lbmNvZGVTdHJlYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuY29tcHJlc3NlZE9iamVjdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXByZXNzZWRPYmplY3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RTdHJlYW1SZWZzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpcmVjdE9iamVjdHMgPSB0aGlzLmNvbnRleHQuZW51bWVyYXRlSW5kaXJlY3RPYmplY3RzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSAwLCBsZW4gPSBpbmRpcmVjdE9iamVjdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpZHggPCBsZW4pKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGlyZWN0T2JqZWN0ID0gaW5kaXJlY3RPYmplY3RzW2lkeF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBpbmRpcmVjdE9iamVjdFswXSwgb2JqZWN0ID0gaW5kaXJlY3RPYmplY3RbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGROb3RDb21wcmVzcyA9IHJlZiA9PT0gdGhpcy5jb250ZXh0LnRyYWlsZXJJbmZvLkVuY3J5cHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgaW5zdGFuY2VvZiBQREZTdHJlYW0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgaW5zdGFuY2VvZiBQREZJbnZhbGlkT2JqZWN0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmdlbmVyYXRpb25OdW1iZXIgIT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3VsZE5vdENvbXByZXNzKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuY29tcHJlc3NlZE9iamVjdHMucHVzaChpbmRpcmVjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4cmVmU3RyZWFtLmFkZFVuY29tcHJlc3NlZEVudHJ5KHJlZiwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplICs9IHRoaXMuY29tcHV0ZUluZGlyZWN0T2JqZWN0U2l6ZShpbmRpcmVjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkV2FpdEZvclRpY2soMSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgd2FpdEZvclRpY2soKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsgPSBsYXN0KGNvbXByZXNzZWRPYmplY3RzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFN0cmVhbVJlZiA9IGxhc3Qob2JqZWN0U3RyZWFtUmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNodW5rIHx8IGNodW5rLmxlbmd0aCAlIHRoaXMub2JqZWN0c1BlclN0cmVhbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZE9iamVjdHMucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0U3RyZWFtUmVmID0gUERGUmVmLm9mKG9iamVjdE51bWJlcisrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RTdHJlYW1SZWZzLnB1c2gob2JqZWN0U3RyZWFtUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHhyZWZTdHJlYW0uYWRkQ29tcHJlc3NlZEVudHJ5KHJlZiwgb2JqZWN0U3RyZWFtUmVmLCBjaHVuay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsucHVzaChpbmRpcmVjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IDAsIGxlbiA9IGNvbXByZXNzZWRPYmplY3RzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaWR4IDwgbGVuKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsgPSBjb21wcmVzc2VkT2JqZWN0c1tpZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gb2JqZWN0U3RyZWFtUmVmc1tpZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0U3RyZWFtID0gUERGT2JqZWN0U3RyZWFtLndpdGhDb250ZXh0QW5kT2JqZWN0cyh0aGlzLmNvbnRleHQsIGNodW5rLCB0aGlzLmVuY29kZVN0cmVhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeHJlZlN0cmVhbS5hZGRVbmNvbXByZXNzZWRFbnRyeShyZWYsIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmNvbXB1dGVJbmRpcmVjdE9iamVjdFNpemUoW3JlZiwgb2JqZWN0U3RyZWFtXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmNvbXByZXNzZWRPYmplY3RzLnB1c2goW3JlZiwgb2JqZWN0U3RyZWFtXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkV2FpdEZvclRpY2soY2h1bmsubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB3YWl0Rm9yVGljaygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgeHJlZlN0cmVhbVJlZiA9IFBERlJlZi5vZihvYmplY3ROdW1iZXIrKyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4cmVmU3RyZWFtLmRpY3Quc2V0KFBERk5hbWUub2YoJ1NpemUnKSwgUERGTnVtYmVyLm9mKG9iamVjdE51bWJlcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeHJlZlN0cmVhbS5hZGRVbmNvbXByZXNzZWRFbnRyeSh4cmVmU3RyZWFtUmVmLCBzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhyZWZPZmZzZXQgPSBzaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmNvbXB1dGVJbmRpcmVjdE9iamVjdFNpemUoW3hyZWZTdHJlYW1SZWYsIHhyZWZTdHJlYW1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuY29tcHJlc3NlZE9iamVjdHMucHVzaChbeHJlZlN0cmVhbVJlZiwgeHJlZlN0cmVhbV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxlciA9IFBERlRyYWlsZXIuZm9yTGFzdENyb3NzUmVmU2VjdGlvbk9mZnNldCh4cmVmT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gdHJhaWxlci5zaXplSW5CeXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHsgc2l6ZTogc2l6ZSwgaGVhZGVyOiBoZWFkZXIsIGluZGlyZWN0T2JqZWN0czogdW5jb21wcmVzc2VkT2JqZWN0cywgdHJhaWxlcjogdHJhaWxlciB9XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZTdHJlYW1Xcml0ZXIuZm9yQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCBvYmplY3RzUGVyVGljaywgZW5jb2RlU3RyZWFtcywgb2JqZWN0c1BlclN0cmVhbSkge1xuICAgICAgICBpZiAoZW5jb2RlU3RyZWFtcyA9PT0gdm9pZCAwKSB7IGVuY29kZVN0cmVhbXMgPSB0cnVlOyB9XG4gICAgICAgIGlmIChvYmplY3RzUGVyU3RyZWFtID09PSB2b2lkIDApIHsgb2JqZWN0c1BlclN0cmVhbSA9IDUwOyB9XG4gICAgICAgIHJldHVybiBuZXcgUERGU3RyZWFtV3JpdGVyKGNvbnRleHQsIG9iamVjdHNQZXJUaWNrLCBlbmNvZGVTdHJlYW1zLCBvYmplY3RzUGVyU3RyZWFtKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZTdHJlYW1Xcml0ZXI7XG59KFBERldyaXRlcikpO1xuZXhwb3J0IGRlZmF1bHQgUERGU3RyZWFtV3JpdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGU3RyZWFtV3JpdGVyLmpzLm1hcCIsImltcG9ydCB7IEVuY29kaW5ncywgRm9udCwgRm9udE5hbWVzLCB9IGZyb20gJ0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzJztcbmltcG9ydCBQREZIZXhTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGSGV4U3RyaW5nXCI7XG5pbXBvcnQgeyB0b0NvZGVQb2ludCwgdG9IZXhTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbi8qKlxuICogQSBub3RlIG9mIHRoYW5rcyB0byB0aGUgZGV2ZWxvcGVycyBvZiBodHRwczovL2dpdGh1Yi5jb20vZm9saW9qcy9wZGZraXQsIGFzXG4gKiB0aGlzIGNsYXNzIGJvcnJvd3MgZnJvbTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2ZvbGlvanMvcGRma2l0L2Jsb2IvZjkxYmRkNjFjMTY0YTcyZWEwNmJlMWE0M2RjMGE0MTJhZmMzOTI1Zi9saWIvZm9udC9hZm0uY29mZmVlXG4gKi9cbnZhciBTdGFuZGFyZEZvbnRFbWJlZGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGFuZGFyZEZvbnRFbWJlZGRlcihmb250TmFtZSwgY3VzdG9tTmFtZSkge1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgdGhpcy5lbmNvZGluZyA9IChmb250TmFtZSA9PT0gRm9udE5hbWVzLlphcGZEaW5nYmF0cyA/IEVuY29kaW5ncy5aYXBmRGluZ2JhdHNcbiAgICAgICAgICAgIDogZm9udE5hbWUgPT09IEZvbnROYW1lcy5TeW1ib2wgPyBFbmNvZGluZ3MuU3ltYm9sXG4gICAgICAgICAgICAgICAgOiBFbmNvZGluZ3MuV2luQW5zaSk7XG4gICAgICAgIHRoaXMuZm9udCA9IEZvbnQubG9hZChmb250TmFtZSk7XG4gICAgICAgIHRoaXMuZm9udE5hbWUgPSB0aGlzLmZvbnQuRm9udE5hbWU7XG4gICAgICAgIHRoaXMuY3VzdG9tTmFtZSA9IGN1c3RvbU5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSB0aGUgSmF2YVNjcmlwdCBzdHJpbmcgaW50byB0aGlzIGZvbnQuIChKYXZhU2NyaXB0IGVuY29kZXMgc3RyaW5ncyBpblxuICAgICAqIFVuaWNvZGUsIGJ1dCBzdGFuZGFyZCBmb250cyB1c2UgZWl0aGVyIFdpbkFuc2ksIFphcGZEaW5nYmF0cywgb3IgU3ltYm9sXG4gICAgICogZW5jb2RpbmdzKVxuICAgICAqL1xuICAgIFN0YW5kYXJkRm9udEVtYmVkZGVyLnByb3RvdHlwZS5lbmNvZGVUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgdmFyIGdseXBocyA9IHRoaXMuZW5jb2RlVGV4dEFzR2x5cGhzKHRleHQpO1xuICAgICAgICB2YXIgaGV4Q29kZXMgPSBuZXcgQXJyYXkoZ2x5cGhzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdseXBocy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIGhleENvZGVzW2lkeF0gPSB0b0hleFN0cmluZyhnbHlwaHNbaWR4XS5jb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUERGSGV4U3RyaW5nLm9mKGhleENvZGVzLmpvaW4oJycpKTtcbiAgICB9O1xuICAgIFN0YW5kYXJkRm9udEVtYmVkZGVyLnByb3RvdHlwZS53aWR0aE9mVGV4dEF0U2l6ZSA9IGZ1bmN0aW9uICh0ZXh0LCBzaXplKSB7XG4gICAgICAgIHZhciBnbHlwaHMgPSB0aGlzLmVuY29kZVRleHRBc0dseXBocyh0ZXh0KTtcbiAgICAgICAgdmFyIHRvdGFsV2lkdGggPSAwO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBnbHlwaHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IGdseXBoc1tpZHhdLm5hbWU7XG4gICAgICAgICAgICB2YXIgcmlnaHQgPSAoZ2x5cGhzW2lkeCArIDFdIHx8IHt9KS5uYW1lO1xuICAgICAgICAgICAgdmFyIGtlcm5BbW91bnQgPSB0aGlzLmZvbnQuZ2V0WEF4aXNLZXJuaW5nRm9yUGFpcihsZWZ0LCByaWdodCkgfHwgMDtcbiAgICAgICAgICAgIHRvdGFsV2lkdGggKz0gdGhpcy53aWR0aE9mR2x5cGgobGVmdCkgKyBrZXJuQW1vdW50O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY2FsZSA9IHNpemUgLyAxMDAwO1xuICAgICAgICByZXR1cm4gdG90YWxXaWR0aCAqIHNjYWxlO1xuICAgIH07XG4gICAgU3RhbmRhcmRGb250RW1iZWRkZXIucHJvdG90eXBlLmhlaWdodE9mRm9udEF0U2l6ZSA9IGZ1bmN0aW9uIChzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBfYSA9IG9wdGlvbnMuZGVzY2VuZGVyLCBkZXNjZW5kZXIgPSBfYSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLmZvbnQsIEFzY2VuZGVyID0gX2IuQXNjZW5kZXIsIERlc2NlbmRlciA9IF9iLkRlc2NlbmRlciwgRm9udEJCb3ggPSBfYi5Gb250QkJveDtcbiAgICAgICAgdmFyIHlUb3AgPSBBc2NlbmRlciB8fCBGb250QkJveFszXTtcbiAgICAgICAgdmFyIHlCb3R0b20gPSBEZXNjZW5kZXIgfHwgRm9udEJCb3hbMV07XG4gICAgICAgIHZhciBoZWlnaHQgPSB5VG9wIC0geUJvdHRvbTtcbiAgICAgICAgaWYgKCFkZXNjZW5kZXIpXG4gICAgICAgICAgICBoZWlnaHQgKz0gRGVzY2VuZGVyIHx8IDA7XG4gICAgICAgIHJldHVybiAoaGVpZ2h0IC8gMTAwMCkgKiBzaXplO1xuICAgIH07XG4gICAgU3RhbmRhcmRGb250RW1iZWRkZXIucHJvdG90eXBlLnNpemVPZkZvbnRBdEhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5mb250LCBBc2NlbmRlciA9IF9hLkFzY2VuZGVyLCBEZXNjZW5kZXIgPSBfYS5EZXNjZW5kZXIsIEZvbnRCQm94ID0gX2EuRm9udEJCb3g7XG4gICAgICAgIHZhciB5VG9wID0gQXNjZW5kZXIgfHwgRm9udEJCb3hbM107XG4gICAgICAgIHZhciB5Qm90dG9tID0gRGVzY2VuZGVyIHx8IEZvbnRCQm94WzFdO1xuICAgICAgICByZXR1cm4gKDEwMDAgKiBoZWlnaHQpIC8gKHlUb3AgLSB5Qm90dG9tKTtcbiAgICB9O1xuICAgIFN0YW5kYXJkRm9udEVtYmVkZGVyLnByb3RvdHlwZS5lbWJlZEludG9Db250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIHJlZikge1xuICAgICAgICB2YXIgZm9udERpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBUeXBlOiAnRm9udCcsXG4gICAgICAgICAgICBTdWJ0eXBlOiAnVHlwZTEnLFxuICAgICAgICAgICAgQmFzZUZvbnQ6IHRoaXMuY3VzdG9tTmFtZSB8fCB0aGlzLmZvbnROYW1lLFxuICAgICAgICAgICAgRW5jb2Rpbmc6IHRoaXMuZW5jb2RpbmcgPT09IEVuY29kaW5ncy5XaW5BbnNpID8gJ1dpbkFuc2lFbmNvZGluZycgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFzc2lnbihyZWYsIGZvbnREaWN0KTtcbiAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5yZWdpc3Rlcihmb250RGljdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0YW5kYXJkRm9udEVtYmVkZGVyLnByb3RvdHlwZS53aWR0aE9mR2x5cGggPSBmdW5jdGlvbiAoZ2x5cGhOYW1lKSB7XG4gICAgICAgIC8vIERlZmF1bHQgdG8gMjUwIGlmIGZvbnQgZG9lc24ndCBzcGVjaWZ5IGEgd2lkdGhcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9udC5nZXRXaWR0aE9mR2x5cGgoZ2x5cGhOYW1lKSB8fCAyNTA7XG4gICAgfTtcbiAgICBTdGFuZGFyZEZvbnRFbWJlZGRlci5wcm90b3R5cGUuZW5jb2RlVGV4dEFzR2x5cGhzID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgdmFyIGNvZGVQb2ludHMgPSBBcnJheS5mcm9tKHRleHQpO1xuICAgICAgICB2YXIgZ2x5cGhzID0gbmV3IEFycmF5KGNvZGVQb2ludHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gY29kZVBvaW50cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSB0b0NvZGVQb2ludChjb2RlUG9pbnRzW2lkeF0pO1xuICAgICAgICAgICAgZ2x5cGhzW2lkeF0gPSB0aGlzLmVuY29kaW5nLmVuY29kZVVuaWNvZGVDb2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2x5cGhzO1xuICAgIH07XG4gICAgU3RhbmRhcmRGb250RW1iZWRkZXIuZm9yID0gZnVuY3Rpb24gKGZvbnROYW1lLCBjdXN0b21OYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhbmRhcmRGb250RW1iZWRkZXIoZm9udE5hbWUsIGN1c3RvbU5hbWUpO1xuICAgIH07XG4gICAgcmV0dXJuIFN0YW5kYXJkRm9udEVtYmVkZGVyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFN0YW5kYXJkRm9udEVtYmVkZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhbmRhcmRGb250RW1iZWRkZXIuanMubWFwIiwiaW1wb3J0IHsgdG9IZXhTdHJpbmcsIHRvSGV4U3RyaW5nT2ZNaW5MZW5ndGggfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IGhhc1N1cnJvZ2F0ZXMsIGhpZ2hTdXJyb2dhdGUsIGlzV2l0aGluQk1QLCBsb3dTdXJyb2dhdGUsIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3VuaWNvZGVcIjtcbi8qKiBgZ2x5cGhzYCBzaG91bGQgYmUgYW4gYXJyYXkgb2YgdW5pcXVlIGdseXBocyAqL1xuZXhwb3J0IHZhciBjcmVhdGVDbWFwID0gZnVuY3Rpb24gKGdseXBocywgZ2x5cGhJZCkge1xuICAgIHZhciBiZkNoYXJzID0gbmV3IEFycmF5KGdseXBocy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdseXBocy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzW2lkeF07XG4gICAgICAgIHZhciBpZCA9IGNtYXBIZXhGb3JtYXQoY21hcEhleFN0cmluZyhnbHlwaElkKGdseXBoKSkpO1xuICAgICAgICB2YXIgdW5pY29kZSA9IGNtYXBIZXhGb3JtYXQuYXBwbHkodm9pZCAwLCBnbHlwaC5jb2RlUG9pbnRzLm1hcChjbWFwQ29kZVBvaW50Rm9ybWF0KSk7XG4gICAgICAgIGJmQ2hhcnNbaWR4XSA9IFtpZCwgdW5pY29kZV07XG4gICAgfVxuICAgIHJldHVybiBmaWxsQ21hcFRlbXBsYXRlKGJmQ2hhcnMpO1xufTtcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVGVtcGxhdGVzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG52YXIgZmlsbENtYXBUZW1wbGF0ZSA9IGZ1bmN0aW9uIChiZkNoYXJzKSB7IHJldHVybiBcIi9DSURJbml0IC9Qcm9jU2V0IGZpbmRyZXNvdXJjZSBiZWdpblxcbjEyIGRpY3QgYmVnaW5cXG5iZWdpbmNtYXBcXG4vQ0lEU3lzdGVtSW5mbyA8PFxcbiAgL1JlZ2lzdHJ5IChBZG9iZSlcXG4gIC9PcmRlcmluZyAoVUNTKVxcbiAgL1N1cHBsZW1lbnQgMFxcbj4+IGRlZlxcbi9DTWFwTmFtZSAvQWRvYmUtSWRlbnRpdHktVUNTIGRlZlxcbi9DTWFwVHlwZSAyIGRlZlxcbjEgYmVnaW5jb2Rlc3BhY2VyYW5nZVxcbjwwMDAwPjxmZmZmPlxcbmVuZGNvZGVzcGFjZXJhbmdlXFxuXCIgKyBiZkNoYXJzLmxlbmd0aCArIFwiIGJlZ2luYmZjaGFyXFxuXCIgKyBiZkNoYXJzLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgZ2x5cGhJZCA9IF9hWzBdLCBjb2RlUG9pbnQgPSBfYVsxXTtcbiAgICByZXR1cm4gZ2x5cGhJZCArIFwiIFwiICsgY29kZVBvaW50O1xufSkuam9pbignXFxuJykgKyBcIlxcbmVuZGJmY2hhclxcbmVuZGNtYXBcXG5DTWFwTmFtZSBjdXJyZW50ZGljdCAvQ01hcCBkZWZpbmVyZXNvdXJjZSBwb3BcXG5lbmRcXG5lbmRcIjsgfTtcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVXRpbGl0aWVzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG52YXIgY21hcEhleEZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBcIjxcIiArIHZhbHVlcy5qb2luKCcnKSArIFwiPlwiO1xufTtcbnZhciBjbWFwSGV4U3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0b0hleFN0cmluZ09mTWluTGVuZ3RoKHZhbHVlLCA0KTsgfTtcbnZhciBjbWFwQ29kZVBvaW50Rm9ybWF0ID0gZnVuY3Rpb24gKGNvZGVQb2ludCkge1xuICAgIGlmIChpc1dpdGhpbkJNUChjb2RlUG9pbnQpKVxuICAgICAgICByZXR1cm4gY21hcEhleFN0cmluZyhjb2RlUG9pbnQpO1xuICAgIGlmIChoYXNTdXJyb2dhdGVzKGNvZGVQb2ludCkpIHtcbiAgICAgICAgdmFyIGhzID0gaGlnaFN1cnJvZ2F0ZShjb2RlUG9pbnQpO1xuICAgICAgICB2YXIgbHMgPSBsb3dTdXJyb2dhdGUoY29kZVBvaW50KTtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBjbWFwSGV4U3RyaW5nKGhzKSArIGNtYXBIZXhTdHJpbmcobHMpO1xuICAgIH1cbiAgICB2YXIgaGV4ID0gdG9IZXhTdHJpbmcoY29kZVBvaW50KTtcbiAgICB2YXIgbXNnID0gXCIweFwiICsgaGV4ICsgXCIgaXMgbm90IGEgdmFsaWQgVVRGLTggb3IgVVRGLTE2IGNvZGVwb2ludC5cIjtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DTWFwLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNyZWF0ZUNtYXAgfSBmcm9tIFwiLi9DTWFwXCI7XG5pbXBvcnQgeyBkZXJpdmVGb250RmxhZ3MgfSBmcm9tIFwiLi9Gb250RmxhZ3NcIjtcbmltcG9ydCBQREZIZXhTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGSGV4U3RyaW5nXCI7XG5pbXBvcnQgUERGU3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERlN0cmluZ1wiO1xuaW1wb3J0IHsgYnlBc2NlbmRpbmdJZCwgQ2FjaGUsIHNvcnRlZFVuaXEsIHRvSGV4U3RyaW5nT2ZNaW5MZW5ndGgsIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIEEgbm90ZSBvZiB0aGFua3MgdG8gdGhlIGRldmVsb3BlcnMgb2YgaHR0cHM6Ly9naXRodWIuY29tL2ZvbGlvanMvcGRma2l0LCBhc1xuICogdGhpcyBjbGFzcyBib3Jyb3dzIGZyb206XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZvbmdvdmV0dC9wZGZraXQvYmxvYi9lNzFlZGFiMGRkNDY1N2I1YTc2NzgwNGJhODZjOTRjNThkMDFmYmNhL2xpYi9pbWFnZS9qcGVnLmNvZmZlZVxuICovXG52YXIgQ3VzdG9tRm9udEVtYmVkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEN1c3RvbUZvbnRFbWJlZGRlcihmb250LCBmb250RGF0YSwgY3VzdG9tTmFtZSwgZm9udEZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYWxsR2x5cGhzSW5Gb250U29ydGVkQnlJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSBuZXcgQXJyYXkoX3RoaXMuZm9udC5jaGFyYWN0ZXJTZXQubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdseXBocy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gX3RoaXMuZm9udC5jaGFyYWN0ZXJTZXRbaWR4XTtcbiAgICAgICAgICAgICAgICBnbHlwaHNbaWR4XSA9IF90aGlzLmZvbnQuZ2x5cGhGb3JDb2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3J0ZWRVbmlxKGdseXBocy5zb3J0KGJ5QXNjZW5kaW5nSWQpLCBmdW5jdGlvbiAoZykgeyByZXR1cm4gZy5pZDsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuc2NhbGUgPSAxMDAwIC8gdGhpcy5mb250LnVuaXRzUGVyRW07XG4gICAgICAgIHRoaXMuZm9udERhdGEgPSBmb250RGF0YTtcbiAgICAgICAgdGhpcy5mb250TmFtZSA9IHRoaXMuZm9udC5wb3N0c2NyaXB0TmFtZSB8fCAnRm9udCc7XG4gICAgICAgIHRoaXMuY3VzdG9tTmFtZSA9IGN1c3RvbU5hbWU7XG4gICAgICAgIHRoaXMuZm9udEZlYXR1cmVzID0gZm9udEZlYXR1cmVzO1xuICAgICAgICB0aGlzLmJhc2VGb250TmFtZSA9ICcnO1xuICAgICAgICB0aGlzLmdseXBoQ2FjaGUgPSBDYWNoZS5wb3B1bGF0ZWRCeSh0aGlzLmFsbEdseXBoc0luRm9udFNvcnRlZEJ5SWQpO1xuICAgIH1cbiAgICBDdXN0b21Gb250RW1iZWRkZXIuZm9yID0gZnVuY3Rpb24gKGZvbnRraXQsIGZvbnREYXRhLCBjdXN0b21OYW1lLCBmb250RmVhdHVyZXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZvbnQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZvbnRraXQuY3JlYXRlKGZvbnREYXRhKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IEN1c3RvbUZvbnRFbWJlZGRlcihmb250LCBmb250RGF0YSwgY3VzdG9tTmFtZSwgZm9udEZlYXR1cmVzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHRoZSBKYXZhU2NyaXB0IHN0cmluZyBpbnRvIHRoaXMgZm9udC4gKEphdmFTY3JpcHQgZW5jb2RlcyBzdHJpbmdzIGluXG4gICAgICogVW5pY29kZSwgYnV0IGVtYmVkZGVkIGZvbnRzIHVzZSB0aGVpciBvd24gY3VzdG9tIGVuY29kaW5ncylcbiAgICAgKi9cbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmVuY29kZVRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICB2YXIgZ2x5cGhzID0gdGhpcy5mb250LmxheW91dCh0ZXh0LCB0aGlzLmZvbnRGZWF0dXJlcykuZ2x5cGhzO1xuICAgICAgICB2YXIgaGV4Q29kZXMgPSBuZXcgQXJyYXkoZ2x5cGhzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdseXBocy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIGhleENvZGVzW2lkeF0gPSB0b0hleFN0cmluZ09mTWluTGVuZ3RoKGdseXBoc1tpZHhdLmlkLCA0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUERGSGV4U3RyaW5nLm9mKGhleENvZGVzLmpvaW4oJycpKTtcbiAgICB9O1xuICAgIC8vIFRoZSBhZHZhbmNlV2lkdGggdGFrZXMgaW50byBhY2NvdW50IGtlcm5pbmcgYXV0b21hdGljYWxseSwgc28gd2UgZG9uJ3RcbiAgICAvLyBoYXZlIHRvIGRvIHRoYXQgbWFudWFsbHkgbGlrZSB3ZSBkbyBmb3IgdGhlIHN0YW5kYXJkIGZvbnRzLlxuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUud2lkdGhPZlRleHRBdFNpemUgPSBmdW5jdGlvbiAodGV4dCwgc2l6ZSkge1xuICAgICAgICB2YXIgZ2x5cGhzID0gdGhpcy5mb250LmxheW91dCh0ZXh0LCB0aGlzLmZvbnRGZWF0dXJlcykuZ2x5cGhzO1xuICAgICAgICB2YXIgdG90YWxXaWR0aCA9IDA7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdseXBocy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHRvdGFsV2lkdGggKz0gZ2x5cGhzW2lkeF0uYWR2YW5jZVdpZHRoICogdGhpcy5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NhbGUgPSBzaXplIC8gMTAwMDtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGggKiBzY2FsZTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUuaGVpZ2h0T2ZGb250QXRTaXplID0gZnVuY3Rpb24gKHNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIF9hID0gb3B0aW9ucy5kZXNjZW5kZXIsIGRlc2NlbmRlciA9IF9hID09PSB2b2lkIDAgPyB0cnVlIDogX2E7XG4gICAgICAgIHZhciBfYiA9IHRoaXMuZm9udCwgYXNjZW50ID0gX2IuYXNjZW50LCBkZXNjZW50ID0gX2IuZGVzY2VudCwgYmJveCA9IF9iLmJib3g7XG4gICAgICAgIHZhciB5VG9wID0gKGFzY2VudCB8fCBiYm94Lm1heFkpICogdGhpcy5zY2FsZTtcbiAgICAgICAgdmFyIHlCb3R0b20gPSAoZGVzY2VudCB8fCBiYm94Lm1pblkpICogdGhpcy5zY2FsZTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHlUb3AgLSB5Qm90dG9tO1xuICAgICAgICBpZiAoIWRlc2NlbmRlcilcbiAgICAgICAgICAgIGhlaWdodCAtPSBNYXRoLmFicyhkZXNjZW50KSB8fCAwO1xuICAgICAgICByZXR1cm4gKGhlaWdodCAvIDEwMDApICogc2l6ZTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUuc2l6ZU9mRm9udEF0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmZvbnQsIGFzY2VudCA9IF9hLmFzY2VudCwgZGVzY2VudCA9IF9hLmRlc2NlbnQsIGJib3ggPSBfYS5iYm94O1xuICAgICAgICB2YXIgeVRvcCA9IChhc2NlbnQgfHwgYmJveC5tYXhZKSAqIHRoaXMuc2NhbGU7XG4gICAgICAgIHZhciB5Qm90dG9tID0gKGRlc2NlbnQgfHwgYmJveC5taW5ZKSAqIHRoaXMuc2NhbGU7XG4gICAgICAgIHJldHVybiAoMTAwMCAqIGhlaWdodCkgLyAoeVRvcCAtIHlCb3R0b20pO1xuICAgIH07XG4gICAgQ3VzdG9tRm9udEVtYmVkZGVyLnByb3RvdHlwZS5lbWJlZEludG9Db250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIHJlZikge1xuICAgICAgICB0aGlzLmJhc2VGb250TmFtZSA9XG4gICAgICAgICAgICB0aGlzLmN1c3RvbU5hbWUgfHwgY29udGV4dC5hZGRSYW5kb21TdWZmaXgodGhpcy5mb250TmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYmVkRm9udERpY3QoY29udGV4dCwgcmVmKTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUuZW1iZWRGb250RGljdCA9IGZ1bmN0aW9uIChjb250ZXh0LCByZWYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNpZEZvbnREaWN0UmVmLCB1bmljb2RlQ01hcFJlZiwgZm9udERpY3Q7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRDSURGb250RGljdChjb250ZXh0KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZEZvbnREaWN0UmVmID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5pY29kZUNNYXBSZWYgPSB0aGlzLmVtYmVkVW5pY29kZUNtYXAoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RGljdCA9IGNvbnRleHQub2JqKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlOiAnRm9udCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogJ1R5cGUwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYXNlRm9udDogdGhpcy5iYXNlRm9udE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5jb2Rpbmc6ICdJZGVudGl0eS1IJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjZW5kYW50Rm9udHM6IFtjaWRGb250RGljdFJlZl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9Vbmljb2RlOiB1bmljb2RlQ01hcFJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXNzaWduKHJlZiwgZm9udERpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZWZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbnRleHQucmVnaXN0ZXIoZm9udERpY3QpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmlzQ0ZGID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb250LmNmZjtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUuZW1iZWRDSURGb250RGljdCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmb250RGVzY3JpcHRvclJlZiwgY2lkRm9udERpY3Q7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW1iZWRGb250RGVzY3JpcHRvcihjb250ZXh0KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnREZXNjcmlwdG9yUmVmID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lkRm9udERpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZTogJ0ZvbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1YnR5cGU6IHRoaXMuaXNDRkYoKSA/ICdDSURGb250VHlwZTAnIDogJ0NJREZvbnRUeXBlMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0lEVG9HSURNYXA6ICdJZGVudGl0eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFzZUZvbnQ6IHRoaXMuYmFzZUZvbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENJRFN5c3RlbUluZm86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaXN0cnk6IFBERlN0cmluZy5vZignQWRvYmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3JkZXJpbmc6IFBERlN0cmluZy5vZignSWRlbnRpdHknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VwcGxlbWVudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvbnREZXNjcmlwdG9yOiBmb250RGVzY3JpcHRvclJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXOiB0aGlzLmNvbXB1dGVXaWR0aHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbnRleHQucmVnaXN0ZXIoY2lkRm9udERpY3QpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmVtYmVkRm9udERlc2NyaXB0b3IgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZm9udFN0cmVhbVJlZiwgc2NhbGUsIF9hLCBpdGFsaWNBbmdsZSwgYXNjZW50LCBkZXNjZW50LCBjYXBIZWlnaHQsIHhIZWlnaHQsIF9iLCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCBmb250RGVzY3JpcHRvcjtcbiAgICAgICAgICAgIHZhciBfYztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2QpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9kLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5lbWJlZEZvbnRTdHJlYW0oY29udGV4dCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U3RyZWFtUmVmID0gX2Quc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLmZvbnQsIGl0YWxpY0FuZ2xlID0gX2EuaXRhbGljQW5nbGUsIGFzY2VudCA9IF9hLmFzY2VudCwgZGVzY2VudCA9IF9hLmRlc2NlbnQsIGNhcEhlaWdodCA9IF9hLmNhcEhlaWdodCwgeEhlaWdodCA9IF9hLnhIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXMuZm9udC5iYm94LCBtaW5YID0gX2IubWluWCwgbWluWSA9IF9iLm1pblksIG1heFggPSBfYi5tYXhYLCBtYXhZID0gX2IubWF4WTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnREZXNjcmlwdG9yID0gY29udGV4dC5vYmooKF9jID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlOiAnRm9udERlc2NyaXB0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb250TmFtZTogdGhpcy5iYXNlRm9udE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsYWdzOiBkZXJpdmVGb250RmxhZ3ModGhpcy5mb250KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9udEJCb3g6IFttaW5YICogc2NhbGUsIG1pblkgKiBzY2FsZSwgbWF4WCAqIHNjYWxlLCBtYXhZICogc2NhbGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdGFsaWNBbmdsZTogaXRhbGljQW5nbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzY2VudDogYXNjZW50ICogc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NlbnQ6IGRlc2NlbnQgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FwSGVpZ2h0OiAoY2FwSGVpZ2h0IHx8IGFzY2VudCkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWEhlaWdodDogKHhIZWlnaHQgfHwgMCkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IHN1cmUgaG93IHRvIGNvbXB1dGUvZmluZCB0aGlzLCBub3IgaXMgYW55Ym9keSBlbHNlIHJlYWxseTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU0ODUxNzkvc3RlbXYtdmFsdWUtb2YtdGhlLXRydWV0eXBlLWZvbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RlbVY6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jW3RoaXMuaXNDRkYoKSA/ICdGb250RmlsZTMnIDogJ0ZvbnRGaWxlMiddID0gZm9udFN0cmVhbVJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbnRleHQucmVnaXN0ZXIoZm9udERlc2NyaXB0b3IpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLnNlcmlhbGl6ZUZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5mb250RGF0YV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmVtYmVkRm9udFN0cmVhbSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmb250U3RyZWFtLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IChfYSA9IGNvbnRleHQpLmZsYXRlU3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJpYWxpemVGb250KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U3RyZWFtID0gX2IuYXBwbHkoX2EsIFtfYy5zZW50KCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogdGhpcy5pc0NGRigpID8gJ0NJREZvbnRUeXBlMEMnIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb250ZXh0LnJlZ2lzdGVyKGZvbnRTdHJlYW0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmVtYmVkVW5pY29kZUNtYXAgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgY21hcCA9IGNyZWF0ZUNtYXAodGhpcy5nbHlwaENhY2hlLmFjY2VzcygpLCB0aGlzLmdseXBoSWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHZhciBjbWFwU3RyZWFtID0gY29udGV4dC5mbGF0ZVN0cmVhbShjbWFwKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmVnaXN0ZXIoY21hcFN0cmVhbSk7XG4gICAgfTtcbiAgICBDdXN0b21Gb250RW1iZWRkZXIucHJvdG90eXBlLmdseXBoSWQgPSBmdW5jdGlvbiAoZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIGdseXBoID8gZ2x5cGguaWQgOiAtMTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRFbWJlZGRlci5wcm90b3R5cGUuY29tcHV0ZVdpZHRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdseXBocyA9IHRoaXMuZ2x5cGhDYWNoZS5hY2Nlc3MoKTtcbiAgICAgICAgdmFyIHdpZHRocyA9IFtdO1xuICAgICAgICB2YXIgY3VyclNlY3Rpb24gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZ2x5cGhzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGN1cnJHbHlwaCA9IGdseXBoc1tpZHhdO1xuICAgICAgICAgICAgdmFyIHByZXZHbHlwaCA9IGdseXBoc1tpZHggLSAxXTtcbiAgICAgICAgICAgIHZhciBjdXJyR2x5cGhJZCA9IHRoaXMuZ2x5cGhJZChjdXJyR2x5cGgpO1xuICAgICAgICAgICAgdmFyIHByZXZHbHlwaElkID0gdGhpcy5nbHlwaElkKHByZXZHbHlwaCk7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgd2lkdGhzLnB1c2goY3VyckdseXBoSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VyckdseXBoSWQgLSBwcmV2R2x5cGhJZCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHdpZHRocy5wdXNoKGN1cnJTZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB3aWR0aHMucHVzaChjdXJyR2x5cGhJZCk7XG4gICAgICAgICAgICAgICAgY3VyclNlY3Rpb24gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJTZWN0aW9uLnB1c2goY3VyckdseXBoLmFkdmFuY2VXaWR0aCAqIHRoaXMuc2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIHdpZHRocy5wdXNoKGN1cnJTZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHdpZHRocztcbiAgICB9O1xuICAgIHJldHVybiBDdXN0b21Gb250RW1iZWRkZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tRm9udEVtYmVkZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3VzdG9tRm9udEVtYmVkZGVyLmpzLm1hcCIsIi8vIHByZXR0aWVyLWlnbm9yZVxudmFyIG1ha2VGb250RmxhZ3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBmbGFncyA9IDA7XG4gICAgdmFyIGZsaXBCaXQgPSBmdW5jdGlvbiAoYml0KSB7IGZsYWdzIHw9ICgxIDw8IChiaXQgLSAxKSk7IH07XG4gICAgaWYgKG9wdGlvbnMuZml4ZWRQaXRjaClcbiAgICAgICAgZmxpcEJpdCgxKTtcbiAgICBpZiAob3B0aW9ucy5zZXJpZilcbiAgICAgICAgZmxpcEJpdCgyKTtcbiAgICBpZiAob3B0aW9ucy5zeW1ib2xpYylcbiAgICAgICAgZmxpcEJpdCgzKTtcbiAgICBpZiAob3B0aW9ucy5zY3JpcHQpXG4gICAgICAgIGZsaXBCaXQoNCk7XG4gICAgaWYgKG9wdGlvbnMubm9uc3ltYm9saWMpXG4gICAgICAgIGZsaXBCaXQoNik7XG4gICAgaWYgKG9wdGlvbnMuaXRhbGljKVxuICAgICAgICBmbGlwQml0KDcpO1xuICAgIGlmIChvcHRpb25zLmFsbENhcClcbiAgICAgICAgZmxpcEJpdCgxNyk7XG4gICAgaWYgKG9wdGlvbnMuc21hbGxDYXApXG4gICAgICAgIGZsaXBCaXQoMTgpO1xuICAgIGlmIChvcHRpb25zLmZvcmNlQm9sZClcbiAgICAgICAgZmxpcEJpdCgxOSk7XG4gICAgcmV0dXJuIGZsYWdzO1xufTtcbi8vIEZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9mb2xpb2pzL3BkZmtpdC9ibG9iLzgzZjVmNzI0MzE3MmEwMTdhZGNmNmE3ZmFhNTU0N2M1NTk4MmM1N2IvbGliL2ZvbnQvZW1iZWRkZWQuanMjTDEyMy1MMTI5XG5leHBvcnQgdmFyIGRlcml2ZUZvbnRGbGFncyA9IGZ1bmN0aW9uIChmb250KSB7XG4gICAgdmFyIGZhbWlseUNsYXNzID0gZm9udFsnT1MvMiddID8gZm9udFsnT1MvMiddLnNGYW1pbHlDbGFzcyA6IDA7XG4gICAgdmFyIGZsYWdzID0gbWFrZUZvbnRGbGFncyh7XG4gICAgICAgIGZpeGVkUGl0Y2g6IGZvbnQucG9zdC5pc0ZpeGVkUGl0Y2gsXG4gICAgICAgIHNlcmlmOiAxIDw9IGZhbWlseUNsYXNzICYmIGZhbWlseUNsYXNzIDw9IDcsXG4gICAgICAgIHN5bWJvbGljOiB0cnVlLFxuICAgICAgICBzY3JpcHQ6IGZhbWlseUNsYXNzID09PSAxMCxcbiAgICAgICAgaXRhbGljOiBmb250LmhlYWQubWFjU3R5bGUuaXRhbGljLFxuICAgIH0pO1xuICAgIHJldHVybiBmbGFncztcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gb250RmxhZ3MuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2V4dGVuZHMsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgQ3VzdG9tRm9udEVtYmVkZGVyIGZyb20gXCIuL0N1c3RvbUZvbnRFbWJlZGRlclwiO1xuaW1wb3J0IFBERkhleFN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZIZXhTdHJpbmdcIjtcbmltcG9ydCB7IENhY2hlLCBtZXJnZVVpbnQ4QXJyYXlzLCB0b0hleFN0cmluZ09mTWluTGVuZ3RoIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vKipcbiAqIEEgbm90ZSBvZiB0aGFua3MgdG8gdGhlIGRldmVsb3BlcnMgb2YgaHR0cHM6Ly9naXRodWIuY29tL2ZvbGlvanMvcGRma2l0LCBhc1xuICogdGhpcyBjbGFzcyBib3Jyb3dzIGZyb206XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZvbmdvdmV0dC9wZGZraXQvYmxvYi9lNzFlZGFiMGRkNDY1N2I1YTc2NzgwNGJhODZjOTRjNThkMDFmYmNhL2xpYi9pbWFnZS9qcGVnLmNvZmZlZVxuICovXG52YXIgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDdXN0b21Gb250U3Vic2V0RW1iZWRkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyKGZvbnQsIGZvbnREYXRhLCBjdXN0b21Gb250TmFtZSwgZm9udEZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZvbnQsIGZvbnREYXRhLCBjdXN0b21Gb250TmFtZSwgZm9udEZlYXR1cmVzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdWJzZXQgPSBfdGhpcy5mb250LmNyZWF0ZVN1YnNldCgpO1xuICAgICAgICBfdGhpcy5nbHlwaHMgPSBbXTtcbiAgICAgICAgX3RoaXMuZ2x5cGhDYWNoZSA9IENhY2hlLnBvcHVsYXRlZEJ5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmdseXBoczsgfSk7XG4gICAgICAgIF90aGlzLmdseXBoSWRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyLmZvciA9IGZ1bmN0aW9uIChmb250a2l0LCBmb250RGF0YSwgY3VzdG9tRm9udE5hbWUsIGZvbnRGZWF0dXJlcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZm9udDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZm9udGtpdC5jcmVhdGUoZm9udERhdGEpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyKGZvbnQsIGZvbnREYXRhLCBjdXN0b21Gb250TmFtZSwgZm9udEZlYXR1cmVzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyLnByb3RvdHlwZS5lbmNvZGVUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgdmFyIGdseXBocyA9IHRoaXMuZm9udC5sYXlvdXQodGV4dCwgdGhpcy5mb250RmVhdHVyZXMpLmdseXBocztcbiAgICAgICAgdmFyIGhleENvZGVzID0gbmV3IEFycmF5KGdseXBocy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBnbHlwaHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaWR4XTtcbiAgICAgICAgICAgIHZhciBzdWJzZXRHbHlwaElkID0gdGhpcy5zdWJzZXQuaW5jbHVkZUdseXBoKGdseXBoKTtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhzW3N1YnNldEdseXBoSWQgLSAxXSA9IGdseXBoO1xuICAgICAgICAgICAgdGhpcy5nbHlwaElkTWFwLnNldChnbHlwaC5pZCwgc3Vic2V0R2x5cGhJZCk7XG4gICAgICAgICAgICBoZXhDb2Rlc1tpZHhdID0gdG9IZXhTdHJpbmdPZk1pbkxlbmd0aChzdWJzZXRHbHlwaElkLCA0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdseXBoQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICByZXR1cm4gUERGSGV4U3RyaW5nLm9mKGhleENvZGVzLmpvaW4oJycpKTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRTdWJzZXRFbWJlZGRlci5wcm90b3R5cGUuaXNDRkYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNldC5jZmY7XG4gICAgfTtcbiAgICBDdXN0b21Gb250U3Vic2V0RW1iZWRkZXIucHJvdG90eXBlLmdseXBoSWQgPSBmdW5jdGlvbiAoZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIGdseXBoID8gdGhpcy5nbHlwaElkTWFwLmdldChnbHlwaC5pZCkgOiAtMTtcbiAgICB9O1xuICAgIEN1c3RvbUZvbnRTdWJzZXRFbWJlZGRlci5wcm90b3R5cGUuc2VyaWFsaXplRm9udCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2V0XG4gICAgICAgICAgICAgICAgLmVuY29kZVN0cmVhbSgpXG4gICAgICAgICAgICAgICAgLm9uKCdkYXRhJywgZnVuY3Rpb24gKGJ5dGVzKSB7IHJldHVybiBwYXJ0cy5wdXNoKGJ5dGVzKTsgfSlcbiAgICAgICAgICAgICAgICAub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUobWVyZ2VVaW50OEFycmF5cyhwYXJ0cykpOyB9KVxuICAgICAgICAgICAgICAgIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEN1c3RvbUZvbnRTdWJzZXRFbWJlZGRlcjtcbn0oQ3VzdG9tRm9udEVtYmVkZGVyKSk7XG5leHBvcnQgZGVmYXVsdCBDdXN0b21Gb250U3Vic2V0RW1iZWRkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21Gb250U3Vic2V0RW1iZWRkZXIuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuLy8gcHJldHRpZXItaWdub3JlXG52YXIgTUFSS0VSUyA9IFtcbiAgICAweGZmYzAsIDB4ZmZjMSwgMHhmZmMyLFxuICAgIDB4ZmZjMywgMHhmZmM1LCAweGZmYzYsXG4gICAgMHhmZmM3LCAweGZmYzgsIDB4ZmZjOSxcbiAgICAweGZmY2EsIDB4ZmZjYiwgMHhmZmNjLFxuICAgIDB4ZmZjZCwgMHhmZmNlLCAweGZmY2YsXG5dO1xudmFyIENvbG9yU3BhY2U7XG4oZnVuY3Rpb24gKENvbG9yU3BhY2UpIHtcbiAgICBDb2xvclNwYWNlW1wiRGV2aWNlR3JheVwiXSA9IFwiRGV2aWNlR3JheVwiO1xuICAgIENvbG9yU3BhY2VbXCJEZXZpY2VSR0JcIl0gPSBcIkRldmljZVJHQlwiO1xuICAgIENvbG9yU3BhY2VbXCJEZXZpY2VDTVlLXCJdID0gXCJEZXZpY2VDTVlLXCI7XG59KShDb2xvclNwYWNlIHx8IChDb2xvclNwYWNlID0ge30pKTtcbnZhciBDaGFubmVsVG9Db2xvclNwYWNlID0ge1xuICAgIDE6IENvbG9yU3BhY2UuRGV2aWNlR3JheSxcbiAgICAzOiBDb2xvclNwYWNlLkRldmljZVJHQixcbiAgICA0OiBDb2xvclNwYWNlLkRldmljZUNNWUssXG59O1xuLyoqXG4gKiBBIG5vdGUgb2YgdGhhbmtzIHRvIHRoZSBkZXZlbG9wZXJzIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9mb2xpb2pzL3BkZmtpdCwgYXNcbiAqIHRoaXMgY2xhc3MgYm9ycm93cyBmcm9tOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZm9saW9qcy9wZGZraXQvYmxvYi9hNmFmNzY0NjdjZTA2YmQ2YTJhZjRhYTcyNzFjY2FjOWZmMTUyYTdkL2xpYi9pbWFnZS9qcGVnLmpzXG4gKi9cbnZhciBKcGVnRW1iZWRkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSnBlZ0VtYmVkZGVyKGltYWdlRGF0YSwgYml0c1BlckNvbXBvbmVudCwgd2lkdGgsIGhlaWdodCwgY29sb3JTcGFjZSkge1xuICAgICAgICB0aGlzLmltYWdlRGF0YSA9IGltYWdlRGF0YTtcbiAgICAgICAgdGhpcy5iaXRzUGVyQ29tcG9uZW50ID0gYml0c1BlckNvbXBvbmVudDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5jb2xvclNwYWNlID0gY29sb3JTcGFjZTtcbiAgICB9XG4gICAgSnBlZ0VtYmVkZGVyLmZvciA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRhdGFWaWV3LCBzb2ksIHBvcywgbWFya2VyLCBiaXRzUGVyQ29tcG9uZW50LCBoZWlnaHQsIHdpZHRoLCBjaGFubmVsQnl0ZSwgY2hhbm5lbE5hbWUsIGNvbG9yU3BhY2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoaW1hZ2VEYXRhLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgc29pID0gZGF0YVZpZXcuZ2V0VWludDE2KDApO1xuICAgICAgICAgICAgICAgIGlmIChzb2kgIT09IDB4ZmZkOClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTT0kgbm90IGZvdW5kIGluIEpQRUcnKTtcbiAgICAgICAgICAgICAgICBwb3MgPSAyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwb3MgPCBkYXRhVmlldy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlciA9IGRhdGFWaWV3LmdldFVpbnQxNihwb3MpO1xuICAgICAgICAgICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1BUktFUlMuaW5jbHVkZXMobWFya2VyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBwb3MgKz0gZGF0YVZpZXcuZ2V0VWludDE2KHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghTUFSS0VSUy5pbmNsdWRlcyhtYXJrZXIpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlBFRycpO1xuICAgICAgICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgICAgICAgIGJpdHNQZXJDb21wb25lbnQgPSBkYXRhVmlldy5nZXRVaW50OChwb3MrKyk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gZGF0YVZpZXcuZ2V0VWludDE2KHBvcyk7XG4gICAgICAgICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBkYXRhVmlldy5nZXRVaW50MTYocG9zKTtcbiAgICAgICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICAgICAgICBjaGFubmVsQnl0ZSA9IGRhdGFWaWV3LmdldFVpbnQ4KHBvcysrKTtcbiAgICAgICAgICAgICAgICBjaGFubmVsTmFtZSA9IENoYW5uZWxUb0NvbG9yU3BhY2VbY2hhbm5lbEJ5dGVdO1xuICAgICAgICAgICAgICAgIGlmICghY2hhbm5lbE5hbWUpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBKUEVHIGNoYW5uZWwuJyk7XG4gICAgICAgICAgICAgICAgY29sb3JTcGFjZSA9IGNoYW5uZWxOYW1lO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgSnBlZ0VtYmVkZGVyKGltYWdlRGF0YSwgYml0c1BlckNvbXBvbmVudCwgd2lkdGgsIGhlaWdodCwgY29sb3JTcGFjZSldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSnBlZ0VtYmVkZGVyLnByb3RvdHlwZS5lbWJlZEludG9Db250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIHJlZikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgeE9iamVjdDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB4T2JqZWN0ID0gY29udGV4dC5zdHJlYW0odGhpcy5pbWFnZURhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLFxuICAgICAgICAgICAgICAgICAgICBTdWJ0eXBlOiAnSW1hZ2UnLFxuICAgICAgICAgICAgICAgICAgICBCaXRzUGVyQ29tcG9uZW50OiB0aGlzLmJpdHNQZXJDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgIFdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBIZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBDb2xvclNwYWNlOiB0aGlzLmNvbG9yU3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIEZpbHRlcjogJ0RDVERlY29kZScsXG4gICAgICAgICAgICAgICAgICAgIC8vIENNWUsgSlBFRyBzdHJlYW1zIGluIFBERiBhcmUgdHlwaWNhbGx5IHN0b3JlZCBjb21wbGVtZW50ZWQsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggMSBhcyAnb2ZmJyBhbmQgMCBhcyAnb24nIChQREYgMzIwMDAtMToyMDA4LCA4LjYuNC40KS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RhbmRhbG9uZSBDTVlLIEpQRUcgKHVzdWFsbHkgZXhwb3J0ZWQgYnkgUGhvdG9zaG9wKSBhcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmVkIGludmVyc2UsIHdpdGggMCBhcyAnb2ZmJyBhbmQgMSBhcyAnb24nLCBsaWtlIFJHQi5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHlpbmcgYSBzd2FwIGhlcmUgYXMgYSBoZWRnZSB0aGF0IG1vc3QgYnl0ZXMgcGFzc2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIHRoaXMgbWV0aG9kIHdpbGwgYmVuZWZpdCBmcm9tIGl0LlxuICAgICAgICAgICAgICAgICAgICBEZWNvZGU6IHRoaXMuY29sb3JTcGFjZSA9PT0gQ29sb3JTcGFjZS5EZXZpY2VDTVlLXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFsxLCAwLCAxLCAwLCAxLCAwLCAxLCAwXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFzc2lnbihyZWYsIHhPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb250ZXh0LnJlZ2lzdGVyKHhPYmplY3QpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEpwZWdFbWJlZGRlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBKcGVnRW1iZWRkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1KcGVnRW1iZWRkZXIuanMubWFwIiwiaW1wb3J0IHBha28gZnJvbSAncGFrbyc7XG5cbnZhciBVUE5HID0ge307XG5cblx0XG5cblVQTkcudG9SR0JBOCA9IGZ1bmN0aW9uKG91dClcbntcblx0dmFyIHcgPSBvdXQud2lkdGgsIGggPSBvdXQuaGVpZ2h0O1xuXHRpZihvdXQudGFicy5hY1RMPT1udWxsKSByZXR1cm4gW1VQTkcudG9SR0JBOC5kZWNvZGVJbWFnZShvdXQuZGF0YSwgdywgaCwgb3V0KS5idWZmZXJdO1xuXHRcblx0dmFyIGZybXMgPSBbXTtcblx0aWYob3V0LmZyYW1lc1swXS5kYXRhPT1udWxsKSBvdXQuZnJhbWVzWzBdLmRhdGEgPSBvdXQuZGF0YTtcblx0XG5cdHZhciBsZW4gPSB3KmgqNCwgaW1nID0gbmV3IFVpbnQ4QXJyYXkobGVuKSwgZW1wdHkgPSBuZXcgVWludDhBcnJheShsZW4pLCBwcmV2PW5ldyBVaW50OEFycmF5KGxlbik7XG5cdGZvcih2YXIgaT0wOyBpPG91dC5mcmFtZXMubGVuZ3RoOyBpKyspXG5cdHtcblx0XHR2YXIgZnJtID0gb3V0LmZyYW1lc1tpXTtcblx0XHR2YXIgZng9ZnJtLnJlY3QueCwgZnk9ZnJtLnJlY3QueSwgZncgPSBmcm0ucmVjdC53aWR0aCwgZmggPSBmcm0ucmVjdC5oZWlnaHQ7XG5cdFx0dmFyIGZkYXRhID0gVVBORy50b1JHQkE4LmRlY29kZUltYWdlKGZybS5kYXRhLCBmdyxmaCwgb3V0KTtcblx0XHRcblx0XHRpZihpIT0wKSBmb3IodmFyIGo9MDsgajxsZW47IGorKykgcHJldltqXT1pbWdbal07XG5cdFx0XG5cdFx0aWYgICAgIChmcm0uYmxlbmQ9PTApIFVQTkcuX2NvcHlUaWxlKGZkYXRhLCBmdywgZmgsIGltZywgdywgaCwgZngsIGZ5LCAwKTtcblx0XHRlbHNlIGlmKGZybS5ibGVuZD09MSkgVVBORy5fY29weVRpbGUoZmRhdGEsIGZ3LCBmaCwgaW1nLCB3LCBoLCBmeCwgZnksIDEpO1xuXHRcdFxuXHRcdGZybXMucHVzaChpbWcuYnVmZmVyLnNsaWNlKDApKTtcblx0XHRcblx0XHRpZiAgICAgKGZybS5kaXNwb3NlPT0wKSB7fVxuXHRcdGVsc2UgaWYoZnJtLmRpc3Bvc2U9PTEpIFVQTkcuX2NvcHlUaWxlKGVtcHR5LCBmdywgZmgsIGltZywgdywgaCwgZngsIGZ5LCAwKTtcblx0XHRlbHNlIGlmKGZybS5kaXNwb3NlPT0yKSBmb3IodmFyIGo9MDsgajxsZW47IGorKykgaW1nW2pdPXByZXZbal07XG5cdH1cblx0cmV0dXJuIGZybXM7XG59XG5VUE5HLnRvUkdCQTguZGVjb2RlSW1hZ2UgPSBmdW5jdGlvbihkYXRhLCB3LCBoLCBvdXQpXG57XG5cdHZhciBhcmVhID0gdypoLCBicHAgPSBVUE5HLmRlY29kZS5fZ2V0QlBQKG91dCk7XG5cdHZhciBicGwgPSBNYXRoLmNlaWwodypicHAvOCk7XHQvLyBieXRlcyBwZXIgbGluZVxuXG5cdHZhciBiZiA9IG5ldyBVaW50OEFycmF5KGFyZWEqNCksIGJmMzIgPSBuZXcgVWludDMyQXJyYXkoYmYuYnVmZmVyKTtcblx0dmFyIGN0eXBlID0gb3V0LmN0eXBlLCBkZXB0aCA9IG91dC5kZXB0aDtcblx0dmFyIHJzID0gVVBORy5fYmluLnJlYWRVc2hvcnQ7XG5cdFxuXHQvL2NvbnNvbGUubG9nKGN0eXBlLCBkZXB0aCk7XG5cdHZhciB0aW1lID0gRGF0ZS5ub3coKTtcblxuXHRpZiAgICAgKGN0eXBlPT02KSB7IC8vIFJHQiArIGFscGhhXG5cdFx0dmFyIHFhcmVhID0gYXJlYTw8Mjtcblx0XHRpZihkZXB0aD09IDgpIGZvcih2YXIgaT0wOyBpPHFhcmVhO2krPTQpIHsgIGJmW2ldID0gZGF0YVtpXTsgIGJmW2krMV0gPSBkYXRhW2krMV07ICBiZltpKzJdID0gZGF0YVtpKzJdOyAgYmZbaSszXSA9IGRhdGFbaSszXTsgfVxuXHRcdGlmKGRlcHRoPT0xNikgZm9yKHZhciBpPTA7IGk8cWFyZWE7aSsrICkgeyAgYmZbaV0gPSBkYXRhW2k8PDFdOyAgfVxuXHR9XG5cdGVsc2UgaWYoY3R5cGU9PTIpIHtcdC8vIFJHQlxuXHRcdHZhciB0cz1vdXQudGFic1tcInRSTlNcIl07XG5cdFx0aWYodHM9PW51bGwpIHtcblx0XHRcdGlmKGRlcHRoPT0gOCkgZm9yKHZhciBpPTA7IGk8YXJlYTsgaSsrKSB7ICB2YXIgdGk9aSozOyAgYmYzMltpXSA9ICgyNTU8PDI0KXwoZGF0YVt0aSsyXTw8MTYpfChkYXRhW3RpKzFdPDw4KXxkYXRhW3RpXTsgIH1cblx0XHRcdGlmKGRlcHRoPT0xNikgZm9yKHZhciBpPTA7IGk8YXJlYTsgaSsrKSB7ICB2YXIgdGk9aSo2OyAgYmYzMltpXSA9ICgyNTU8PDI0KXwoZGF0YVt0aSs0XTw8MTYpfChkYXRhW3RpKzJdPDw4KXxkYXRhW3RpXTsgIH1cblx0XHR9XG5cdFx0ZWxzZSB7ICB2YXIgdHI9dHNbMF0sIHRnPXRzWzFdLCB0Yj10c1syXTtcblx0XHRcdGlmKGRlcHRoPT0gOCkgZm9yKHZhciBpPTA7IGk8YXJlYTsgaSsrKSB7ICB2YXIgcWk9aTw8MiwgdGk9aSozOyAgYmYzMltpXSA9ICgyNTU8PDI0KXwoZGF0YVt0aSsyXTw8MTYpfChkYXRhW3RpKzFdPDw4KXxkYXRhW3RpXTtcblx0XHRcdFx0aWYoZGF0YVt0aV0gICA9PXRyICYmIGRhdGFbdGkrMV0gICA9PXRnICYmIGRhdGFbdGkrMl0gICA9PXRiKSBiZltxaSszXSA9IDA7ICB9XG5cdFx0XHRpZihkZXB0aD09MTYpIGZvcih2YXIgaT0wOyBpPGFyZWE7IGkrKykgeyAgdmFyIHFpPWk8PDIsIHRpPWkqNjsgIGJmMzJbaV0gPSAoMjU1PDwyNCl8KGRhdGFbdGkrNF08PDE2KXwoZGF0YVt0aSsyXTw8OCl8ZGF0YVt0aV07XG5cdFx0XHRcdGlmKHJzKGRhdGEsdGkpPT10ciAmJiBycyhkYXRhLHRpKzIpPT10ZyAmJiBycyhkYXRhLHRpKzQpPT10YikgYmZbcWkrM10gPSAwOyAgfVxuXHRcdH1cblx0fVxuXHRlbHNlIGlmKGN0eXBlPT0zKSB7XHQvLyBwYWxldHRlXG5cdFx0dmFyIHA9b3V0LnRhYnNbXCJQTFRFXCJdLCBhcD1vdXQudGFic1tcInRSTlNcIl0sIHRsPWFwP2FwLmxlbmd0aDowO1xuXHRcdC8vY29uc29sZS5sb2cocCwgYXApO1xuXHRcdGlmKGRlcHRoPT0xKSBmb3IodmFyIHk9MDsgeTxoOyB5KyspIHsgIHZhciBzMCA9IHkqYnBsLCB0MCA9IHkqdztcblx0XHRcdGZvcih2YXIgaT0wOyBpPHc7IGkrKykgeyB2YXIgcWk9KHQwK2kpPDwyLCBqPSgoZGF0YVtzMCsoaT4+MyldPj4oNy0oKGkmNyk8PDApKSkmIDEpLCBjaj0zKmo7ICBiZltxaV09cFtjal07ICBiZltxaSsxXT1wW2NqKzFdOyAgYmZbcWkrMl09cFtjaisyXTsgIGJmW3FpKzNdPShqPHRsKT9hcFtqXToyNTU7ICB9XG5cdFx0fVxuXHRcdGlmKGRlcHRoPT0yKSBmb3IodmFyIHk9MDsgeTxoOyB5KyspIHsgIHZhciBzMCA9IHkqYnBsLCB0MCA9IHkqdztcblx0XHRcdGZvcih2YXIgaT0wOyBpPHc7IGkrKykgeyB2YXIgcWk9KHQwK2kpPDwyLCBqPSgoZGF0YVtzMCsoaT4+MildPj4oNi0oKGkmMyk8PDEpKSkmIDMpLCBjaj0zKmo7ICBiZltxaV09cFtjal07ICBiZltxaSsxXT1wW2NqKzFdOyAgYmZbcWkrMl09cFtjaisyXTsgIGJmW3FpKzNdPShqPHRsKT9hcFtqXToyNTU7ICB9XG5cdFx0fVxuXHRcdGlmKGRlcHRoPT00KSBmb3IodmFyIHk9MDsgeTxoOyB5KyspIHsgIHZhciBzMCA9IHkqYnBsLCB0MCA9IHkqdztcblx0XHRcdGZvcih2YXIgaT0wOyBpPHc7IGkrKykgeyB2YXIgcWk9KHQwK2kpPDwyLCBqPSgoZGF0YVtzMCsoaT4+MSldPj4oNC0oKGkmMSk8PDIpKSkmMTUpLCBjaj0zKmo7ICBiZltxaV09cFtjal07ICBiZltxaSsxXT1wW2NqKzFdOyAgYmZbcWkrMl09cFtjaisyXTsgIGJmW3FpKzNdPShqPHRsKT9hcFtqXToyNTU7ICB9XG5cdFx0fVxuXHRcdGlmKGRlcHRoPT04KSBmb3IodmFyIGk9MDsgaTxhcmVhOyBpKysgKSB7ICB2YXIgcWk9aTw8Miwgaj1kYXRhW2ldICAgICAgICAgICAgICAgICAgICAgICwgY2o9MypqOyAgYmZbcWldPXBbY2pdOyAgYmZbcWkrMV09cFtjaisxXTsgIGJmW3FpKzJdPXBbY2orMl07ICBiZltxaSszXT0oajx0bCk/YXBbal06MjU1OyAgfVxuXHR9XG5cdGVsc2UgaWYoY3R5cGU9PTQpIHtcdC8vIGdyYXkgKyBhbHBoYVxuXHRcdGlmKGRlcHRoPT0gOCkgIGZvcih2YXIgaT0wOyBpPGFyZWE7IGkrKykgeyAgdmFyIHFpPWk8PDIsIGRpPWk8PDEsIGdyPWRhdGFbZGldOyAgYmZbcWldPWdyOyAgYmZbcWkrMV09Z3I7ICBiZltxaSsyXT1ncjsgIGJmW3FpKzNdPWRhdGFbZGkrMV07ICB9XG5cdFx0aWYoZGVwdGg9PTE2KSAgZm9yKHZhciBpPTA7IGk8YXJlYTsgaSsrKSB7ICB2YXIgcWk9aTw8MiwgZGk9aTw8MiwgZ3I9ZGF0YVtkaV07ICBiZltxaV09Z3I7ICBiZltxaSsxXT1ncjsgIGJmW3FpKzJdPWdyOyAgYmZbcWkrM109ZGF0YVtkaSsyXTsgIH1cblx0fVxuXHRlbHNlIGlmKGN0eXBlPT0wKSB7XHQvLyBncmF5XG5cdFx0dmFyIHRyID0gb3V0LnRhYnNbXCJ0Uk5TXCJdID8gb3V0LnRhYnNbXCJ0Uk5TXCJdIDogLTE7XG5cdFx0Zm9yKHZhciB5PTA7IHk8aDsgeSsrKSB7XG5cdFx0XHR2YXIgb2ZmID0geSpicGwsIHRvID0geSp3O1xuXHRcdFx0aWYgICAgIChkZXB0aD09IDEpIGZvcih2YXIgeD0wOyB4PHc7IHgrKykgeyAgdmFyIGdyPTI1NSooKGRhdGFbb2ZmKyh4Pj4+MyldPj4+KDcgLSgoeCY3KSAgICkpKSYgMSksIGFsPShncj09dHIqMjU1KT8wOjI1NTsgIGJmMzJbdG8reF09KGFsPDwyNCl8KGdyPDwxNil8KGdyPDw4KXxncjsgIH1cblx0XHRcdGVsc2UgaWYoZGVwdGg9PSAyKSBmb3IodmFyIHg9MDsgeDx3OyB4KyspIHsgIHZhciBncj0gODUqKChkYXRhW29mZisoeD4+PjIpXT4+Pig2IC0oKHgmMyk8PDEpKSkmIDMpLCBhbD0oZ3I9PXRyKiA4NSk/MDoyNTU7ICBiZjMyW3RvK3hdPShhbDw8MjQpfChncjw8MTYpfChncjw8OCl8Z3I7ICB9XG5cdFx0XHRlbHNlIGlmKGRlcHRoPT0gNCkgZm9yKHZhciB4PTA7IHg8dzsgeCsrKSB7ICB2YXIgZ3I9IDE3KigoZGF0YVtvZmYrKHg+Pj4xKV0+Pj4oNCAtKCh4JjEpPDwyKSkpJjE1KSwgYWw9KGdyPT10ciogMTcpPzA6MjU1OyAgYmYzMlt0byt4XT0oYWw8PDI0KXwoZ3I8PDE2KXwoZ3I8PDgpfGdyOyAgfVxuXHRcdFx0ZWxzZSBpZihkZXB0aD09IDgpIGZvcih2YXIgeD0wOyB4PHc7IHgrKykgeyAgdmFyIGdyPWRhdGFbb2ZmKyAgICAgeF0sIGFsPShnciAgICAgICAgICAgICAgICAgPT10cik/MDoyNTU7ICBiZjMyW3RvK3hdPShhbDw8MjQpfChncjw8MTYpfChncjw8OCl8Z3I7ICB9XG5cdFx0XHRlbHNlIGlmKGRlcHRoPT0xNikgZm9yKHZhciB4PTA7IHg8dzsgeCsrKSB7ICB2YXIgZ3I9ZGF0YVtvZmYrKHg8PDEpXSwgYWw9KHJzKGRhdGEsb2ZmKyh4PDxpKSk9PXRyKT8wOjI1NTsgIGJmMzJbdG8reF09KGFsPDwyNCl8KGdyPDwxNil8KGdyPDw4KXxncjsgIH1cblx0XHR9XG5cdH1cblx0Ly9jb25zb2xlLmxvZyhEYXRlLm5vdygpLXRpbWUpO1xuXHRyZXR1cm4gYmY7XG59XG5cblxuXG5VUE5HLmRlY29kZSA9IGZ1bmN0aW9uKGJ1ZmYpXG57XG5cdHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYnVmZiksIG9mZnNldCA9IDgsIGJpbiA9IFVQTkcuX2JpbiwgclVzID0gYmluLnJlYWRVc2hvcnQsIHJVaSA9IGJpbi5yZWFkVWludDtcblx0dmFyIG91dCA9IHt0YWJzOnt9LCBmcmFtZXM6W119O1xuXHR2YXIgZGQgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCksIGRvZmYgPSAwO1x0IC8vIHB1dCBhbGwgSURBVCBkYXRhIGludG8gaXRcblx0dmFyIGZkLCBmb2ZmID0gMDtcdC8vIGZyYW1lc1xuXHRcblx0dmFyIG1nY2sgPSBbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV07XG5cdGZvcih2YXIgaT0wOyBpPDg7IGkrKykgaWYoZGF0YVtpXSE9bWdja1tpXSkgdGhyb3cgXCJUaGUgaW5wdXQgaXMgbm90IGEgUE5HIGZpbGUhXCI7XG5cblx0d2hpbGUob2Zmc2V0PGRhdGEubGVuZ3RoKVxuXHR7XG5cdFx0dmFyIGxlbiAgPSBiaW4ucmVhZFVpbnQoZGF0YSwgb2Zmc2V0KTsgIG9mZnNldCArPSA0O1xuXHRcdHZhciB0eXBlID0gYmluLnJlYWRBU0NJSShkYXRhLCBvZmZzZXQsIDQpOyAgb2Zmc2V0ICs9IDQ7XG5cdFx0Ly9jb25zb2xlLmxvZyh0eXBlLGxlbik7XG5cdFx0XG5cdFx0aWYgICAgICh0eXBlPT1cIklIRFJcIikgIHsgIFVQTkcuZGVjb2RlLl9JSERSKGRhdGEsIG9mZnNldCwgb3V0KTsgIH1cblx0XHRlbHNlIGlmKHR5cGU9PVwiSURBVFwiKSB7XG5cdFx0XHRmb3IodmFyIGk9MDsgaTxsZW47IGkrKykgZGRbZG9mZitpXSA9IGRhdGFbb2Zmc2V0K2ldO1xuXHRcdFx0ZG9mZiArPSBsZW47XG5cdFx0fVxuXHRcdGVsc2UgaWYodHlwZT09XCJhY1RMXCIpICB7XG5cdFx0XHRvdXQudGFic1t0eXBlXSA9IHsgIG51bV9mcmFtZXM6clVpKGRhdGEsIG9mZnNldCksIG51bV9wbGF5czpyVWkoZGF0YSwgb2Zmc2V0KzQpICB9O1xuXHRcdFx0ZmQgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYodHlwZT09XCJmY1RMXCIpICB7XG5cdFx0XHRpZihmb2ZmIT0wKSB7ICB2YXIgZnIgPSBvdXQuZnJhbWVzW291dC5mcmFtZXMubGVuZ3RoLTFdO1xuXHRcdFx0XHRmci5kYXRhID0gVVBORy5kZWNvZGUuX2RlY29tcHJlc3Mob3V0LCBmZC5zbGljZSgwLGZvZmYpLCBmci5yZWN0LndpZHRoLCBmci5yZWN0LmhlaWdodCk7ICBmb2ZmPTA7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcmN0ID0ge3g6clVpKGRhdGEsIG9mZnNldCsxMikseTpyVWkoZGF0YSwgb2Zmc2V0KzE2KSx3aWR0aDpyVWkoZGF0YSwgb2Zmc2V0KzQpLGhlaWdodDpyVWkoZGF0YSwgb2Zmc2V0KzgpfTtcblx0XHRcdHZhciBkZWwgPSByVXMoZGF0YSwgb2Zmc2V0KzIyKTsgIGRlbCA9IHJVcyhkYXRhLCBvZmZzZXQrMjApIC8gKGRlbD09MD8xMDA6ZGVsKTtcblx0XHRcdHZhciBmcm0gPSB7cmVjdDpyY3QsIGRlbGF5Ok1hdGgucm91bmQoZGVsKjEwMDApLCBkaXNwb3NlOmRhdGFbb2Zmc2V0KzI0XSwgYmxlbmQ6ZGF0YVtvZmZzZXQrMjVdfTtcblx0XHRcdC8vY29uc29sZS5sb2coZnJtKTtcblx0XHRcdG91dC5mcmFtZXMucHVzaChmcm0pO1xuXHRcdH1cblx0XHRlbHNlIGlmKHR5cGU9PVwiZmRBVFwiKSB7XG5cdFx0XHRmb3IodmFyIGk9MDsgaTxsZW4tNDsgaSsrKSBmZFtmb2ZmK2ldID0gZGF0YVtvZmZzZXQraSs0XTtcblx0XHRcdGZvZmYgKz0gbGVuLTQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYodHlwZT09XCJwSFlzXCIpIHtcblx0XHRcdG91dC50YWJzW3R5cGVdID0gW2Jpbi5yZWFkVWludChkYXRhLCBvZmZzZXQpLCBiaW4ucmVhZFVpbnQoZGF0YSwgb2Zmc2V0KzQpLCBkYXRhW29mZnNldCs4XV07XG5cdFx0fVxuXHRcdGVsc2UgaWYodHlwZT09XCJjSFJNXCIpIHtcblx0XHRcdG91dC50YWJzW3R5cGVdID0gW107XG5cdFx0XHRmb3IodmFyIGk9MDsgaTw4OyBpKyspIG91dC50YWJzW3R5cGVdLnB1c2goYmluLnJlYWRVaW50KGRhdGEsIG9mZnNldCtpKjQpKTtcblx0XHR9XG5cdFx0ZWxzZSBpZih0eXBlPT1cInRFWHRcIikge1xuXHRcdFx0aWYob3V0LnRhYnNbdHlwZV09PW51bGwpIG91dC50YWJzW3R5cGVdID0ge307XG5cdFx0XHR2YXIgbnogPSBiaW4ubmV4dFplcm8oZGF0YSwgb2Zmc2V0KTtcblx0XHRcdHZhciBrZXl3ID0gYmluLnJlYWRBU0NJSShkYXRhLCBvZmZzZXQsIG56LW9mZnNldCk7XG5cdFx0XHR2YXIgdGV4dCA9IGJpbi5yZWFkQVNDSUkoZGF0YSwgbnorMSwgb2Zmc2V0K2xlbi1uei0xKTtcblx0XHRcdG91dC50YWJzW3R5cGVdW2tleXddID0gdGV4dDtcblx0XHR9XG5cdFx0ZWxzZSBpZih0eXBlPT1cImlUWHRcIikge1xuXHRcdFx0aWYob3V0LnRhYnNbdHlwZV09PW51bGwpIG91dC50YWJzW3R5cGVdID0ge307XG5cdFx0XHR2YXIgbnogPSAwLCBvZmYgPSBvZmZzZXQ7XG5cdFx0XHRueiA9IGJpbi5uZXh0WmVybyhkYXRhLCBvZmYpO1xuXHRcdFx0dmFyIGtleXcgPSBiaW4ucmVhZEFTQ0lJKGRhdGEsIG9mZiwgbnotb2ZmKTsgIG9mZiA9IG56ICsgMTtcblx0XHRcdHZhciBjZmxhZyA9IGRhdGFbb2ZmXSwgY21ldGggPSBkYXRhW29mZisxXTsgIG9mZis9Mjtcblx0XHRcdG56ID0gYmluLm5leHRaZXJvKGRhdGEsIG9mZik7XG5cdFx0XHR2YXIgbHRhZyA9IGJpbi5yZWFkQVNDSUkoZGF0YSwgb2ZmLCBuei1vZmYpOyAgb2ZmID0gbnogKyAxO1xuXHRcdFx0bnogPSBiaW4ubmV4dFplcm8oZGF0YSwgb2ZmKTtcblx0XHRcdHZhciB0a2V5dyA9IGJpbi5yZWFkVVRGOChkYXRhLCBvZmYsIG56LW9mZik7ICBvZmYgPSBueiArIDE7XG5cdFx0XHR2YXIgdGV4dCAgPSBiaW4ucmVhZFVURjgoZGF0YSwgb2ZmLCBsZW4tKG9mZi1vZmZzZXQpKTtcblx0XHRcdG91dC50YWJzW3R5cGVdW2tleXddID0gdGV4dDtcblx0XHR9XG5cdFx0ZWxzZSBpZih0eXBlPT1cIlBMVEVcIikge1xuXHRcdFx0b3V0LnRhYnNbdHlwZV0gPSBiaW4ucmVhZEJ5dGVzKGRhdGEsIG9mZnNldCwgbGVuKTtcblx0XHR9XG5cdFx0ZWxzZSBpZih0eXBlPT1cImhJU1RcIikge1xuXHRcdFx0dmFyIHBsID0gb3V0LnRhYnNbXCJQTFRFXCJdLmxlbmd0aC8zO1xuXHRcdFx0b3V0LnRhYnNbdHlwZV0gPSBbXTsgIGZvcih2YXIgaT0wOyBpPHBsOyBpKyspIG91dC50YWJzW3R5cGVdLnB1c2goclVzKGRhdGEsIG9mZnNldCtpKjIpKTtcblx0XHR9XG5cdFx0ZWxzZSBpZih0eXBlPT1cInRSTlNcIikge1xuXHRcdFx0aWYgICAgIChvdXQuY3R5cGU9PTMpIG91dC50YWJzW3R5cGVdID0gYmluLnJlYWRCeXRlcyhkYXRhLCBvZmZzZXQsIGxlbik7XG5cdFx0XHRlbHNlIGlmKG91dC5jdHlwZT09MCkgb3V0LnRhYnNbdHlwZV0gPSByVXMoZGF0YSwgb2Zmc2V0KTtcblx0XHRcdGVsc2UgaWYob3V0LmN0eXBlPT0yKSBvdXQudGFic1t0eXBlXSA9IFsgclVzKGRhdGEsb2Zmc2V0KSxyVXMoZGF0YSxvZmZzZXQrMiksclVzKGRhdGEsb2Zmc2V0KzQpIF07XG5cdFx0XHQvL2Vsc2UgY29uc29sZS5sb2coXCJ0Uk5TIGZvciB1bnN1cHBvcnRlZCBjb2xvciB0eXBlXCIsb3V0LmN0eXBlLCBsZW4pO1xuXHRcdH1cblx0XHRlbHNlIGlmKHR5cGU9PVwiZ0FNQVwiKSBvdXQudGFic1t0eXBlXSA9IGJpbi5yZWFkVWludChkYXRhLCBvZmZzZXQpLzEwMDAwMDtcblx0XHRlbHNlIGlmKHR5cGU9PVwic1JHQlwiKSBvdXQudGFic1t0eXBlXSA9IGRhdGFbb2Zmc2V0XTtcblx0XHRlbHNlIGlmKHR5cGU9PVwiYktHRFwiKVxuXHRcdHtcblx0XHRcdGlmICAgICAob3V0LmN0eXBlPT0wIHx8IG91dC5jdHlwZT09NCkgb3V0LnRhYnNbdHlwZV0gPSBbclVzKGRhdGEsIG9mZnNldCldO1xuXHRcdFx0ZWxzZSBpZihvdXQuY3R5cGU9PTIgfHwgb3V0LmN0eXBlPT02KSBvdXQudGFic1t0eXBlXSA9IFtyVXMoZGF0YSwgb2Zmc2V0KSwgclVzKGRhdGEsIG9mZnNldCsyKSwgclVzKGRhdGEsIG9mZnNldCs0KV07XG5cdFx0XHRlbHNlIGlmKG91dC5jdHlwZT09Mykgb3V0LnRhYnNbdHlwZV0gPSBkYXRhW29mZnNldF07XG5cdFx0fVxuXHRcdGVsc2UgaWYodHlwZT09XCJJRU5EXCIpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHQvL2Vsc2UgeyAgbG9nKFwidW5rbm93biBjaHVuayB0eXBlXCIsIHR5cGUsIGxlbik7ICB9XG5cdFx0b2Zmc2V0ICs9IGxlbjtcblx0XHR2YXIgY3JjID0gYmluLnJlYWRVaW50KGRhdGEsIG9mZnNldCk7ICBvZmZzZXQgKz0gNDtcblx0fVxuXHRpZihmb2ZmIT0wKSB7ICB2YXIgZnIgPSBvdXQuZnJhbWVzW291dC5mcmFtZXMubGVuZ3RoLTFdO1xuXHRcdGZyLmRhdGEgPSBVUE5HLmRlY29kZS5fZGVjb21wcmVzcyhvdXQsIGZkLnNsaWNlKDAsZm9mZiksIGZyLnJlY3Qud2lkdGgsIGZyLnJlY3QuaGVpZ2h0KTsgIGZvZmY9MDtcblx0fVx0XG5cdG91dC5kYXRhID0gVVBORy5kZWNvZGUuX2RlY29tcHJlc3Mob3V0LCBkZCwgb3V0LndpZHRoLCBvdXQuaGVpZ2h0KTtcblx0XG5cdGRlbGV0ZSBvdXQuY29tcHJlc3M7ICBkZWxldGUgb3V0LmludGVybGFjZTsgIGRlbGV0ZSBvdXQuZmlsdGVyO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5VUE5HLmRlY29kZS5fZGVjb21wcmVzcyA9IGZ1bmN0aW9uKG91dCwgZGQsIHcsIGgpIHtcblx0dmFyIHRpbWUgPSBEYXRlLm5vdygpO1xuXHR2YXIgYnBwID0gVVBORy5kZWNvZGUuX2dldEJQUChvdXQpLCBicGwgPSBNYXRoLmNlaWwodypicHAvOCksIGJ1ZmYgPSBuZXcgVWludDhBcnJheSgoYnBsKzErb3V0LmludGVybGFjZSkqaCk7XG5cdGRkID0gVVBORy5kZWNvZGUuX2luZmxhdGUoZGQsYnVmZik7XG5cdC8vY29uc29sZS5sb2coZGQubGVuZ3RoLCBidWZmLmxlbmd0aCk7XG5cdC8vY29uc29sZS5sb2coRGF0ZS5ub3coKS10aW1lKTtcblxuXHR2YXIgdGltZT1EYXRlLm5vdygpO1xuXHRpZiAgICAgKG91dC5pbnRlcmxhY2U9PTApIGRkID0gVVBORy5kZWNvZGUuX2ZpbHRlclplcm8oZGQsIG91dCwgMCwgdywgaCk7XG5cdGVsc2UgaWYob3V0LmludGVybGFjZT09MSkgZGQgPSBVUE5HLmRlY29kZS5fcmVhZEludGVybGFjZShkZCwgb3V0KTtcblx0Ly9jb25zb2xlLmxvZyhEYXRlLm5vdygpLXRpbWUpO1xuXHRyZXR1cm4gZGQ7XG59XG5cblVQTkcuZGVjb2RlLl9pbmZsYXRlID0gZnVuY3Rpb24oZGF0YSwgYnVmZikgeyAgdmFyIG91dD1VUE5HW1wiaW5mbGF0ZVJhd1wiXShuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgMixkYXRhLmxlbmd0aC02KSxidWZmKTsgIHJldHVybiBvdXQ7ICB9XG5VUE5HLmluZmxhdGVSYXc9ZnVuY3Rpb24oKXt2YXIgSD17fTtILkg9e307SC5ILk49ZnVuY3Rpb24oTixXKXt2YXIgUj1VaW50OEFycmF5LGk9MCxtPTAsSj0wLGg9MCxRPTAsWD0wLHU9MCx3PTAsZD0wLHYsQztcbmlmKE5bMF09PTMmJk5bMV09PTApcmV0dXJuIFc/VzpuZXcgUigwKTt2YXIgVj1ILkgsbj1WLmIsQT1WLmUsbD1WLlIsTT1WLm4sST1WLkEsZT1WLlosYj1WLm0sWj1XPT1udWxsO1xuaWYoWilXPW5ldyBSKE4ubGVuZ3RoPj4+Mjw8Myk7d2hpbGUoaT09MCl7aT1uKE4sZCwxKTttPW4oTixkKzEsMik7ZCs9MztpZihtPT0wKXtpZigoZCY3KSE9MClkKz04LShkJjcpO1xudmFyIEQ9KGQ+Pj4zKSs0LHE9TltELTRdfE5bRC0zXTw8ODtpZihaKVc9SC5ILlcoVyx3K3EpO1cuc2V0KG5ldyBSKE4uYnVmZmVyLE4uYnl0ZU9mZnNldCtELHEpLHcpO2Q9RCtxPDwzO1xudys9cTtjb250aW51ZX1pZihaKVc9SC5ILlcoVyx3KygxPDwxNykpO2lmKG09PTEpe3Y9Yi5KO0M9Yi5oO1g9KDE8PDkpLTE7dT0oMTw8NSktMX1pZihtPT0yKXtKPUEoTixkLDUpKzI1Nztcbmg9QShOLGQrNSw1KSsxO1E9QShOLGQrMTAsNCkrNDtkKz0xNDt2YXIgRT1kLGo9MTtmb3IodmFyIGM9MDtjPDM4O2MrPTIpe2IuUVtjXT0wO2IuUVtjKzFdPTB9Zm9yKHZhciBjPTA7XG5jPFE7YysrKXt2YXIgSz1BKE4sZCtjKjMsMyk7Yi5RWyhiLlhbY108PDEpKzFdPUs7aWYoSz5qKWo9S31kKz0zKlE7TShiLlEsaik7SShiLlEsaixiLnUpO3Y9Yi53O0M9Yi5kO1xuZD1sKGIudSwoMTw8aiktMSxKK2gsTixkLGIudik7dmFyIHI9Vi5WKGIudiwwLEosYi5DKTtYPSgxPDxyKS0xO3ZhciBTPVYuVihiLnYsSixoLGIuRCk7dT0oMTw8UyktMTtNKGIuQyxyKTtcbkkoYi5DLHIsdik7TShiLkQsUyk7SShiLkQsUyxDKX13aGlsZSghMCl7dmFyIFQ9dltlKE4sZCkmWF07ZCs9VCYxNTt2YXIgcD1UPj4+NDtpZihwPj4+OD09MCl7V1t3KytdPXB9ZWxzZSBpZihwPT0yNTYpe2JyZWFrfWVsc2V7dmFyIHo9dytwLTI1NDtcbmlmKHA+MjY0KXt2YXIgXz1iLnFbcC0yNTddO3o9dysoXz4+PjMpK0EoTixkLF8mNyk7ZCs9XyY3fXZhciAkPUNbZShOLGQpJnVdO2QrPSQmMTU7dmFyIHM9JD4+PjQsWT1iLmNbc10sYT0oWT4+PjQpK24oTixkLFkmMTUpO1xuZCs9WSYxNTt3aGlsZSh3PHope1dbd109V1t3KystYV07V1t3XT1XW3crKy1hXTtXW3ddPVdbdysrLWFdO1dbd109V1t3KystYV19dz16fX19cmV0dXJuIFcubGVuZ3RoPT13P1c6Vy5zbGljZSgwLHcpfTtcbkguSC5XPWZ1bmN0aW9uKE4sVyl7dmFyIFI9Ti5sZW5ndGg7aWYoVzw9UilyZXR1cm4gTjt2YXIgVj1uZXcgVWludDhBcnJheShSPDwxKTtWLnNldChOLDApO3JldHVybiBWfTtcbkguSC5SPWZ1bmN0aW9uKE4sVyxSLFYsbixBKXt2YXIgbD1ILkguZSxNPUguSC5aLEk9MDt3aGlsZShJPFIpe3ZhciBlPU5bTShWLG4pJlddO24rPWUmMTU7dmFyIGI9ZT4+PjQ7XG5pZihiPD0xNSl7QVtJXT1iO0krK31lbHNle3ZhciBaPTAsbT0wO2lmKGI9PTE2KXttPTMrbChWLG4sMik7bis9MjtaPUFbSS0xXX1lbHNlIGlmKGI9PTE3KXttPTMrbChWLG4sMyk7XG5uKz0zfWVsc2UgaWYoYj09MTgpe209MTErbChWLG4sNyk7bis9N312YXIgSj1JK207d2hpbGUoSTxKKXtBW0ldPVo7SSsrfX19cmV0dXJuIG59O0guSC5WPWZ1bmN0aW9uKE4sVyxSLFYpe3ZhciBuPTAsQT0wLGw9Vi5sZW5ndGg+Pj4xO1xud2hpbGUoQTxSKXt2YXIgTT1OW0ErV107VltBPDwxXT0wO1ZbKEE8PDEpKzFdPU07aWYoTT5uKW49TTtBKyt9d2hpbGUoQTxsKXtWW0E8PDFdPTA7VlsoQTw8MSkrMV09MDtBKyt9cmV0dXJuIG59O1xuSC5ILm49ZnVuY3Rpb24oTixXKXt2YXIgUj1ILkgubSxWPU4ubGVuZ3RoLG4sQSxsLE0sSSxlPVIuajtmb3IodmFyIE09MDtNPD1XO00rKyllW01dPTA7Zm9yKE09MTtNPFY7TSs9MillW05bTV1dKys7XG52YXIgYj1SLks7bj0wO2VbMF09MDtmb3IoQT0xO0E8PVc7QSsrKXtuPW4rZVtBLTFdPDwxO2JbQV09bn1mb3IobD0wO2w8VjtsKz0yKXtJPU5bbCsxXTtpZihJIT0wKXtOW2xdPWJbSV07XG5iW0ldKyt9fX07SC5ILkE9ZnVuY3Rpb24oTixXLFIpe3ZhciBWPU4ubGVuZ3RoLG49SC5ILm0sQT1uLnI7Zm9yKHZhciBsPTA7bDxWO2wrPTIpaWYoTltsKzFdIT0wKXt2YXIgTT1sPj4xLEk9TltsKzFdLGU9TTw8NHxJLGI9Vy1JLFo9TltsXTw8YixtPVorKDE8PGIpO1xud2hpbGUoWiE9bSl7dmFyIEo9QVtaXT4+PjE1LVc7UltKXT1lO1orK319fTtILkgubD1mdW5jdGlvbihOLFcpe3ZhciBSPUguSC5tLnIsVj0xNS1XO2Zvcih2YXIgbj0wO248Ti5sZW5ndGg7XG5uKz0yKXt2YXIgQT1OW25dPDxXLU5bbisxXTtOW25dPVJbQV0+Pj5WfX07SC5ILk09ZnVuY3Rpb24oTixXLFIpe1I9Ujw8KFcmNyk7dmFyIFY9Vz4+PjM7TltWXXw9UjtOW1YrMV18PVI+Pj44fTtcbkguSC5JPWZ1bmN0aW9uKE4sVyxSKXtSPVI8PChXJjcpO3ZhciBWPVc+Pj4zO05bVl18PVI7TltWKzFdfD1SPj4+ODtOW1YrMl18PVI+Pj4xNn07SC5ILmU9ZnVuY3Rpb24oTixXLFIpe3JldHVybihOW1c+Pj4zXXxOWyhXPj4+MykrMV08PDgpPj4+KFcmNykmKDE8PFIpLTF9O1xuSC5ILmI9ZnVuY3Rpb24oTixXLFIpe3JldHVybihOW1c+Pj4zXXxOWyhXPj4+MykrMV08PDh8TlsoVz4+PjMpKzJdPDwxNik+Pj4oVyY3KSYoMTw8UiktMX07SC5ILlo9ZnVuY3Rpb24oTixXKXtyZXR1cm4oTltXPj4+M118TlsoVz4+PjMpKzFdPDw4fE5bKFc+Pj4zKSsyXTw8MTYpPj4+KFcmNyl9O1xuSC5ILmk9ZnVuY3Rpb24oTixXKXtyZXR1cm4oTltXPj4+M118TlsoVz4+PjMpKzFdPDw4fE5bKFc+Pj4zKSsyXTw8MTZ8TlsoVz4+PjMpKzNdPDwyNCk+Pj4oVyY3KX07SC5ILm09ZnVuY3Rpb24oKXt2YXIgTj1VaW50MTZBcnJheSxXPVVpbnQzMkFycmF5O1xucmV0dXJue0s6bmV3IE4oMTYpLGo6bmV3IE4oMTYpLFg6WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLFM6WzMsNCw1LDYsNyw4LDksMTAsMTEsMTMsMTUsMTcsMTksMjMsMjcsMzEsMzUsNDMsNTEsNTksNjcsODMsOTksMTE1LDEzMSwxNjMsMTk1LDIyNywyNTgsOTk5LDk5OSw5OTldLFQ6WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMCwwLDAsMF0scTpuZXcgTigzMikscDpbMSwyLDMsNCw1LDcsOSwxMywxNywyNSwzMyw0OSw2NSw5NywxMjksMTkzLDI1NywzODUsNTEzLDc2OSwxMDI1LDE1MzcsMjA0OSwzMDczLDQwOTcsNjE0NSw4MTkzLDEyMjg5LDE2Mzg1LDI0NTc3LDY1NTM1LDY1NTM1XSx6OlswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzLDAsMF0sYzpuZXcgVygzMiksSjpuZXcgTig1MTIpLF86W10saDpuZXcgTigzMiksJDpbXSx3Om5ldyBOKDMyNzY4KSxDOltdLHY6W10sZDpuZXcgTigzMjc2OCksRDpbXSx1Om5ldyBOKDUxMiksUTpbXSxyOm5ldyBOKDE8PDE1KSxzOm5ldyBXKDI4NiksWTpuZXcgVygzMCksYTpuZXcgVygxOSksdDpuZXcgVygxNWUzKSxrOm5ldyBOKDE8PDE2KSxnOm5ldyBOKDE8PDE1KX19KCk7XG4oZnVuY3Rpb24oKXt2YXIgTj1ILkgubSxXPTE8PDE1O2Zvcih2YXIgUj0wO1I8VztSKyspe3ZhciBWPVI7Vj0oViYyODYzMzExNTMwKT4+PjF8KFYmMTQzMTY1NTc2NSk8PDE7XG5WPShWJjM0MzU5NzM4MzYpPj4+MnwoViY4NTg5OTM0NTkpPDwyO1Y9KFYmNDA0MjMyMjE2MCk+Pj40fChWJjI1MjY0NTEzNSk8PDQ7Vj0oViY0Mjc4MjU1MzYwKT4+Pjh8KFYmMTY3MTE5MzUpPDw4O1xuTi5yW1JdPShWPj4+MTZ8Vjw8MTYpPj4+MTd9ZnVuY3Rpb24gbihBLGwsTSl7d2hpbGUobC0tIT0wKUEucHVzaCgwLE0pfWZvcih2YXIgUj0wO1I8MzI7UisrKXtOLnFbUl09Ti5TW1JdPDwzfE4uVFtSXTtcbk4uY1tSXT1OLnBbUl08PDR8Ti56W1JdfW4oTi5fLDE0NCw4KTtuKE4uXywyNTUtMTQzLDkpO24oTi5fLDI3OS0yNTUsNyk7bihOLl8sMjg3LTI3OSw4KTtILkgubihOLl8sOSk7XG5ILkguQShOLl8sOSxOLkopO0guSC5sKE4uXyw5KTtuKE4uJCwzMiw1KTtILkgubihOLiQsNSk7SC5ILkEoTi4kLDUsTi5oKTtILkgubChOLiQsNSk7bihOLlEsMTksMCk7bihOLkMsMjg2LDApO1xubihOLkQsMzAsMCk7bihOLnYsMzIwLDApfSgpKTtyZXR1cm4gSC5ILk59KClcblxuXG5VUE5HLmRlY29kZS5fcmVhZEludGVybGFjZSA9IGZ1bmN0aW9uKGRhdGEsIG91dClcbntcblx0dmFyIHcgPSBvdXQud2lkdGgsIGggPSBvdXQuaGVpZ2h0O1xuXHR2YXIgYnBwID0gVVBORy5kZWNvZGUuX2dldEJQUChvdXQpLCBjYnBwID0gYnBwPj4zLCBicGwgPSBNYXRoLmNlaWwodypicHAvOCk7XG5cdHZhciBpbWcgPSBuZXcgVWludDhBcnJheSggaCAqIGJwbCApO1xuXHR2YXIgZGkgPSAwO1xuXG5cdHZhciBzdGFydGluZ19yb3cgID0gWyAwLCAwLCA0LCAwLCAyLCAwLCAxIF07XG5cdHZhciBzdGFydGluZ19jb2wgID0gWyAwLCA0LCAwLCAyLCAwLCAxLCAwIF07XG5cdHZhciByb3dfaW5jcmVtZW50ID0gWyA4LCA4LCA4LCA0LCA0LCAyLCAyIF07XG5cdHZhciBjb2xfaW5jcmVtZW50ID0gWyA4LCA4LCA0LCA0LCAyLCAyLCAxIF07XG5cblx0dmFyIHBhc3M9MDtcblx0d2hpbGUocGFzczw3KVxuXHR7XG5cdFx0dmFyIHJpID0gcm93X2luY3JlbWVudFtwYXNzXSwgY2kgPSBjb2xfaW5jcmVtZW50W3Bhc3NdO1xuXHRcdHZhciBzdyA9IDAsIHNoID0gMDtcblx0XHR2YXIgY3IgPSBzdGFydGluZ19yb3dbcGFzc107ICB3aGlsZShjcjxoKSB7ICBjcis9cmk7ICBzaCsrOyAgfVxuXHRcdHZhciBjYyA9IHN0YXJ0aW5nX2NvbFtwYXNzXTsgIHdoaWxlKGNjPHcpIHsgIGNjKz1jaTsgIHN3Kys7ICB9XG5cdFx0dmFyIGJwbGwgPSBNYXRoLmNlaWwoc3cqYnBwLzgpO1xuXHRcdFVQTkcuZGVjb2RlLl9maWx0ZXJaZXJvKGRhdGEsIG91dCwgZGksIHN3LCBzaCk7XG5cblx0XHR2YXIgeT0wLCByb3cgPSBzdGFydGluZ19yb3dbcGFzc107XG5cdFx0d2hpbGUocm93PGgpXG5cdFx0e1xuXHRcdFx0dmFyIGNvbCA9IHN0YXJ0aW5nX2NvbFtwYXNzXTtcblx0XHRcdHZhciBjZGkgPSAoZGkreSpicGxsKTw8MztcblxuXHRcdFx0d2hpbGUoY29sPHcpXG5cdFx0XHR7XG5cdFx0XHRcdGlmKGJwcD09MSkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBkYXRhW2NkaT4+M107ICB2YWwgPSAodmFsPj4oNy0oY2RpJjcpKSkmMTtcblx0XHRcdFx0XHRpbWdbcm93KmJwbCArIChjb2w+PjMpXSB8PSAodmFsIDw8ICg3LSgoY29sJjcpPDwwKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGJwcD09Mikge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBkYXRhW2NkaT4+M107ICB2YWwgPSAodmFsPj4oNi0oY2RpJjcpKSkmMztcblx0XHRcdFx0XHRpbWdbcm93KmJwbCArIChjb2w+PjIpXSB8PSAodmFsIDw8ICg2LSgoY29sJjMpPDwxKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGJwcD09NCkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBkYXRhW2NkaT4+M107ICB2YWwgPSAodmFsPj4oNC0oY2RpJjcpKSkmMTU7XG5cdFx0XHRcdFx0aW1nW3JvdypicGwgKyAoY29sPj4xKV0gfD0gKHZhbCA8PCAoNC0oKGNvbCYxKTw8MikpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihicHA+PTgpIHtcblx0XHRcdFx0XHR2YXIgaWkgPSByb3cqYnBsK2NvbCpjYnBwO1xuXHRcdFx0XHRcdGZvcih2YXIgaj0wOyBqPGNicHA7IGorKykgaW1nW2lpK2pdID0gZGF0YVsoY2RpPj4zKStqXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjZGkrPWJwcDsgIGNvbCs9Y2k7XG5cdFx0XHR9XG5cdFx0XHR5Kys7ICByb3cgKz0gcmk7XG5cdFx0fVxuXHRcdGlmKHN3KnNoIT0wKSBkaSArPSBzaCAqICgxICsgYnBsbCk7XG5cdFx0cGFzcyA9IHBhc3MgKyAxO1xuXHR9XG5cdHJldHVybiBpbWc7XG59XG5cblVQTkcuZGVjb2RlLl9nZXRCUFAgPSBmdW5jdGlvbihvdXQpIHtcblx0dmFyIG5vYyA9IFsxLG51bGwsMywxLDIsbnVsbCw0XVtvdXQuY3R5cGVdO1xuXHRyZXR1cm4gbm9jICogb3V0LmRlcHRoO1xufVxuXG5VUE5HLmRlY29kZS5fZmlsdGVyWmVybyA9IGZ1bmN0aW9uKGRhdGEsIG91dCwgb2ZmLCB3LCBoKVxue1xuXHR2YXIgYnBwID0gVVBORy5kZWNvZGUuX2dldEJQUChvdXQpLCBicGwgPSBNYXRoLmNlaWwodypicHAvOCksIHBhZXRoID0gVVBORy5kZWNvZGUuX3BhZXRoO1xuXHRicHAgPSBNYXRoLmNlaWwoYnBwLzgpO1xuXHRcblx0dmFyIGk9MCwgZGk9MSwgdHlwZT1kYXRhW29mZl0sIHg9MDtcblx0XG5cdGlmKHR5cGU+MSkgZGF0YVtvZmZdPVswLDAsMV1bdHlwZS0yXTsgIFxuXHRpZih0eXBlPT0zKSBmb3IoeD1icHA7IHg8YnBsOyB4KyspIGRhdGFbeCsxXSA9IChkYXRhW3grMV0gKyAoZGF0YVt4KzEtYnBwXT4+PjEpICkmMjU1O1xuXG5cdGZvcih2YXIgeT0wOyB5PGg7IHkrKykgIHtcblx0XHRpID0gb2ZmK3kqYnBsOyBkaSA9IGkreSsxO1xuXHRcdHR5cGUgPSBkYXRhW2RpLTFdOyB4PTA7XG5cblx0XHRpZiAgICAgKHR5cGU9PTApICAgZm9yKDsgeDxicGw7IHgrKykgZGF0YVtpK3hdID0gZGF0YVtkaSt4XTtcblx0XHRlbHNlIGlmKHR5cGU9PTEpIHsgZm9yKDsgeDxicHA7IHgrKykgZGF0YVtpK3hdID0gZGF0YVtkaSt4XTtcblx0XHRcdFx0XHRcdCAgIGZvcig7IHg8YnBsOyB4KyspIGRhdGFbaSt4XSA9IChkYXRhW2RpK3hdICsgZGF0YVtpK3gtYnBwXSk7ICB9XG5cdFx0ZWxzZSBpZih0eXBlPT0yKSB7IGZvcig7IHg8YnBsOyB4KyspIGRhdGFbaSt4XSA9IChkYXRhW2RpK3hdICsgZGF0YVtpK3gtYnBsXSk7ICB9XG5cdFx0ZWxzZSBpZih0eXBlPT0zKSB7IGZvcig7IHg8YnBwOyB4KyspIGRhdGFbaSt4XSA9IChkYXRhW2RpK3hdICsgKCBkYXRhW2kreC1icGxdPj4+MSkpO1xuXHRcdFx0ICAgICAgICAgICAgICAgZm9yKDsgeDxicGw7IHgrKykgZGF0YVtpK3hdID0gKGRhdGFbZGkreF0gKyAoKGRhdGFbaSt4LWJwbF0rZGF0YVtpK3gtYnBwXSk+Pj4xKSApOyAgfVxuXHRcdGVsc2UgICAgICAgICAgICAgeyBmb3IoOyB4PGJwcDsgeCsrKSBkYXRhW2kreF0gPSAoZGF0YVtkaSt4XSArIHBhZXRoKDAsIGRhdGFbaSt4LWJwbF0sIDApKTtcblx0XHRcdFx0XHRcdCAgIGZvcig7IHg8YnBsOyB4KyspIGRhdGFbaSt4XSA9IChkYXRhW2RpK3hdICsgcGFldGgoZGF0YVtpK3gtYnBwXSwgZGF0YVtpK3gtYnBsXSwgZGF0YVtpK3gtYnBwLWJwbF0pICk7ICB9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cblVQTkcuZGVjb2RlLl9wYWV0aCA9IGZ1bmN0aW9uKGEsYixjKVxue1xuXHR2YXIgcCA9IGErYi1jLCBwYSA9IChwLWEpLCBwYiA9IChwLWIpLCBwYyA9IChwLWMpO1xuXHRpZiAocGEqcGEgPD0gcGIqcGIgJiYgcGEqcGEgPD0gcGMqcGMpICByZXR1cm4gYTtcblx0ZWxzZSBpZiAocGIqcGIgPD0gcGMqcGMpICByZXR1cm4gYjtcblx0cmV0dXJuIGM7XG59XG5cblVQTkcuZGVjb2RlLl9JSERSID0gZnVuY3Rpb24oZGF0YSwgb2Zmc2V0LCBvdXQpXG57XG5cdHZhciBiaW4gPSBVUE5HLl9iaW47XG5cdG91dC53aWR0aCAgPSBiaW4ucmVhZFVpbnQoZGF0YSwgb2Zmc2V0KTsgIG9mZnNldCArPSA0O1xuXHRvdXQuaGVpZ2h0ID0gYmluLnJlYWRVaW50KGRhdGEsIG9mZnNldCk7ICBvZmZzZXQgKz0gNDtcblx0b3V0LmRlcHRoICAgICA9IGRhdGFbb2Zmc2V0XTsgIG9mZnNldCsrO1xuXHRvdXQuY3R5cGUgICAgID0gZGF0YVtvZmZzZXRdOyAgb2Zmc2V0Kys7XG5cdG91dC5jb21wcmVzcyAgPSBkYXRhW29mZnNldF07ICBvZmZzZXQrKztcblx0b3V0LmZpbHRlciAgICA9IGRhdGFbb2Zmc2V0XTsgIG9mZnNldCsrO1xuXHRvdXQuaW50ZXJsYWNlID0gZGF0YVtvZmZzZXRdOyAgb2Zmc2V0Kys7XG59XG5cblVQTkcuX2JpbiA9IHtcblx0bmV4dFplcm8gICA6IGZ1bmN0aW9uKGRhdGEscCkgIHsgIHdoaWxlKGRhdGFbcF0hPTApIHArKzsgIHJldHVybiBwOyAgfSxcblx0cmVhZFVzaG9ydCA6IGZ1bmN0aW9uKGJ1ZmYscCkgIHsgIHJldHVybiAoYnVmZltwXTw8IDgpIHwgYnVmZltwKzFdOyAgfSxcblx0d3JpdGVVc2hvcnQ6IGZ1bmN0aW9uKGJ1ZmYscCxuKXsgIGJ1ZmZbcF0gPSAobj4+OCkmMjU1OyAgYnVmZltwKzFdID0gbiYyNTU7ICB9LFxuXHRyZWFkVWludCAgIDogZnVuY3Rpb24oYnVmZixwKSAgeyAgcmV0dXJuIChidWZmW3BdKigyNTYqMjU2KjI1NikpICsgKChidWZmW3ArMV08PDE2KSB8IChidWZmW3ArMl08PCA4KSB8IGJ1ZmZbcCszXSk7ICB9LFxuXHR3cml0ZVVpbnQgIDogZnVuY3Rpb24oYnVmZixwLG4peyAgYnVmZltwXT0obj4+MjQpJjI1NTsgIGJ1ZmZbcCsxXT0obj4+MTYpJjI1NTsgIGJ1ZmZbcCsyXT0obj4+OCkmMjU1OyAgYnVmZltwKzNdPW4mMjU1OyAgfSxcblx0cmVhZEFTQ0lJICA6IGZ1bmN0aW9uKGJ1ZmYscCxsKXsgIHZhciBzID0gXCJcIjsgIGZvcih2YXIgaT0wOyBpPGw7IGkrKykgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZmZbcCtpXSk7ICByZXR1cm4gczsgICAgfSxcblx0d3JpdGVBU0NJSSA6IGZ1bmN0aW9uKGRhdGEscCxzKXsgIGZvcih2YXIgaT0wOyBpPHMubGVuZ3RoOyBpKyspIGRhdGFbcCtpXSA9IHMuY2hhckNvZGVBdChpKTsgIH0sXG5cdHJlYWRCeXRlcyAgOiBmdW5jdGlvbihidWZmLHAsbCl7ICB2YXIgYXJyID0gW107ICAgZm9yKHZhciBpPTA7IGk8bDsgaSsrKSBhcnIucHVzaChidWZmW3AraV0pOyAgIHJldHVybiBhcnI7ICB9LFxuXHRwYWQgOiBmdW5jdGlvbihuKSB7IHJldHVybiBuLmxlbmd0aCA8IDIgPyBcIjBcIiArIG4gOiBuOyB9LFxuXHRyZWFkVVRGOCA6IGZ1bmN0aW9uKGJ1ZmYsIHAsIGwpIHtcblx0XHR2YXIgcyA9IFwiXCIsIG5zO1xuXHRcdGZvcih2YXIgaT0wOyBpPGw7IGkrKykgcyArPSBcIiVcIiArIFVQTkcuX2Jpbi5wYWQoYnVmZltwK2ldLnRvU3RyaW5nKDE2KSk7XG5cdFx0dHJ5IHsgIG5zID0gZGVjb2RlVVJJQ29tcG9uZW50KHMpOyB9XG5cdFx0Y2F0Y2goZSkgeyAgcmV0dXJuIFVQTkcuX2Jpbi5yZWFkQVNDSUkoYnVmZiwgcCwgbCk7ICB9XG5cdFx0cmV0dXJuICBucztcblx0fVxufVxuVVBORy5fY29weVRpbGUgPSBmdW5jdGlvbihzYiwgc3csIHNoLCB0YiwgdHcsIHRoLCB4b2ZmLCB5b2ZmLCBtb2RlKVxue1xuXHR2YXIgdyA9IE1hdGgubWluKHN3LHR3KSwgaCA9IE1hdGgubWluKHNoLHRoKTtcblx0dmFyIHNpPTAsIHRpPTA7XG5cdGZvcih2YXIgeT0wOyB5PGg7IHkrKylcblx0XHRmb3IodmFyIHg9MDsgeDx3OyB4KyspXG5cdFx0e1xuXHRcdFx0aWYoeG9mZj49MCAmJiB5b2ZmPj0wKSB7ICBzaSA9ICh5KnN3K3gpPDwyOyAgdGkgPSAoKCB5b2ZmK3kpKnR3K3hvZmYreCk8PDI7ICB9XG5cdFx0XHRlbHNlICAgICAgICAgICAgICAgICAgIHsgIHNpID0gKCgteW9mZit5KSpzdy14b2ZmK3gpPDwyOyAgdGkgPSAoeSp0dyt4KTw8MjsgIH1cblx0XHRcdFxuXHRcdFx0aWYgICAgIChtb2RlPT0wKSB7ICB0Ylt0aV0gPSBzYltzaV07ICB0Ylt0aSsxXSA9IHNiW3NpKzFdOyAgdGJbdGkrMl0gPSBzYltzaSsyXTsgIHRiW3RpKzNdID0gc2Jbc2krM107ICB9XG5cdFx0XHRlbHNlIGlmKG1vZGU9PTEpIHtcblx0XHRcdFx0dmFyIGZhID0gc2Jbc2krM10qKDEvMjU1KSwgZnI9c2Jbc2ldKmZhLCBmZz1zYltzaSsxXSpmYSwgZmI9c2Jbc2krMl0qZmE7IFxuXHRcdFx0XHR2YXIgYmEgPSB0Ylt0aSszXSooMS8yNTUpLCBicj10Ylt0aV0qYmEsIGJnPXRiW3RpKzFdKmJhLCBiYj10Ylt0aSsyXSpiYTsgXG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgaWZhPTEtZmEsIG9hID0gZmErYmEqaWZhLCBpb2EgPSAob2E9PTA/MDoxL29hKTtcblx0XHRcdFx0dGJbdGkrM10gPSAyNTUqb2E7ICBcblx0XHRcdFx0dGJbdGkrMF0gPSAoZnIrYnIqaWZhKSppb2E7ICBcblx0XHRcdFx0dGJbdGkrMV0gPSAoZmcrYmcqaWZhKSppb2E7ICAgXG5cdFx0XHRcdHRiW3RpKzJdID0gKGZiK2JiKmlmYSkqaW9hOyAgXG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKG1vZGU9PTIpe1x0Ly8gY29weSBvbmx5IGRpZmZlcmVuY2VzLCBvdGhlcndpc2UgemVyb1xuXHRcdFx0XHR2YXIgZmEgPSBzYltzaSszXSwgZnI9c2Jbc2ldLCBmZz1zYltzaSsxXSwgZmI9c2Jbc2krMl07IFxuXHRcdFx0XHR2YXIgYmEgPSB0Ylt0aSszXSwgYnI9dGJbdGldLCBiZz10Ylt0aSsxXSwgYmI9dGJbdGkrMl07IFxuXHRcdFx0XHRpZihmYT09YmEgJiYgZnI9PWJyICYmIGZnPT1iZyAmJiBmYj09YmIpIHsgIHRiW3RpXT0wOyAgdGJbdGkrMV09MDsgIHRiW3RpKzJdPTA7ICB0Ylt0aSszXT0wOyAgfVxuXHRcdFx0XHRlbHNlIHsgIHRiW3RpXT1mcjsgIHRiW3RpKzFdPWZnOyAgdGJbdGkrMl09ZmI7ICB0Ylt0aSszXT1mYTsgIH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYobW9kZT09Myl7XHQvLyBjaGVjayBpZiBjYW4gYmUgYmxlbmRlZFxuXHRcdFx0XHR2YXIgZmEgPSBzYltzaSszXSwgZnI9c2Jbc2ldLCBmZz1zYltzaSsxXSwgZmI9c2Jbc2krMl07IFxuXHRcdFx0XHR2YXIgYmEgPSB0Ylt0aSszXSwgYnI9dGJbdGldLCBiZz10Ylt0aSsxXSwgYmI9dGJbdGkrMl07IFxuXHRcdFx0XHRpZihmYT09YmEgJiYgZnI9PWJyICYmIGZnPT1iZyAmJiBmYj09YmIpIGNvbnRpbnVlO1xuXHRcdFx0XHQvL2lmKGZhIT0yNTUgJiYgYmEhPTApIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWYoZmE8MjIwICYmIGJhPjIwKSByZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuXG5cblxuVVBORy5lbmNvZGUgPSBmdW5jdGlvbihidWZzLCB3LCBoLCBwcywgZGVscywgdGFicywgZm9yYmlkUGx0ZSlcbntcblx0aWYocHM9PW51bGwpIHBzPTA7XG5cdGlmKGZvcmJpZFBsdGU9PW51bGwpIGZvcmJpZFBsdGUgPSBmYWxzZTtcblxuXHR2YXIgbmltZyA9IFVQTkcuZW5jb2RlLmNvbXByZXNzKGJ1ZnMsIHcsIGgsIHBzLCBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgZm9yYmlkUGx0ZV0pO1xuXHRVUE5HLmVuY29kZS5jb21wcmVzc1BORyhuaW1nLCAtMSk7XG5cdFxuXHRyZXR1cm4gVVBORy5lbmNvZGUuX21haW4obmltZywgdywgaCwgZGVscywgdGFicyk7XG59XG5cblVQTkcuZW5jb2RlTEwgPSBmdW5jdGlvbihidWZzLCB3LCBoLCBjYywgYWMsIGRlcHRoLCBkZWxzLCB0YWJzKSB7XG5cdHZhciBuaW1nID0geyAgY3R5cGU6IDAgKyAoY2M9PTEgPyAwIDogMikgKyAoYWM9PTAgPyAwIDogNCksICAgICAgZGVwdGg6IGRlcHRoLCAgZnJhbWVzOiBbXSAgfTtcblx0XG5cdHZhciB0aW1lID0gRGF0ZS5ub3coKTtcblx0dmFyIGJpcHAgPSAoY2MrYWMpKmRlcHRoLCBiaXBsID0gYmlwcCAqIHc7XG5cdGZvcih2YXIgaT0wOyBpPGJ1ZnMubGVuZ3RoOyBpKyspXG5cdFx0bmltZy5mcmFtZXMucHVzaCh7ICByZWN0Ont4OjAseTowLHdpZHRoOncsaGVpZ2h0Omh9LCAgaW1nOm5ldyBVaW50OEFycmF5KGJ1ZnNbaV0pLCBibGVuZDowLCBkaXNwb3NlOjEsIGJwcDpNYXRoLmNlaWwoYmlwcC84KSwgYnBsOk1hdGguY2VpbChiaXBsLzgpICB9KTtcblx0XG5cdFVQTkcuZW5jb2RlLmNvbXByZXNzUE5HKG5pbWcsIDAsIHRydWUpO1xuXHRcblx0dmFyIG91dCA9IFVQTkcuZW5jb2RlLl9tYWluKG5pbWcsIHcsIGgsIGRlbHMsIHRhYnMpO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5VUE5HLmVuY29kZS5fbWFpbiA9IGZ1bmN0aW9uKG5pbWcsIHcsIGgsIGRlbHMsIHRhYnMpIHtcblx0aWYodGFicz09bnVsbCkgdGFicz17fTtcblx0dmFyIGNyYyA9IFVQTkcuY3JjLmNyYywgd1VpID0gVVBORy5fYmluLndyaXRlVWludCwgd1VzID0gVVBORy5fYmluLndyaXRlVXNob3J0LCB3QXMgPSBVUE5HLl9iaW4ud3JpdGVBU0NJSTtcblx0dmFyIG9mZnNldCA9IDgsIGFuaW0gPSBuaW1nLmZyYW1lcy5sZW5ndGg+MSwgcGx0QWxwaGEgPSBmYWxzZTtcblx0XG5cdHZhciBsZW5nID0gOCArICgxNis1KzQpIC8qKyAoOSs0KSovICsgKGFuaW0gPyAyMCA6IDApO1xuXHRpZih0YWJzW1wic1JHQlwiXSE9bnVsbCkgbGVuZyArPSA4KzErNDtcblx0aWYodGFic1tcInBIWXNcIl0hPW51bGwpIGxlbmcgKz0gOCs5KzQ7XG5cdGlmKG5pbWcuY3R5cGU9PTMpIHtcblx0XHR2YXIgZGwgPSBuaW1nLnBsdGUubGVuZ3RoO1xuXHRcdGZvcih2YXIgaT0wOyBpPGRsOyBpKyspIGlmKChuaW1nLnBsdGVbaV0+Pj4yNCkhPTI1NSkgcGx0QWxwaGEgPSB0cnVlO1xuXHRcdGxlbmcgKz0gKDggKyBkbCozICsgNCkgKyAocGx0QWxwaGEgPyAoOCArIGRsKjEgKyA0KSA6IDApO1xuXHR9XG5cdGZvcih2YXIgaj0wOyBqPG5pbWcuZnJhbWVzLmxlbmd0aDsgaisrKVxuXHR7XG5cdFx0dmFyIGZyID0gbmltZy5mcmFtZXNbal07XG5cdFx0aWYoYW5pbSkgbGVuZyArPSAzODtcblx0XHRsZW5nICs9IGZyLmNpbWcubGVuZ3RoICsgMTI7XG5cdFx0aWYoaiE9MCkgbGVuZys9NDtcblx0fVxuXHRsZW5nICs9IDEyOyBcblx0XG5cdHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGVuZyk7XG5cdHZhciB3cj1bMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV07XG5cdGZvcih2YXIgaT0wOyBpPDg7IGkrKykgZGF0YVtpXT13cltpXTtcblx0XG5cdHdVaShkYXRhLG9mZnNldCwgMTMpOyAgICAgb2Zmc2V0Kz00O1xuXHR3QXMoZGF0YSxvZmZzZXQsXCJJSERSXCIpOyAgb2Zmc2V0Kz00O1xuXHR3VWkoZGF0YSxvZmZzZXQsdyk7ICBvZmZzZXQrPTQ7XG5cdHdVaShkYXRhLG9mZnNldCxoKTsgIG9mZnNldCs9NDtcblx0ZGF0YVtvZmZzZXRdID0gbmltZy5kZXB0aDsgIG9mZnNldCsrOyAgLy8gZGVwdGhcblx0ZGF0YVtvZmZzZXRdID0gbmltZy5jdHlwZTsgIG9mZnNldCsrOyAgLy8gY3R5cGVcblx0ZGF0YVtvZmZzZXRdID0gMDsgIG9mZnNldCsrOyAgLy8gY29tcHJlc3Ncblx0ZGF0YVtvZmZzZXRdID0gMDsgIG9mZnNldCsrOyAgLy8gZmlsdGVyXG5cdGRhdGFbb2Zmc2V0XSA9IDA7ICBvZmZzZXQrKzsgIC8vIGludGVybGFjZVxuXHR3VWkoZGF0YSxvZmZzZXQsY3JjKGRhdGEsb2Zmc2V0LTE3LDE3KSk7ICBvZmZzZXQrPTQ7IC8vIGNyY1xuXG5cdC8vIDEzIGJ5dGVzIHRvIHNheSwgdGhhdCBpdCBpcyBzUkdCXG5cdGlmKHRhYnNbXCJzUkdCXCJdIT1udWxsKSB7XG5cdFx0d1VpKGRhdGEsb2Zmc2V0LCAxKTsgICAgICBvZmZzZXQrPTQ7XG5cdFx0d0FzKGRhdGEsb2Zmc2V0LFwic1JHQlwiKTsgIG9mZnNldCs9NDtcblx0XHRkYXRhW29mZnNldF0gPSB0YWJzW1wic1JHQlwiXTsgIG9mZnNldCsrO1xuXHRcdHdVaShkYXRhLG9mZnNldCxjcmMoZGF0YSxvZmZzZXQtNSw1KSk7ICBvZmZzZXQrPTQ7IC8vIGNyY1xuXHR9XG5cdGlmKHRhYnNbXCJwSFlzXCJdIT1udWxsKSB7XG5cdFx0d1VpKGRhdGEsb2Zmc2V0LCA5KTsgICAgICBvZmZzZXQrPTQ7XG5cdFx0d0FzKGRhdGEsb2Zmc2V0LFwicEhZc1wiKTsgIG9mZnNldCs9NDtcblx0XHR3VWkoZGF0YSxvZmZzZXQsIHRhYnNbXCJwSFlzXCJdWzBdKTsgICAgICBvZmZzZXQrPTQ7XG5cdFx0d1VpKGRhdGEsb2Zmc2V0LCB0YWJzW1wicEhZc1wiXVsxXSk7ICAgICAgb2Zmc2V0Kz00O1xuXHRcdGRhdGFbb2Zmc2V0XT10YWJzW1wicEhZc1wiXVsyXTtcdFx0XHRvZmZzZXQrKztcblx0XHR3VWkoZGF0YSxvZmZzZXQsY3JjKGRhdGEsb2Zmc2V0LTEzLDEzKSk7ICBvZmZzZXQrPTQ7IC8vIGNyY1xuXHR9XG5cblx0aWYoYW5pbSkge1xuXHRcdHdVaShkYXRhLG9mZnNldCwgOCk7ICAgICAgb2Zmc2V0Kz00O1xuXHRcdHdBcyhkYXRhLG9mZnNldCxcImFjVExcIik7ICBvZmZzZXQrPTQ7XG5cdFx0d1VpKGRhdGEsb2Zmc2V0LCBuaW1nLmZyYW1lcy5sZW5ndGgpOyAgICAgb2Zmc2V0Kz00O1xuXHRcdHdVaShkYXRhLG9mZnNldCwgdGFic1tcImxvb3BcIl0hPW51bGw/dGFic1tcImxvb3BcIl06MCk7ICAgICAgb2Zmc2V0Kz00O1xuXHRcdHdVaShkYXRhLG9mZnNldCxjcmMoZGF0YSxvZmZzZXQtMTIsMTIpKTsgIG9mZnNldCs9NDsgLy8gY3JjXG5cdH1cblxuXHRpZihuaW1nLmN0eXBlPT0zKSB7XG5cdFx0dmFyIGRsID0gbmltZy5wbHRlLmxlbmd0aDtcblx0XHR3VWkoZGF0YSxvZmZzZXQsIGRsKjMpOyAgb2Zmc2V0Kz00O1xuXHRcdHdBcyhkYXRhLG9mZnNldCxcIlBMVEVcIik7ICBvZmZzZXQrPTQ7XG5cdFx0Zm9yKHZhciBpPTA7IGk8ZGw7IGkrKyl7XG5cdFx0XHR2YXIgdGk9aSozLCBjPW5pbWcucGx0ZVtpXSwgcj0oYykmMjU1LCBnPShjPj4+OCkmMjU1LCBiPShjPj4+MTYpJjI1NTtcblx0XHRcdGRhdGFbb2Zmc2V0K3RpKzBdPXI7ICBkYXRhW29mZnNldCt0aSsxXT1nOyAgZGF0YVtvZmZzZXQrdGkrMl09Yjtcblx0XHR9XG5cdFx0b2Zmc2V0Kz1kbCozO1xuXHRcdHdVaShkYXRhLG9mZnNldCxjcmMoZGF0YSxvZmZzZXQtZGwqMy00LGRsKjMrNCkpOyAgb2Zmc2V0Kz00OyAvLyBjcmNcblxuXHRcdGlmKHBsdEFscGhhKSB7XG5cdFx0XHR3VWkoZGF0YSxvZmZzZXQsIGRsKTsgIG9mZnNldCs9NDtcblx0XHRcdHdBcyhkYXRhLG9mZnNldCxcInRSTlNcIik7ICBvZmZzZXQrPTQ7XG5cdFx0XHRmb3IodmFyIGk9MDsgaTxkbDsgaSsrKSAgZGF0YVtvZmZzZXQraV09KG5pbWcucGx0ZVtpXT4+PjI0KSYyNTU7XG5cdFx0XHRvZmZzZXQrPWRsO1xuXHRcdFx0d1VpKGRhdGEsb2Zmc2V0LGNyYyhkYXRhLG9mZnNldC1kbC00LGRsKzQpKTsgIG9mZnNldCs9NDsgLy8gY3JjXG5cdFx0fVxuXHR9XG5cdFxuXHR2YXIgZmkgPSAwO1xuXHRmb3IodmFyIGo9MDsgajxuaW1nLmZyYW1lcy5sZW5ndGg7IGorKylcblx0e1xuXHRcdHZhciBmciA9IG5pbWcuZnJhbWVzW2pdO1xuXHRcdGlmKGFuaW0pIHtcblx0XHRcdHdVaShkYXRhLCBvZmZzZXQsIDI2KTsgICAgIG9mZnNldCs9NDtcblx0XHRcdHdBcyhkYXRhLCBvZmZzZXQsXCJmY1RMXCIpOyAgb2Zmc2V0Kz00O1xuXHRcdFx0d1VpKGRhdGEsIG9mZnNldCwgZmkrKyk7ICAgb2Zmc2V0Kz00O1xuXHRcdFx0d1VpKGRhdGEsIG9mZnNldCwgZnIucmVjdC53aWR0aCApOyAgIG9mZnNldCs9NDtcblx0XHRcdHdVaShkYXRhLCBvZmZzZXQsIGZyLnJlY3QuaGVpZ2h0KTsgICBvZmZzZXQrPTQ7XG5cdFx0XHR3VWkoZGF0YSwgb2Zmc2V0LCBmci5yZWN0LngpOyAgIG9mZnNldCs9NDtcblx0XHRcdHdVaShkYXRhLCBvZmZzZXQsIGZyLnJlY3QueSk7ICAgb2Zmc2V0Kz00O1xuXHRcdFx0d1VzKGRhdGEsIG9mZnNldCwgZGVsc1tqXSk7ICAgb2Zmc2V0Kz0yO1xuXHRcdFx0d1VzKGRhdGEsIG9mZnNldCwgIDEwMDApOyAgIG9mZnNldCs9Mjtcblx0XHRcdGRhdGFbb2Zmc2V0XSA9IGZyLmRpc3Bvc2U7ICBvZmZzZXQrKztcdC8vIGRpc3Bvc2Vcblx0XHRcdGRhdGFbb2Zmc2V0XSA9IGZyLmJsZW5kICA7ICBvZmZzZXQrKztcdC8vIGJsZW5kXG5cdFx0XHR3VWkoZGF0YSxvZmZzZXQsY3JjKGRhdGEsb2Zmc2V0LTMwLDMwKSk7ICBvZmZzZXQrPTQ7IC8vIGNyY1xuXHRcdH1cblx0XHRcdFx0XG5cdFx0dmFyIGltZ2QgPSBmci5jaW1nLCBkbCA9IGltZ2QubGVuZ3RoO1xuXHRcdHdVaShkYXRhLG9mZnNldCwgZGwrKGo9PTA/MDo0KSk7ICAgICBvZmZzZXQrPTQ7XG5cdFx0dmFyIGlvZmYgPSBvZmZzZXQ7XG5cdFx0d0FzKGRhdGEsb2Zmc2V0LChqPT0wKT9cIklEQVRcIjpcImZkQVRcIik7ICBvZmZzZXQrPTQ7XG5cdFx0aWYoaiE9MCkgeyAgd1VpKGRhdGEsIG9mZnNldCwgZmkrKyk7ICBvZmZzZXQrPTQ7ICB9XG5cdFx0ZGF0YS5zZXQoaW1nZCxvZmZzZXQpO1xuXHRcdG9mZnNldCArPSBkbDtcblx0XHR3VWkoZGF0YSxvZmZzZXQsY3JjKGRhdGEsaW9mZixvZmZzZXQtaW9mZikpOyAgb2Zmc2V0Kz00OyAvLyBjcmNcblx0fVxuXG5cdHdVaShkYXRhLG9mZnNldCwgMCk7ICAgICBvZmZzZXQrPTQ7XG5cdHdBcyhkYXRhLG9mZnNldCxcIklFTkRcIik7ICBvZmZzZXQrPTQ7XG5cdHdVaShkYXRhLG9mZnNldCxjcmMoZGF0YSxvZmZzZXQtNCw0KSk7ICBvZmZzZXQrPTQ7IC8vIGNyY1xuXG5cdHJldHVybiBkYXRhLmJ1ZmZlcjtcbn1cblxuVVBORy5lbmNvZGUuY29tcHJlc3NQTkcgPSBmdW5jdGlvbihvdXQsIGZpbHRlciwgbGV2ZWxaZXJvKSB7XG5cdGZvcih2YXIgaT0wOyBpPG91dC5mcmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgZnJtID0gb3V0LmZyYW1lc1tpXSwgbnc9ZnJtLnJlY3Qud2lkdGgsIG5oPWZybS5yZWN0LmhlaWdodDtcblx0XHR2YXIgZmRhdGEgPSBuZXcgVWludDhBcnJheShuaCpmcm0uYnBsK25oKTtcblx0XHRmcm0uY2ltZyA9IFVQTkcuZW5jb2RlLl9maWx0ZXJaZXJvKGZybS5pbWcsbmgsZnJtLmJwcCxmcm0uYnBsLGZkYXRhLCBmaWx0ZXIsIGxldmVsWmVybyk7XG5cdH1cbn1cblxuXG5cblVQTkcuZW5jb2RlLmNvbXByZXNzID0gZnVuY3Rpb24oYnVmcywgdywgaCwgcHMsIHBybXMpIC8vIHBybXM6ICBvbmx5QmxlbmQsIG1pbkJpdHMsIGZvcmJpZFBsdGVcbntcblx0Ly92YXIgdGltZSA9IERhdGUubm93KCk7XG5cdHZhciBvbmx5QmxlbmQgPSBwcm1zWzBdLCBldmVuQ3JkID0gcHJtc1sxXSwgZm9yYmlkUHJldiA9IHBybXNbMl0sIG1pbkJpdHMgPSBwcm1zWzNdLCBmb3JiaWRQbHRlID0gcHJtc1s0XTtcblx0XG5cdHZhciBjdHlwZSA9IDYsIGRlcHRoID0gOCwgYWxwaGFBbmQ9MjU1XG5cdFxuXHRmb3IodmFyIGo9MDsgajxidWZzLmxlbmd0aDsgaisrKSAgeyAgLy8gd2hlbiBub3QgcXVhbnRpemVkLCBvdGhlciBmcmFtZXMgY2FuIGNvbnRhaW4gY29sb3JzLCB0aGF0IGFyZSBub3QgaW4gYW4gaW5pdGlhbCBmcmFtZVxuXHRcdHZhciBpbWcgPSBuZXcgVWludDhBcnJheShidWZzW2pdKSwgaWxlbiA9IGltZy5sZW5ndGg7XG5cdFx0Zm9yKHZhciBpPTA7IGk8aWxlbjsgaSs9NCkgYWxwaGFBbmQgJj0gaW1nW2krM107XG5cdH1cblx0dmFyIGdvdEFscGhhID0gKGFscGhhQW5kIT0yNTUpO1xuXHRcblx0Ly9jb25zb2xlLmxvZyhcImFscGhhIGNoZWNrXCIsIERhdGUubm93KCktdGltZSk7ICB0aW1lID0gRGF0ZS5ub3coKTtcblx0XG5cdC8vdmFyIGJydXRlID0gZ290QWxwaGEgJiYgZm9yR0lGO1x0XHQvLyBicnV0ZSA6IGZyYW1lcyBjYW4gb25seSBiZSBjb3BpZWQsIG5vdCBcImJsZW5kZWRcIlxuXHR2YXIgZnJtcyA9IFVQTkcuZW5jb2RlLmZyYW1pemUoYnVmcywgdywgaCwgb25seUJsZW5kLCBldmVuQ3JkLCBmb3JiaWRQcmV2KTtcblx0Ly9jb25zb2xlLmxvZyhcImZyYW1pemVcIiwgRGF0ZS5ub3coKS10aW1lKTsgIHRpbWUgPSBEYXRlLm5vdygpO1xuXHRcblx0dmFyIGNtYXA9e30sIHBsdGU9W10sIGluZHM9W107ICBcblx0XG5cdGlmKHBzIT0wKSB7XG5cdFx0dmFyIG5idWZzID0gW107ICBmb3IodmFyIGk9MDsgaTxmcm1zLmxlbmd0aDsgaSsrKSBuYnVmcy5wdXNoKGZybXNbaV0uaW1nLmJ1ZmZlcik7XG5cdFx0XG5cdFx0dmFyIGFidWYgPSBVUE5HLmVuY29kZS5jb25jYXRSR0JBKG5idWZzKSwgcXJlcyA9IFVQTkcucXVhbnRpemUoYWJ1ZiwgcHMpOyAgXG5cdFx0dmFyIGNvZiA9IDAsIGJiID0gbmV3IFVpbnQ4QXJyYXkocXJlcy5hYnVmKTtcblx0XHRmb3IodmFyIGk9MDsgaTxmcm1zLmxlbmd0aDsgaSsrKSB7ICB2YXIgdGk9ZnJtc1tpXS5pbWcsIGJsbj10aS5sZW5ndGg7ICBpbmRzLnB1c2gobmV3IFVpbnQ4QXJyYXkocXJlcy5pbmRzLmJ1ZmZlciwgY29mPj4yLCBibG4+PjIpKTtcblx0XHRcdGZvcih2YXIgaj0wOyBqPGJsbjsgais9NCkgeyAgdGlbal09YmJbY29mK2pdOyAgdGlbaisxXT1iYltjb2YraisxXTsgIHRpW2orMl09YmJbY29mK2orMl07ICB0aVtqKzNdPWJiW2NvZitqKzNdOyAgfSAgICBjb2YrPWJsbjsgIH1cblx0XHRcblx0XHRmb3IodmFyIGk9MDsgaTxxcmVzLnBsdGUubGVuZ3RoOyBpKyspIHBsdGUucHVzaChxcmVzLnBsdGVbaV0uZXN0LnJnYmEpO1xuXHRcdC8vY29uc29sZS5sb2coXCJxdWFudGl6ZVwiLCBEYXRlLm5vdygpLXRpbWUpOyAgdGltZSA9IERhdGUubm93KCk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gd2hhdCBpZiBwcz09MCwgYnV0IHRoZXJlIGFyZSA8PTI1NiBjb2xvcnM/ICB3ZSBzdGlsbCBuZWVkIHRvIGRldGVjdCwgaWYgdGhlIHBhbGV0dGUgY291bGQgYmUgdXNlZFxuXHRcdGZvcih2YXIgaj0wOyBqPGZybXMubGVuZ3RoOyBqKyspICB7ICAvLyB3aGVuIG5vdCBxdWFudGl6ZWQsIG90aGVyIGZyYW1lcyBjYW4gY29udGFpbiBjb2xvcnMsIHRoYXQgYXJlIG5vdCBpbiBhbiBpbml0aWFsIGZyYW1lXG5cdFx0XHR2YXIgZnJtID0gZnJtc1tqXSwgaW1nMzIgPSBuZXcgVWludDMyQXJyYXkoZnJtLmltZy5idWZmZXIpLCBudz1mcm0ucmVjdC53aWR0aCwgaWxlbiA9IGltZzMyLmxlbmd0aDtcblx0XHRcdHZhciBpbmQgPSBuZXcgVWludDhBcnJheShpbGVuKTsgIGluZHMucHVzaChpbmQpO1xuXHRcdFx0Zm9yKHZhciBpPTA7IGk8aWxlbjsgaSsrKSB7XG5cdFx0XHRcdHZhciBjID0gaW1nMzJbaV07XG5cdFx0XHRcdGlmICAgICAoaSE9MCAmJiBjPT1pbWczMltpLSAxXSkgaW5kW2ldPWluZFtpLTFdO1xuXHRcdFx0XHRlbHNlIGlmKGk+bncgJiYgYz09aW1nMzJbaS1ud10pIGluZFtpXT1pbmRbaS1ud107XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHZhciBjbWMgPSBjbWFwW2NdO1xuXHRcdFx0XHRcdGlmKGNtYz09bnVsbCkgeyAgY21hcFtjXT1jbWM9cGx0ZS5sZW5ndGg7ICBwbHRlLnB1c2goYyk7ICBpZihwbHRlLmxlbmd0aD49MzAwKSBicmVhazsgIH1cblx0XHRcdFx0XHRpbmRbaV09Y21jO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coXCJtYWtlIHBhbGV0dGVcIiwgRGF0ZS5ub3coKS10aW1lKTsgIHRpbWUgPSBEYXRlLm5vdygpO1xuXHR9XG5cdFxuXHR2YXIgY2M9cGx0ZS5sZW5ndGg7IC8vY29uc29sZS5sb2coXCJjb2xvcnM6XCIsY2MpO1xuXHRpZihjYzw9MjU2ICYmIGZvcmJpZFBsdGU9PWZhbHNlKSB7XG5cdFx0aWYoY2M8PSAyKSBkZXB0aD0xOyAgZWxzZSBpZihjYzw9IDQpIGRlcHRoPTI7ICBlbHNlIGlmKGNjPD0xNikgZGVwdGg9NDsgIGVsc2UgZGVwdGg9ODtcblx0XHRkZXB0aCA9ICBNYXRoLm1heChkZXB0aCwgbWluQml0cyk7XG5cdH1cblx0XG5cdGZvcih2YXIgaj0wOyBqPGZybXMubGVuZ3RoOyBqKyspXG5cdHtcblx0XHR2YXIgZnJtID0gZnJtc1tqXSwgbng9ZnJtLnJlY3QueCwgbnk9ZnJtLnJlY3QueSwgbnc9ZnJtLnJlY3Qud2lkdGgsIG5oPWZybS5yZWN0LmhlaWdodDtcblx0XHR2YXIgY2ltZyA9IGZybS5pbWcsIGNpbWczMiA9IG5ldyBVaW50MzJBcnJheShjaW1nLmJ1ZmZlcik7XG5cdFx0dmFyIGJwbCA9IDQqbncsIGJwcD00O1xuXHRcdGlmKGNjPD0yNTYgJiYgZm9yYmlkUGx0ZT09ZmFsc2UpIHtcblx0XHRcdGJwbCA9IE1hdGguY2VpbChkZXB0aCpudy84KTtcblx0XHRcdHZhciBuaW1nID0gbmV3IFVpbnQ4QXJyYXkoYnBsKm5oKTtcblx0XHRcdHZhciBpbmogPSBpbmRzW2pdO1xuXHRcdFx0Zm9yKHZhciB5PTA7IHk8bmg7IHkrKykgeyAgdmFyIGk9eSpicGwsIGlpPXkqbnc7XG5cdFx0XHRcdGlmICAgICAoZGVwdGg9PTgpIGZvcih2YXIgeD0wOyB4PG53OyB4KyspIG5pbWdbaSsoeCkgICBdICAgPSAgKGlualtpaSt4XSAgICAgICAgICAgICApO1xuXHRcdFx0XHRlbHNlIGlmKGRlcHRoPT00KSBmb3IodmFyIHg9MDsgeDxudzsgeCsrKSBuaW1nW2krKHg+PjEpXSAgfD0gIChpbmpbaWkreF08PCg0LSh4JjEpKjQpKTtcblx0XHRcdFx0ZWxzZSBpZihkZXB0aD09MikgZm9yKHZhciB4PTA7IHg8bnc7IHgrKykgbmltZ1tpKyh4Pj4yKV0gIHw9ICAoaW5qW2lpK3hdPDwoNi0oeCYzKSoyKSk7XG5cdFx0XHRcdGVsc2UgaWYoZGVwdGg9PTEpIGZvcih2YXIgeD0wOyB4PG53OyB4KyspIG5pbWdbaSsoeD4+MyldICB8PSAgKGlualtpaSt4XTw8KDctKHgmNykqMSkpO1xuXHRcdFx0fVxuXHRcdFx0Y2ltZz1uaW1nOyAgY3R5cGU9MzsgIGJwcD0xO1xuXHRcdH1cblx0XHRlbHNlIGlmKGdvdEFscGhhPT1mYWxzZSAmJiBmcm1zLmxlbmd0aD09MSkge1x0Ly8gc29tZSBuZXh0IFwicmVkdWNlZFwiIGZyYW1lcyBtYXkgY29udGFpbiBhbHBoYSBmb3IgYmxlbmRpbmdcblx0XHRcdHZhciBuaW1nID0gbmV3IFVpbnQ4QXJyYXkobncqbmgqMyksIGFyZWE9bncqbmg7XG5cdFx0XHRmb3IodmFyIGk9MDsgaTxhcmVhOyBpKyspIHsgdmFyIHRpPWkqMywgcWk9aSo0OyAgbmltZ1t0aV09Y2ltZ1txaV07ICBuaW1nW3RpKzFdPWNpbWdbcWkrMV07ICBuaW1nW3RpKzJdPWNpbWdbcWkrMl07ICB9XG5cdFx0XHRjaW1nPW5pbWc7ICBjdHlwZT0yOyAgYnBwPTM7ICBicGw9Mypudztcblx0XHR9XG5cdFx0ZnJtLmltZz1jaW1nOyAgZnJtLmJwbD1icGw7ICBmcm0uYnBwPWJwcDtcblx0fVxuXHQvL2NvbnNvbGUubG9nKFwiY29sb3JzID0+IHBhbGV0dGUgaW5kaWNlc1wiLCBEYXRlLm5vdygpLXRpbWUpOyAgdGltZSA9IERhdGUubm93KCk7XG5cdFxuXHRyZXR1cm4ge2N0eXBlOmN0eXBlLCBkZXB0aDpkZXB0aCwgcGx0ZTpwbHRlLCBmcmFtZXM6ZnJtcyAgfTtcbn1cblVQTkcuZW5jb2RlLmZyYW1pemUgPSBmdW5jdGlvbihidWZzLHcsaCxhbHdheXNCbGVuZCxldmVuQ3JkLGZvcmJpZFByZXYpIHtcblx0LyogIERJU1BPU0Vcblx0ICAgIC0gMCA6IG5vIGNoYW5nZVxuXHRcdC0gMSA6IGNsZWFyIHRvIHRyYW5zcGFyZW50XG5cdFx0LSAyIDogcmV0c3RvcmUgdG8gY29udGVudCBiZWZvcmUgcmVuZGVyaW5nIChwcmV2aW91cyBmcmFtZSBkaXNwb3NlZClcblx0XHRCTEVORFxuXHRcdC0gMCA6IHJlcGxhY2Vcblx0XHQtIDEgOiBibGVuZFxuXHQqL1xuXHR2YXIgZnJtcyA9IFtdO1xuXHRmb3IodmFyIGo9MDsgajxidWZzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIGNpbWcgPSBuZXcgVWludDhBcnJheShidWZzW2pdKSwgY2ltZzMyID0gbmV3IFVpbnQzMkFycmF5KGNpbWcuYnVmZmVyKTtcblx0XHR2YXIgbmltZztcblx0XHRcblx0XHR2YXIgbng9MCwgbnk9MCwgbnc9dywgbmg9aCwgYmxlbmQ9YWx3YXlzQmxlbmQ/MTowO1xuXHRcdGlmKGohPTApIHtcblx0XHRcdHZhciB0bGltID0gKGZvcmJpZFByZXYgfHwgYWx3YXlzQmxlbmQgfHwgaj09MSB8fCBmcm1zW2otMl0uZGlzcG9zZSE9MCk/MToyLCB0c3RwID0gMCwgdGFyZWEgPSAxZTk7XG5cdFx0XHRmb3IodmFyIGl0PTA7IGl0PHRsaW07IGl0KyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwaW1nID0gbmV3IFVpbnQ4QXJyYXkoYnVmc1tqLTEtaXRdKSwgcDMyID0gbmV3IFVpbnQzMkFycmF5KGJ1ZnNbai0xLWl0XSk7XG5cdFx0XHRcdHZhciBtaXg9dyxtaXk9aCxtYXg9LTEsbWF5PS0xO1xuXHRcdFx0XHRmb3IodmFyIHk9MDsgeTxoOyB5KyspIGZvcih2YXIgeD0wOyB4PHc7IHgrKykge1xuXHRcdFx0XHRcdHZhciBpID0geSp3K3g7XG5cdFx0XHRcdFx0aWYoY2ltZzMyW2ldIT1wMzJbaV0pIHtcblx0XHRcdFx0XHRcdGlmKHg8bWl4KSBtaXg9eDsgIGlmKHg+bWF4KSBtYXg9eDtcblx0XHRcdFx0XHRcdGlmKHk8bWl5KSBtaXk9eTsgIGlmKHk+bWF5KSBtYXk9eTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYobWF4PT0tMSkgbWl4PW1peT1tYXg9bWF5PTA7XG5cdFx0XHRcdGlmKGV2ZW5DcmQpIHsgIGlmKChtaXgmMSk9PTEpbWl4LS07ICBpZigobWl5JjEpPT0xKW1peS0tOyAgfVxuXHRcdFx0XHR2YXIgc2FyZWEgPSAobWF4LW1peCsxKSoobWF5LW1peSsxKTtcblx0XHRcdFx0aWYoc2FyZWE8dGFyZWEpIHtcblx0XHRcdFx0XHR0YXJlYSA9IHNhcmVhOyAgdHN0cCA9IGl0O1xuXHRcdFx0XHRcdG54ID0gbWl4OyBueSA9IG1peTsgbncgPSBtYXgtbWl4KzE7IG5oID0gbWF5LW1peSsxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIGFsd2F5c0JsZW5kOiBwb2t1ZCB6amlzdMOtbSwgxb5lIGJsZW5kaXQgbmVsemUsIG5hc3RhdsOtbSBwxZllZGNob3rDrW11IHNuw61ta3UgZGlzcG9zZT0xLiBaYWppc3TDrW0sIGFieSBvYnNhaG92YWwgbcWvaiBvYmTDqWxuw61rLlxuXHRcdFx0dmFyIHBpbWcgPSBuZXcgVWludDhBcnJheShidWZzW2otMS10c3RwXSk7XG5cdFx0XHRpZih0c3RwPT0xKSBmcm1zW2otMV0uZGlzcG9zZSA9IDI7XG5cdFx0XHRcblx0XHRcdG5pbWcgPSBuZXcgVWludDhBcnJheShudypuaCo0KTtcblx0XHRcdFVQTkcuX2NvcHlUaWxlKHBpbWcsdyxoLCBuaW1nLG53LG5oLCAtbngsLW55LCAwKTtcblx0XHRcdFxuXHRcdFx0YmxlbmQgPSAgVVBORy5fY29weVRpbGUoY2ltZyx3LGgsIG5pbWcsbncsbmgsIC1ueCwtbnksIDMpID8gMSA6IDA7XG5cdFx0XHRpZihibGVuZD09MSkgVVBORy5lbmNvZGUuX3ByZXBhcmVEaWZmKGNpbWcsdyxoLG5pbWcse3g6bngseTpueSx3aWR0aDpudyxoZWlnaHQ6bmh9KTtcblx0XHRcdGVsc2UgICAgICAgICBVUE5HLl9jb3B5VGlsZShjaW1nLHcsaCwgbmltZyxudyxuaCwgLW54LC1ueSwgMCk7XG5cdFx0XHQvL1VQTkcuX2NvcHlUaWxlKGNpbWcsdyxoLCBuaW1nLG53LG5oLCAtbngsLW55LCBibGVuZD09MT8yOjApO1xuXHRcdH1cblx0XHRlbHNlIG5pbWcgPSBjaW1nLnNsaWNlKDApO1x0Ly8gaW1nIG1heSBiZSByZXdyaXR0ZW4gZnVydGhlciAuLi4gZG9uJ3QgcmV3cml0ZSBpbnB1dFxuXHRcdFxuXHRcdGZybXMucHVzaCh7cmVjdDp7eDpueCx5Om55LHdpZHRoOm53LGhlaWdodDpuaH0sIGltZzpuaW1nLCBibGVuZDpibGVuZCwgZGlzcG9zZTowfSk7XG5cdH1cblx0XG5cdFxuXHRpZihhbHdheXNCbGVuZCkgZm9yKHZhciBqPTA7IGo8ZnJtcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBmcm0gPSBmcm1zW2pdOyAgaWYoZnJtLmJsZW5kPT0xKSBjb250aW51ZTtcblx0XHR2YXIgcjAgPSBmcm0ucmVjdCwgcjEgPSBmcm1zW2otMV0ucmVjdFxuXHRcdHZhciBtaVggPSBNYXRoLm1pbihyMC54LCByMS54KSwgbWlZID0gTWF0aC5taW4ocjAueSwgcjEueSk7XG5cdFx0dmFyIG1hWCA9IE1hdGgubWF4KHIwLngrcjAud2lkdGgsIHIxLngrcjEud2lkdGgpLCBtYVkgPSBNYXRoLm1heChyMC55K3IwLmhlaWdodCwgcjEueStyMS5oZWlnaHQpO1xuXHRcdHZhciByID0ge3g6bWlYLCB5Om1pWSwgd2lkdGg6bWFYLW1pWCwgaGVpZ2h0Om1hWS1taVl9O1xuXHRcdFxuXHRcdGZybXNbai0xXS5kaXNwb3NlID0gMTtcblx0XHRpZihqLTEhPTApIFxuXHRcdFVQTkcuZW5jb2RlLl91cGRhdGVGcmFtZShidWZzLCB3LGgsZnJtcywgai0xLHIsIGV2ZW5DcmQpO1xuXHRcdFVQTkcuZW5jb2RlLl91cGRhdGVGcmFtZShidWZzLCB3LGgsZnJtcywgaiAgLHIsIGV2ZW5DcmQpO1xuXHR9XG5cdHZhciBhcmVhID0gMDtcblx0aWYoYnVmcy5sZW5ndGghPTEpIGZvcih2YXIgaT0wOyBpPGZybXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgZnJtID0gZnJtc1tpXTtcblx0XHRhcmVhICs9IGZybS5yZWN0LndpZHRoKmZybS5yZWN0LmhlaWdodDtcblx0XHQvL2lmKGk9PTAgfHwgZnJtLmJsZW5kIT0xKSBjb250aW51ZTtcblx0XHQvL3ZhciBvYiA9IG5ldyBVaW50OEFycmF5KFxuXHRcdC8vY29uc29sZS5sb2coZnJtLmJsZW5kLCBmcm0uZGlzcG9zZSwgZnJtLnJlY3QpO1xuXHR9XG5cdC8vaWYoYXJlYSE9MCkgY29uc29sZS5sb2coYXJlYSk7XG5cdHJldHVybiBmcm1zO1xufVxuVVBORy5lbmNvZGUuX3VwZGF0ZUZyYW1lID0gZnVuY3Rpb24oYnVmcywgdyxoLCBmcm1zLCBpLCByLCBldmVuQ3JkKSB7XG5cdHZhciBVOCA9IFVpbnQ4QXJyYXksIFUzMiA9IFVpbnQzMkFycmF5O1xuXHR2YXIgcGltZyA9IG5ldyBVOChidWZzW2ktMV0pLCBwaW1nMzIgPSBuZXcgVTMyKGJ1ZnNbaS0xXSksIG5pbWcgPSBpKzE8YnVmcy5sZW5ndGggPyBuZXcgVTgoYnVmc1tpKzFdKTpudWxsO1xuXHR2YXIgY2ltZyA9IG5ldyBVOChidWZzW2ldKSwgY2ltZzMyID0gbmV3IFUzMihjaW1nLmJ1ZmZlcik7XG5cdFxuXHR2YXIgbWl4PXcsbWl5PWgsbWF4PS0xLG1heT0tMTtcblx0Zm9yKHZhciB5PTA7IHk8ci5oZWlnaHQ7IHkrKykgZm9yKHZhciB4PTA7IHg8ci53aWR0aDsgeCsrKSB7XG5cdFx0dmFyIGN4ID0gci54K3gsIGN5ID0gci55K3k7XG5cdFx0dmFyIGogPSBjeSp3K2N4LCBjYyA9IGNpbWczMltqXTtcblx0XHQvLyBubyBuZWVkIHRvIGRyYXcgdHJhbnNwYXJlbmN5LCBvciB0byBkaXNwb3NlIGl0LiBPciwgaWYgd3JpdGluZyB0aGUgc2FtZSBjb2xvciBhbmQgdGhlIG5leHQgb25lIGRvZXMgbm90IG5lZWQgdHJhbnNwYXJlbmN5LlxuXHRcdGlmKGNjPT0wIHx8IChmcm1zW2ktMV0uZGlzcG9zZT09MCAmJiBwaW1nMzJbal09PWNjICYmIChuaW1nPT1udWxsIHx8IG5pbWdbaio0KzNdIT0wKSkvKiovKSB7fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYoY3g8bWl4KSBtaXg9Y3g7ICBpZihjeD5tYXgpIG1heD1jeDtcblx0XHRcdGlmKGN5PG1peSkgbWl5PWN5OyAgaWYoY3k+bWF5KSBtYXk9Y3k7XG5cdFx0fVxuXHR9XG5cdGlmKG1heD09LTEpIG1peD1taXk9bWF4PW1heT0wO1xuXHRpZihldmVuQ3JkKSB7ICBpZigobWl4JjEpPT0xKW1peC0tOyAgaWYoKG1peSYxKT09MSltaXktLTsgIH1cblx0ciA9IHt4Om1peCwgeTptaXksIHdpZHRoOm1heC1taXgrMSwgaGVpZ2h0Om1heS1taXkrMX07XG5cdFxuXHR2YXIgZnIgPSBmcm1zW2ldOyAgZnIucmVjdCA9IHI7ICBmci5ibGVuZCA9IDE7ICBmci5pbWcgPSBuZXcgVWludDhBcnJheShyLndpZHRoKnIuaGVpZ2h0KjQpO1xuXHRpZihmcm1zW2ktMV0uZGlzcG9zZT09MCkge1xuXHRcdFVQTkcuX2NvcHlUaWxlKHBpbWcsdyxoLCBmci5pbWcsci53aWR0aCxyLmhlaWdodCwgLXIueCwtci55LCAwKTtcblx0XHRVUE5HLmVuY29kZS5fcHJlcGFyZURpZmYoY2ltZyx3LGgsZnIuaW1nLHIpO1xuXHRcdC8vVVBORy5fY29weVRpbGUoY2ltZyx3LGgsIGZyLmltZyxyLndpZHRoLHIuaGVpZ2h0LCAtci54LC1yLnksIDIpO1xuXHR9XG5cdGVsc2Vcblx0XHRVUE5HLl9jb3B5VGlsZShjaW1nLHcsaCwgZnIuaW1nLHIud2lkdGgsci5oZWlnaHQsIC1yLngsLXIueSwgMCk7XG59XG5VUE5HLmVuY29kZS5fcHJlcGFyZURpZmYgPSBmdW5jdGlvbihjaW1nLCB3LGgsIG5pbWcsIHJlYykge1xuXHRVUE5HLl9jb3B5VGlsZShjaW1nLHcsaCwgbmltZyxyZWMud2lkdGgscmVjLmhlaWdodCwgLXJlYy54LC1yZWMueSwgMik7XG5cdC8qXG5cdHZhciBuMzIgPSBuZXcgVWludDMyQXJyYXkobmltZy5idWZmZXIpO1xuXHR2YXIgb2cgPSBuZXcgVWludDhBcnJheShyZWMud2lkdGgqcmVjLmhlaWdodCo0KSwgbzMyID0gbmV3IFVpbnQzMkFycmF5KG9nLmJ1ZmZlcik7XG5cdFVQTkcuX2NvcHlUaWxlKGNpbWcsdyxoLCBvZyxyZWMud2lkdGgscmVjLmhlaWdodCwgLXJlYy54LC1yZWMueSwgMCk7XG5cdGZvcih2YXIgaT00OyBpPG5pbWcubGVuZ3RoOyBpKz00KSB7XG5cdFx0aWYobmltZ1tpLTFdIT0wICYmIG5pbWdbaSszXT09MCAmJiBvMzJbaT4+PjJdPT1vMzJbKGk+Pj4yKS0xXSkge1xuXHRcdFx0bjMyW2k+Pj4yXT1vMzJbaT4+PjJdO1xuXHRcdFx0Ly92YXIgaiA9IGksIGM9cDMyWyhpPj4+MiktMV07XG5cdFx0XHQvL3doaWxlKHAzMltqPj4+Ml09PWMpIHsgIG4zMltqPj4+Ml09YzsgIGorPTQ7ICB9XG5cdFx0fVxuXHR9XG5cdGZvcih2YXIgaT1uaW1nLmxlbmd0aC04OyBpPjA7IGktPTQpIHtcblx0XHRpZihuaW1nW2krN10hPTAgJiYgbmltZ1tpKzNdPT0wICYmIG8zMltpPj4+Ml09PW8zMlsoaT4+PjIpKzFdKSB7XG5cdFx0XHRuMzJbaT4+PjJdPW8zMltpPj4+Ml07XG5cdFx0XHQvL3ZhciBqID0gaSwgYz1wMzJbKGk+Pj4yKS0xXTtcblx0XHRcdC8vd2hpbGUocDMyW2o+Pj4yXT09YykgeyAgbjMyW2o+Pj4yXT1jOyAgais9NDsgIH1cblx0XHR9XG5cdH0qL1xufVxuXG5VUE5HLmVuY29kZS5fZmlsdGVyWmVybyA9IGZ1bmN0aW9uKGltZyxoLGJwcCxicGwsZGF0YSwgZmlsdGVyLCBsZXZlbFplcm8pXG57XG5cdHZhciBmbHMgPSBbXSwgZnRyeT1bMCwxLDIsMyw0XTtcblx0aWYgICAgIChmaWx0ZXIhPS0xKSAgICAgICAgICAgICBmdHJ5PVtmaWx0ZXJdO1xuXHRlbHNlIGlmKGgqYnBsPjUwMDAwMCB8fCBicHA9PTEpIGZ0cnk9WzBdO1xuXHR2YXIgb3B0czsgIGlmKGxldmVsWmVybykgb3B0cz17bGV2ZWw6MH07XG5cdFxuXHR2YXIgQ01QUiA9IChsZXZlbFplcm8gJiYgVVpJUCE9bnVsbCkgPyBVWklQIDogcGFrbztcblx0XG5cdGZvcih2YXIgaT0wOyBpPGZ0cnkubGVuZ3RoOyBpKyspIHtcblx0XHRmb3IodmFyIHk9MDsgeTxoOyB5KyspIFVQTkcuZW5jb2RlLl9maWx0ZXJMaW5lKGRhdGEsIGltZywgeSwgYnBsLCBicHAsIGZ0cnlbaV0pO1xuXHRcdC8vdmFyIG5pbWcgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCk7XG5cdFx0Ly92YXIgc3ogPSBVWklQLkYuZGVmbGF0ZShkYXRhLCBuaW1nKTsgIGZscy5wdXNoKG5pbWcuc2xpY2UoMCxzeikpO1xuXHRcdC8vdmFyIGRmbCA9IHBha29bXCJkZWZsYXRlXCJdKGRhdGEpLCBkbD1kZmwubGVuZ3RoLTQ7XG5cdFx0Ly92YXIgY3JjID0gKGRmbFtkbCszXTw8MjQpfChkZmxbZGwrMl08PDE2KXwoZGZsW2RsKzFdPDw4KXwoZGZsW2RsKzBdPDwwKTtcblx0XHQvL2NvbnNvbGUubG9nKGNyYywgVVpJUC5hZGxlcihkYXRhLDIsZGF0YS5sZW5ndGgtNikpO1xuXHRcdGZscy5wdXNoKENNUFJbXCJkZWZsYXRlXCJdKGRhdGEsb3B0cykpO1xuXHR9XG5cdHZhciB0aSwgdHNpemU9MWU5O1xuXHRmb3IodmFyIGk9MDsgaTxmbHMubGVuZ3RoOyBpKyspIGlmKGZsc1tpXS5sZW5ndGg8dHNpemUpIHsgIHRpPWk7ICB0c2l6ZT1mbHNbaV0ubGVuZ3RoOyAgfVxuXHRyZXR1cm4gZmxzW3RpXTtcbn1cblVQTkcuZW5jb2RlLl9maWx0ZXJMaW5lID0gZnVuY3Rpb24oZGF0YSwgaW1nLCB5LCBicGwsIGJwcCwgdHlwZSlcbntcblx0dmFyIGkgPSB5KmJwbCwgZGkgPSBpK3ksIHBhZXRoID0gVVBORy5kZWNvZGUuX3BhZXRoXG5cdGRhdGFbZGldPXR5cGU7ICBkaSsrO1xuXG5cdGlmKHR5cGU9PTApIHtcblx0XHRpZihicGw8NTAwKSBmb3IodmFyIHg9MDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IGltZ1tpK3hdO1xuXHRcdGVsc2UgZGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoaW1nLmJ1ZmZlcixpLGJwbCksZGkpO1xuXHR9XG5cdGVsc2UgaWYodHlwZT09MSkge1xuXHRcdGZvcih2YXIgeD0gIDA7IHg8YnBwOyB4KyspIGRhdGFbZGkreF0gPSAgaW1nW2kreF07XG5cdFx0Zm9yKHZhciB4PWJwcDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IChpbWdbaSt4XS1pbWdbaSt4LWJwcF0rMjU2KSYyNTU7XG5cdH1cblx0ZWxzZSBpZih5PT0wKSB7XG5cdFx0Zm9yKHZhciB4PSAgMDsgeDxicHA7IHgrKykgZGF0YVtkaSt4XSA9IGltZ1tpK3hdO1xuXG5cdFx0aWYodHlwZT09MikgZm9yKHZhciB4PWJwcDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IGltZ1tpK3hdO1xuXHRcdGlmKHR5cGU9PTMpIGZvcih2YXIgeD1icHA7IHg8YnBsOyB4KyspIGRhdGFbZGkreF0gPSAoaW1nW2kreF0gLSAoaW1nW2kreC1icHBdPj4xKSArMjU2KSYyNTU7XG5cdFx0aWYodHlwZT09NCkgZm9yKHZhciB4PWJwcDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IChpbWdbaSt4XSAtIHBhZXRoKGltZ1tpK3gtYnBwXSwgMCwgMCkgKzI1NikmMjU1O1xuXHR9XG5cdGVsc2Uge1xuXHRcdGlmKHR5cGU9PTIpIHsgZm9yKHZhciB4PSAgMDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IChpbWdbaSt4XSsyNTYgLSBpbWdbaSt4LWJwbF0pJjI1NTsgIH1cblx0XHRpZih0eXBlPT0zKSB7IGZvcih2YXIgeD0gIDA7IHg8YnBwOyB4KyspIGRhdGFbZGkreF0gPSAoaW1nW2kreF0rMjU2IC0gKGltZ1tpK3gtYnBsXT4+MSkpJjI1NTtcblx0XHRcdFx0XHQgIGZvcih2YXIgeD1icHA7IHg8YnBsOyB4KyspIGRhdGFbZGkreF0gPSAoaW1nW2kreF0rMjU2IC0gKChpbWdbaSt4LWJwbF0raW1nW2kreC1icHBdKT4+MSkpJjI1NTsgIH1cblx0XHRpZih0eXBlPT00KSB7IGZvcih2YXIgeD0gIDA7IHg8YnBwOyB4KyspIGRhdGFbZGkreF0gPSAoaW1nW2kreF0rMjU2IC0gcGFldGgoMCwgaW1nW2kreC1icGxdLCAwKSkmMjU1O1xuXHRcdFx0XHRcdCAgZm9yKHZhciB4PWJwcDsgeDxicGw7IHgrKykgZGF0YVtkaSt4XSA9IChpbWdbaSt4XSsyNTYgLSBwYWV0aChpbWdbaSt4LWJwcF0sIGltZ1tpK3gtYnBsXSwgaW1nW2kreC1icHAtYnBsXSkpJjI1NTsgIH1cblx0fVxufVxuXG5VUE5HLmNyYyA9IHtcblx0dGFibGUgOiAoIGZ1bmN0aW9uKCkge1xuXHQgICB2YXIgdGFiID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XG5cdCAgIGZvciAodmFyIG49MDsgbjwyNTY7IG4rKykge1xuXHRcdFx0dmFyIGMgPSBuO1xuXHRcdFx0Zm9yICh2YXIgaz0wOyBrPDg7IGsrKykge1xuXHRcdFx0XHRpZiAoYyAmIDEpICBjID0gMHhlZGI4ODMyMCBeIChjID4+PiAxKTtcblx0XHRcdFx0ZWxzZSAgICAgICAgYyA9IGMgPj4+IDE7XG5cdFx0XHR9XG5cdFx0XHR0YWJbbl0gPSBjOyAgfVxuXHRcdHJldHVybiB0YWI7ICB9KSgpLFxuXHR1cGRhdGUgOiBmdW5jdGlvbihjLCBidWYsIG9mZiwgbGVuKSB7XG5cdFx0Zm9yICh2YXIgaT0wOyBpPGxlbjsgaSsrKSAgYyA9IFVQTkcuY3JjLnRhYmxlWyhjIF4gYnVmW29mZitpXSkgJiAweGZmXSBeIChjID4+PiA4KTtcblx0XHRyZXR1cm4gYztcblx0fSxcblx0Y3JjIDogZnVuY3Rpb24oYixvLGwpICB7ICByZXR1cm4gVVBORy5jcmMudXBkYXRlKDB4ZmZmZmZmZmYsYixvLGwpIF4gMHhmZmZmZmZmZjsgIH1cbn1cblxuXG5VUE5HLnF1YW50aXplID0gZnVuY3Rpb24oYWJ1ZiwgcHMpXG57XHRcblx0dmFyIG9pbWcgPSBuZXcgVWludDhBcnJheShhYnVmKSwgbmltZyA9IG9pbWcuc2xpY2UoMCksIG5pbWczMiA9IG5ldyBVaW50MzJBcnJheShuaW1nLmJ1ZmZlcik7XG5cdFxuXHR2YXIgS0QgPSBVUE5HLnF1YW50aXplLmdldEtEdHJlZShuaW1nLCBwcyk7XG5cdHZhciByb290ID0gS0RbMF0sIGxlYWZzID0gS0RbMV07XG5cdFxuXHR2YXIgcGxhbmVEc3QgPSBVUE5HLnF1YW50aXplLnBsYW5lRHN0O1xuXHR2YXIgc2IgPSBvaW1nLCB0YiA9IG5pbWczMiwgbGVuPXNiLmxlbmd0aDtcblx0XHRcblx0dmFyIGluZHMgPSBuZXcgVWludDhBcnJheShvaW1nLmxlbmd0aD4+Mik7XG5cdGZvcih2YXIgaT0wOyBpPGxlbjsgaSs9NCkge1xuXHRcdHZhciByPXNiW2ldKigxLzI1NSksIGc9c2JbaSsxXSooMS8yNTUpLCBiPXNiW2krMl0qKDEvMjU1KSwgYT1zYltpKzNdKigxLzI1NSk7XG5cdFx0XG5cdFx0Ly8gIGV4YWN0LCBidXQgdG9vIHNsb3cgOihcblx0XHR2YXIgbmQgPSBVUE5HLnF1YW50aXplLmdldE5lYXJlc3Qocm9vdCwgciwgZywgYiwgYSk7XG5cdFx0Ly92YXIgbmQgPSByb290O1xuXHRcdC8vd2hpbGUobmQubGVmdCkgbmQgPSAocGxhbmVEc3QobmQuZXN0LHIsZyxiLGEpPD0wKSA/IG5kLmxlZnQgOiBuZC5yaWdodDtcblx0XHRcblx0XHRpbmRzW2k+PjJdID0gbmQuaW5kO1xuXHRcdHRiW2k+PjJdID0gbmQuZXN0LnJnYmE7XG5cdH1cblx0cmV0dXJuIHsgIGFidWY6bmltZy5idWZmZXIsIGluZHM6aW5kcywgcGx0ZTpsZWFmcyAgfTtcbn1cblxuVVBORy5xdWFudGl6ZS5nZXRLRHRyZWUgPSBmdW5jdGlvbihuaW1nLCBwcywgZXJyKSB7XG5cdGlmKGVycj09bnVsbCkgZXJyID0gMC4wMDAxO1xuXHR2YXIgbmltZzMyID0gbmV3IFVpbnQzMkFycmF5KG5pbWcuYnVmZmVyKTtcblx0XG5cdHZhciByb290ID0ge2kwOjAsIGkxOm5pbWcubGVuZ3RoLCBic3Q6bnVsbCwgZXN0Om51bGwsIHRkc3Q6MCwgbGVmdDpudWxsLCByaWdodDpudWxsIH07ICAvLyBiYXNpYyBzdGF0aXN0aWMsIGV4dHJhIHN0YXRpc3RpY1xuXHRyb290LmJzdCA9IFVQTkcucXVhbnRpemUuc3RhdHMoICBuaW1nLHJvb3QuaTAsIHJvb3QuaTEgICk7ICByb290LmVzdCA9IFVQTkcucXVhbnRpemUuZXN0YXRzKCByb290LmJzdCApO1xuXHR2YXIgbGVhZnMgPSBbcm9vdF07XG5cdFxuXHR3aGlsZShsZWFmcy5sZW5ndGg8cHMpXG5cdHtcblx0XHR2YXIgbWF4TCA9IDAsIG1pPTA7XG5cdFx0Zm9yKHZhciBpPTA7IGk8bGVhZnMubGVuZ3RoOyBpKyspIGlmKGxlYWZzW2ldLmVzdC5MID4gbWF4TCkgeyAgbWF4TD1sZWFmc1tpXS5lc3QuTDsgIG1pPWk7ICB9XG5cdFx0aWYobWF4TDxlcnIpIGJyZWFrO1xuXHRcdHZhciBub2RlID0gbGVhZnNbbWldO1xuXHRcdFxuXHRcdHZhciBzMCA9IFVQTkcucXVhbnRpemUuc3BsaXRQaXhlbHMobmltZyxuaW1nMzIsIG5vZGUuaTAsIG5vZGUuaTEsIG5vZGUuZXN0LmUsIG5vZGUuZXN0LmVNcTI1NSk7XG5cdFx0dmFyIHMwd3JvbmcgPSAobm9kZS5pMD49czAgfHwgbm9kZS5pMTw9czApO1xuXHRcdC8vY29uc29sZS5sb2cobWF4TCwgbGVhZnMubGVuZ3RoLCBtaSk7XG5cdFx0aWYoczB3cm9uZykgeyAgbm9kZS5lc3QuTD0wOyAgY29udGludWU7ICB9XG5cdFx0XG5cdFx0XG5cdFx0dmFyIGxuID0ge2kwOm5vZGUuaTAsIGkxOnMwLCBic3Q6bnVsbCwgZXN0Om51bGwsIHRkc3Q6MCwgbGVmdDpudWxsLCByaWdodDpudWxsIH07ICBsbi5ic3QgPSBVUE5HLnF1YW50aXplLnN0YXRzKCBuaW1nLCBsbi5pMCwgbG4uaTEgKTsgIFxuXHRcdGxuLmVzdCA9IFVQTkcucXVhbnRpemUuZXN0YXRzKCBsbi5ic3QgKTtcblx0XHR2YXIgcm4gPSB7aTA6czAsIGkxOm5vZGUuaTEsIGJzdDpudWxsLCBlc3Q6bnVsbCwgdGRzdDowLCBsZWZ0Om51bGwsIHJpZ2h0Om51bGwgfTsgIHJuLmJzdCA9IHtSOltdLCBtOltdLCBOOm5vZGUuYnN0Lk4tbG4uYnN0Lk59O1xuXHRcdGZvcih2YXIgaT0wOyBpPDE2OyBpKyspIHJuLmJzdC5SW2ldID0gbm9kZS5ic3QuUltpXS1sbi5ic3QuUltpXTtcblx0XHRmb3IodmFyIGk9MDsgaTwgNDsgaSsrKSBybi5ic3QubVtpXSA9IG5vZGUuYnN0Lm1baV0tbG4uYnN0Lm1baV07XG5cdFx0cm4uZXN0ID0gVVBORy5xdWFudGl6ZS5lc3RhdHMoIHJuLmJzdCApO1xuXHRcdFxuXHRcdG5vZGUubGVmdCA9IGxuOyAgbm9kZS5yaWdodCA9IHJuO1xuXHRcdGxlYWZzW21pXT1sbjsgIGxlYWZzLnB1c2gocm4pO1xuXHR9XG5cdGxlYWZzLnNvcnQoZnVuY3Rpb24oYSxiKSB7ICByZXR1cm4gYi5ic3QuTi1hLmJzdC5OOyAgfSk7XG5cdGZvcih2YXIgaT0wOyBpPGxlYWZzLmxlbmd0aDsgaSsrKSBsZWFmc1tpXS5pbmQ9aTtcblx0cmV0dXJuIFtyb290LCBsZWFmc107XG59XG5cblVQTkcucXVhbnRpemUuZ2V0TmVhcmVzdCA9IGZ1bmN0aW9uKG5kLCByLGcsYixhKVxue1xuXHRpZihuZC5sZWZ0PT1udWxsKSB7ICBuZC50ZHN0ID0gVVBORy5xdWFudGl6ZS5kaXN0KG5kLmVzdC5xLHIsZyxiLGEpOyAgcmV0dXJuIG5kOyAgfVxuXHR2YXIgcGxhbmVEc3QgPSBVUE5HLnF1YW50aXplLnBsYW5lRHN0KG5kLmVzdCxyLGcsYixhKTtcblx0XG5cdHZhciBub2RlMCA9IG5kLmxlZnQsIG5vZGUxID0gbmQucmlnaHQ7XG5cdGlmKHBsYW5lRHN0PjApIHsgIG5vZGUwPW5kLnJpZ2h0OyAgbm9kZTE9bmQubGVmdDsgIH1cblx0XG5cdHZhciBsbiA9IFVQTkcucXVhbnRpemUuZ2V0TmVhcmVzdChub2RlMCwgcixnLGIsYSk7XG5cdGlmKGxuLnRkc3Q8PXBsYW5lRHN0KnBsYW5lRHN0KSByZXR1cm4gbG47XG5cdHZhciBybiA9IFVQTkcucXVhbnRpemUuZ2V0TmVhcmVzdChub2RlMSwgcixnLGIsYSk7XG5cdHJldHVybiBybi50ZHN0PGxuLnRkc3QgPyBybiA6IGxuO1xufVxuVVBORy5xdWFudGl6ZS5wbGFuZURzdCA9IGZ1bmN0aW9uKGVzdCwgcixnLGIsYSkgeyAgdmFyIGUgPSBlc3QuZTsgIHJldHVybiBlWzBdKnIgKyBlWzFdKmcgKyBlWzJdKmIgKyBlWzNdKmEgLSBlc3QuZU1xOyAgfVxuVVBORy5xdWFudGl6ZS5kaXN0ICAgICA9IGZ1bmN0aW9uKHEsICAgcixnLGIsYSkgeyAgdmFyIGQwPXItcVswXSwgZDE9Zy1xWzFdLCBkMj1iLXFbMl0sIGQzPWEtcVszXTsgIHJldHVybiBkMCpkMCtkMSpkMStkMipkMitkMypkMzsgIH1cblxuVVBORy5xdWFudGl6ZS5zcGxpdFBpeGVscyA9IGZ1bmN0aW9uKG5pbWcsIG5pbWczMiwgaTAsIGkxLCBlLCBlTXEpXG57XG5cdHZhciB2ZWNEb3QgPSBVUE5HLnF1YW50aXplLnZlY0RvdDtcblx0aTEtPTQ7XG5cdHZhciBzaGZzID0gMDtcblx0d2hpbGUoaTA8aTEpXG5cdHtcblx0XHR3aGlsZSh2ZWNEb3QobmltZywgaTAsIGUpPD1lTXEpIGkwKz00O1xuXHRcdHdoaWxlKHZlY0RvdChuaW1nLCBpMSwgZSk+IGVNcSkgaTEtPTQ7XG5cdFx0aWYoaTA+PWkxKSBicmVhaztcblx0XHRcblx0XHR2YXIgdCA9IG5pbWczMltpMD4+Ml07ICBuaW1nMzJbaTA+PjJdID0gbmltZzMyW2kxPj4yXTsgIG5pbWczMltpMT4+Ml09dDtcblx0XHRcblx0XHRpMCs9NDsgIGkxLT00O1xuXHR9XG5cdHdoaWxlKHZlY0RvdChuaW1nLCBpMCwgZSk+ZU1xKSBpMC09NDtcblx0cmV0dXJuIGkwKzQ7XG59XG5VUE5HLnF1YW50aXplLnZlY0RvdCA9IGZ1bmN0aW9uKG5pbWcsIGksIGUpXG57XG5cdHJldHVybiBuaW1nW2ldKmVbMF0gKyBuaW1nW2krMV0qZVsxXSArIG5pbWdbaSsyXSplWzJdICsgbmltZ1tpKzNdKmVbM107XG59XG5VUE5HLnF1YW50aXplLnN0YXRzID0gZnVuY3Rpb24obmltZywgaTAsIGkxKXtcblx0dmFyIFIgPSBbMCwwLDAsMCwgIDAsMCwwLDAsICAwLDAsMCwwLCAgMCwwLDAsMF07XG5cdHZhciBtID0gWzAsMCwwLDBdO1xuXHR2YXIgTiA9IChpMS1pMCk+PjI7XG5cdGZvcih2YXIgaT1pMDsgaTxpMTsgaSs9NClcblx0e1xuXHRcdHZhciByID0gbmltZ1tpXSooMS8yNTUpLCBnID0gbmltZ1tpKzFdKigxLzI1NSksIGIgPSBuaW1nW2krMl0qKDEvMjU1KSwgYSA9IG5pbWdbaSszXSooMS8yNTUpO1xuXHRcdC8vdmFyIHIgPSBuaW1nW2ldLCBnID0gbmltZ1tpKzFdLCBiID0gbmltZ1tpKzJdLCBhID0gbmltZ1tpKzNdO1xuXHRcdG1bMF0rPXI7ICBtWzFdKz1nOyAgbVsyXSs9YjsgIG1bM10rPWE7XG5cdFx0XG5cdFx0UlsgMF0gKz0gcipyOyAgUlsgMV0gKz0gcipnOyAgUlsgMl0gKz0gcipiOyAgUlsgM10gKz0gciphOyAgXG5cdFx0ICAgICAgICAgICAgICAgUlsgNV0gKz0gZypnOyAgUlsgNl0gKz0gZypiOyAgUlsgN10gKz0gZyphOyBcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSWzEwXSArPSBiKmI7ICBSWzExXSArPSBiKmE7ICBcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSWzE1XSArPSBhKmE7ICBcblx0fVxuXHRSWzRdPVJbMV07ICBSWzhdPVJbMl07ICBSWzldPVJbNl07ICBSWzEyXT1SWzNdOyAgUlsxM109Uls3XTsgIFJbMTRdPVJbMTFdO1xuXHRcblx0cmV0dXJuIHtSOlIsIG06bSwgTjpOfTtcbn1cblVQTkcucXVhbnRpemUuZXN0YXRzID0gZnVuY3Rpb24oc3RhdHMpe1xuXHR2YXIgUiA9IHN0YXRzLlIsIG0gPSBzdGF0cy5tLCBOID0gc3RhdHMuTjtcblx0XG5cdC8vIHdoZW4gYWxsIHNhbXBsZXMgYXJlIGVxdWFsLCBidXQgTiBpcyBsYXJnZSAobWlsbGlvbnMpLCB0aGUgUmogY2FuIGJlIG5vbi16ZXJvICggMC4wMDAzLi4uLiAtIHByZWNpc3Npb24gZXJyb3IpXG5cdHZhciBtMCA9IG1bMF0sIG0xID0gbVsxXSwgbTIgPSBtWzJdLCBtMyA9IG1bM10sIGlOID0gKE49PTAgPyAwIDogMS9OKTtcblx0dmFyIFJqID0gW1xuXHRcdFJbIDBdIC0gbTAqbTAqaU4sICBSWyAxXSAtIG0wKm0xKmlOLCAgUlsgMl0gLSBtMCptMippTiwgIFJbIDNdIC0gbTAqbTMqaU4sICBcblx0XHRSWyA0XSAtIG0xKm0wKmlOLCAgUlsgNV0gLSBtMSptMSppTiwgIFJbIDZdIC0gbTEqbTIqaU4sICBSWyA3XSAtIG0xKm0zKmlOLFxuXHRcdFJbIDhdIC0gbTIqbTAqaU4sICBSWyA5XSAtIG0yKm0xKmlOLCAgUlsxMF0gLSBtMiptMippTiwgIFJbMTFdIC0gbTIqbTMqaU4sICBcblx0XHRSWzEyXSAtIG0zKm0wKmlOLCAgUlsxM10gLSBtMyptMSppTiwgIFJbMTRdIC0gbTMqbTIqaU4sICBSWzE1XSAtIG0zKm0zKmlOIFxuXHRdO1xuXHRcblx0dmFyIEEgPSBSaiwgTSA9IFVQTkcuTTQ7XG5cdHZhciBiID0gWzAuNSwwLjUsMC41LDAuNV0sIG1pID0gMCwgdG1pID0gMDtcblx0XG5cdGlmKE4hPTApXG5cdGZvcih2YXIgaT0wOyBpPDEwOyBpKyspIHtcblx0XHRiID0gTS5tdWx0VmVjKEEsIGIpOyAgdG1pID0gTWF0aC5zcXJ0KE0uZG90KGIsYikpOyAgYiA9IE0uc21sKDEvdG1pLCAgYik7XG5cdFx0aWYoTWF0aC5hYnModG1pLW1pKTwxZS05KSBicmVhazsgIG1pID0gdG1pO1xuXHR9XHRcblx0Ly9iID0gWzAsMCwxLDBdOyAgbWk9Tjtcblx0dmFyIHEgPSBbbTAqaU4sIG0xKmlOLCBtMippTiwgbTMqaU5dO1xuXHR2YXIgZU1xMjU1ID0gTS5kb3QoTS5zbWwoMjU1LHEpLGIpO1xuXHRcblx0cmV0dXJuIHsgIENvdjpSaiwgcTpxLCBlOmIsIEw6bWksICBlTXEyNTU6ZU1xMjU1LCBlTXEgOiBNLmRvdChiLHEpLFxuXHRcdFx0XHRyZ2JhOiAoKChNYXRoLnJvdW5kKDI1NSpxWzNdKTw8MjQpIHwgKE1hdGgucm91bmQoMjU1KnFbMl0pPDwxNikgfCAgKE1hdGgucm91bmQoMjU1KnFbMV0pPDw4KSB8IChNYXRoLnJvdW5kKDI1NSpxWzBdKTw8MCkpPj4+MCkgIH07XG59XG5VUE5HLk00ID0ge1xuXHRtdWx0VmVjIDogZnVuY3Rpb24obSx2KSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRtWyAwXSp2WzBdICsgbVsgMV0qdlsxXSArIG1bIDJdKnZbMl0gKyBtWyAzXSp2WzNdLFxuXHRcdFx0XHRtWyA0XSp2WzBdICsgbVsgNV0qdlsxXSArIG1bIDZdKnZbMl0gKyBtWyA3XSp2WzNdLFxuXHRcdFx0XHRtWyA4XSp2WzBdICsgbVsgOV0qdlsxXSArIG1bMTBdKnZbMl0gKyBtWzExXSp2WzNdLFxuXHRcdFx0XHRtWzEyXSp2WzBdICsgbVsxM10qdlsxXSArIG1bMTRdKnZbMl0gKyBtWzE1XSp2WzNdXG5cdFx0XHRdO1xuXHR9LFxuXHRkb3QgOiBmdW5jdGlvbih4LHkpIHsgIHJldHVybiAgeFswXSp5WzBdK3hbMV0qeVsxXSt4WzJdKnlbMl0reFszXSp5WzNdOyAgfSxcblx0c21sIDogZnVuY3Rpb24oYSx5KSB7ICByZXR1cm4gW2EqeVswXSxhKnlbMV0sYSp5WzJdLGEqeVszXV07ICB9XG59XG5cblVQTkcuZW5jb2RlLmNvbmNhdFJHQkEgPSBmdW5jdGlvbihidWZzKSB7XG5cdHZhciB0bGVuID0gMDtcblx0Zm9yKHZhciBpPTA7IGk8YnVmcy5sZW5ndGg7IGkrKykgdGxlbiArPSBidWZzW2ldLmJ5dGVMZW5ndGg7XG5cdHZhciBuaW1nID0gbmV3IFVpbnQ4QXJyYXkodGxlbiksIG5vZmY9MDtcblx0Zm9yKHZhciBpPTA7IGk8YnVmcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpbWcgPSBuZXcgVWludDhBcnJheShidWZzW2ldKSwgaWwgPSBpbWcubGVuZ3RoO1xuXHRcdGZvcih2YXIgaj0wOyBqPGlsOyBqKz00KSB7ICBcblx0XHRcdHZhciByPWltZ1tqXSwgZz1pbWdbaisxXSwgYj1pbWdbaisyXSwgYSA9IGltZ1tqKzNdO1xuXHRcdFx0aWYoYT09MCkgcj1nPWI9MDtcblx0XHRcdG5pbWdbbm9mZitqXT1yOyAgbmltZ1tub2ZmK2orMV09ZzsgIG5pbWdbbm9mZitqKzJdPWI7ICBuaW1nW25vZmYraiszXT1hOyAgfVxuXHRcdG5vZmYgKz0gaWw7XG5cdH1cblx0cmV0dXJuIG5pbWcuYnVmZmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVUE5HO1xuXG4iLCJpbXBvcnQgVVBORyBmcm9tICdAcGRmLWxpYi91cG5nJztcbnZhciBnZXRJbWFnZVR5cGUgPSBmdW5jdGlvbiAoY3R5cGUpIHtcbiAgICBpZiAoY3R5cGUgPT09IDApXG4gICAgICAgIHJldHVybiBQbmdUeXBlLkdyZXlzY2FsZTtcbiAgICBpZiAoY3R5cGUgPT09IDIpXG4gICAgICAgIHJldHVybiBQbmdUeXBlLlRydWVjb2xvdXI7XG4gICAgaWYgKGN0eXBlID09PSAzKVxuICAgICAgICByZXR1cm4gUG5nVHlwZS5JbmRleGVkQ29sb3VyO1xuICAgIGlmIChjdHlwZSA9PT0gNClcbiAgICAgICAgcmV0dXJuIFBuZ1R5cGUuR3JleXNjYWxlV2l0aEFscGhhO1xuICAgIGlmIChjdHlwZSA9PT0gNilcbiAgICAgICAgcmV0dXJuIFBuZ1R5cGUuVHJ1ZWNvbG91cldpdGhBbHBoYTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGNvbG9yIHR5cGU6IFwiICsgY3R5cGUpO1xufTtcbnZhciBzcGxpdEFscGhhQ2hhbm5lbCA9IGZ1bmN0aW9uIChyZ2JhQ2hhbm5lbCkge1xuICAgIHZhciBwaXhlbENvdW50ID0gTWF0aC5mbG9vcihyZ2JhQ2hhbm5lbC5sZW5ndGggLyA0KTtcbiAgICB2YXIgcmdiQ2hhbm5lbCA9IG5ldyBVaW50OEFycmF5KHBpeGVsQ291bnQgKiAzKTtcbiAgICB2YXIgYWxwaGFDaGFubmVsID0gbmV3IFVpbnQ4QXJyYXkocGl4ZWxDb3VudCAqIDEpO1xuICAgIHZhciByZ2JhT2Zmc2V0ID0gMDtcbiAgICB2YXIgcmdiT2Zmc2V0ID0gMDtcbiAgICB2YXIgYWxwaGFPZmZzZXQgPSAwO1xuICAgIHdoaWxlIChyZ2JhT2Zmc2V0IDwgcmdiYUNoYW5uZWwubGVuZ3RoKSB7XG4gICAgICAgIHJnYkNoYW5uZWxbcmdiT2Zmc2V0KytdID0gcmdiYUNoYW5uZWxbcmdiYU9mZnNldCsrXTtcbiAgICAgICAgcmdiQ2hhbm5lbFtyZ2JPZmZzZXQrK10gPSByZ2JhQ2hhbm5lbFtyZ2JhT2Zmc2V0KytdO1xuICAgICAgICByZ2JDaGFubmVsW3JnYk9mZnNldCsrXSA9IHJnYmFDaGFubmVsW3JnYmFPZmZzZXQrK107XG4gICAgICAgIGFscGhhQ2hhbm5lbFthbHBoYU9mZnNldCsrXSA9IHJnYmFDaGFubmVsW3JnYmFPZmZzZXQrK107XG4gICAgfVxuICAgIHJldHVybiB7IHJnYkNoYW5uZWw6IHJnYkNoYW5uZWwsIGFscGhhQ2hhbm5lbDogYWxwaGFDaGFubmVsIH07XG59O1xuZXhwb3J0IHZhciBQbmdUeXBlO1xuKGZ1bmN0aW9uIChQbmdUeXBlKSB7XG4gICAgUG5nVHlwZVtcIkdyZXlzY2FsZVwiXSA9IFwiR3JleXNjYWxlXCI7XG4gICAgUG5nVHlwZVtcIlRydWVjb2xvdXJcIl0gPSBcIlRydWVjb2xvdXJcIjtcbiAgICBQbmdUeXBlW1wiSW5kZXhlZENvbG91clwiXSA9IFwiSW5kZXhlZENvbG91clwiO1xuICAgIFBuZ1R5cGVbXCJHcmV5c2NhbGVXaXRoQWxwaGFcIl0gPSBcIkdyZXlzY2FsZVdpdGhBbHBoYVwiO1xuICAgIFBuZ1R5cGVbXCJUcnVlY29sb3VyV2l0aEFscGhhXCJdID0gXCJUcnVlY29sb3VyV2l0aEFscGhhXCI7XG59KShQbmdUeXBlIHx8IChQbmdUeXBlID0ge30pKTtcbnZhciBQTkcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUE5HKHBuZ0RhdGEpIHtcbiAgICAgICAgdmFyIHVwbmcgPSBVUE5HLmRlY29kZShwbmdEYXRhKTtcbiAgICAgICAgdmFyIGZyYW1lcyA9IFVQTkcudG9SR0JBOCh1cG5nKTtcbiAgICAgICAgaWYgKGZyYW1lcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW5pbWF0ZWQgUE5HcyBhcmUgbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgdmFyIGZyYW1lID0gbmV3IFVpbnQ4QXJyYXkoZnJhbWVzWzBdKTtcbiAgICAgICAgdmFyIF9hID0gc3BsaXRBbHBoYUNoYW5uZWwoZnJhbWUpLCByZ2JDaGFubmVsID0gX2EucmdiQ2hhbm5lbCwgYWxwaGFDaGFubmVsID0gX2EuYWxwaGFDaGFubmVsO1xuICAgICAgICB0aGlzLnJnYkNoYW5uZWwgPSByZ2JDaGFubmVsO1xuICAgICAgICB2YXIgaGFzQWxwaGFWYWx1ZXMgPSBhbHBoYUNoYW5uZWwuc29tZShmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSA8IDI1NTsgfSk7XG4gICAgICAgIGlmIChoYXNBbHBoYVZhbHVlcylcbiAgICAgICAgICAgIHRoaXMuYWxwaGFDaGFubmVsID0gYWxwaGFDaGFubmVsO1xuICAgICAgICB0aGlzLnR5cGUgPSBnZXRJbWFnZVR5cGUodXBuZy5jdHlwZSk7XG4gICAgICAgIHRoaXMud2lkdGggPSB1cG5nLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVwbmcuaGVpZ2h0O1xuICAgICAgICB0aGlzLmJpdHNQZXJDb21wb25lbnQgPSA4O1xuICAgIH1cbiAgICBQTkcubG9hZCA9IGZ1bmN0aW9uIChwbmdEYXRhKSB7IHJldHVybiBuZXcgUE5HKHBuZ0RhdGEpOyB9O1xuICAgIHJldHVybiBQTkc7XG59KCkpO1xuZXhwb3J0IHsgUE5HIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbmcuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUE5HIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3BuZ1wiO1xuLyoqXG4gKiBBIG5vdGUgb2YgdGhhbmtzIHRvIHRoZSBkZXZlbG9wZXJzIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9mb2xpb2pzL3BkZmtpdCwgYXNcbiAqIHRoaXMgY2xhc3MgYm9ycm93cyBmcm9tOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZGV2b25nb3ZldHQvcGRma2l0L2Jsb2IvZTcxZWRhYjBkZDQ2NTdiNWE3Njc4MDRiYTg2Yzk0YzU4ZDAxZmJjYS9saWIvaW1hZ2UvcG5nLmNvZmZlZVxuICovXG52YXIgUG5nRW1iZWRkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUG5nRW1iZWRkZXIocG5nKSB7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBwbmc7XG4gICAgICAgIHRoaXMuYml0c1BlckNvbXBvbmVudCA9IHBuZy5iaXRzUGVyQ29tcG9uZW50O1xuICAgICAgICB0aGlzLndpZHRoID0gcG5nLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHBuZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY29sb3JTcGFjZSA9ICdEZXZpY2VSR0InO1xuICAgIH1cbiAgICBQbmdFbWJlZGRlci5mb3IgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwbmc7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgcG5nID0gUE5HLmxvYWQoaW1hZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFBuZ0VtYmVkZGVyKHBuZyldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUG5nRW1iZWRkZXIucHJvdG90eXBlLmVtYmVkSW50b0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBTTWFzaywgeE9iamVjdDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBTTWFzayA9IHRoaXMuZW1iZWRBbHBoYUNoYW5uZWwoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgeE9iamVjdCA9IGNvbnRleHQuZmxhdGVTdHJlYW0odGhpcy5pbWFnZS5yZ2JDaGFubmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIFR5cGU6ICdYT2JqZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogJ0ltYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgQml0c1BlckNvbXBvbmVudDogdGhpcy5pbWFnZS5iaXRzUGVyQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICBXaWR0aDogdGhpcy5pbWFnZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgSGVpZ2h0OiB0aGlzLmltYWdlLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgQ29sb3JTcGFjZTogdGhpcy5jb2xvclNwYWNlLFxuICAgICAgICAgICAgICAgICAgICBTTWFzazogU01hc2ssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFzc2lnbihyZWYsIHhPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb250ZXh0LnJlZ2lzdGVyKHhPYmplY3QpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUG5nRW1iZWRkZXIucHJvdG90eXBlLmVtYmVkQWxwaGFDaGFubmVsID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmltYWdlLmFscGhhQ2hhbm5lbClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB4T2JqZWN0ID0gY29udGV4dC5mbGF0ZVN0cmVhbSh0aGlzLmltYWdlLmFscGhhQ2hhbm5lbCwge1xuICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLFxuICAgICAgICAgICAgU3VidHlwZTogJ0ltYWdlJyxcbiAgICAgICAgICAgIEhlaWdodDogdGhpcy5pbWFnZS5oZWlnaHQsXG4gICAgICAgICAgICBXaWR0aDogdGhpcy5pbWFnZS53aWR0aCxcbiAgICAgICAgICAgIEJpdHNQZXJDb21wb25lbnQ6IHRoaXMuaW1hZ2UuYml0c1BlckNvbXBvbmVudCxcbiAgICAgICAgICAgIENvbG9yU3BhY2U6ICdEZXZpY2VHcmF5JyxcbiAgICAgICAgICAgIERlY29kZTogWzAsIDFdLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmVnaXN0ZXIoeE9iamVjdCk7XG4gICAgfTtcbiAgICByZXR1cm4gUG5nRW1iZWRkZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUG5nRW1iZWRkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QbmdFbWJlZGRlci5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMTIgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogVGhlIFN0cmVhbSBjbGFzcyBjb250YWluZWQgaW4gdGhpcyBmaWxlIGlzIGEgVHlwZVNjcmlwdCBwb3J0IG9mIHRoZVxuICogSmF2YVNjcmlwdCBTdHJlYW0gY2xhc3MgaW4gTW96aWxsYSdzIHBkZi5qcyBwcm9qZWN0LCBtYWRlIGF2YWlsYWJsZVxuICogdW5kZXIgdGhlIEFwYWNoZSAyLjAgb3BlbiBzb3VyY2UgbGljZW5zZS5cbiAqL1xudmFyIFN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHJlYW0oYnVmZmVyLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYnl0ZXMgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgICAgIHRoaXMuZW5kID0gISFzdGFydCAmJiAhIWxlbmd0aCA/IHN0YXJ0ICsgbGVuZ3RoIDogdGhpcy5ieXRlcy5sZW5ndGg7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJlYW0ucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5kIC0gdGhpcy5zdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJlYW0ucHJvdG90eXBlLCBcImlzRW1wdHlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZ2V0Qnl0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXNbdGhpcy5wb3MrK107XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmdldFVpbnQxNiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIwID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgICAgIHZhciBiMSA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICBpZiAoYjAgPT09IC0xIHx8IGIxID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYjAgPDwgOCkgKyBiMTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZ2V0SW50MzIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiMCA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICB2YXIgYjEgPSB0aGlzLmdldEJ5dGUoKTtcbiAgICAgICAgdmFyIGIyID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgICAgIHZhciBiMyA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICByZXR1cm4gKGIwIDw8IDI0KSArIChiMSA8PCAxNikgKyAoYjIgPDwgOCkgKyBiMztcbiAgICB9O1xuICAgIC8vIFJldHVybnMgc3ViYXJyYXkgb2Ygb3JpZ2luYWwgYnVmZmVyLCBzaG91bGQgb25seSBiZSByZWFkLlxuICAgIFN0cmVhbS5wcm90b3R5cGUuZ2V0Qnl0ZXMgPSBmdW5jdGlvbiAobGVuZ3RoLCBmb3JjZUNsYW1wZWQpIHtcbiAgICAgICAgaWYgKGZvcmNlQ2xhbXBlZCA9PT0gdm9pZCAwKSB7IGZvcmNlQ2xhbXBlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBieXRlcyA9IHRoaXMuYnl0ZXM7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgICAgICAgdmFyIHN0ckVuZCA9IHRoaXMuZW5kO1xuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHN1YmFycmF5ID0gYnl0ZXMuc3ViYXJyYXkocG9zLCBzdHJFbmQpO1xuICAgICAgICAgICAgLy8gYHRoaXMuYnl0ZXNgIGlzIGFsd2F5cyBhIGBVaW50OEFycmF5YCBoZXJlLlxuICAgICAgICAgICAgcmV0dXJuIGZvcmNlQ2xhbXBlZCA/IG5ldyBVaW50OENsYW1wZWRBcnJheShzdWJhcnJheSkgOiBzdWJhcnJheTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlbmQgPSBwb3MgKyBsZW5ndGg7XG4gICAgICAgICAgICBpZiAoZW5kID4gc3RyRW5kKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gc3RyRW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb3MgPSBlbmQ7XG4gICAgICAgICAgICB2YXIgc3ViYXJyYXkgPSBieXRlcy5zdWJhcnJheShwb3MsIGVuZCk7XG4gICAgICAgICAgICAvLyBgdGhpcy5ieXRlc2AgaXMgYWx3YXlzIGEgYFVpbnQ4QXJyYXlgIGhlcmUuXG4gICAgICAgICAgICByZXR1cm4gZm9yY2VDbGFtcGVkID8gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHN1YmFycmF5KSA6IHN1YmFycmF5O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLnBlZWtCeXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGVla2VkQnl0ZSA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICB0aGlzLnBvcy0tO1xuICAgICAgICByZXR1cm4gcGVla2VkQnl0ZTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGVla0J5dGVzID0gZnVuY3Rpb24gKGxlbmd0aCwgZm9yY2VDbGFtcGVkKSB7XG4gICAgICAgIGlmIChmb3JjZUNsYW1wZWQgPT09IHZvaWQgMCkgeyBmb3JjZUNsYW1wZWQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgYnl0ZXMgPSB0aGlzLmdldEJ5dGVzKGxlbmd0aCwgZm9yY2VDbGFtcGVkKTtcbiAgICAgICAgdGhpcy5wb3MgLT0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiAobikge1xuICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgIG4gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zICs9IG47XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLm1vdmVTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMucG9zO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5tYWtlU3ViU3RyZWFtID0gZnVuY3Rpb24gKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0odGhpcy5ieXRlcywgc3RhcnQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXM7XG4gICAgfTtcbiAgICByZXR1cm4gU3RyZWFtO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0cmVhbS5qcy5tYXAiLCJpbXBvcnQgeyBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IFN0cmVhbSBmcm9tIFwiLi9TdHJlYW1cIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxMiBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBUaGUgRGVjb2RlU3RyZWFtIGNsYXNzIGNvbnRhaW5lZCBpbiB0aGlzIGZpbGUgaXMgYSBUeXBlU2NyaXB0IHBvcnQgb2YgdGhlXG4gKiBKYXZhU2NyaXB0IERlY29kZVN0cmVhbSBjbGFzcyBpbiBNb3ppbGxhJ3MgcGRmLmpzIHByb2plY3QsIG1hZGUgYXZhaWxhYmxlXG4gKiB1bmRlciB0aGUgQXBhY2hlIDIuMCBvcGVuIHNvdXJjZSBsaWNlbnNlLlxuICovXG4vLyBMb3RzIG9mIERlY29kZVN0cmVhbXMgYXJlIGNyZWF0ZWQgd2hvc2UgYnVmZmVycyBhcmUgbmV2ZXIgdXNlZC4gIEZvciB0aGVzZVxuLy8gd2Ugc2hhcmUgYSBzaW5nbGUgZW1wdHkgYnVmZmVyLiBUaGlzIGlzIChhKSBzcGFjZS1lZmZpY2llbnQgYW5kIChiKSBhdm9pZHNcbi8vIGhhdmluZyBzcGVjaWFsIGNhc2VzIHRoYXQgd291bGQgYmUgcmVxdWlyZWQgaWYgd2UgdXNlZCB8bnVsbHwgZm9yIGFuIGVtcHR5XG4vLyBidWZmZXIuXG52YXIgZW1wdHlCdWZmZXIgPSBuZXcgVWludDhBcnJheSgwKTtcbi8qKlxuICogU3VwZXIgY2xhc3MgZm9yIHRoZSBkZWNvZGluZyBzdHJlYW1zXG4gKi9cbnZhciBEZWNvZGVTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVjb2RlU3RyZWFtKG1heWJlTWluQnVmZmVyTGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmVvZiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGVtcHR5QnVmZmVyO1xuICAgICAgICB0aGlzLm1pbkJ1ZmZlckxlbmd0aCA9IDUxMjtcbiAgICAgICAgaWYgKG1heWJlTWluQnVmZmVyTGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBmaXJzdCBwb3dlciBvZiB0d28gdGhhdCBpcyBhcyBiaWcgYXMgbWF5YmVNaW5CdWZmZXJMZW5ndGguXG4gICAgICAgICAgICB3aGlsZSAodGhpcy5taW5CdWZmZXJMZW5ndGggPCBtYXliZU1pbkJ1ZmZlckxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWluQnVmZmVyTGVuZ3RoICo9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlY29kZVN0cmVhbS5wcm90b3R5cGUsIFwiaXNFbXB0eVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmVvZiAmJiB0aGlzLmJ1ZmZlckxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVhZEJsb2NrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJMZW5ndGggPT09IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBEZWNvZGVTdHJlYW0ucHJvdG90eXBlLmdldEJ5dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgICAgICAgd2hpbGUgKHRoaXMuYnVmZmVyTGVuZ3RoIDw9IHBvcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZW9mKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWFkQmxvY2soKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5wb3MrK107XG4gICAgfTtcbiAgICBEZWNvZGVTdHJlYW0ucHJvdG90eXBlLmdldFVpbnQxNiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIwID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgICAgIHZhciBiMSA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICBpZiAoYjAgPT09IC0xIHx8IGIxID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYjAgPDwgOCkgKyBiMTtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUuZ2V0SW50MzIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiMCA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICB2YXIgYjEgPSB0aGlzLmdldEJ5dGUoKTtcbiAgICAgICAgdmFyIGIyID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgICAgIHZhciBiMyA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgICAgICByZXR1cm4gKGIwIDw8IDI0KSArIChiMSA8PCAxNikgKyAoYjIgPDwgOCkgKyBiMztcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUuZ2V0Qnl0ZXMgPSBmdW5jdGlvbiAobGVuZ3RoLCBmb3JjZUNsYW1wZWQpIHtcbiAgICAgICAgaWYgKGZvcmNlQ2xhbXBlZCA9PT0gdm9pZCAwKSB7IGZvcmNlQ2xhbXBlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbnN1cmVCdWZmZXIocG9zICsgbGVuZ3RoKTtcbiAgICAgICAgICAgIGVuZCA9IHBvcyArIGxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICghdGhpcy5lb2YgJiYgdGhpcy5idWZmZXJMZW5ndGggPCBlbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCbG9jaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJ1ZkVuZCA9IHRoaXMuYnVmZmVyTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGVuZCA+IGJ1ZkVuZCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IGJ1ZkVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlICghdGhpcy5lb2YpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCbG9jaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXJMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3MgPSBlbmQ7XG4gICAgICAgIHZhciBzdWJhcnJheSA9IHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcywgZW5kKTtcbiAgICAgICAgLy8gYHRoaXMuYnVmZmVyYCBpcyBlaXRoZXIgYSBgVWludDhBcnJheWAgb3IgYFVpbnQ4Q2xhbXBlZEFycmF5YCBoZXJlLlxuICAgICAgICByZXR1cm4gZm9yY2VDbGFtcGVkICYmICEoc3ViYXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSlcbiAgICAgICAgICAgID8gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHN1YmFycmF5KVxuICAgICAgICAgICAgOiBzdWJhcnJheTtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUucGVla0J5dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwZWVrZWRCeXRlID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgICAgIHRoaXMucG9zLS07XG4gICAgICAgIHJldHVybiBwZWVrZWRCeXRlO1xuICAgIH07XG4gICAgRGVjb2RlU3RyZWFtLnByb3RvdHlwZS5wZWVrQnl0ZXMgPSBmdW5jdGlvbiAobGVuZ3RoLCBmb3JjZUNsYW1wZWQpIHtcbiAgICAgICAgaWYgKGZvcmNlQ2xhbXBlZCA9PT0gdm9pZCAwKSB7IGZvcmNlQ2xhbXBlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBieXRlcyA9IHRoaXMuZ2V0Qnl0ZXMobGVuZ3RoLCBmb3JjZUNsYW1wZWQpO1xuICAgICAgICB0aGlzLnBvcyAtPSBieXRlcy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3MgKz0gbjtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUubWFrZVN1YlN0cmVhbSA9IGZ1bmN0aW9uIChzdGFydCwgbGVuZ3RoIC8qIGRpY3QgKi8pIHtcbiAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAodGhpcy5idWZmZXJMZW5ndGggPD0gZW5kICYmICF0aGlzLmVvZikge1xuICAgICAgICAgICAgdGhpcy5yZWFkQmxvY2soKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbSh0aGlzLmJ1ZmZlciwgc3RhcnQsIGxlbmd0aCAvKiBkaWN0ICovKTtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKVxuICAgICAgICAgICAgdGhpcy5yZWFkQmxvY2soKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YmFycmF5KDAsIHRoaXMuYnVmZmVyTGVuZ3RoKTtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUucmVhZEJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdyZWFkQmxvY2snKTtcbiAgICB9O1xuICAgIERlY29kZVN0cmVhbS5wcm90b3R5cGUuZW5zdXJlQnVmZmVyID0gZnVuY3Rpb24gKHJlcXVlc3RlZCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmIChyZXF1ZXN0ZWQgPD0gYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLm1pbkJ1ZmZlckxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHNpemUgPCByZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIHNpemUgKj0gMjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyMiA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgICAgICBidWZmZXIyLnNldChidWZmZXIpO1xuICAgICAgICByZXR1cm4gKHRoaXMuYnVmZmVyID0gYnVmZmVyMik7XG4gICAgfTtcbiAgICByZXR1cm4gRGVjb2RlU3RyZWFtO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IERlY29kZVN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlY29kZVN0cmVhbS5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMTIgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogVGhlIEFzY2lpODVTdHJlYW0gY2xhc3MgY29udGFpbmVkIGluIHRoaXMgZmlsZSBpcyBhIFR5cGVTY3JpcHQgcG9ydCBvZiB0aGVcbiAqIEphdmFTY3JpcHQgQXNjaWk4NVN0cmVhbSBjbGFzcyBpbiBNb3ppbGxhJ3MgcGRmLmpzIHByb2plY3QsIG1hZGUgYXZhaWxhYmxlXG4gKiB1bmRlciB0aGUgQXBhY2hlIDIuMCBvcGVuIHNvdXJjZSBsaWNlbnNlLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBEZWNvZGVTdHJlYW0gZnJvbSBcIi4vRGVjb2RlU3RyZWFtXCI7XG52YXIgaXNTcGFjZSA9IGZ1bmN0aW9uIChjaCkge1xuICAgIHJldHVybiBjaCA9PT0gMHgyMCB8fCBjaCA9PT0gMHgwOSB8fCBjaCA9PT0gMHgwZCB8fCBjaCA9PT0gMHgwYTtcbn07XG52YXIgQXNjaWk4NVN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXNjaWk4NVN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2NpaTg1U3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWF5YmVMZW5ndGgpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgX3RoaXMuaW5wdXQgPSBuZXcgVWludDhBcnJheSg1KTtcbiAgICAgICAgLy8gTW9zdCBzdHJlYW1zIGluY3JlYXNlIGluIHNpemUgd2hlbiBkZWNvZGVkLCBidXQgQXNjaWk4NSBzdHJlYW1zXG4gICAgICAgIC8vIHR5cGljYWxseSBzaHJpbmsgYnkgfjIwJS5cbiAgICAgICAgaWYgKG1heWJlTGVuZ3RoKSB7XG4gICAgICAgICAgICBtYXliZUxlbmd0aCA9IDAuOCAqIG1heWJlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXNjaWk4NVN0cmVhbS5wcm90b3R5cGUucmVhZEJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgVElMREFfQ0hBUiA9IDB4N2U7IC8vICd+J1xuICAgICAgICB2YXIgWl9MT1dFUl9DSEFSID0gMHg3YTsgLy8gJ3onXG4gICAgICAgIHZhciBFT0YgPSAtMTtcbiAgICAgICAgdmFyIHN0cmVhbSA9IHRoaXMuc3RyZWFtO1xuICAgICAgICB2YXIgYyA9IHN0cmVhbS5nZXRCeXRlKCk7XG4gICAgICAgIHdoaWxlIChpc1NwYWNlKGMpKSB7XG4gICAgICAgICAgICBjID0gc3RyZWFtLmdldEJ5dGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gRU9GIHx8IGMgPT09IFRJTERBX0NIQVIpIHtcbiAgICAgICAgICAgIHRoaXMuZW9mID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7XG4gICAgICAgIHZhciBidWZmZXI7XG4gICAgICAgIHZhciBpO1xuICAgICAgICAvLyBzcGVjaWFsIGNvZGUgZm9yIHpcbiAgICAgICAgaWYgKGMgPT09IFpfTE9XRVJfQ0hBUikge1xuICAgICAgICAgICAgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIoYnVmZmVyTGVuZ3RoICsgNCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCArIGldID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0O1xuICAgICAgICAgICAgaW5wdXRbMF0gPSBjO1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgICAgIGMgPSBzdHJlYW0uZ2V0Qnl0ZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpc1NwYWNlKGMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBzdHJlYW0uZ2V0Qnl0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnB1dFtpXSA9IGM7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IEVPRiB8fCBjID09PSBUSUxEQV9DSEFSKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKGJ1ZmZlckxlbmd0aCArIGkgLSAxKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoICs9IGkgLSAxO1xuICAgICAgICAgICAgLy8gcGFydGlhbCBlbmRpbmc7XG4gICAgICAgICAgICBpZiAoaSA8IDUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFtpXSA9IDB4MjEgKyA4NDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lb2YgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHQgPSAwO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgICAgIHQgPSB0ICogODUgKyAoaW5wdXRbaV0gLSAweDIxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDM7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCArIGldID0gdCAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgdCA+Pj0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzY2lpODVTdHJlYW07XG59KERlY29kZVN0cmVhbSkpO1xuZXhwb3J0IGRlZmF1bHQgQXNjaWk4NVN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzY2lpODVTdHJlYW0uanMubWFwIiwiLypcbiAqIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIFRoZSBBc2NpaUhleFN0cmVhbSBjbGFzcyBjb250YWluZWQgaW4gdGhpcyBmaWxlIGlzIGEgVHlwZVNjcmlwdCBwb3J0IG9mIHRoZVxuICogSmF2YVNjcmlwdCBBc2NpaUhleFN0cmVhbSBjbGFzcyBpbiBNb3ppbGxhJ3MgcGRmLmpzIHByb2plY3QsIG1hZGUgYXZhaWxhYmxlXG4gKiB1bmRlciB0aGUgQXBhY2hlIDIuMCBvcGVuIHNvdXJjZSBsaWNlbnNlLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBEZWNvZGVTdHJlYW0gZnJvbSBcIi4vRGVjb2RlU3RyZWFtXCI7XG52YXIgQXNjaWlIZXhTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzY2lpSGV4U3RyZWFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzY2lpSGV4U3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWF5YmVMZW5ndGgpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgX3RoaXMuZmlyc3REaWdpdCA9IC0xO1xuICAgICAgICAvLyBNb3N0IHN0cmVhbXMgaW5jcmVhc2UgaW4gc2l6ZSB3aGVuIGRlY29kZWQsIGJ1dCBBc2NpaUhleCBzdHJlYW1zIHNocmlua1xuICAgICAgICAvLyBieSA1MCUuXG4gICAgICAgIGlmIChtYXliZUxlbmd0aCkge1xuICAgICAgICAgICAgbWF5YmVMZW5ndGggPSAwLjUgKiBtYXliZUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzY2lpSGV4U3RyZWFtLnByb3RvdHlwZS5yZWFkQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBVUFNUUkVBTV9CTE9DS19TSVpFID0gODAwMDtcbiAgICAgICAgdmFyIGJ5dGVzID0gdGhpcy5zdHJlYW0uZ2V0Qnl0ZXMoVVBTVFJFQU1fQkxPQ0tfU0laRSk7XG4gICAgICAgIGlmICghYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVvZiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heERlY29kZUxlbmd0aCA9IChieXRlcy5sZW5ndGggKyAxKSA+PiAxO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIodGhpcy5idWZmZXJMZW5ndGggKyBtYXhEZWNvZGVMZW5ndGgpO1xuICAgICAgICB2YXIgYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7XG4gICAgICAgIHZhciBmaXJzdERpZ2l0ID0gdGhpcy5maXJzdERpZ2l0O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBieXRlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSBieXRlc1tpXTtcbiAgICAgICAgICAgIHZhciBkaWdpdCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChjaCA+PSAweDMwICYmIGNoIDw9IDB4MzkpIHtcbiAgICAgICAgICAgICAgICAvLyAnMCctJzknXG4gICAgICAgICAgICAgICAgZGlnaXQgPSBjaCAmIDB4MGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoY2ggPj0gMHg0MSAmJiBjaCA8PSAweDQ2KSB8fCAoY2ggPj0gMHg2MSAmJiBjaCA8PSAweDY2KSkge1xuICAgICAgICAgICAgICAgIC8vICdBJy0nWicsICdhJy0neidcbiAgICAgICAgICAgICAgICBkaWdpdCA9IChjaCAmIDB4MGYpICsgOTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAweDNlKSB7XG4gICAgICAgICAgICAgICAgLy8gJz4nXG4gICAgICAgICAgICAgICAgdGhpcy5lb2YgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcHJvYmFibHkgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBpZ25vcmluZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0RGlnaXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgZmlyc3REaWdpdCA9IGRpZ2l0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCsrXSA9IChmaXJzdERpZ2l0IDw8IDQpIHwgZGlnaXQ7XG4gICAgICAgICAgICAgICAgZmlyc3REaWdpdCA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdERpZ2l0ID49IDAgJiYgdGhpcy5lb2YpIHtcbiAgICAgICAgICAgIC8vIGluY29tcGxldGUgYnl0ZVxuICAgICAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCsrXSA9IGZpcnN0RGlnaXQgPDwgNDtcbiAgICAgICAgICAgIGZpcnN0RGlnaXQgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpcnN0RGlnaXQgPSBmaXJzdERpZ2l0O1xuICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGJ1ZmZlckxlbmd0aDtcbiAgICB9O1xuICAgIHJldHVybiBBc2NpaUhleFN0cmVhbTtcbn0oRGVjb2RlU3RyZWFtKSk7XG5leHBvcnQgZGVmYXVsdCBBc2NpaUhleFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzY2lpSGV4U3RyZWFtLmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMTk5Ni0yMDAzIEdseXBoICYgQ29nLCBMTENcbiAqXG4gKiBUaGUgZmxhdGUgc3RyZWFtIGltcGxlbWVudGF0aW9uIGNvbnRhaW5lZCBpbiB0aGlzIGZpbGUgaXMgYSBKYXZhU2NyaXB0IHBvcnRcbiAqIG9mIFhQREYncyBpbXBsZW1lbnRhdGlvbiwgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIEFwYWNoZSAyLjAgb3BlbiBzb3VyY2VcbiAqIGxpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuLypcbiAqIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIFRoZSBGbGF0ZVN0cmVhbSBjbGFzcyBjb250YWluZWQgaW4gdGhpcyBmaWxlIGlzIGEgVHlwZVNjcmlwdCBwb3J0IG9mIHRoZVxuICogSmF2YVNjcmlwdCBGbGF0ZVN0cmVhbSBjbGFzcyBpbiBNb3ppbGxhJ3MgcGRmLmpzIHByb2plY3QsIG1hZGUgYXZhaWxhYmxlXG4gKiB1bmRlciB0aGUgQXBhY2hlIDIuMCBvcGVuIHNvdXJjZSBsaWNlbnNlLlxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAgbm8tY29uZGl0aW9uYWwtYXNzaWdubWVudCAqL1xuaW1wb3J0IERlY29kZVN0cmVhbSBmcm9tIFwiLi9EZWNvZGVTdHJlYW1cIjtcbi8vIHByZXR0aWVyLWlnbm9yZVxudmFyIGNvZGVMZW5Db2RlTWFwID0gbmV3IEludDMyQXJyYXkoW1xuICAgIDE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVcbl0pO1xuLy8gcHJldHRpZXItaWdub3JlXG52YXIgbGVuZ3RoRGVjb2RlID0gbmV3IEludDMyQXJyYXkoW1xuICAgIDB4MDAwMDMsIDB4MDAwMDQsIDB4MDAwMDUsIDB4MDAwMDYsIDB4MDAwMDcsIDB4MDAwMDgsIDB4MDAwMDksIDB4MDAwMGEsXG4gICAgMHgxMDAwYiwgMHgxMDAwZCwgMHgxMDAwZiwgMHgxMDAxMSwgMHgyMDAxMywgMHgyMDAxNywgMHgyMDAxYiwgMHgyMDAxZixcbiAgICAweDMwMDIzLCAweDMwMDJiLCAweDMwMDMzLCAweDMwMDNiLCAweDQwMDQzLCAweDQwMDUzLCAweDQwMDYzLCAweDQwMDczLFxuICAgIDB4NTAwODMsIDB4NTAwYTMsIDB4NTAwYzMsIDB4NTAwZTMsIDB4MDAxMDIsIDB4MDAxMDIsIDB4MDAxMDJcbl0pO1xuLy8gcHJldHRpZXItaWdub3JlXG52YXIgZGlzdERlY29kZSA9IG5ldyBJbnQzMkFycmF5KFtcbiAgICAweDAwMDAxLCAweDAwMDAyLCAweDAwMDAzLCAweDAwMDA0LCAweDEwMDA1LCAweDEwMDA3LCAweDIwMDA5LCAweDIwMDBkLFxuICAgIDB4MzAwMTEsIDB4MzAwMTksIDB4NDAwMjEsIDB4NDAwMzEsIDB4NTAwNDEsIDB4NTAwNjEsIDB4NjAwODEsIDB4NjAwYzEsXG4gICAgMHg3MDEwMSwgMHg3MDE4MSwgMHg4MDIwMSwgMHg4MDMwMSwgMHg5MDQwMSwgMHg5MDYwMSwgMHhhMDgwMSwgMHhhMGMwMSxcbiAgICAweGIxMDAxLCAweGIxODAxLCAweGMyMDAxLCAweGMzMDAxLCAweGQ0MDAxLCAweGQ2MDAxXG5dKTtcbi8vIHByZXR0aWVyLWlnbm9yZVxudmFyIGZpeGVkTGl0Q29kZVRhYiA9IFtuZXcgSW50MzJBcnJheShbXG4gICAgICAgIDB4NzAxMDAsIDB4ODAwNTAsIDB4ODAwMTAsIDB4ODAxMTgsIDB4NzAxMTAsIDB4ODAwNzAsIDB4ODAwMzAsIDB4OTAwYzAsXG4gICAgICAgIDB4NzAxMDgsIDB4ODAwNjAsIDB4ODAwMjAsIDB4OTAwYTAsIDB4ODAwMDAsIDB4ODAwODAsIDB4ODAwNDAsIDB4OTAwZTAsXG4gICAgICAgIDB4NzAxMDQsIDB4ODAwNTgsIDB4ODAwMTgsIDB4OTAwOTAsIDB4NzAxMTQsIDB4ODAwNzgsIDB4ODAwMzgsIDB4OTAwZDAsXG4gICAgICAgIDB4NzAxMGMsIDB4ODAwNjgsIDB4ODAwMjgsIDB4OTAwYjAsIDB4ODAwMDgsIDB4ODAwODgsIDB4ODAwNDgsIDB4OTAwZjAsXG4gICAgICAgIDB4NzAxMDIsIDB4ODAwNTQsIDB4ODAwMTQsIDB4ODAxMWMsIDB4NzAxMTIsIDB4ODAwNzQsIDB4ODAwMzQsIDB4OTAwYzgsXG4gICAgICAgIDB4NzAxMGEsIDB4ODAwNjQsIDB4ODAwMjQsIDB4OTAwYTgsIDB4ODAwMDQsIDB4ODAwODQsIDB4ODAwNDQsIDB4OTAwZTgsXG4gICAgICAgIDB4NzAxMDYsIDB4ODAwNWMsIDB4ODAwMWMsIDB4OTAwOTgsIDB4NzAxMTYsIDB4ODAwN2MsIDB4ODAwM2MsIDB4OTAwZDgsXG4gICAgICAgIDB4NzAxMGUsIDB4ODAwNmMsIDB4ODAwMmMsIDB4OTAwYjgsIDB4ODAwMGMsIDB4ODAwOGMsIDB4ODAwNGMsIDB4OTAwZjgsXG4gICAgICAgIDB4NzAxMDEsIDB4ODAwNTIsIDB4ODAwMTIsIDB4ODAxMWEsIDB4NzAxMTEsIDB4ODAwNzIsIDB4ODAwMzIsIDB4OTAwYzQsXG4gICAgICAgIDB4NzAxMDksIDB4ODAwNjIsIDB4ODAwMjIsIDB4OTAwYTQsIDB4ODAwMDIsIDB4ODAwODIsIDB4ODAwNDIsIDB4OTAwZTQsXG4gICAgICAgIDB4NzAxMDUsIDB4ODAwNWEsIDB4ODAwMWEsIDB4OTAwOTQsIDB4NzAxMTUsIDB4ODAwN2EsIDB4ODAwM2EsIDB4OTAwZDQsXG4gICAgICAgIDB4NzAxMGQsIDB4ODAwNmEsIDB4ODAwMmEsIDB4OTAwYjQsIDB4ODAwMGEsIDB4ODAwOGEsIDB4ODAwNGEsIDB4OTAwZjQsXG4gICAgICAgIDB4NzAxMDMsIDB4ODAwNTYsIDB4ODAwMTYsIDB4ODAxMWUsIDB4NzAxMTMsIDB4ODAwNzYsIDB4ODAwMzYsIDB4OTAwY2MsXG4gICAgICAgIDB4NzAxMGIsIDB4ODAwNjYsIDB4ODAwMjYsIDB4OTAwYWMsIDB4ODAwMDYsIDB4ODAwODYsIDB4ODAwNDYsIDB4OTAwZWMsXG4gICAgICAgIDB4NzAxMDcsIDB4ODAwNWUsIDB4ODAwMWUsIDB4OTAwOWMsIDB4NzAxMTcsIDB4ODAwN2UsIDB4ODAwM2UsIDB4OTAwZGMsXG4gICAgICAgIDB4NzAxMGYsIDB4ODAwNmUsIDB4ODAwMmUsIDB4OTAwYmMsIDB4ODAwMGUsIDB4ODAwOGUsIDB4ODAwNGUsIDB4OTAwZmMsXG4gICAgICAgIDB4NzAxMDAsIDB4ODAwNTEsIDB4ODAwMTEsIDB4ODAxMTksIDB4NzAxMTAsIDB4ODAwNzEsIDB4ODAwMzEsIDB4OTAwYzIsXG4gICAgICAgIDB4NzAxMDgsIDB4ODAwNjEsIDB4ODAwMjEsIDB4OTAwYTIsIDB4ODAwMDEsIDB4ODAwODEsIDB4ODAwNDEsIDB4OTAwZTIsXG4gICAgICAgIDB4NzAxMDQsIDB4ODAwNTksIDB4ODAwMTksIDB4OTAwOTIsIDB4NzAxMTQsIDB4ODAwNzksIDB4ODAwMzksIDB4OTAwZDIsXG4gICAgICAgIDB4NzAxMGMsIDB4ODAwNjksIDB4ODAwMjksIDB4OTAwYjIsIDB4ODAwMDksIDB4ODAwODksIDB4ODAwNDksIDB4OTAwZjIsXG4gICAgICAgIDB4NzAxMDIsIDB4ODAwNTUsIDB4ODAwMTUsIDB4ODAxMWQsIDB4NzAxMTIsIDB4ODAwNzUsIDB4ODAwMzUsIDB4OTAwY2EsXG4gICAgICAgIDB4NzAxMGEsIDB4ODAwNjUsIDB4ODAwMjUsIDB4OTAwYWEsIDB4ODAwMDUsIDB4ODAwODUsIDB4ODAwNDUsIDB4OTAwZWEsXG4gICAgICAgIDB4NzAxMDYsIDB4ODAwNWQsIDB4ODAwMWQsIDB4OTAwOWEsIDB4NzAxMTYsIDB4ODAwN2QsIDB4ODAwM2QsIDB4OTAwZGEsXG4gICAgICAgIDB4NzAxMGUsIDB4ODAwNmQsIDB4ODAwMmQsIDB4OTAwYmEsIDB4ODAwMGQsIDB4ODAwOGQsIDB4ODAwNGQsIDB4OTAwZmEsXG4gICAgICAgIDB4NzAxMDEsIDB4ODAwNTMsIDB4ODAwMTMsIDB4ODAxMWIsIDB4NzAxMTEsIDB4ODAwNzMsIDB4ODAwMzMsIDB4OTAwYzYsXG4gICAgICAgIDB4NzAxMDksIDB4ODAwNjMsIDB4ODAwMjMsIDB4OTAwYTYsIDB4ODAwMDMsIDB4ODAwODMsIDB4ODAwNDMsIDB4OTAwZTYsXG4gICAgICAgIDB4NzAxMDUsIDB4ODAwNWIsIDB4ODAwMWIsIDB4OTAwOTYsIDB4NzAxMTUsIDB4ODAwN2IsIDB4ODAwM2IsIDB4OTAwZDYsXG4gICAgICAgIDB4NzAxMGQsIDB4ODAwNmIsIDB4ODAwMmIsIDB4OTAwYjYsIDB4ODAwMGIsIDB4ODAwOGIsIDB4ODAwNGIsIDB4OTAwZjYsXG4gICAgICAgIDB4NzAxMDMsIDB4ODAwNTcsIDB4ODAwMTcsIDB4ODAxMWYsIDB4NzAxMTMsIDB4ODAwNzcsIDB4ODAwMzcsIDB4OTAwY2UsXG4gICAgICAgIDB4NzAxMGIsIDB4ODAwNjcsIDB4ODAwMjcsIDB4OTAwYWUsIDB4ODAwMDcsIDB4ODAwODcsIDB4ODAwNDcsIDB4OTAwZWUsXG4gICAgICAgIDB4NzAxMDcsIDB4ODAwNWYsIDB4ODAwMWYsIDB4OTAwOWUsIDB4NzAxMTcsIDB4ODAwN2YsIDB4ODAwM2YsIDB4OTAwZGUsXG4gICAgICAgIDB4NzAxMGYsIDB4ODAwNmYsIDB4ODAwMmYsIDB4OTAwYmUsIDB4ODAwMGYsIDB4ODAwOGYsIDB4ODAwNGYsIDB4OTAwZmUsXG4gICAgICAgIDB4NzAxMDAsIDB4ODAwNTAsIDB4ODAwMTAsIDB4ODAxMTgsIDB4NzAxMTAsIDB4ODAwNzAsIDB4ODAwMzAsIDB4OTAwYzEsXG4gICAgICAgIDB4NzAxMDgsIDB4ODAwNjAsIDB4ODAwMjAsIDB4OTAwYTEsIDB4ODAwMDAsIDB4ODAwODAsIDB4ODAwNDAsIDB4OTAwZTEsXG4gICAgICAgIDB4NzAxMDQsIDB4ODAwNTgsIDB4ODAwMTgsIDB4OTAwOTEsIDB4NzAxMTQsIDB4ODAwNzgsIDB4ODAwMzgsIDB4OTAwZDEsXG4gICAgICAgIDB4NzAxMGMsIDB4ODAwNjgsIDB4ODAwMjgsIDB4OTAwYjEsIDB4ODAwMDgsIDB4ODAwODgsIDB4ODAwNDgsIDB4OTAwZjEsXG4gICAgICAgIDB4NzAxMDIsIDB4ODAwNTQsIDB4ODAwMTQsIDB4ODAxMWMsIDB4NzAxMTIsIDB4ODAwNzQsIDB4ODAwMzQsIDB4OTAwYzksXG4gICAgICAgIDB4NzAxMGEsIDB4ODAwNjQsIDB4ODAwMjQsIDB4OTAwYTksIDB4ODAwMDQsIDB4ODAwODQsIDB4ODAwNDQsIDB4OTAwZTksXG4gICAgICAgIDB4NzAxMDYsIDB4ODAwNWMsIDB4ODAwMWMsIDB4OTAwOTksIDB4NzAxMTYsIDB4ODAwN2MsIDB4ODAwM2MsIDB4OTAwZDksXG4gICAgICAgIDB4NzAxMGUsIDB4ODAwNmMsIDB4ODAwMmMsIDB4OTAwYjksIDB4ODAwMGMsIDB4ODAwOGMsIDB4ODAwNGMsIDB4OTAwZjksXG4gICAgICAgIDB4NzAxMDEsIDB4ODAwNTIsIDB4ODAwMTIsIDB4ODAxMWEsIDB4NzAxMTEsIDB4ODAwNzIsIDB4ODAwMzIsIDB4OTAwYzUsXG4gICAgICAgIDB4NzAxMDksIDB4ODAwNjIsIDB4ODAwMjIsIDB4OTAwYTUsIDB4ODAwMDIsIDB4ODAwODIsIDB4ODAwNDIsIDB4OTAwZTUsXG4gICAgICAgIDB4NzAxMDUsIDB4ODAwNWEsIDB4ODAwMWEsIDB4OTAwOTUsIDB4NzAxMTUsIDB4ODAwN2EsIDB4ODAwM2EsIDB4OTAwZDUsXG4gICAgICAgIDB4NzAxMGQsIDB4ODAwNmEsIDB4ODAwMmEsIDB4OTAwYjUsIDB4ODAwMGEsIDB4ODAwOGEsIDB4ODAwNGEsIDB4OTAwZjUsXG4gICAgICAgIDB4NzAxMDMsIDB4ODAwNTYsIDB4ODAwMTYsIDB4ODAxMWUsIDB4NzAxMTMsIDB4ODAwNzYsIDB4ODAwMzYsIDB4OTAwY2QsXG4gICAgICAgIDB4NzAxMGIsIDB4ODAwNjYsIDB4ODAwMjYsIDB4OTAwYWQsIDB4ODAwMDYsIDB4ODAwODYsIDB4ODAwNDYsIDB4OTAwZWQsXG4gICAgICAgIDB4NzAxMDcsIDB4ODAwNWUsIDB4ODAwMWUsIDB4OTAwOWQsIDB4NzAxMTcsIDB4ODAwN2UsIDB4ODAwM2UsIDB4OTAwZGQsXG4gICAgICAgIDB4NzAxMGYsIDB4ODAwNmUsIDB4ODAwMmUsIDB4OTAwYmQsIDB4ODAwMGUsIDB4ODAwOGUsIDB4ODAwNGUsIDB4OTAwZmQsXG4gICAgICAgIDB4NzAxMDAsIDB4ODAwNTEsIDB4ODAwMTEsIDB4ODAxMTksIDB4NzAxMTAsIDB4ODAwNzEsIDB4ODAwMzEsIDB4OTAwYzMsXG4gICAgICAgIDB4NzAxMDgsIDB4ODAwNjEsIDB4ODAwMjEsIDB4OTAwYTMsIDB4ODAwMDEsIDB4ODAwODEsIDB4ODAwNDEsIDB4OTAwZTMsXG4gICAgICAgIDB4NzAxMDQsIDB4ODAwNTksIDB4ODAwMTksIDB4OTAwOTMsIDB4NzAxMTQsIDB4ODAwNzksIDB4ODAwMzksIDB4OTAwZDMsXG4gICAgICAgIDB4NzAxMGMsIDB4ODAwNjksIDB4ODAwMjksIDB4OTAwYjMsIDB4ODAwMDksIDB4ODAwODksIDB4ODAwNDksIDB4OTAwZjMsXG4gICAgICAgIDB4NzAxMDIsIDB4ODAwNTUsIDB4ODAwMTUsIDB4ODAxMWQsIDB4NzAxMTIsIDB4ODAwNzUsIDB4ODAwMzUsIDB4OTAwY2IsXG4gICAgICAgIDB4NzAxMGEsIDB4ODAwNjUsIDB4ODAwMjUsIDB4OTAwYWIsIDB4ODAwMDUsIDB4ODAwODUsIDB4ODAwNDUsIDB4OTAwZWIsXG4gICAgICAgIDB4NzAxMDYsIDB4ODAwNWQsIDB4ODAwMWQsIDB4OTAwOWIsIDB4NzAxMTYsIDB4ODAwN2QsIDB4ODAwM2QsIDB4OTAwZGIsXG4gICAgICAgIDB4NzAxMGUsIDB4ODAwNmQsIDB4ODAwMmQsIDB4OTAwYmIsIDB4ODAwMGQsIDB4ODAwOGQsIDB4ODAwNGQsIDB4OTAwZmIsXG4gICAgICAgIDB4NzAxMDEsIDB4ODAwNTMsIDB4ODAwMTMsIDB4ODAxMWIsIDB4NzAxMTEsIDB4ODAwNzMsIDB4ODAwMzMsIDB4OTAwYzcsXG4gICAgICAgIDB4NzAxMDksIDB4ODAwNjMsIDB4ODAwMjMsIDB4OTAwYTcsIDB4ODAwMDMsIDB4ODAwODMsIDB4ODAwNDMsIDB4OTAwZTcsXG4gICAgICAgIDB4NzAxMDUsIDB4ODAwNWIsIDB4ODAwMWIsIDB4OTAwOTcsIDB4NzAxMTUsIDB4ODAwN2IsIDB4ODAwM2IsIDB4OTAwZDcsXG4gICAgICAgIDB4NzAxMGQsIDB4ODAwNmIsIDB4ODAwMmIsIDB4OTAwYjcsIDB4ODAwMGIsIDB4ODAwOGIsIDB4ODAwNGIsIDB4OTAwZjcsXG4gICAgICAgIDB4NzAxMDMsIDB4ODAwNTcsIDB4ODAwMTcsIDB4ODAxMWYsIDB4NzAxMTMsIDB4ODAwNzcsIDB4ODAwMzcsIDB4OTAwY2YsXG4gICAgICAgIDB4NzAxMGIsIDB4ODAwNjcsIDB4ODAwMjcsIDB4OTAwYWYsIDB4ODAwMDcsIDB4ODAwODcsIDB4ODAwNDcsIDB4OTAwZWYsXG4gICAgICAgIDB4NzAxMDcsIDB4ODAwNWYsIDB4ODAwMWYsIDB4OTAwOWYsIDB4NzAxMTcsIDB4ODAwN2YsIDB4ODAwM2YsIDB4OTAwZGYsXG4gICAgICAgIDB4NzAxMGYsIDB4ODAwNmYsIDB4ODAwMmYsIDB4OTAwYmYsIDB4ODAwMGYsIDB4ODAwOGYsIDB4ODAwNGYsIDB4OTAwZmZcbiAgICBdKSwgOV07XG4vLyBwcmV0dGllci1pZ25vcmVcbnZhciBmaXhlZERpc3RDb2RlVGFiID0gW25ldyBJbnQzMkFycmF5KFtcbiAgICAgICAgMHg1MDAwMCwgMHg1MDAxMCwgMHg1MDAwOCwgMHg1MDAxOCwgMHg1MDAwNCwgMHg1MDAxNCwgMHg1MDAwYywgMHg1MDAxYyxcbiAgICAgICAgMHg1MDAwMiwgMHg1MDAxMiwgMHg1MDAwYSwgMHg1MDAxYSwgMHg1MDAwNiwgMHg1MDAxNiwgMHg1MDAwZSwgMHgwMDAwMCxcbiAgICAgICAgMHg1MDAwMSwgMHg1MDAxMSwgMHg1MDAwOSwgMHg1MDAxOSwgMHg1MDAwNSwgMHg1MDAxNSwgMHg1MDAwZCwgMHg1MDAxZCxcbiAgICAgICAgMHg1MDAwMywgMHg1MDAxMywgMHg1MDAwYiwgMHg1MDAxYiwgMHg1MDAwNywgMHg1MDAxNywgMHg1MDAwZiwgMHgwMDAwMFxuICAgIF0pLCA1XTtcbnZhciBGbGF0ZVN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmxhdGVTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmxhdGVTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtYXliZUxlbmd0aCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICB2YXIgY21mID0gc3RyZWFtLmdldEJ5dGUoKTtcbiAgICAgICAgdmFyIGZsZyA9IHN0cmVhbS5nZXRCeXRlKCk7XG4gICAgICAgIGlmIChjbWYgPT09IC0xIHx8IGZsZyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaGVhZGVyIGluIGZsYXRlIHN0cmVhbTogXCIgKyBjbWYgKyBcIiwgXCIgKyBmbGcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoY21mICYgMHgwZikgIT09IDB4MDgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIGluIGZsYXRlIHN0cmVhbTogXCIgKyBjbWYgKyBcIiwgXCIgKyBmbGcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoKGNtZiA8PCA4KSArIGZsZykgJSAzMSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIEZDSEVDSyBpbiBmbGF0ZSBzdHJlYW06IFwiICsgY21mICsgXCIsIFwiICsgZmxnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxnICYgMHgyMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRkRJQ1QgYml0IHNldCBpbiBmbGF0ZSBzdHJlYW06IFwiICsgY21mICsgXCIsIFwiICsgZmxnKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jb2RlU2l6ZSA9IDA7XG4gICAgICAgIF90aGlzLmNvZGVCdWYgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZsYXRlU3RyZWFtLnByb3RvdHlwZS5yZWFkQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXI7XG4gICAgICAgIHZhciBsZW47XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnN0cmVhbTtcbiAgICAgICAgLy8gcmVhZCBibG9jayBoZWFkZXJcbiAgICAgICAgdmFyIGhkciA9IHRoaXMuZ2V0Qml0cygzKTtcbiAgICAgICAgaWYgKGhkciAmIDEpIHtcbiAgICAgICAgICAgIHRoaXMuZW9mID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBoZHIgPj49IDE7XG4gICAgICAgIGlmIChoZHIgPT09IDApIHtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBibG9ja1xuICAgICAgICAgICAgdmFyIGIgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoKGIgPSBzdHIuZ2V0Qnl0ZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBibG9jayBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvY2tMZW4gPSBiO1xuICAgICAgICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2tMZW4gfD0gYiA8PCA4O1xuICAgICAgICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoZWNrID0gYjtcbiAgICAgICAgICAgIGlmICgoYiA9IHN0ci5nZXRCeXRlKCkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIGJsb2NrIGhlYWRlciBpbiBmbGF0ZSBzdHJlYW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrIHw9IGIgPDwgODtcbiAgICAgICAgICAgIGlmIChjaGVjayAhPT0gKH5ibG9ja0xlbiAmIDB4ZmZmZikgJiYgKGJsb2NrTGVuICE9PSAwIHx8IGNoZWNrICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yaW5nIGVycm9yIGZvciBiYWQgXCJlbXB0eVwiIGJsb2NrIChzZWUgaXNzdWUgMTI3NylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCB1bmNvbXByZXNzZWQgYmxvY2sgbGVuZ3RoIGluIGZsYXRlIHN0cmVhbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb2RlQnVmID0gMDtcbiAgICAgICAgICAgIHRoaXMuY29kZVNpemUgPSAwO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoO1xuICAgICAgICAgICAgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIoYnVmZmVyTGVuZ3RoICsgYmxvY2tMZW4pO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGJ1ZmZlckxlbmd0aCArIGJsb2NrTGVuO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSBlbmQ7XG4gICAgICAgICAgICBpZiAoYmxvY2tMZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLnBlZWtCeXRlKCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW9mID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gYnVmZmVyTGVuZ3RoOyBuIDwgZW5kOyArK24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVvZiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbbl0gPSBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGl0Q29kZVRhYmxlO1xuICAgICAgICB2YXIgZGlzdENvZGVUYWJsZTtcbiAgICAgICAgaWYgKGhkciA9PT0gMSkge1xuICAgICAgICAgICAgLy8gY29tcHJlc3NlZCBibG9jaywgZml4ZWQgY29kZXNcbiAgICAgICAgICAgIGxpdENvZGVUYWJsZSA9IGZpeGVkTGl0Q29kZVRhYjtcbiAgICAgICAgICAgIGRpc3RDb2RlVGFibGUgPSBmaXhlZERpc3RDb2RlVGFiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhkciA9PT0gMikge1xuICAgICAgICAgICAgLy8gY29tcHJlc3NlZCBibG9jaywgZHluYW1pYyBjb2Rlc1xuICAgICAgICAgICAgdmFyIG51bUxpdENvZGVzID0gdGhpcy5nZXRCaXRzKDUpICsgMjU3O1xuICAgICAgICAgICAgdmFyIG51bURpc3RDb2RlcyA9IHRoaXMuZ2V0Qml0cyg1KSArIDE7XG4gICAgICAgICAgICB2YXIgbnVtQ29kZUxlbkNvZGVzID0gdGhpcy5nZXRCaXRzKDQpICsgNDtcbiAgICAgICAgICAgIC8vIGJ1aWxkIHRoZSBjb2RlIGxlbmd0aHMgY29kZSB0YWJsZVxuICAgICAgICAgICAgdmFyIGNvZGVMZW5Db2RlTGVuZ3RocyA9IG5ldyBVaW50OEFycmF5KGNvZGVMZW5Db2RlTWFwLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Db2RlTGVuQ29kZXM7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvZGVMZW5Db2RlTGVuZ3Roc1tjb2RlTGVuQ29kZU1hcFtpXV0gPSB0aGlzLmdldEJpdHMoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29kZUxlbkNvZGVUYWIgPSB0aGlzLmdlbmVyYXRlSHVmZm1hblRhYmxlKGNvZGVMZW5Db2RlTGVuZ3Rocyk7XG4gICAgICAgICAgICAvLyBidWlsZCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgY29kZSB0YWJsZXNcbiAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgIHZhciBjb2RlcyA9IG51bUxpdENvZGVzICsgbnVtRGlzdENvZGVzO1xuICAgICAgICAgICAgdmFyIGNvZGVMZW5ndGhzID0gbmV3IFVpbnQ4QXJyYXkoY29kZXMpO1xuICAgICAgICAgICAgdmFyIGJpdHNMZW5ndGggPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgYml0c09mZnNldCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciB3aGF0ID0gdm9pZCAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBjb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gdGhpcy5nZXRDb2RlKGNvZGVMZW5Db2RlVGFiKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgYml0c0xlbmd0aCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJpdHNPZmZzZXQgPSAzO1xuICAgICAgICAgICAgICAgICAgICB3aGF0ID0gbGVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSAxNykge1xuICAgICAgICAgICAgICAgICAgICBiaXRzTGVuZ3RoID0gMztcbiAgICAgICAgICAgICAgICAgICAgYml0c09mZnNldCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIHdoYXQgPSBsZW4gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICBiaXRzTGVuZ3RoID0gNztcbiAgICAgICAgICAgICAgICAgICAgYml0c09mZnNldCA9IDExO1xuICAgICAgICAgICAgICAgICAgICB3aGF0ID0gbGVuID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVMZW5ndGhzW2krK10gPSBsZW4gPSBjb2RlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlcGVhdExlbmd0aCA9IHRoaXMuZ2V0Qml0cyhiaXRzTGVuZ3RoKSArIGJpdHNPZmZzZXQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlcGVhdExlbmd0aC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlTGVuZ3Roc1tpKytdID0gd2hhdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXRDb2RlVGFibGUgPSB0aGlzLmdlbmVyYXRlSHVmZm1hblRhYmxlKGNvZGVMZW5ndGhzLnN1YmFycmF5KDAsIG51bUxpdENvZGVzKSk7XG4gICAgICAgICAgICBkaXN0Q29kZVRhYmxlID0gdGhpcy5nZW5lcmF0ZUh1ZmZtYW5UYWJsZShjb2RlTGVuZ3Rocy5zdWJhcnJheShudW1MaXRDb2RlcywgY29kZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBibG9jayB0eXBlIGluIGZsYXRlIHN0cmVhbScpO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB2YXIgbGltaXQgPSBidWZmZXIgPyBidWZmZXIubGVuZ3RoIDogMDtcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMuYnVmZmVyTGVuZ3RoO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGNvZGUxID0gdGhpcy5nZXRDb2RlKGxpdENvZGVUYWJsZSk7XG4gICAgICAgICAgICBpZiAoY29kZTEgPCAyNTYpIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zICsgMSA+PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbGltaXQgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWZmZXJbcG9zKytdID0gY29kZTE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZTEgPT09IDI1Nikge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gcG9zO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvZGUxIC09IDI1NztcbiAgICAgICAgICAgIGNvZGUxID0gbGVuZ3RoRGVjb2RlW2NvZGUxXTtcbiAgICAgICAgICAgIHZhciBjb2RlMiA9IGNvZGUxID4+IDE2O1xuICAgICAgICAgICAgaWYgKGNvZGUyID4gMCkge1xuICAgICAgICAgICAgICAgIGNvZGUyID0gdGhpcy5nZXRCaXRzKGNvZGUyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbiA9IChjb2RlMSAmIDB4ZmZmZikgKyBjb2RlMjtcbiAgICAgICAgICAgIGNvZGUxID0gdGhpcy5nZXRDb2RlKGRpc3RDb2RlVGFibGUpO1xuICAgICAgICAgICAgY29kZTEgPSBkaXN0RGVjb2RlW2NvZGUxXTtcbiAgICAgICAgICAgIGNvZGUyID0gY29kZTEgPj4gMTY7XG4gICAgICAgICAgICBpZiAoY29kZTIgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29kZTIgPSB0aGlzLmdldEJpdHMoY29kZTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpc3QgPSAoY29kZTEgJiAweGZmZmYpICsgY29kZTI7XG4gICAgICAgICAgICBpZiAocG9zICsgbGVuID49IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIocG9zICsgbGVuKTtcbiAgICAgICAgICAgICAgICBsaW1pdCA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxlbjsgKytrLCArK3Bvcykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltwb3NdID0gYnVmZmVyW3BvcyAtIGRpc3RdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGbGF0ZVN0cmVhbS5wcm90b3R5cGUuZ2V0Qml0cyA9IGZ1bmN0aW9uIChiaXRzKSB7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnN0cmVhbTtcbiAgICAgICAgdmFyIGNvZGVTaXplID0gdGhpcy5jb2RlU2l6ZTtcbiAgICAgICAgdmFyIGNvZGVCdWYgPSB0aGlzLmNvZGVCdWY7XG4gICAgICAgIHZhciBiO1xuICAgICAgICB3aGlsZSAoY29kZVNpemUgPCBiaXRzKSB7XG4gICAgICAgICAgICBpZiAoKGIgPSBzdHIuZ2V0Qnl0ZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBlbmNvZGluZyBpbiBmbGF0ZSBzdHJlYW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvZGVCdWYgfD0gYiA8PCBjb2RlU2l6ZTtcbiAgICAgICAgICAgIGNvZGVTaXplICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgYiA9IGNvZGVCdWYgJiAoKDEgPDwgYml0cykgLSAxKTtcbiAgICAgICAgdGhpcy5jb2RlQnVmID0gY29kZUJ1ZiA+PiBiaXRzO1xuICAgICAgICB0aGlzLmNvZGVTaXplID0gY29kZVNpemUgLT0gYml0cztcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfTtcbiAgICBGbGF0ZVN0cmVhbS5wcm90b3R5cGUuZ2V0Q29kZSA9IGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICB2YXIgc3RyID0gdGhpcy5zdHJlYW07XG4gICAgICAgIHZhciBjb2RlcyA9IHRhYmxlWzBdO1xuICAgICAgICB2YXIgbWF4TGVuID0gdGFibGVbMV07XG4gICAgICAgIHZhciBjb2RlU2l6ZSA9IHRoaXMuY29kZVNpemU7XG4gICAgICAgIHZhciBjb2RlQnVmID0gdGhpcy5jb2RlQnVmO1xuICAgICAgICB2YXIgYjtcbiAgICAgICAgd2hpbGUgKGNvZGVTaXplIDwgbWF4TGVuKSB7XG4gICAgICAgICAgICBpZiAoKGIgPSBzdHIuZ2V0Qnl0ZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBwcmVtYXR1cmUgZW5kIG9mIHN0cmVhbS4gY29kZSBtaWdodCBob3dldmVyIHN0aWxsIGJlIHZhbGlkLlxuICAgICAgICAgICAgICAgIC8vIGNvZGVTaXplIDwgY29kZUxlbiBjaGVjayBiZWxvdyBndWFyZHMgYWdhaW5zdCBpbmNvbXBsZXRlIGNvZGVWYWwuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2RlQnVmIHw9IGIgPDwgY29kZVNpemU7XG4gICAgICAgICAgICBjb2RlU2l6ZSArPSA4O1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2RlID0gY29kZXNbY29kZUJ1ZiAmICgoMSA8PCBtYXhMZW4pIC0gMSldO1xuICAgICAgICBpZiAodHlwZW9mIGNvZGVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZMQVRFOicsIGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2RlTGVuID0gY29kZSA+PiAxNjtcbiAgICAgICAgdmFyIGNvZGVWYWwgPSBjb2RlICYgMHhmZmZmO1xuICAgICAgICBpZiAoY29kZUxlbiA8IDEgfHwgY29kZVNpemUgPCBjb2RlTGVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBlbmNvZGluZyBpbiBmbGF0ZSBzdHJlYW0nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvZGVCdWYgPSBjb2RlQnVmID4+IGNvZGVMZW47XG4gICAgICAgIHRoaXMuY29kZVNpemUgPSBjb2RlU2l6ZSAtIGNvZGVMZW47XG4gICAgICAgIHJldHVybiBjb2RlVmFsO1xuICAgIH07XG4gICAgRmxhdGVTdHJlYW0ucHJvdG90eXBlLmdlbmVyYXRlSHVmZm1hblRhYmxlID0gZnVuY3Rpb24gKGxlbmd0aHMpIHtcbiAgICAgICAgdmFyIG4gPSBsZW5ndGhzLmxlbmd0aDtcbiAgICAgICAgLy8gZmluZCBtYXggY29kZSBsZW5ndGhcbiAgICAgICAgdmFyIG1heExlbiA9IDA7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAobGVuZ3Roc1tpXSA+IG1heExlbikge1xuICAgICAgICAgICAgICAgIG1heExlbiA9IGxlbmd0aHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYnVpbGQgdGhlIHRhYmxlXG4gICAgICAgIHZhciBzaXplID0gMSA8PCBtYXhMZW47XG4gICAgICAgIHZhciBjb2RlcyA9IG5ldyBJbnQzMkFycmF5KHNpemUpO1xuICAgICAgICBmb3IgKHZhciBsZW4gPSAxLCBjb2RlID0gMCwgc2tpcCA9IDI7IGxlbiA8PSBtYXhMZW47ICsrbGVuLCBjb2RlIDw8PSAxLCBza2lwIDw8PSAxKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB2YWwgPSAwOyB2YWwgPCBuOyArK3ZhbCkge1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGhzW3ZhbF0gPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBiaXQtcmV2ZXJzZSB0aGUgY29kZVxuICAgICAgICAgICAgICAgICAgICB2YXIgY29kZTIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTIgPSAoY29kZTIgPDwgMSkgfCAodCAmIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA+Pj0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBmaWxsIHRoZSB0YWJsZSBlbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNvZGUyOyBpIDwgc2l6ZTsgaSArPSBza2lwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2Rlc1tpXSA9IChsZW4gPDwgMTYpIHwgdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICsrY29kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtjb2RlcywgbWF4TGVuXTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0ZVN0cmVhbTtcbn0oRGVjb2RlU3RyZWFtKSk7XG5leHBvcnQgZGVmYXVsdCBGbGF0ZVN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZsYXRlU3RyZWFtLmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxMiBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBUaGUgTFpXU3RyZWFtIGNsYXNzIGNvbnRhaW5lZCBpbiB0aGlzIGZpbGUgaXMgYSBUeXBlU2NyaXB0IHBvcnQgb2YgdGhlXG4gKiBKYXZhU2NyaXB0IExaV1N0cmVhbSBjbGFzcyBpbiBNb3ppbGxhJ3MgcGRmLmpzIHByb2plY3QsIG1hZGUgYXZhaWxhYmxlXG4gKiB1bmRlciB0aGUgQXBhY2hlIDIuMCBvcGVuIHNvdXJjZSBsaWNlbnNlLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBEZWNvZGVTdHJlYW0gZnJvbSBcIi4vRGVjb2RlU3RyZWFtXCI7XG52YXIgTFpXU3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMWldTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTFpXU3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgsIGVhcmx5Q2hhbmdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1heWJlTGVuZ3RoKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIF90aGlzLmNhY2hlZERhdGEgPSAwO1xuICAgICAgICBfdGhpcy5iaXRzQ2FjaGVkID0gMDtcbiAgICAgICAgdmFyIG1heEx6d0RpY3Rpb25hcnlTaXplID0gNDA5NjtcbiAgICAgICAgdmFyIGx6d1N0YXRlID0ge1xuICAgICAgICAgICAgZWFybHlDaGFuZ2U6IGVhcmx5Q2hhbmdlLFxuICAgICAgICAgICAgY29kZUxlbmd0aDogOSxcbiAgICAgICAgICAgIG5leHRDb2RlOiAyNTgsXG4gICAgICAgICAgICBkaWN0aW9uYXJ5VmFsdWVzOiBuZXcgVWludDhBcnJheShtYXhMendEaWN0aW9uYXJ5U2l6ZSksXG4gICAgICAgICAgICBkaWN0aW9uYXJ5TGVuZ3RoczogbmV3IFVpbnQxNkFycmF5KG1heEx6d0RpY3Rpb25hcnlTaXplKSxcbiAgICAgICAgICAgIGRpY3Rpb25hcnlQcmV2Q29kZXM6IG5ldyBVaW50MTZBcnJheShtYXhMendEaWN0aW9uYXJ5U2l6ZSksXG4gICAgICAgICAgICBjdXJyZW50U2VxdWVuY2U6IG5ldyBVaW50OEFycmF5KG1heEx6d0RpY3Rpb25hcnlTaXplKSxcbiAgICAgICAgICAgIGN1cnJlbnRTZXF1ZW5jZUxlbmd0aDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICAgICAgbHp3U3RhdGUuZGljdGlvbmFyeVZhbHVlc1tpXSA9IGk7XG4gICAgICAgICAgICBsendTdGF0ZS5kaWN0aW9uYXJ5TGVuZ3Roc1tpXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMubHp3U3RhdGUgPSBsendTdGF0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBMWldTdHJlYW0ucHJvdG90eXBlLnJlYWRCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IDUxMjtcbiAgICAgICAgdmFyIGVzdGltYXRlZERlY29kZWRTaXplID0gYmxvY2tTaXplICogMjtcbiAgICAgICAgdmFyIGRlY29kZWRTaXplRGVsdGEgPSBibG9ja1NpemU7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIHE7XG4gICAgICAgIHZhciBsendTdGF0ZSA9IHRoaXMubHp3U3RhdGU7XG4gICAgICAgIGlmICghbHp3U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gZW9mIHdhcyBmb3VuZFxuICAgICAgICB9XG4gICAgICAgIHZhciBlYXJseUNoYW5nZSA9IGx6d1N0YXRlLmVhcmx5Q2hhbmdlO1xuICAgICAgICB2YXIgbmV4dENvZGUgPSBsendTdGF0ZS5uZXh0Q29kZTtcbiAgICAgICAgdmFyIGRpY3Rpb25hcnlWYWx1ZXMgPSBsendTdGF0ZS5kaWN0aW9uYXJ5VmFsdWVzO1xuICAgICAgICB2YXIgZGljdGlvbmFyeUxlbmd0aHMgPSBsendTdGF0ZS5kaWN0aW9uYXJ5TGVuZ3RocztcbiAgICAgICAgdmFyIGRpY3Rpb25hcnlQcmV2Q29kZXMgPSBsendTdGF0ZS5kaWN0aW9uYXJ5UHJldkNvZGVzO1xuICAgICAgICB2YXIgY29kZUxlbmd0aCA9IGx6d1N0YXRlLmNvZGVMZW5ndGg7XG4gICAgICAgIHZhciBwcmV2Q29kZSA9IGx6d1N0YXRlLnByZXZDb2RlO1xuICAgICAgICB2YXIgY3VycmVudFNlcXVlbmNlID0gbHp3U3RhdGUuY3VycmVudFNlcXVlbmNlO1xuICAgICAgICB2YXIgY3VycmVudFNlcXVlbmNlTGVuZ3RoID0gbHp3U3RhdGUuY3VycmVudFNlcXVlbmNlTGVuZ3RoO1xuICAgICAgICB2YXIgZGVjb2RlZExlbmd0aCA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50QnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcih0aGlzLmJ1ZmZlckxlbmd0aCArIGVzdGltYXRlZERlY29kZWRTaXplKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHRoaXMucmVhZEJpdHMoY29kZUxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgaGFzUHJldiA9IGN1cnJlbnRTZXF1ZW5jZUxlbmd0aCA+IDA7XG4gICAgICAgICAgICBpZiAoIWNvZGUgfHwgY29kZSA8IDI1Nikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZXF1ZW5jZVswXSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgY3VycmVudFNlcXVlbmNlTGVuZ3RoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPj0gMjU4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPCBuZXh0Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VxdWVuY2VMZW5ndGggPSBkaWN0aW9uYXJ5TGVuZ3Roc1tjb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gY3VycmVudFNlcXVlbmNlTGVuZ3RoIC0gMSwgcSA9IGNvZGU7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VxdWVuY2Vbal0gPSBkaWN0aW9uYXJ5VmFsdWVzW3FdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGRpY3Rpb25hcnlQcmV2Q29kZXNbcV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZXF1ZW5jZVtjdXJyZW50U2VxdWVuY2VMZW5ndGgrK10gPSBjdXJyZW50U2VxdWVuY2VbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gMjU2KSB7XG4gICAgICAgICAgICAgICAgY29kZUxlbmd0aCA9IDk7XG4gICAgICAgICAgICAgICAgbmV4dENvZGUgPSAyNTg7XG4gICAgICAgICAgICAgICAgY3VycmVudFNlcXVlbmNlTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZW9mID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5sendTdGF0ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNQcmV2KSB7XG4gICAgICAgICAgICAgICAgZGljdGlvbmFyeVByZXZDb2Rlc1tuZXh0Q29kZV0gPSBwcmV2Q29kZTtcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5TGVuZ3Roc1tuZXh0Q29kZV0gPSBkaWN0aW9uYXJ5TGVuZ3Roc1twcmV2Q29kZV0gKyAxO1xuICAgICAgICAgICAgICAgIGRpY3Rpb25hcnlWYWx1ZXNbbmV4dENvZGVdID0gY3VycmVudFNlcXVlbmNlWzBdO1xuICAgICAgICAgICAgICAgIG5leHRDb2RlKys7XG4gICAgICAgICAgICAgICAgY29kZUxlbmd0aCA9XG4gICAgICAgICAgICAgICAgICAgIChuZXh0Q29kZSArIGVhcmx5Q2hhbmdlKSAmIChuZXh0Q29kZSArIGVhcmx5Q2hhbmdlIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY29kZUxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbihNYXRoLmxvZyhuZXh0Q29kZSArIGVhcmx5Q2hhbmdlKSAvIDAuNjkzMTQ3MTgwNTU5OTQ1MyArIDEsIDEyKSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2Q29kZSA9IGNvZGU7XG4gICAgICAgICAgICBkZWNvZGVkTGVuZ3RoICs9IGN1cnJlbnRTZXF1ZW5jZUxlbmd0aDtcbiAgICAgICAgICAgIGlmIChlc3RpbWF0ZWREZWNvZGVkU2l6ZSA8IGRlY29kZWRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZERlY29kZWRTaXplICs9IGRlY29kZWRTaXplRGVsdGE7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoZXN0aW1hdGVkRGVjb2RlZFNpemUgPCBkZWNvZGVkTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcih0aGlzLmJ1ZmZlckxlbmd0aCArIGVzdGltYXRlZERlY29kZWRTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjdXJyZW50U2VxdWVuY2VMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltjdXJyZW50QnVmZmVyTGVuZ3RoKytdID0gY3VycmVudFNlcXVlbmNlW2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGx6d1N0YXRlLm5leHRDb2RlID0gbmV4dENvZGU7XG4gICAgICAgIGx6d1N0YXRlLmNvZGVMZW5ndGggPSBjb2RlTGVuZ3RoO1xuICAgICAgICBsendTdGF0ZS5wcmV2Q29kZSA9IHByZXZDb2RlO1xuICAgICAgICBsendTdGF0ZS5jdXJyZW50U2VxdWVuY2VMZW5ndGggPSBjdXJyZW50U2VxdWVuY2VMZW5ndGg7XG4gICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gY3VycmVudEJ1ZmZlckxlbmd0aDtcbiAgICB9O1xuICAgIExaV1N0cmVhbS5wcm90b3R5cGUucmVhZEJpdHMgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgYml0c0NhY2hlZCA9IHRoaXMuYml0c0NhY2hlZDtcbiAgICAgICAgdmFyIGNhY2hlZERhdGEgPSB0aGlzLmNhY2hlZERhdGE7XG4gICAgICAgIHdoaWxlIChiaXRzQ2FjaGVkIDwgbikge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnN0cmVhbS5nZXRCeXRlKCk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVvZiA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZWREYXRhID0gKGNhY2hlZERhdGEgPDwgOCkgfCBjO1xuICAgICAgICAgICAgYml0c0NhY2hlZCArPSA4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYml0c0NhY2hlZCA9IGJpdHNDYWNoZWQgLT0gbjtcbiAgICAgICAgdGhpcy5jYWNoZWREYXRhID0gY2FjaGVkRGF0YTtcbiAgICAgICAgcmV0dXJuIChjYWNoZWREYXRhID4+PiBiaXRzQ2FjaGVkKSAmICgoMSA8PCBuKSAtIDEpO1xuICAgIH07XG4gICAgcmV0dXJuIExaV1N0cmVhbTtcbn0oRGVjb2RlU3RyZWFtKSk7XG5leHBvcnQgZGVmYXVsdCBMWldTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MWldTdHJlYW0uanMubWFwIiwiLypcbiAqIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIFRoZSBSdW5MZW5ndGhTdHJlYW0gY2xhc3MgY29udGFpbmVkIGluIHRoaXMgZmlsZSBpcyBhIFR5cGVTY3JpcHQgcG9ydCBvZiB0aGVcbiAqIEphdmFTY3JpcHQgUnVuTGVuZ3RoU3RyZWFtIGNsYXNzIGluIE1vemlsbGEncyBwZGYuanMgcHJvamVjdCwgbWFkZSBhdmFpbGFibGVcbiAqIHVuZGVyIHRoZSBBcGFjaGUgMi4wIG9wZW4gc291cmNlIGxpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IERlY29kZVN0cmVhbSBmcm9tIFwiLi9EZWNvZGVTdHJlYW1cIjtcbnZhciBSdW5MZW5ndGhTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJ1bkxlbmd0aFN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSdW5MZW5ndGhTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtYXliZUxlbmd0aCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJ1bkxlbmd0aFN0cmVhbS5wcm90b3R5cGUucmVhZEJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgcmVwZWF0SGVhZGVyIGhhcyBmb2xsb3dpbmcgZm9ybWF0LiBUaGUgZmlyc3QgYnl0ZSBkZWZpbmVzIHR5cGUgb2YgcnVuXG4gICAgICAgIC8vIGFuZCBhbW91bnQgb2YgYnl0ZXMgdG8gcmVwZWF0L2NvcHk6IG4gPSAwIHRocm91Z2ggMTI3IC0gY29weSBuZXh0IG4gYnl0ZXNcbiAgICAgICAgLy8gKGluIGFkZGl0aW9uIHRvIHRoZSBzZWNvbmQgYnl0ZSBmcm9tIHRoZSBoZWFkZXIpLCBuID0gMTI5IHRocm91Z2ggMjU1IC1cbiAgICAgICAgLy8gZHVwbGljYXRlIHRoZSBzZWNvbmQgYnl0ZSBmcm9tIHRoZSBoZWFkZXIgKDI1NyAtIG4pIHRpbWVzLCBuID0gMTI4IC0gZW5kLlxuICAgICAgICB2YXIgcmVwZWF0SGVhZGVyID0gdGhpcy5zdHJlYW0uZ2V0Qnl0ZXMoMik7XG4gICAgICAgIGlmICghcmVwZWF0SGVhZGVyIHx8IHJlcGVhdEhlYWRlci5sZW5ndGggPCAyIHx8IHJlcGVhdEhlYWRlclswXSA9PT0gMTI4KSB7XG4gICAgICAgICAgICB0aGlzLmVvZiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlcjtcbiAgICAgICAgdmFyIGJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgbiA9IHJlcGVhdEhlYWRlclswXTtcbiAgICAgICAgaWYgKG4gPCAxMjgpIHtcbiAgICAgICAgICAgIC8vIGNvcHkgbiBieXRlc1xuICAgICAgICAgICAgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIoYnVmZmVyTGVuZ3RoICsgbiArIDEpO1xuICAgICAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCsrXSA9IHJlcGVhdEhlYWRlclsxXTtcbiAgICAgICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnN0cmVhbS5nZXRCeXRlcyhuKTtcbiAgICAgICAgICAgICAgICBidWZmZXIuc2V0KHNvdXJjZSwgYnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBidWZmZXJMZW5ndGggKz0gbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG4gPSAyNTcgLSBuO1xuICAgICAgICAgICAgdmFyIGIgPSByZXBlYXRIZWFkZXJbMV07XG4gICAgICAgICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihidWZmZXJMZW5ndGggKyBuICsgMSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltidWZmZXJMZW5ndGgrK10gPSBiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyTGVuZ3RoO1xuICAgIH07XG4gICAgcmV0dXJuIFJ1bkxlbmd0aFN0cmVhbTtcbn0oRGVjb2RlU3RyZWFtKSk7XG5leHBvcnQgZGVmYXVsdCBSdW5MZW5ndGhTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SdW5MZW5ndGhTdHJlYW0uanMubWFwIiwiaW1wb3J0IHsgVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvciwgVW5zdXBwb3J0ZWRFbmNvZGluZ0Vycm9yLCB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmltcG9ydCBQREZBcnJheSBmcm9tIFwiLi4vb2JqZWN0cy9QREZBcnJheVwiO1xuaW1wb3J0IFBERkRpY3QgZnJvbSBcIi4uL29iamVjdHMvUERGRGljdFwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBBc2NpaTg1U3RyZWFtIGZyb20gXCIuL0FzY2lpODVTdHJlYW1cIjtcbmltcG9ydCBBc2NpaUhleFN0cmVhbSBmcm9tIFwiLi9Bc2NpaUhleFN0cmVhbVwiO1xuaW1wb3J0IEZsYXRlU3RyZWFtIGZyb20gXCIuL0ZsYXRlU3RyZWFtXCI7XG5pbXBvcnQgTFpXU3RyZWFtIGZyb20gXCIuL0xaV1N0cmVhbVwiO1xuaW1wb3J0IFJ1bkxlbmd0aFN0cmVhbSBmcm9tIFwiLi9SdW5MZW5ndGhTdHJlYW1cIjtcbmltcG9ydCBTdHJlYW0gZnJvbSBcIi4vU3RyZWFtXCI7XG52YXIgZGVjb2RlU3RyZWFtID0gZnVuY3Rpb24gKHN0cmVhbSwgZW5jb2RpbmcsIHBhcmFtcykge1xuICAgIGlmIChlbmNvZGluZyA9PT0gUERGTmFtZS5vZignRmxhdGVEZWNvZGUnKSkge1xuICAgICAgICByZXR1cm4gbmV3IEZsYXRlU3RyZWFtKHN0cmVhbSk7XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyA9PT0gUERGTmFtZS5vZignTFpXRGVjb2RlJykpIHtcbiAgICAgICAgdmFyIGVhcmx5Q2hhbmdlID0gMTtcbiAgICAgICAgaWYgKHBhcmFtcyBpbnN0YW5jZW9mIFBERkRpY3QpIHtcbiAgICAgICAgICAgIHZhciBFYXJseUNoYW5nZSA9IHBhcmFtcy5sb29rdXAoUERGTmFtZS5vZignRWFybHlDaGFuZ2UnKSk7XG4gICAgICAgICAgICBpZiAoRWFybHlDaGFuZ2UgaW5zdGFuY2VvZiBQREZOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBlYXJseUNoYW5nZSA9IEVhcmx5Q2hhbmdlLmFzTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBMWldTdHJlYW0oc3RyZWFtLCB1bmRlZmluZWQsIGVhcmx5Q2hhbmdlKTtcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nID09PSBQREZOYW1lLm9mKCdBU0NJSTg1RGVjb2RlJykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc2NpaTg1U3RyZWFtKHN0cmVhbSk7XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyA9PT0gUERGTmFtZS5vZignQVNDSUlIZXhEZWNvZGUnKSkge1xuICAgICAgICByZXR1cm4gbmV3IEFzY2lpSGV4U3RyZWFtKHN0cmVhbSk7XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyA9PT0gUERGTmFtZS5vZignUnVuTGVuZ3RoRGVjb2RlJykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSdW5MZW5ndGhTdHJlYW0oc3RyZWFtKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRW5jb2RpbmdFcnJvcihlbmNvZGluZy5hc1N0cmluZygpKTtcbn07XG5leHBvcnQgdmFyIGRlY29kZVBERlJhd1N0cmVhbSA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBkaWN0ID0gX2EuZGljdCwgY29udGVudHMgPSBfYS5jb250ZW50cztcbiAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbShjb250ZW50cyk7XG4gICAgdmFyIEZpbHRlciA9IGRpY3QubG9va3VwKFBERk5hbWUub2YoJ0ZpbHRlcicpKTtcbiAgICB2YXIgRGVjb2RlUGFybXMgPSBkaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdEZWNvZGVQYXJtcycpKTtcbiAgICBpZiAoRmlsdGVyIGluc3RhbmNlb2YgUERGTmFtZSkge1xuICAgICAgICBzdHJlYW0gPSBkZWNvZGVTdHJlYW0oc3RyZWFtLCBGaWx0ZXIsIERlY29kZVBhcm1zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoRmlsdGVyIGluc3RhbmNlb2YgUERGQXJyYXkpIHtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gRmlsdGVyLnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgc3RyZWFtID0gZGVjb2RlU3RyZWFtKHN0cmVhbSwgRmlsdGVyLmxvb2t1cChpZHgsIFBERk5hbWUpLCBEZWNvZGVQYXJtcyAmJiBEZWNvZGVQYXJtcy5sb29rdXBNYXliZShpZHgsIFBERkRpY3QpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICghIUZpbHRlcikge1xuICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE9iamVjdFR5cGVFcnJvcihbUERGTmFtZSwgUERGQXJyYXldLCBGaWx0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNaXNzaW5nUGFnZUNvbnRlbnRzRW1iZWRkaW5nRXJyb3IsIFVucmVjb2duaXplZFN0cmVhbVR5cGVFcnJvciwgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERlJhd1N0cmVhbSBmcm9tIFwiLi4vb2JqZWN0cy9QREZSYXdTdHJlYW1cIjtcbmltcG9ydCBQREZTdHJlYW0gZnJvbSBcIi4uL29iamVjdHMvUERGU3RyZWFtXCI7XG5pbXBvcnQgeyBkZWNvZGVQREZSYXdTdHJlYW0gfSBmcm9tIFwiLi4vc3RyZWFtcy9kZWNvZGVcIjtcbmltcG9ydCBQREZDb250ZW50U3RyZWFtIGZyb20gXCIuLi9zdHJ1Y3R1cmVzL1BERkNvbnRlbnRTdHJlYW1cIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IG1lcmdlSW50b1R5cGVkQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBmdWxsUGFnZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICB2YXIgbWVkaWFCb3ggPSBwYWdlLk1lZGlhQm94KCk7XG4gICAgdmFyIHdpZHRoID0gbWVkaWFCb3gubG9va3VwKDIsIFBERk51bWJlcikuYXNOdW1iZXIoKSAtXG4gICAgICAgIG1lZGlhQm94Lmxvb2t1cCgwLCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgdmFyIGhlaWdodCA9IG1lZGlhQm94Lmxvb2t1cCgzLCBQREZOdW1iZXIpLmFzTnVtYmVyKCkgLVxuICAgICAgICBtZWRpYUJveC5sb29rdXAoMSwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgIHJldHVybiB7IGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IHdpZHRoLCB0b3A6IGhlaWdodCB9O1xufTtcbi8vIFJldHVybnMgdGhlIGlkZW50aXR5IG1hdHJpeCwgbW9kaWZpZWQgdG8gcG9zaXRpb24gdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuXG4vLyBib3VuZGluZyBib3ggYXQgKDAsIDApLlxudmFyIGJvdW5kaW5nQm94QWRqdXN0ZWRNYXRyaXggPSBmdW5jdGlvbiAoYmIpIHsgcmV0dXJuIFsxLCAwLCAwLCAxLCAtYmIubGVmdCwgLWJiLmJvdHRvbV07IH07XG52YXIgUERGUGFnZUVtYmVkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERlBhZ2VFbWJlZGRlcihwYWdlLCBib3VuZGluZ0JveCwgdHJhbnNmb3JtYXRpb25NYXRyaXgpIHtcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcbiAgICAgICAgdmFyIGJiID0gYm91bmRpbmdCb3ggIT09IG51bGwgJiYgYm91bmRpbmdCb3ggIT09IHZvaWQgMCA/IGJvdW5kaW5nQm94IDogZnVsbFBhZ2VCb3VuZGluZ0JveChwYWdlKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IGJiLnJpZ2h0IC0gYmIubGVmdDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBiYi50b3AgLSBiYi5ib3R0b207XG4gICAgICAgIHRoaXMuYm91bmRpbmdCb3ggPSBiYjtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1hdGlvbk1hdHJpeCA9IHRyYW5zZm9ybWF0aW9uTWF0cml4ICE9PSBudWxsICYmIHRyYW5zZm9ybWF0aW9uTWF0cml4ICE9PSB2b2lkIDAgPyB0cmFuc2Zvcm1hdGlvbk1hdHJpeCA6IGJvdW5kaW5nQm94QWRqdXN0ZWRNYXRyaXgoYmIpO1xuICAgIH1cbiAgICBQREZQYWdlRW1iZWRkZXIuZm9yID0gZnVuY3Rpb24gKHBhZ2UsIGJvdW5kaW5nQm94LCB0cmFuc2Zvcm1hdGlvbk1hdHJpeCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQREZQYWdlRW1iZWRkZXIocGFnZSwgYm91bmRpbmdCb3gsIHRyYW5zZm9ybWF0aW9uTWF0cml4KV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREZQYWdlRW1iZWRkZXIucHJvdG90eXBlLmVtYmVkSW50b0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgQ29udGVudHMsIFJlc291cmNlcywgZGVjb2RlZENvbnRlbnRzLCBfYiwgbGVmdCwgYm90dG9tLCByaWdodCwgdG9wLCB4T2JqZWN0O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIF9hID0gdGhpcy5wYWdlLm5vcm1hbGl6ZWRFbnRyaWVzKCksIENvbnRlbnRzID0gX2EuQ29udGVudHMsIFJlc291cmNlcyA9IF9hLlJlc291cmNlcztcbiAgICAgICAgICAgICAgICBpZiAoIUNvbnRlbnRzKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1BhZ2VDb250ZW50c0VtYmVkZGluZ0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgZGVjb2RlZENvbnRlbnRzID0gdGhpcy5kZWNvZGVDb250ZW50cyhDb250ZW50cyk7XG4gICAgICAgICAgICAgICAgX2IgPSB0aGlzLmJvdW5kaW5nQm94LCBsZWZ0ID0gX2IubGVmdCwgYm90dG9tID0gX2IuYm90dG9tLCByaWdodCA9IF9iLnJpZ2h0LCB0b3AgPSBfYi50b3A7XG4gICAgICAgICAgICAgICAgeE9iamVjdCA9IGNvbnRleHQuZmxhdGVTdHJlYW0oZGVjb2RlZENvbnRlbnRzLCB7XG4gICAgICAgICAgICAgICAgICAgIFR5cGU6ICdYT2JqZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogJ0Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICBGb3JtVHlwZTogMSxcbiAgICAgICAgICAgICAgICAgICAgQkJveDogW2xlZnQsIGJvdHRvbSwgcmlnaHQsIHRvcF0sXG4gICAgICAgICAgICAgICAgICAgIE1hdHJpeDogdGhpcy50cmFuc2Zvcm1hdGlvbk1hdHJpeCxcbiAgICAgICAgICAgICAgICAgICAgUmVzb3VyY2VzOiBSZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFzc2lnbihyZWYsIHhPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb250ZXh0LnJlZ2lzdGVyKHhPYmplY3QpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gYGNvbnRlbnRzYCBpcyBhbiBhcnJheSBvZiBzdHJlYW1zIHdoaWNoIGFyZSBtZXJnZWQgdG8gaW5jbHVkZSB0aGVtIGluIHRoZSBYT2JqZWN0LlxuICAgIC8vIFRoaXMgbWV0aG9kcyBleHRyYWN0cyBlYWNoIHN0cmVhbSBhbmQgam9pbnMgdGhlbSB3aXRoIGEgbmV3bGluZSBjaGFyYWN0ZXIuXG4gICAgUERGUGFnZUVtYmVkZGVyLnByb3RvdHlwZS5kZWNvZGVDb250ZW50cyA9IGZ1bmN0aW9uIChjb250ZW50cykge1xuICAgICAgICB2YXIgbmV3bGluZSA9IFVpbnQ4QXJyYXkub2YoQ2hhckNvZGVzLk5ld2xpbmUpO1xuICAgICAgICB2YXIgZGVjb2RlZENvbnRlbnRzID0gW107XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGNvbnRlbnRzLnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IGNvbnRlbnRzLmxvb2t1cChpZHgsIFBERlN0cmVhbSk7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBQREZSYXdTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gZGVjb2RlUERGUmF3U3RyZWFtKHN0cmVhbSkuZGVjb2RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBQREZDb250ZW50U3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHN0cmVhbS5nZXRVbmVuY29kZWRDb250ZW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVjb2duaXplZFN0cmVhbVR5cGVFcnJvcihzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVjb2RlZENvbnRlbnRzLnB1c2goY29udGVudCwgbmV3bGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlSW50b1R5cGVkQXJyYXkuYXBwbHkodm9pZCAwLCBkZWNvZGVkQ29udGVudHMpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERlBhZ2VFbWJlZGRlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZQYWdlRW1iZWRkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZQYWdlRW1iZWRkZXIuanMubWFwIiwiaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGQm9vbCBmcm9tIFwiLi4vb2JqZWN0cy9QREZCb29sXCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IHsgYXNzZXJ0RWFjaElzLCBhc3NlcnRJbnRlZ2VyLCBhc3NlcnRJc09uZU9mLCBhc3NlcnRSYW5nZSwgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBhc0VudW0gPSBmdW5jdGlvbiAocmF3VmFsdWUsIGVudW1UeXBlKSB7XG4gICAgaWYgKHJhd1ZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGVudW1UeXBlW3Jhd1ZhbHVlXTtcbn07XG5leHBvcnQgdmFyIE5vbkZ1bGxTY3JlZW5QYWdlTW9kZTtcbihmdW5jdGlvbiAoTm9uRnVsbFNjcmVlblBhZ2VNb2RlKSB7XG4gICAgLyoqXG4gICAgICogQWZ0ZXIgZXhpdGluZyBGdWxsU2NyZWVuIG1vZGUsIG5laXRoZXIgdGhlIGRvY3VtZW50IG91dGxpbmUgbm9yIHRodW1ibmFpbFxuICAgICAqIGltYWdlcyBzaG91bGQgYmUgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBOb25GdWxsU2NyZWVuUGFnZU1vZGVbXCJVc2VOb25lXCJdID0gXCJVc2VOb25lXCI7XG4gICAgLyoqIEFmdGVyIGV4aXRpbmcgRnVsbFNjcmVlbiBtb2RlLCB0aGUgZG9jdW1lbnQgb3V0bGluZSBzaG91bGQgYmUgdmlzaWJsZS4gKi9cbiAgICBOb25GdWxsU2NyZWVuUGFnZU1vZGVbXCJVc2VPdXRsaW5lc1wiXSA9IFwiVXNlT3V0bGluZXNcIjtcbiAgICAvKiogQWZ0ZXIgZXhpdGluZyBGdWxsU2NyZWVuIG1vZGUsIHRodW1ibmFpbCBpbWFnZXMgc2hvdWxkIGJlIHZpc2libGUuICovXG4gICAgTm9uRnVsbFNjcmVlblBhZ2VNb2RlW1wiVXNlVGh1bWJzXCJdID0gXCJVc2VUaHVtYnNcIjtcbiAgICAvKipcbiAgICAgKiBBZnRlciBleGl0aW5nIEZ1bGxTY3JlZW4gbW9kZSwgdGhlIG9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgcGFuZWwgc2hvdWxkIGJlXG4gICAgICogdmlzaWJsZS5cbiAgICAgKi9cbiAgICBOb25GdWxsU2NyZWVuUGFnZU1vZGVbXCJVc2VPQ1wiXSA9IFwiVXNlT0NcIjtcbn0pKE5vbkZ1bGxTY3JlZW5QYWdlTW9kZSB8fCAoTm9uRnVsbFNjcmVlblBhZ2VNb2RlID0ge30pKTtcbmV4cG9ydCB2YXIgUmVhZGluZ0RpcmVjdGlvbjtcbihmdW5jdGlvbiAoUmVhZGluZ0RpcmVjdGlvbikge1xuICAgIC8qKiBUaGUgcHJlZG9taW5hbnQgcmVhZGluZyBvcmRlciBpcyBMZWZ0IHRvIFJpZ2h0LiAqL1xuICAgIFJlYWRpbmdEaXJlY3Rpb25bXCJMMlJcIl0gPSBcIkwyUlwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBwcmVkb21pbmFudCByZWFkaW5nIG9yZGVyIGlzIFJpZ2h0IHRvIGxlZnQgKGluY2x1ZGluZyB2ZXJ0aWNhbCB3cml0aW5nXG4gICAgICogc3lzdGVtcywgc3VjaCBhcyBDaGluZXNlLCBKYXBhbmVzZSBhbmQgS29yZWFuKS5cbiAgICAgKi9cbiAgICBSZWFkaW5nRGlyZWN0aW9uW1wiUjJMXCJdID0gXCJSMkxcIjtcbn0pKFJlYWRpbmdEaXJlY3Rpb24gfHwgKFJlYWRpbmdEaXJlY3Rpb24gPSB7fSkpO1xuZXhwb3J0IHZhciBQcmludFNjYWxpbmc7XG4oZnVuY3Rpb24gKFByaW50U2NhbGluZykge1xuICAgIC8qKiBObyBwYWdlIHNjYWxpbmcuICovXG4gICAgUHJpbnRTY2FsaW5nW1wiTm9uZVwiXSA9IFwiTm9uZVwiO1xuICAgIC8qIFVzZSB0aGUgUERGIHJlYWRlcidzIGRlZmF1bHQgcHJpbnQgc2NhbGluZy4gKi9cbiAgICBQcmludFNjYWxpbmdbXCJBcHBEZWZhdWx0XCJdID0gXCJBcHBEZWZhdWx0XCI7XG59KShQcmludFNjYWxpbmcgfHwgKFByaW50U2NhbGluZyA9IHt9KSk7XG5leHBvcnQgdmFyIER1cGxleDtcbihmdW5jdGlvbiAoRHVwbGV4KSB7XG4gICAgLyoqIFRoZSBQREYgcmVhZGVyIHNob3VsZCBwcmludCBzaW5nbGUtc2lkZWQuICovXG4gICAgRHVwbGV4W1wiU2ltcGxleFwiXSA9IFwiU2ltcGxleFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBQREYgcmVhZGVyIHNob3VsZCBwcmludCBkb3VibGUgc2lkZWQgYW5kIGZsaXAgb24gdGhlIHNob3J0IGVkZ2Ugb2YgdGhlXG4gICAgICogc2hlZXQuXG4gICAgICovXG4gICAgRHVwbGV4W1wiRHVwbGV4RmxpcFNob3J0RWRnZVwiXSA9IFwiRHVwbGV4RmxpcFNob3J0RWRnZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBQREYgcmVhZGVyIHNob3VsZCBwcmludCBkb3VibGUgc2lkZWQgYW5kIGZsaXAgb24gdGhlIGxvbmcgZWRnZSBvZiB0aGVcbiAgICAgKiBzaGVldC5cbiAgICAgKi9cbiAgICBEdXBsZXhbXCJEdXBsZXhGbGlwTG9uZ0VkZ2VcIl0gPSBcIkR1cGxleEZsaXBMb25nRWRnZVwiO1xufSkoRHVwbGV4IHx8IChEdXBsZXggPSB7fSkpO1xudmFyIFZpZXdlclByZWZlcmVuY2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgZnVuY3Rpb24gVmlld2VyUHJlZmVyZW5jZXMoZGljdCkge1xuICAgICAgICB0aGlzLmRpY3QgPSBkaWN0O1xuICAgIH1cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUubG9va3VwQm9vbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHJldHVybk9iaiA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZihrZXkpKTtcbiAgICAgICAgaWYgKHJldHVybk9iaiBpbnN0YW5jZW9mIFBERkJvb2wpXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuT2JqO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLmxvb2t1cE5hbWUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciByZXR1cm5PYmogPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2Yoa2V5KSk7XG4gICAgICAgIGlmIChyZXR1cm5PYmogaW5zdGFuY2VvZiBQREZOYW1lKVxuICAgICAgICAgICAgcmV0dXJuIHJldHVybk9iajtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLkhpZGVUb29sYmFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBCb29sKCdIaWRlVG9vbGJhcicpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuSGlkZU1lbnViYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cEJvb2woJ0hpZGVNZW51YmFyJyk7XG4gICAgfTtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5IaWRlV2luZG93VUkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cEJvb2woJ0hpZGVXaW5kb3dVSScpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuRml0V2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBCb29sKCdGaXRXaW5kb3cnKTtcbiAgICB9O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLkNlbnRlcldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwQm9vbCgnQ2VudGVyV2luZG93Jyk7XG4gICAgfTtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5EaXNwbGF5RG9jVGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cEJvb2woJ0Rpc3BsYXlEb2NUaXRsZScpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuTm9uRnVsbFNjcmVlblBhZ2VNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBOYW1lKCdOb25GdWxsU2NyZWVuUGFnZU1vZGUnKTtcbiAgICB9O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLkRpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwTmFtZSgnRGlyZWN0aW9uJyk7XG4gICAgfTtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5QcmludFNjYWxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE5hbWUoJ1ByaW50U2NhbGluZycpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuRHVwbGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBOYW1lKCdEdXBsZXgnKTtcbiAgICB9O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLlBpY2tUcmF5QnlQREZTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXBCb29sKCdQaWNrVHJheUJ5UERGU2l6ZScpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuUHJpbnRQYWdlUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBQcmludFBhZ2VSYW5nZSA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignUHJpbnRQYWdlUmFuZ2UnKSk7XG4gICAgICAgIGlmIChQcmludFBhZ2VSYW5nZSBpbnN0YW5jZW9mIFBERkFycmF5KVxuICAgICAgICAgICAgcmV0dXJuIFByaW50UGFnZVJhbmdlO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuTnVtQ29waWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgTnVtQ29waWVzID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdOdW1Db3BpZXMnKSk7XG4gICAgICAgIGlmIChOdW1Db3BpZXMgaW5zdGFuY2VvZiBQREZOdW1iZXIpXG4gICAgICAgICAgICByZXR1cm4gTnVtQ29waWVzO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgUERGIHJlYWRlcnMgc2hvdWxkIGhpZGUgdGhlIHRvb2xiYXIgbWVudXMgd2hlbiBkaXNwbGF5aW5nXG4gICAgICogdGhpcyBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0b29sYmFycyBzaG91bGQgYmUgaGlkZGVuLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRIaWRlVG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuSGlkZVRvb2xiYXIoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzQm9vbGVhbigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIFBERiByZWFkZXJzIHNob3VsZCBoaWRlIHRoZSBtZW51IGJhciB3aGVuIGRpc3BsYXlpbmcgdGhpc1xuICAgICAqIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoZSBtZW51IGJhciBzaG91bGQgYmUgaGlkZGVuLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRIaWRlTWVudWJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuSGlkZU1lbnViYXIoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzQm9vbGVhbigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIFBERiByZWFkZXJzIHNob3VsZCBoaWRlIHRoZSB1c2VyIGludGVyZmFjZSBlbGVtZW50cyBpblxuICAgICAqIHRoZSBkb2N1bWVudCdzIHdpbmRvdyAoc3VjaCBhcyBzY3JvbGwgYmFycyBhbmQgbmF2aWdhdGlvbiBjb250cm9scyksXG4gICAgICogbGVhdmluZyBvbmx5IHRoZSBkb2N1bWVudCdzIGNvbnRlbnRzIGRpc3BsYXllZC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB1c2VyIGludGVyZmFjZSBlbGVtZW50cyBzaG91bGQgYmUgaGlkZGVuLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRIaWRlV2luZG93VUkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLkhpZGVXaW5kb3dVSSgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNCb29sZWFuKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgUERGIHJlYWRlcnMgc2hvdWxkIHJlc2l6ZSB0aGUgZG9jdW1lbnQncyB3aW5kb3cgdG8gZml0XG4gICAgICogdGhlIHNpemUgb2YgdGhlIGZpcnN0IGRpc3BsYXllZCBwYWdlLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoZSB3aW5kb3cgc2hvdWxkIGJlIHJlc2l6ZWQgdG8gZml0LlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRGaXRXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLkZpdFdpbmRvdygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNCb29sZWFuKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgUERGIHJlYWRlcnMgc2hvdWxkIHBvc2l0aW9uIHRoZSBkb2N1bWVudCdzIHdpbmRvdyBpbiB0aGVcbiAgICAgKiBjZW50ZXIgb2YgdGhlIHNjcmVlbi5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0byBjZW50ZXIgdGhlIGRvY3VtZW50IHdpbmRvdy5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuZ2V0Q2VudGVyV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5DZW50ZXJXaW5kb3coKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzQm9vbGVhbigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSB3aW5kb3cncyB0aXRsZSBiYXIgc2hvdWxkIGRpc3BsYXkgdGhlIGRvY3VtZW50XG4gICAgICogYFRpdGxlYCwgdGFrZW4gZnJvbSB0aGUgZG9jdW1lbnQgbWV0YWRhdGEgKHNlZSBbW1BERkRvY3VtZW50LmdldFRpdGxlXV0pLlxuICAgICAqIFJldHVybnMgYGZhbHNlYCBpZiB0aGUgdGl0bGUgYmFyIHNob3VsZCBpbnN0ZWFkIGRpc3BsYXkgdGhlIGZpbGVuYW1lIG9mIHRoZVxuICAgICAqIFBERiBmaWxlLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgZG9jdW1lbnQgdGl0bGUuXG4gICAgICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLmdldERpc3BsYXlEb2NUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuRGlzcGxheURvY1RpdGxlKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hc0Jvb2xlYW4oKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwYWdlIG1vZGUsIHdoaWNoIHRlbGxzIHRoZSBQREYgcmVhZGVyIGhvdyB0byBkaXNwbGF5IHRoZVxuICAgICAqIGRvY3VtZW50IGFmdGVyIGV4aXRpbmcgZnVsbC1zY3JlZW4gbW9kZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGFnZSBtb2RlIGFmdGVyIGV4aXRpbmcgZnVsbC1zY3JlZW4gbW9kZS5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuZ2V0Tm9uRnVsbFNjcmVlblBhZ2VNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbW9kZSA9IChfYSA9IHRoaXMuTm9uRnVsbFNjcmVlblBhZ2VNb2RlKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWNvZGVUZXh0KCk7XG4gICAgICAgIHJldHVybiAoX2IgPSBhc0VudW0obW9kZSwgTm9uRnVsbFNjcmVlblBhZ2VNb2RlKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogTm9uRnVsbFNjcmVlblBhZ2VNb2RlLlVzZU5vbmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmVkb21pbmFudCByZWFkaW5nIG9yZGVyIGZvciB0ZXh0LlxuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IHJlYWRpbmcgb3JkZXIuXG4gICAgICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLmdldFJlYWRpbmdEaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAoX2EgPSB0aGlzLkRpcmVjdGlvbigpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVjb2RlVGV4dCgpO1xuICAgICAgICByZXR1cm4gKF9iID0gYXNFbnVtKGRpcmVjdGlvbiwgUmVhZGluZ0RpcmVjdGlvbikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFJlYWRpbmdEaXJlY3Rpb24uTDJSO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGFnZSBzY2FsaW5nIG9wdGlvbiB0aGF0IHRoZSBQREYgcmVhZGVyIHNob3VsZCBzZWxlY3Qgd2hlbiB0aGVcbiAgICAgKiBwcmludCBkaWFsb2cgaXMgZGlzcGxheWVkLlxuICAgICAqIEByZXR1cm5zIFRoZSBwYWdlIHNjYWxpbmcgb3B0aW9uLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRQcmludFNjYWxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBzY2FsaW5nID0gKF9hID0gdGhpcy5QcmludFNjYWxpbmcoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlY29kZVRleHQoKTtcbiAgICAgICAgcmV0dXJuIChfYiA9IGFzRW51bShzY2FsaW5nLCBQcmludFNjYWxpbmcpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBQcmludFNjYWxpbmcuQXBwRGVmYXVsdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcGVyIGhhbmRsaW5nIG9wdGlvbiB0aGF0IHNob3VsZCBiZSB1c2VkIHdoZW4gcHJpbnRpbmcgdGhlXG4gICAgICogZmlsZSBmcm9tIHRoZSBwcmludCBkaWFsb2cuXG4gICAgICogQHJldHVybnMgVGhlIHBhcGVyIGhhbmRsaW5nIG9wdGlvbi5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuZ2V0RHVwbGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBkdXBsZXggPSAoX2EgPSB0aGlzLkR1cGxleCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVjb2RlVGV4dCgpO1xuICAgICAgICByZXR1cm4gYXNFbnVtKGR1cGxleCwgRHVwbGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBQREYgcGFnZSBzaXplIHNob3VsZCBiZSB1c2VkIHRvIHNlbGVjdCB0aGUgaW5wdXRcbiAgICAgKiBwYXBlciB0cmF5LlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoZSBQREYgcGFnZSBzaXplIHNob3VsZCBiZSB1c2VkIHRvIHNlbGVjdCB0aGVcbiAgICAgKiAgICAgICAgICBpbnB1dCBwYXBlciB0cmF5LlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXRQaWNrVHJheUJ5UERGU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5QaWNrVHJheUJ5UERGU2l6ZSgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNCb29sZWFuKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHBhZ2UgbnVtYmVyIHJhbmdlcywgd2hpY2ggYXJlIHRoZSB2YWx1ZXMgdXNlZCB0b1xuICAgICAqIGluaXRpYWxpemUgdGhlIHByaW50IGRpYWxvZyBib3ggd2hlbiB0aGUgZmlsZSBpcyBwcmludGVkLiBFYWNoIHJhbmdlXG4gICAgICogc3BlY2lmaWVzIHRoZSBmaXJzdCAoYHN0YXJ0YCkgYW5kIGxhc3QgKGBlbmRgKSBwYWdlcyBpbiBhIHN1Yi1yYW5nZSBvZlxuICAgICAqIHBhZ2VzIHRvIGJlIHByaW50ZWQuIFRoZSBmaXJzdCBwYWdlIG9mIHRoZSBQREYgZmlsZSBpcyBkZW5vdGVkIGJ5IDAuXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB2aWV3ZXJQcmVmcyA9IHBkZkRvYy5jYXRhbG9nLmdldE9yQ3JlYXRlVmlld2VyUHJlZmVyZW5jZXMoKVxuICAgICAqIGNvbnN0IGluY2x1ZGVzUGFnZTMgPSB2aWV3ZXJQcmVmc1xuICAgICAqICAgLmdldFByaW50UmFuZ2VzKClcbiAgICAgKiAgIC5zb21lKHByID0+IHByLnN0YXJ0ID08IDIgJiYgcHIuZW5kID49IDIpXG4gICAgICogaWYgKGluY2x1ZGVzUGFnZTMpIGNvbnNvbGUubG9nKCdwcmludFJhbmdlIGluY2x1ZGVzIHBhZ2UgMycpXG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGBzdGFydGAgYW5kIGBlbmRgLFxuICAgICAqICAgICAgICAgIGRlbm90aW5nIHBhZ2UgaW5kaWNlcy4gSWYgbm90LCBzcGVjaWZpZWQgYW4gZW1wdHkgYXJyYXkgaXNcbiAgICAgKiAgICAgICAgICByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuZ2V0UHJpbnRQYWdlUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBybmcgPSB0aGlzLlByaW50UGFnZVJhbmdlKCk7XG4gICAgICAgIGlmICghcm5nKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB2YXIgcGFnZVJhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJuZy5zaXplKCk7IGkgKz0gMikge1xuICAgICAgICAgICAgLy8gRGVzcGl0ZSB0aGUgc3BlYyBjbGVhcmx5IHN0YXRpbmcgdGhhdCBcIlRoZSBmaXJzdCBwYWdlIG9mIHRoZSBQREYgZmlsZVxuICAgICAgICAgICAgLy8gc2hhbGwgYmUgZG9ub3RlZCBieSAxXCIsIHNldmVyYWwgdGVzdCBQREZzIChzcGVjIDEuNykgY3JlYXRlZCBpblxuICAgICAgICAgICAgLy8gQWNyb2JhdCBYSSAxMS4wIGFuZCBhbHNvIHJlYWQgd2l0aCBSZWFkZXIgREMgMjAyMC4wMTMgaW5kaWNhdGUgdGhpcyBpc1xuICAgICAgICAgICAgLy8gYWN0dWFsbHkgYSAwIGJhc2VkIGluZGV4LlxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcm5nLmxvb2t1cChpLCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgICAgICAgICB2YXIgZW5kID0gcm5nLmxvb2t1cChpICsgMSwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgICAgICAgICAgcGFnZVJhbmdlcy5wdXNoKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFnZVJhbmdlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBjb3BpZXMgdG8gYmUgcHJpbnRlZCB3aGVuIHRoZSBwcmludCBkaWFsb2cgaXMgb3BlbmVkXG4gICAgICogZm9yIHRoaXMgZG9jdW1lbnQuXG4gICAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgbnVtYmVyIG9mIGNvcGllcyB0byBiZSBwcmludGVkLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5nZXROdW1Db3BpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLk51bUNvcGllcygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNOdW1iZXIoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB3aGV0aGVyIHRoZSBQREYgcmVhZGVyJ3MgdG9vbGJhcnMgc2hvdWxkIGJlIGhpZGRlbiB3aGlsZSB0aGVcbiAgICAgKiBkb2N1bWVudCBpcyBhY3RpdmUuXG4gICAgICogQHBhcmFtIGhpZGVUb29sYmFyIGB0cnVlYCBpZiB0aGUgdG9vbGJhciBzaG91bGQgYmUgaGlkZGVuLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5zZXRIaWRlVG9vbGJhciA9IGZ1bmN0aW9uIChoaWRlVG9vbGJhcikge1xuICAgICAgICB2YXIgSGlkZVRvb2xiYXIgPSB0aGlzLmRpY3QuY29udGV4dC5vYmooaGlkZVRvb2xiYXIpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0hpZGVUb29sYmFyJyksIEhpZGVUb29sYmFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB3aGV0aGVyIHRoZSBQREYgcmVhZGVyJ3MgbWVudSBiYXIgc2hvdWxkIGJlIGhpZGRlbiB3aGlsZSB0aGVcbiAgICAgKiBkb2N1bWVudCBpcyBhY3RpdmUuXG4gICAgICogQHBhcmFtIGhpZGVNZW51YmFyIGB0cnVlYCBpZiB0aGUgbWVudSBiYXIgc2hvdWxkIGJlIGhpZGRlbi5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0SGlkZU1lbnViYXIgPSBmdW5jdGlvbiAoaGlkZU1lbnViYXIpIHtcbiAgICAgICAgdmFyIEhpZGVNZW51YmFyID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKGhpZGVNZW51YmFyKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdIaWRlTWVudWJhcicpLCBIaWRlTWVudWJhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaG9vc2Ugd2hldGhlciB0aGUgUERGIHJlYWRlciBzaG91bGQgaGlkZSB1c2VyIGludGVyZmFjZSBlbGVtZW50cyBpbiB0aGVcbiAgICAgKiBkb2N1bWVudCdzIHdpbmRvdyAoc3VjaCBhcyBzY3JvbGwgYmFycyBhbmQgbmF2aWdhdGlvbiBjb250cm9scyksIGxlYXZpbmdcbiAgICAgKiBvbmx5IHRoZSBkb2N1bWVudCdzIGNvbnRlbnRzIGRpc3BsYXllZC5cbiAgICAgKiBAcGFyYW0gaGlkZVdpbmRvd1VJIGB0cnVlYCBpZiB0aGUgdXNlciBpbnRlcmZhY2UgZWxlbWVudHMgc2hvdWxkIGJlIGhpZGRlbi5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0SGlkZVdpbmRvd1VJID0gZnVuY3Rpb24gKGhpZGVXaW5kb3dVSSkge1xuICAgICAgICB2YXIgSGlkZVdpbmRvd1VJID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKGhpZGVXaW5kb3dVSSk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignSGlkZVdpbmRvd1VJJyksIEhpZGVXaW5kb3dVSSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaG9vc2Ugd2hldGhlciB0aGUgUERGIHJlYWRlciBzaG91bGQgcmVzaXplIHRoZSBkb2N1bWVudCdzIHdpbmRvdyB0byBmaXRcbiAgICAgKiB0aGUgc2l6ZSBvZiB0aGUgZmlyc3QgZGlzcGxheWVkIHBhZ2UuXG4gICAgICogQHBhcmFtIGZpdFdpbmRvdyBgdHJ1ZWAgaWYgdGhlIHdpbmRvdyBzaG91bGQgYmUgcmVzaXplZC5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0Rml0V2luZG93ID0gZnVuY3Rpb24gKGZpdFdpbmRvdykge1xuICAgICAgICB2YXIgRml0V2luZG93ID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKGZpdFdpbmRvdyk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignRml0V2luZG93JyksIEZpdFdpbmRvdyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaG9vc2Ugd2hldGhlciB0aGUgUERGIHJlYWRlciBzaG91bGQgcG9zaXRpb24gdGhlIGRvY3VtZW50J3Mgd2luZG93IGluIHRoZVxuICAgICAqIGNlbnRlciBvZiB0aGUgc2NyZWVuLlxuICAgICAqIEBwYXJhbSBjZW50ZXJXaW5kb3cgYHRydWVgIGlmIHRoZSB3aW5kb3cgc2hvdWxkIGJlIGNlbnRlcmVkLlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5zZXRDZW50ZXJXaW5kb3cgPSBmdW5jdGlvbiAoY2VudGVyV2luZG93KSB7XG4gICAgICAgIHZhciBDZW50ZXJXaW5kb3cgPSB0aGlzLmRpY3QuY29udGV4dC5vYmooY2VudGVyV2luZG93KTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdDZW50ZXJXaW5kb3cnKSwgQ2VudGVyV2luZG93KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB3aGV0aGVyIHRoZSB3aW5kb3cncyB0aXRsZSBiYXIgc2hvdWxkIGRpc3BsYXkgdGhlIGRvY3VtZW50IGBUaXRsZWBcbiAgICAgKiB0YWtlbiBmcm9tIHRoZSBkb2N1bWVudCBtZXRhZGF0YSAoc2VlIFtbUERGRG9jdW1lbnQuc2V0VGl0bGVdXSkuIElmXG4gICAgICogYGZhbHNlYCwgdGhlIHRpdGxlIGJhciBzaG91bGQgaW5zdGVhZCBkaXNwbGF5IHRoZSBQREYgZmlsZW5hbWUuXG4gICAgICogQHBhcmFtIGRpc3BsYXlUaXRsZSBgdHJ1ZWAgaWYgdGhlIGRvY3VtZW50IHRpdGxlIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLnNldERpc3BsYXlEb2NUaXRsZSA9IGZ1bmN0aW9uIChkaXNwbGF5VGl0bGUpIHtcbiAgICAgICAgdmFyIERpc3BsYXlEb2NUaXRsZSA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaihkaXNwbGF5VGl0bGUpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0Rpc3BsYXlEb2NUaXRsZScpLCBEaXNwbGF5RG9jVGl0bGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIGhvdyB0aGUgUERGIHJlYWRlciBzaG91bGQgZGlzcGxheSB0aGUgZG9jdW1lbnQgdXBvbiBleGl0aW5nXG4gICAgICogZnVsbC1zY3JlZW4gbW9kZS4gVGhpcyBlbnRyeSBpcyBtZWFuaW5nZnVsIG9ubHkgaWYgdGhlIHZhbHVlIG9mIHRoZVxuICAgICAqIGBQYWdlTW9kZWAgZW50cnkgaW4gdGhlIGRvY3VtZW50J3MgW1tQREZDYXRhbG9nXV0gaXMgYEZ1bGxTY3JlZW5gLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBQREZEb2N1bWVudCwgTm9uRnVsbFNjcmVlblBhZ2VNb2RlLCBQREZOYW1lIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIGNvbnN0IHBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmNyZWF0ZSgpXG4gICAgICpcbiAgICAgKiAvLyBTZXQgdGhlIFBhZ2VNb2RlXG4gICAgICogcGRmRG9jLmNhdGFsb2cuc2V0KFBERk5hbWUub2YoJ1BhZ2VNb2RlJyksUERGTmFtZS5vZignRnVsbFNjcmVlbicpKVxuICAgICAqXG4gICAgICogLy8gU2V0IHdoYXQgaGFwcGVucyB3aGVuIGZ1bGwtc2NyZWVuIGlzIGNsb3NlZFxuICAgICAqIGNvbnN0IHZpZXdlclByZWZzID0gcGRmRG9jLmNhdGFsb2cuZ2V0T3JDcmVhdGVWaWV3ZXJQcmVmZXJlbmNlcygpXG4gICAgICogdmlld2VyUHJlZnMuc2V0Tm9uRnVsbFNjcmVlblBhZ2VNb2RlKE5vbkZ1bGxTY3JlZW5QYWdlTW9kZS5Vc2VPdXRsaW5lcylcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBub25GdWxsU2NyZWVuUGFnZU1vZGUgSG93IHRoZSBkb2N1bWVudCBzaG91bGQgYmUgZGlzcGxheWVkIHVwb25cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRpbmcgZnVsbCBzY3JlZW4gbW9kZS5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0Tm9uRnVsbFNjcmVlblBhZ2VNb2RlID0gZnVuY3Rpb24gKG5vbkZ1bGxTY3JlZW5QYWdlTW9kZSkge1xuICAgICAgICBhc3NlcnRJc09uZU9mKG5vbkZ1bGxTY3JlZW5QYWdlTW9kZSwgJ25vbkZ1bGxTY3JlZW5QYWdlTW9kZScsIE5vbkZ1bGxTY3JlZW5QYWdlTW9kZSk7XG4gICAgICAgIHZhciBtb2RlID0gUERGTmFtZS5vZihub25GdWxsU2NyZWVuUGFnZU1vZGUpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ05vbkZ1bGxTY3JlZW5QYWdlTW9kZScpLCBtb2RlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB0aGUgcHJlZG9taW5hbnQgcmVhZGluZyBvcmRlciBmb3IgdGV4dC5cbiAgICAgKlxuICAgICAqIFRoaXMgZW50cnkgaGFzIG5vIGRpcmVjdCBlZmZlY3Qgb24gdGhlIGRvY3VtZW50J3MgY29udGVudHMgb3IgcGFnZVxuICAgICAqIG51bWJlcmluZywgYnV0IG1heSBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcGFnZXNcbiAgICAgKiB3aGVuIGRpc3BsYXllZCBzaWRlIGJ5IHNpZGUgb3IgcHJpbnRlZCBuLXVwLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBQREZEb2N1bWVudCwgUmVhZGluZ0RpcmVjdGlvbiB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiBjb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqIGNvbnN0IHZpZXdlclByZWZzID0gcGRmRG9jLmNhdGFsb2cuZ2V0T3JDcmVhdGVWaWV3ZXJQcmVmZXJlbmNlcygpXG4gICAgICogdmlld2VyUHJlZnMuc2V0UmVhZGluZ0RpcmVjdGlvbihSZWFkaW5nRGlyZWN0aW9uLlIyTClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFkaW5nRGlyZWN0aW9uIFRoZSByZWFkaW5nIG9yZGVyIGZvciB0ZXh0LlxuICAgICAqL1xuICAgIFZpZXdlclByZWZlcmVuY2VzLnByb3RvdHlwZS5zZXRSZWFkaW5nRGlyZWN0aW9uID0gZnVuY3Rpb24gKHJlYWRpbmdEaXJlY3Rpb24pIHtcbiAgICAgICAgYXNzZXJ0SXNPbmVPZihyZWFkaW5nRGlyZWN0aW9uLCAncmVhZGluZ0RpcmVjdGlvbicsIFJlYWRpbmdEaXJlY3Rpb24pO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gUERGTmFtZS5vZihyZWFkaW5nRGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdEaXJlY3Rpb24nKSwgZGlyZWN0aW9uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB0aGUgcGFnZSBzY2FsaW5nIG9wdGlvbiB0aGF0IHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGEgcHJpbnQgZGlhbG9nXG4gICAgICogaXMgZGlzcGxheWVkIGZvciB0aGlzIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBQREZEb2N1bWVudCwgUHJpbnRTY2FsaW5nIH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIGNvbnN0IHBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmNyZWF0ZSgpXG4gICAgICogY29uc3Qgdmlld2VyUHJlZnMgPSBwZGZEb2MuY2F0YWxvZy5nZXRPckNyZWF0ZVZpZXdlclByZWZlcmVuY2VzKClcbiAgICAgKiB2aWV3ZXJQcmVmcy5zZXRQcmludFNjYWxpbmcoUHJpbnRTY2FsaW5nLk5vbmUpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJpbnRTY2FsaW5nIFRoZSBwcmludCBzY2FsaW5nIG9wdGlvbi5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0UHJpbnRTY2FsaW5nID0gZnVuY3Rpb24gKHByaW50U2NhbGluZykge1xuICAgICAgICBhc3NlcnRJc09uZU9mKHByaW50U2NhbGluZywgJ3ByaW50U2NhbGluZycsIFByaW50U2NhbGluZyk7XG4gICAgICAgIHZhciBzY2FsaW5nID0gUERGTmFtZS5vZihwcmludFNjYWxpbmcpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1ByaW50U2NhbGluZycpLCBzY2FsaW5nKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENob29zZSB0aGUgcGFwZXIgaGFuZGxpbmcgb3B0aW9uIHRoYXQgc2hvdWxkIGJlIHNlbGVjdGVkIGJ5IGRlZmF1bHQgaW4gdGhlXG4gICAgICogcHJpbnQgZGlhbG9nLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBQREZEb2N1bWVudCwgRHVwbGV4IH0gZnJvbSAncGRmLWxpYidcbiAgICAgKlxuICAgICAqIGNvbnN0IHBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmNyZWF0ZSgpXG4gICAgICogY29uc3Qgdmlld2VyUHJlZnMgPSBwZGZEb2MuY2F0YWxvZy5nZXRPckNyZWF0ZVZpZXdlclByZWZlcmVuY2VzKClcbiAgICAgKiB2aWV3ZXJQcmVmcy5zZXREdXBsZXgoRHVwbGV4LkR1cGxleEZsaXBTaG9ydEVkZ2UpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVwbGV4IFRoZSBkb3VibGUgb3Igc2luZ2xlIHNpZGVkIHByaW50aW5nIG9wdGlvbi5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0RHVwbGV4ID0gZnVuY3Rpb24gKGR1cGxleCkge1xuICAgICAgICBhc3NlcnRJc09uZU9mKGR1cGxleCwgJ2R1cGxleCcsIER1cGxleCk7XG4gICAgICAgIHZhciBkdXAgPSBQREZOYW1lLm9mKGR1cGxleCk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignRHVwbGV4JyksIGR1cCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaG9vc2Ugd2hldGhlciB0aGUgUERGIGRvY3VtZW50J3MgcGFnZSBzaXplIHNob3VsZCBiZSB1c2VkIHRvIHNlbGVjdCB0aGVcbiAgICAgKiBpbnB1dCBwYXBlciB0cmF5IHdoZW4gcHJpbnRpbmcuIFRoaXMgc2V0dGluZyBpbmZsdWVuY2VzIG9ubHkgdGhlIHByZXNldFxuICAgICAqIHZhbHVlcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBwcmludCBkaWFsb2cgcHJlc2VudGVkIGJ5IGEgUERGIHJlYWRlci5cbiAgICAgKlxuICAgICAqIElmIFBpY2tUcmF5QnlQREZTaXplIGlzIHRydWUsIHRoZSBjaGVjayBib3ggaW4gdGhlIHByaW50IGRpYWxvZyBhc3NvY2lhdGVkXG4gICAgICogd2l0aCBpbnB1dCBwYXBlciB0cmF5IHNob3VsZCBiZSBjaGVja2VkLiBUaGlzIHNldHRpbmcgaGFzIG5vIGVmZmVjdCBvblxuICAgICAqIG9wZXJhdGluZyBzeXN0ZW1zIHRoYXQgZG8gbm90IHByb3ZpZGUgdGhlIGFiaWxpdHkgdG8gcGljayB0aGUgaW5wdXQgdHJheVxuICAgICAqIGJ5IHNpemUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGlja1RyYXlCeVBERlNpemUgYHRydWVgIGlmIHRoZSBkb2N1bWVudCdzIHBhZ2Ugc2l6ZSBzaG91bGQgYmUgdXNlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzZWxlY3QgdGhlIGlucHV0IHBhcGVyIHRyYXkuXG4gICAgICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLnNldFBpY2tUcmF5QnlQREZTaXplID0gZnVuY3Rpb24gKHBpY2tUcmF5QnlQREZTaXplKSB7XG4gICAgICAgIHZhciBQaWNrVHJheUJ5UERGU2l6ZSA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaihwaWNrVHJheUJ5UERGU2l6ZSk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignUGlja1RyYXlCeVBERlNpemUnKSwgUGlja1RyYXlCeVBERlNpemUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIHRoZSBwYWdlIG51bWJlcnMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBwcmludCBkaWFsb2cgYm94IHdoZW4gdGhlXG4gICAgICogZmlsZSBpcyBwcmludGVkLiBUaGUgZmlyc3QgcGFnZSBvZiB0aGUgUERGIGZpbGUgaXMgZGVub3RlZCBieSAwLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgeyBQREZEb2N1bWVudCB9IGZyb20gJ3BkZi1saWInXG4gICAgICpcbiAgICAgKiBjb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5jcmVhdGUoKVxuICAgICAqIGNvbnN0IHZpZXdlclByZWZzID0gcGRmRG9jLmNhdGFsb2cuZ2V0T3JDcmVhdGVWaWV3ZXJQcmVmZXJlbmNlcygpXG4gICAgICpcbiAgICAgKiAvLyBXZSBjYW4gc2V0IHRoZSBkZWZhdWx0IHByaW50IHJhbmdlIHRvIG9ubHkgdGhlIGZpcnN0IHBhZ2VcbiAgICAgKiB2aWV3ZXJQcmVmcy5zZXRQcmludFBhZ2VSYW5nZSh7IHN0YXJ0OiAwLCBlbmQ6IDAgfSlcbiAgICAgKlxuICAgICAqIC8vIE9yIHdlIGNhbiBzdXBwbHkgbm9uY29udGlndW91cyByYW5nZXMgKGUuZy4gcGFnZXMgMSwgMywgYW5kIDUtNylcbiAgICAgKiB2aWV3ZXJQcmVmcy5zZXRQcmludFBhZ2VSYW5nZShbXG4gICAgICogICB7IHN0YXJ0OiAwLCBlbmQ6IDAgfSxcbiAgICAgKiAgIHsgc3RhcnQ6IDIsIGVuZDogMiB9LFxuICAgICAqICAgeyBzdGFydDogNCwgZW5kOiA2IH0sXG4gICAgICogXSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmludFBhZ2VSYW5nZSBBbiBvYmplY3Qgb3IgYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCB3aXRoIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIGBzdGFydGAgYW5kIGBlbmRgLCBkZW5vdGluZyBhIHJhbmdlIG9mXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgIHBhZ2UgaW5kaWNlcy5cbiAgICAgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5wcm90b3R5cGUuc2V0UHJpbnRQYWdlUmFuZ2UgPSBmdW5jdGlvbiAocHJpbnRQYWdlUmFuZ2UpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByaW50UGFnZVJhbmdlKSlcbiAgICAgICAgICAgIHByaW50UGFnZVJhbmdlID0gW3ByaW50UGFnZVJhbmdlXTtcbiAgICAgICAgdmFyIGZsYXRSYW5nZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBwcmludFBhZ2VSYW5nZS5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIGZsYXRSYW5nZS5wdXNoKHByaW50UGFnZVJhbmdlW2lkeF0uc3RhcnQpO1xuICAgICAgICAgICAgZmxhdFJhbmdlLnB1c2gocHJpbnRQYWdlUmFuZ2VbaWR4XS5lbmQpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEVhY2hJcyhmbGF0UmFuZ2UsICdwcmludFBhZ2VSYW5nZScsIFsnbnVtYmVyJ10pO1xuICAgICAgICB2YXIgcGFnZVJhbmdlcyA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaihmbGF0UmFuZ2UpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1ByaW50UGFnZVJhbmdlJyksIHBhZ2VSYW5nZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIHRoZSBkZWZhdWx0IG51bWJlciBvZiBjb3BpZXMgdG8gYmUgcHJpbnRlZCB3aGVuIHRoZSBwcmludCBkaWFsb2cgaXNcbiAgICAgKiBvcGVuZWQgZm9yIHRoaXMgZmlsZS5cbiAgICAgKiBAcGFyYW0gbnVtQ29waWVzIFRoZSBkZWZhdWx0IG51bWJlciBvZiBjb3BpZXMuXG4gICAgICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMucHJvdG90eXBlLnNldE51bUNvcGllcyA9IGZ1bmN0aW9uIChudW1Db3BpZXMpIHtcbiAgICAgICAgYXNzZXJ0UmFuZ2UobnVtQ29waWVzLCAnbnVtQ29waWVzJywgMSwgTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICAgIGFzc2VydEludGVnZXIobnVtQ29waWVzLCAnbnVtQ29waWVzJyk7XG4gICAgICAgIHZhciBOdW1Db3BpZXMgPSB0aGlzLmRpY3QuY29udGV4dC5vYmoobnVtQ29waWVzKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdOdW1Db3BpZXMnKSwgTnVtQ29waWVzKTtcbiAgICB9O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgVmlld2VyUHJlZmVyZW5jZXMuZnJvbURpY3QgPSBmdW5jdGlvbiAoZGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdlclByZWZlcmVuY2VzKGRpY3QpO1xuICAgIH07XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBWaWV3ZXJQcmVmZXJlbmNlcy5jcmVhdGUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgZGljdCA9IGNvbnRleHQub2JqKHt9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3ZXJQcmVmZXJlbmNlcyhkaWN0KTtcbiAgICB9O1xuICAgIHJldHVybiBWaWV3ZXJQcmVmZXJlbmNlcztcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBWaWV3ZXJQcmVmZXJlbmNlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZpZXdlclByZWZlcmVuY2VzLmpzLm1hcCIsImltcG9ydCBQREZEaWN0IGZyb20gXCIuLi9vYmplY3RzL1BERkRpY3RcIjtcbmltcG9ydCBQREZTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGU3RyaW5nXCI7XG5pbXBvcnQgUERGSGV4U3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERkhleFN0cmluZ1wiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZBcnJheSBmcm9tIFwiLi4vb2JqZWN0cy9QREZBcnJheVwiO1xuaW1wb3J0IFBERlJlZiBmcm9tIFwiLi4vb2JqZWN0cy9QREZSZWZcIjtcbmltcG9ydCB7IGZpbmRMYXN0TWF0Y2ggfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IE1pc3NpbmdEQUVudHJ5RXJyb3IsIE1pc3NpbmdUZk9wZXJhdG9yRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG4vLyBFeGFtcGxlczpcbi8vICAgYC9IZWx2IDEyIFRmYCAtPiBbJ0hlbHYnLCAnMTInXVxuLy8gICBgL0hlQm8gOC4wMCBUZmAgLT4gWydIZUJvJywgJzguMDAnXVxuLy8gICBgL0hlQm8gVGZgIC0+IFsnSGVCbycsIHVuZGVmaW5lZF1cbnZhciB0ZlJlZ2V4ID0gL1xcLyhbXlxcMFxcdFxcblxcZlxcclxcIF0rKVtcXDBcXHRcXG5cXGZcXHJcXCBdKihcXGQqXFwuXFxkK3xcXGQrKT9bXFwwXFx0XFxuXFxmXFxyXFwgXStUZi87XG52YXIgUERGQWNyb0ZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkFjcm9GaWVsZChkaWN0LCByZWYpIHtcbiAgICAgICAgdGhpcy5kaWN0ID0gZGljdDtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgfVxuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuVCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGljdC5sb29rdXBNYXliZShQREZOYW1lLm9mKCdUJyksIFBERlN0cmluZywgUERGSGV4U3RyaW5nKTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuRmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBudW1iZXJPclJlZiA9IHRoaXMuZ2V0SW5oZXJpdGFibGVBdHRyaWJ1dGUoUERGTmFtZS5vZignRmYnKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QuY29udGV4dC5sb29rdXBNYXliZShudW1iZXJPclJlZiwgUERGTnVtYmVyKTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuViA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlT3JSZWYgPSB0aGlzLmdldEluaGVyaXRhYmxlQXR0cmlidXRlKFBERk5hbWUub2YoJ1YnKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QuY29udGV4dC5sb29rdXAodmFsdWVPclJlZik7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLktpZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QubG9va3VwTWF5YmUoUERGTmFtZS5vZignS2lkcycpLCBQREZBcnJheSk7XG4gICAgfTtcbiAgICAvLyBQYXJlbnQoKTogUERGRGljdCB8IHVuZGVmaW5lZCB7XG4gICAgLy8gICByZXR1cm4gdGhpcy5kaWN0Lmxvb2t1cE1heWJlKFBERk5hbWUub2YoJ1BhcmVudCcpLCBQREZEaWN0KTtcbiAgICAvLyB9XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5EQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdEQScpKTtcbiAgICAgICAgaWYgKGRhIGluc3RhbmNlb2YgUERGU3RyaW5nIHx8IGRhIGluc3RhbmNlb2YgUERGSGV4U3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIGRhO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5zZXRLaWRzID0gZnVuY3Rpb24gKGtpZHMpIHtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdLaWRzJyksIHRoaXMuZGljdC5jb250ZXh0Lm9iaihraWRzKSk7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gY29uc3QgcGFyZW50ID0gdGhpcy5QYXJlbnQoKTtcbiAgICAgICAgLy8gaWYgKCFwYXJlbnQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIHJldHVybiBuZXcgUERGQWNyb0ZpZWxkKHBhcmVudCk7XG4gICAgICAgIHZhciBwYXJlbnRSZWYgPSB0aGlzLmRpY3QuZ2V0KFBERk5hbWUub2YoJ1BhcmVudCcpKTtcbiAgICAgICAgaWYgKHBhcmVudFJlZiBpbnN0YW5jZW9mIFBERlJlZikge1xuICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdQYXJlbnQnKSwgUERGRGljdCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9GaWVsZChwYXJlbnRfMSwgcGFyZW50UmVmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgdGhpcy5kaWN0LmRlbGV0ZShQREZOYW1lLm9mKCdQYXJlbnQnKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignUGFyZW50JyksIHBhcmVudCk7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG4gICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFydGlhbE5hbWUoKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudC5nZXRGdWxseVF1YWxpZmllZE5hbWUoKSArIFwiLlwiICsgdGhpcy5nZXRQYXJ0aWFsTmFtZSgpO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5nZXRQYXJ0aWFsTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5UKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWNvZGVUZXh0KCk7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLnNldFBhcnRpYWxOYW1lID0gZnVuY3Rpb24gKHBhcnRpYWxOYW1lKSB7XG4gICAgICAgIGlmICghcGFydGlhbE5hbWUpXG4gICAgICAgICAgICB0aGlzLmRpY3QuZGVsZXRlKFBERk5hbWUub2YoJ1QnKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignVCcpLCBQREZIZXhTdHJpbmcuZnJvbVRleHQocGFydGlhbE5hbWUpKTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuc2V0RGVmYXVsdEFwcGVhcmFuY2UgPSBmdW5jdGlvbiAoYXBwZWFyYW5jZSkge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0RBJyksIFBERlN0cmluZy5vZihhcHBlYXJhbmNlKSk7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLmdldERlZmF1bHRBcHBlYXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgREEgPSB0aGlzLkRBKCk7XG4gICAgICAgIGlmIChEQSBpbnN0YW5jZW9mIFBERkhleFN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIERBLmRlY29kZVRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gREEgPT09IG51bGwgfHwgREEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IERBLmFzU3RyaW5nKCk7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKGZvbnRTaXplKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIG5hbWUgPSAoX2EgPSB0aGlzLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICAgICAgdmFyIGRhID0gdGhpcy5nZXREZWZhdWx0QXBwZWFyYW5jZSgpO1xuICAgICAgICBpZiAoIWRhKVxuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEQUVudHJ5RXJyb3IobmFtZSk7XG4gICAgICAgIHZhciBkYU1hdGNoID0gZmluZExhc3RNYXRjaChkYSwgdGZSZWdleCk7XG4gICAgICAgIGlmICghZGFNYXRjaC5tYXRjaClcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nVGZPcGVyYXRvckVycm9yKG5hbWUpO1xuICAgICAgICB2YXIgZGFTdGFydCA9IGRhLnNsaWNlKDAsIGRhTWF0Y2gucG9zIC0gZGFNYXRjaC5tYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICB2YXIgZGFFbmQgPSBkYU1hdGNoLnBvcyA8PSBkYS5sZW5ndGggPyBkYS5zbGljZShkYU1hdGNoLnBvcykgOiAnJztcbiAgICAgICAgdmFyIGZvbnROYW1lID0gZGFNYXRjaC5tYXRjaFsxXTtcbiAgICAgICAgdmFyIG1vZGlmaWVkRGEgPSBkYVN0YXJ0ICsgXCIgL1wiICsgZm9udE5hbWUgKyBcIiBcIiArIGZvbnRTaXplICsgXCIgVGYgXCIgKyBkYUVuZDtcbiAgICAgICAgdGhpcy5zZXREZWZhdWx0QXBwZWFyYW5jZShtb2RpZmllZERhKTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuZ2V0RmxhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLkZmKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hc051bWJlcigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5zZXRGbGFncyA9IGZ1bmN0aW9uIChmbGFncykge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0ZmJyksIFBERk51bWJlci5vZihmbGFncykpO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5oYXNGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5nZXRGbGFncygpO1xuICAgICAgICByZXR1cm4gKGZsYWdzICYgZmxhZykgIT09IDA7XG4gICAgfTtcbiAgICBQREZBY3JvRmllbGQucHJvdG90eXBlLnNldEZsYWcgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgICB2YXIgZmxhZ3MgPSB0aGlzLmdldEZsYWdzKCk7XG4gICAgICAgIHRoaXMuc2V0RmxhZ3MoZmxhZ3MgfCBmbGFnKTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuY2xlYXJGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5nZXRGbGFncygpO1xuICAgICAgICB0aGlzLnNldEZsYWdzKGZsYWdzICYgfmZsYWcpO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5zZXRGbGFnVG8gPSBmdW5jdGlvbiAoZmxhZywgZW5hYmxlKSB7XG4gICAgICAgIGlmIChlbmFibGUpXG4gICAgICAgICAgICB0aGlzLnNldEZsYWcoZmxhZyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuY2xlYXJGbGFnKGZsYWcpO1xuICAgIH07XG4gICAgUERGQWNyb0ZpZWxkLnByb3RvdHlwZS5nZXRJbmhlcml0YWJsZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXMuYXNjZW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBub2RlLmRpY3QuZ2V0KG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIFBERkFjcm9GaWVsZC5wcm90b3R5cGUuYXNjZW5kID0gZnVuY3Rpb24gKHZpc2l0b3IpIHtcbiAgICAgICAgdmlzaXRvcih0aGlzKTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG4gICAgICAgIGlmIChwYXJlbnQpXG4gICAgICAgICAgICBwYXJlbnQuYXNjZW5kKHZpc2l0b3IpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9GaWVsZDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvRmllbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvRmllbGQuanMubWFwIiwiaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbi8vIFRPRE86IEFsc28gaGFuZGxlIHRoZSBgL1NgIGFuZCBgL0RgIGVudHJpZXNcbnZhciBCb3JkZXJTdHlsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb3JkZXJTdHlsZShkaWN0KSB7XG4gICAgICAgIHRoaXMuZGljdCA9IGRpY3Q7XG4gICAgfVxuICAgIEJvcmRlclN0eWxlLnByb3RvdHlwZS5XID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgVyA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignVycpKTtcbiAgICAgICAgaWYgKFcgaW5zdGFuY2VvZiBQREZOdW1iZXIpXG4gICAgICAgICAgICByZXR1cm4gVztcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEJvcmRlclN0eWxlLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuVygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNOdW1iZXIoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMTtcbiAgICB9O1xuICAgIEJvcmRlclN0eWxlLnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgICAgICB2YXIgVyA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaih3aWR0aCk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignVycpLCBXKTtcbiAgICB9O1xuICAgIEJvcmRlclN0eWxlLmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QpIHsgcmV0dXJuIG5ldyBCb3JkZXJTdHlsZShkaWN0KTsgfTtcbiAgICByZXR1cm4gQm9yZGVyU3R5bGU7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQm9yZGVyU3R5bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Cb3JkZXJTdHlsZS5qcy5tYXAiLCJpbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGU3RyZWFtIGZyb20gXCIuLi9vYmplY3RzL1BERlN0cmVhbVwiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGUmVmIGZyb20gXCIuLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbnZhciBQREZBbm5vdGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkFubm90YXRpb24oZGljdCkge1xuICAgICAgICB0aGlzLmRpY3QgPSBkaWN0O1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRlY2huaWNhbGx5IHJlcXVpcmVkIGJ5IHRoZSBQREYgc3BlY1xuICAgIFBERkFubm90YXRpb24ucHJvdG90eXBlLlJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ1JlY3QnKSwgUERGQXJyYXkpO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuQVAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QubG9va3VwTWF5YmUoUERGTmFtZS5vZignQVAnKSwgUERGRGljdCk7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5GID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbnVtYmVyT3JSZWYgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0YnKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QuY29udGV4dC5sb29rdXBNYXliZShudW1iZXJPclJlZiwgUERGTnVtYmVyKTtcbiAgICB9O1xuICAgIFBERkFubm90YXRpb24ucHJvdG90eXBlLmdldFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgUmVjdCA9IHRoaXMuUmVjdCgpO1xuICAgICAgICByZXR1cm4gKF9hID0gUmVjdCA9PT0gbnVsbCB8fCBSZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBSZWN0LmFzUmVjdGFuZ2xlKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuc2V0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKHJlY3QpIHtcbiAgICAgICAgdmFyIHggPSByZWN0LngsIHkgPSByZWN0LnksIHdpZHRoID0gcmVjdC53aWR0aCwgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgICAgIHZhciBSZWN0ID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKFt4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHRdKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdSZWN0JyksIFJlY3QpO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuZ2V0QXBwZWFyYW5jZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQVMgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0FTJykpO1xuICAgICAgICBpZiAoQVMgaW5zdGFuY2VvZiBQREZOYW1lKVxuICAgICAgICAgICAgcmV0dXJuIEFTO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuc2V0QXBwZWFyYW5jZVN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignQVMnKSwgc3RhdGUpO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuc2V0QXBwZWFyYW5jZXMgPSBmdW5jdGlvbiAoYXBwZWFyYW5jZXMpIHtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdBUCcpLCBhcHBlYXJhbmNlcyk7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5lbnN1cmVBUCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEFQID0gdGhpcy5BUCgpO1xuICAgICAgICBpZiAoIUFQKSB7XG4gICAgICAgICAgICBBUCA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaih7fSk7XG4gICAgICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0FQJyksIEFQKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQVA7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5nZXROb3JtYWxBcHBlYXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLmVuc3VyZUFQKCk7XG4gICAgICAgIHZhciBOID0gQVAuZ2V0KFBERk5hbWUub2YoJ04nKSk7XG4gICAgICAgIGlmIChOIGluc3RhbmNlb2YgUERGUmVmIHx8IE4gaW5zdGFuY2VvZiBQREZEaWN0KVxuICAgICAgICAgICAgcmV0dXJuIE47XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgTiB0eXBlOiBcIiArIChOID09PSBudWxsIHx8IE4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IE4uY29uc3RydWN0b3IubmFtZSkpO1xuICAgIH07XG4gICAgLyoqIEBwYXJhbSBhcHBlYXJhbmNlIEEgUERGRGljdCBvciBQREZTdHJlYW0gKGRpcmVjdCBvciByZWYpICovXG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuc2V0Tm9ybWFsQXBwZWFyYW5jZSA9IGZ1bmN0aW9uIChhcHBlYXJhbmNlKSB7XG4gICAgICAgIHZhciBBUCA9IHRoaXMuZW5zdXJlQVAoKTtcbiAgICAgICAgQVAuc2V0KFBERk5hbWUub2YoJ04nKSwgYXBwZWFyYW5jZSk7XG4gICAgfTtcbiAgICAvKiogQHBhcmFtIGFwcGVhcmFuY2UgQSBQREZEaWN0IG9yIFBERlN0cmVhbSAoZGlyZWN0IG9yIHJlZikgKi9cbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5zZXRSb2xsb3ZlckFwcGVhcmFuY2UgPSBmdW5jdGlvbiAoYXBwZWFyYW5jZSkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLmVuc3VyZUFQKCk7XG4gICAgICAgIEFQLnNldChQREZOYW1lLm9mKCdSJyksIGFwcGVhcmFuY2UpO1xuICAgIH07XG4gICAgLyoqIEBwYXJhbSBhcHBlYXJhbmNlIEEgUERGRGljdCBvciBQREZTdHJlYW0gKGRpcmVjdCBvciByZWYpICovXG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuc2V0RG93bkFwcGVhcmFuY2UgPSBmdW5jdGlvbiAoYXBwZWFyYW5jZSkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLmVuc3VyZUFQKCk7XG4gICAgICAgIEFQLnNldChQREZOYW1lLm9mKCdEJyksIGFwcGVhcmFuY2UpO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUucmVtb3ZlUm9sbG92ZXJBcHBlYXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLkFQKCk7XG4gICAgICAgIEFQID09PSBudWxsIHx8IEFQID09PSB2b2lkIDAgPyB2b2lkIDAgOiBBUC5kZWxldGUoUERGTmFtZS5vZignUicpKTtcbiAgICB9O1xuICAgIFBERkFubm90YXRpb24ucHJvdG90eXBlLnJlbW92ZURvd25BcHBlYXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLkFQKCk7XG4gICAgICAgIEFQID09PSBudWxsIHx8IEFQID09PSB2b2lkIDAgPyB2b2lkIDAgOiBBUC5kZWxldGUoUERGTmFtZS5vZignRCcpKTtcbiAgICB9O1xuICAgIFBERkFubm90YXRpb24ucHJvdG90eXBlLmdldEFwcGVhcmFuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQVAgPSB0aGlzLkFQKCk7XG4gICAgICAgIGlmICghQVApXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgTiA9IEFQLmxvb2t1cChQREZOYW1lLm9mKCdOJyksIFBERkRpY3QsIFBERlN0cmVhbSk7XG4gICAgICAgIHZhciBSID0gQVAubG9va3VwTWF5YmUoUERGTmFtZS5vZignUicpLCBQREZEaWN0LCBQREZTdHJlYW0pO1xuICAgICAgICB2YXIgRCA9IEFQLmxvb2t1cE1heWJlKFBERk5hbWUub2YoJ0QnKSwgUERGRGljdCwgUERGU3RyZWFtKTtcbiAgICAgICAgcmV0dXJuIHsgbm9ybWFsOiBOLCByb2xsb3ZlcjogUiwgZG93bjogRCB9O1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5wcm90b3R5cGUuZ2V0RmxhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLkYoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzTnVtYmVyKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5zZXRGbGFncyA9IGZ1bmN0aW9uIChmbGFncykge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0YnKSwgUERGTnVtYmVyLm9mKGZsYWdzKSk7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5oYXNGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5nZXRGbGFncygpO1xuICAgICAgICByZXR1cm4gKGZsYWdzICYgZmxhZykgIT09IDA7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5zZXRGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5nZXRGbGFncygpO1xuICAgICAgICB0aGlzLnNldEZsYWdzKGZsYWdzIHwgZmxhZyk7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5jbGVhckZsYWcgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgICB2YXIgZmxhZ3MgPSB0aGlzLmdldEZsYWdzKCk7XG4gICAgICAgIHRoaXMuc2V0RmxhZ3MoZmxhZ3MgJiB+ZmxhZyk7XG4gICAgfTtcbiAgICBQREZBbm5vdGF0aW9uLnByb3RvdHlwZS5zZXRGbGFnVG8gPSBmdW5jdGlvbiAoZmxhZywgZW5hYmxlKSB7XG4gICAgICAgIGlmIChlbmFibGUpXG4gICAgICAgICAgICB0aGlzLnNldEZsYWcoZmxhZyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuY2xlYXJGbGFnKGZsYWcpO1xuICAgIH07XG4gICAgUERGQW5ub3RhdGlvbi5mcm9tRGljdCA9IGZ1bmN0aW9uIChkaWN0KSB7IHJldHVybiBuZXcgUERGQW5ub3RhdGlvbihkaWN0KTsgfTtcbiAgICByZXR1cm4gUERGQW5ub3RhdGlvbjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBbm5vdGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQW5ub3RhdGlvbi5qcy5tYXAiLCJpbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGSGV4U3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERkhleFN0cmluZ1wiO1xuaW1wb3J0IFBERlN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJpbmdcIjtcbnZhciBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MoZGljdCkge1xuICAgICAgICB0aGlzLmRpY3QgPSBkaWN0O1xuICAgIH1cbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5SID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgUiA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignUicpKTtcbiAgICAgICAgaWYgKFIgaW5zdGFuY2VvZiBQREZOdW1iZXIpXG4gICAgICAgICAgICByZXR1cm4gUjtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MucHJvdG90eXBlLkJDID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQkMgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0JDJykpO1xuICAgICAgICBpZiAoQkMgaW5zdGFuY2VvZiBQREZBcnJheSlcbiAgICAgICAgICAgIHJldHVybiBCQztcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MucHJvdG90eXBlLkJHID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQkcgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0JHJykpO1xuICAgICAgICBpZiAoQkcgaW5zdGFuY2VvZiBQREZBcnJheSlcbiAgICAgICAgICAgIHJldHVybiBCRztcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MucHJvdG90eXBlLkNBID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQ0EgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0NBJykpO1xuICAgICAgICBpZiAoQ0EgaW5zdGFuY2VvZiBQREZIZXhTdHJpbmcgfHwgQ0EgaW5zdGFuY2VvZiBQREZTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gQ0E7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5SQyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIFJDID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdSQycpKTtcbiAgICAgICAgaWYgKFJDIGluc3RhbmNlb2YgUERGSGV4U3RyaW5nIHx8IFJDIGluc3RhbmNlb2YgUERGU3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIFJDO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcy5wcm90b3R5cGUuQUMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBBQyA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignQUMnKSk7XG4gICAgICAgIGlmIChBQyBpbnN0YW5jZW9mIFBERkhleFN0cmluZyB8fCBBQyBpbnN0YW5jZW9mIFBERlN0cmluZylcbiAgICAgICAgICAgIHJldHVybiBBQztcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MucHJvdG90eXBlLmdldFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLlIoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzTnVtYmVyKCk7XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5nZXRCb3JkZXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEJDID0gdGhpcy5CQygpO1xuICAgICAgICBpZiAoIUJDKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gQkMgPT09IG51bGwgfHwgQkMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IEJDLnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IEJDLmdldChpZHgpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIFBERk51bWJlcilcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzLnB1c2goY29tcG9uZW50LmFzTnVtYmVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH07XG4gICAgQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcy5wcm90b3R5cGUuZ2V0QmFja2dyb3VuZENvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQkcgPSB0aGlzLkJHKCk7XG4gICAgICAgIGlmICghQkcpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBCRyA9PT0gbnVsbCB8fCBCRyA9PT0gdm9pZCAwID8gdm9pZCAwIDogQkcuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gQkcuZ2V0KGlkeCk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgUERGTnVtYmVyKVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQuYXNOdW1iZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHM7XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5nZXRDYXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIENBID0gdGhpcy5DQSgpO1xuICAgICAgICB2YXIgUkMgPSB0aGlzLlJDKCk7XG4gICAgICAgIHZhciBBQyA9IHRoaXMuQUMoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vcm1hbDogQ0EgPT09IG51bGwgfHwgQ0EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IENBLmRlY29kZVRleHQoKSxcbiAgICAgICAgICAgIHJvbGxvdmVyOiBSQyA9PT0gbnVsbCB8fCBSQyA9PT0gdm9pZCAwID8gdm9pZCAwIDogUkMuZGVjb2RlVGV4dCgpLFxuICAgICAgICAgICAgZG93bjogQUMgPT09IG51bGwgfHwgQUMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IEFDLmRlY29kZVRleHQoKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MucHJvdG90eXBlLnNldFJvdGF0aW9uID0gZnVuY3Rpb24gKHJvdGF0aW9uKSB7XG4gICAgICAgIHZhciBSID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKHJvdGF0aW9uKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdSJyksIFIpO1xuICAgIH07XG4gICAgQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcy5wcm90b3R5cGUuc2V0Qm9yZGVyQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIEJDID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKGNvbG9yKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdCQycpLCBCQyk7XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5zZXRCYWNrZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIEJHID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKGNvbG9yKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdCRycpLCBCRyk7XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLnByb3RvdHlwZS5zZXRDYXB0aW9ucyA9IGZ1bmN0aW9uIChjYXB0aW9ucykge1xuICAgICAgICB2YXIgQ0EgPSBQREZIZXhTdHJpbmcuZnJvbVRleHQoY2FwdGlvbnMubm9ybWFsKTtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdDQScpLCBDQSk7XG4gICAgICAgIGlmIChjYXB0aW9ucy5yb2xsb3Zlcikge1xuICAgICAgICAgICAgdmFyIFJDID0gUERGSGV4U3RyaW5nLmZyb21UZXh0KGNhcHRpb25zLnJvbGxvdmVyKTtcbiAgICAgICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignUkMnKSwgUkMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaWN0LmRlbGV0ZShQREZOYW1lLm9mKCdSQycpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FwdGlvbnMuZG93bikge1xuICAgICAgICAgICAgdmFyIEFDID0gUERGSGV4U3RyaW5nLmZyb21UZXh0KGNhcHRpb25zLmRvd24pO1xuICAgICAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdBQycpLCBBQyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpY3QuZGVsZXRlKFBERk5hbWUub2YoJ0FDJykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzKGRpY3QpO1xuICAgIH07XG4gICAgcmV0dXJuIEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3M7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGUmVmIGZyb20gXCIuLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERlN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJpbmdcIjtcbmltcG9ydCBQREZIZXhTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGSGV4U3RyaW5nXCI7XG5pbXBvcnQgQm9yZGVyU3R5bGUgZnJvbSBcIi4vQm9yZGVyU3R5bGVcIjtcbmltcG9ydCBQREZBbm5vdGF0aW9uIGZyb20gXCIuL1BERkFubm90YXRpb25cIjtcbmltcG9ydCBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzIGZyb20gXCIuL0FwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3NcIjtcbnZhciBQREZXaWRnZXRBbm5vdGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZXaWRnZXRBbm5vdGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERldpZGdldEFubm90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGV2lkZ2V0QW5ub3RhdGlvbi5wcm90b3R5cGUuTUsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNSyA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignTUsnKSk7XG4gICAgICAgIGlmIChNSyBpbnN0YW5jZW9mIFBERkRpY3QpXG4gICAgICAgICAgICByZXR1cm4gTUs7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5CUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEJTID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdCUycpKTtcbiAgICAgICAgaWYgKEJTIGluc3RhbmNlb2YgUERGRGljdClcbiAgICAgICAgICAgIHJldHVybiBCUztcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24ucHJvdG90eXBlLkRBID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGEgPSB0aGlzLmRpY3QubG9va3VwKFBERk5hbWUub2YoJ0RBJykpO1xuICAgICAgICBpZiAoZGEgaW5zdGFuY2VvZiBQREZTdHJpbmcgfHwgZGEgaW5zdGFuY2VvZiBQREZIZXhTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gZGE7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5QID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgUCA9IHRoaXMuZGljdC5nZXQoUERGTmFtZS5vZignUCcpKTtcbiAgICAgICAgaWYgKFAgaW5zdGFuY2VvZiBQREZSZWYpXG4gICAgICAgICAgICByZXR1cm4gUDtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24ucHJvdG90eXBlLnNldFAgPSBmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1AnKSwgcGFnZSk7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5zZXREZWZhdWx0QXBwZWFyYW5jZSA9IGZ1bmN0aW9uIChhcHBlYXJhbmNlKSB7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignREEnKSwgUERGU3RyaW5nLm9mKGFwcGVhcmFuY2UpKTtcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24ucHJvdG90eXBlLmdldERlZmF1bHRBcHBlYXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgREEgPSB0aGlzLkRBKCk7XG4gICAgICAgIGlmIChEQSBpbnN0YW5jZW9mIFBERkhleFN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIERBLmRlY29kZVRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gREEgPT09IG51bGwgfHwgREEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IERBLmFzU3RyaW5nKCk7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5nZXRBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgTUsgPSB0aGlzLk1LKCk7XG4gICAgICAgIGlmIChNSylcbiAgICAgICAgICAgIHJldHVybiBBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzLmZyb21EaWN0KE1LKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24ucHJvdG90eXBlLmdldE9yQ3JlYXRlQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE1LID0gdGhpcy5NSygpO1xuICAgICAgICBpZiAoTUspXG4gICAgICAgICAgICByZXR1cm4gQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcy5mcm9tRGljdChNSyk7XG4gICAgICAgIHZhciBhYyA9IEFwcGVhcmFuY2VDaGFyYWN0ZXJpc3RpY3MuZnJvbURpY3QodGhpcy5kaWN0LmNvbnRleHQub2JqKHt9KSk7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignTUsnKSwgYWMuZGljdCk7XG4gICAgICAgIHJldHVybiBhYztcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24ucHJvdG90eXBlLmdldEJvcmRlclN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQlMgPSB0aGlzLkJTKCk7XG4gICAgICAgIGlmIChCUylcbiAgICAgICAgICAgIHJldHVybiBCb3JkZXJTdHlsZS5mcm9tRGljdChCUyk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5nZXRPckNyZWF0ZUJvcmRlclN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgQlMgPSB0aGlzLkJTKCk7XG4gICAgICAgIGlmIChCUylcbiAgICAgICAgICAgIHJldHVybiBCb3JkZXJTdHlsZS5mcm9tRGljdChCUyk7XG4gICAgICAgIHZhciBicyA9IEJvcmRlclN0eWxlLmZyb21EaWN0KHRoaXMuZGljdC5jb250ZXh0Lm9iaih7fSkpO1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0JTJyksIGJzLmRpY3QpO1xuICAgICAgICByZXR1cm4gYnM7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLnByb3RvdHlwZS5nZXRPblZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBub3JtYWwgPSAoX2EgPSB0aGlzLmdldEFwcGVhcmFuY2VzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3JtYWw7XG4gICAgICAgIGlmIChub3JtYWwgaW5zdGFuY2VvZiBQREZEaWN0KSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IG5vcm1hbC5rZXlzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBrZXlzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2lkeF07XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gUERGTmFtZS5vZignT2ZmJykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERldpZGdldEFubm90YXRpb24uZnJvbURpY3QgPSBmdW5jdGlvbiAoZGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IFBERldpZGdldEFubm90YXRpb24oZGljdCk7XG4gICAgfTtcbiAgICBQREZXaWRnZXRBbm5vdGF0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb250ZXh0LCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBUeXBlOiAnQW5ub3QnLFxuICAgICAgICAgICAgU3VidHlwZTogJ1dpZGdldCcsXG4gICAgICAgICAgICBSZWN0OiBbMCwgMCwgMCwgMF0sXG4gICAgICAgICAgICBQYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUERGV2lkZ2V0QW5ub3RhdGlvbihkaWN0KTtcbiAgICB9O1xuICAgIHJldHVybiBQREZXaWRnZXRBbm5vdGF0aW9uO1xufShQREZBbm5vdGF0aW9uKSk7XG5leHBvcnQgZGVmYXVsdCBQREZXaWRnZXRBbm5vdGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGV2lkZ2V0QW5ub3RhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZEaWN0IGZyb20gXCIuLi9vYmplY3RzL1BERkRpY3RcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCBQREZBY3JvRmllbGQgZnJvbSBcIi4vUERGQWNyb0ZpZWxkXCI7XG5pbXBvcnQgUERGV2lkZ2V0QW5ub3RhdGlvbiBmcm9tIFwiLi4vYW5ub3RhdGlvbi9QREZXaWRnZXRBbm5vdGF0aW9uXCI7XG5pbXBvcnQgeyBJbmRleE91dE9mQm91bmRzRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG52YXIgUERGQWNyb1Rlcm1pbmFsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBY3JvVGVybWluYWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQWNyb1Rlcm1pbmFsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFBERkFjcm9UZXJtaW5hbC5wcm90b3R5cGUuRlQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuYW1lT3JSZWYgPSB0aGlzLmdldEluaGVyaXRhYmxlQXR0cmlidXRlKFBERk5hbWUub2YoJ0ZUJykpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaWN0LmNvbnRleHQubG9va3VwKG5hbWVPclJlZiwgUERGTmFtZSk7XG4gICAgfTtcbiAgICBQREZBY3JvVGVybWluYWwucHJvdG90eXBlLmdldFdpZGdldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBraWREaWN0cyA9IHRoaXMuS2lkcygpO1xuICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIGl0c2VsZiBhIHdpZGdldFxuICAgICAgICBpZiAoIWtpZERpY3RzKVxuICAgICAgICAgICAgcmV0dXJuIFtQREZXaWRnZXRBbm5vdGF0aW9uLmZyb21EaWN0KHRoaXMuZGljdCldO1xuICAgICAgICAvLyBUaGlzIGZpZWxkJ3Mga2lkcyBhcmUgaXRzIHdpZGdldHNcbiAgICAgICAgdmFyIHdpZGdldHMgPSBuZXcgQXJyYXkoa2lkRGljdHMuc2l6ZSgpKTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0ga2lkRGljdHMuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgZGljdCA9IGtpZERpY3RzLmxvb2t1cChpZHgsIFBERkRpY3QpO1xuICAgICAgICAgICAgd2lkZ2V0c1tpZHhdID0gUERGV2lkZ2V0QW5ub3RhdGlvbi5mcm9tRGljdChkaWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2lkZ2V0cztcbiAgICB9O1xuICAgIFBERkFjcm9UZXJtaW5hbC5wcm90b3R5cGUuYWRkV2lkZ2V0ID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgS2lkcyA9IHRoaXMubm9ybWFsaXplZEVudHJpZXMoKS5LaWRzO1xuICAgICAgICBLaWRzLnB1c2gocmVmKTtcbiAgICB9O1xuICAgIFBERkFjcm9UZXJtaW5hbC5wcm90b3R5cGUucmVtb3ZlV2lkZ2V0ID0gZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICB2YXIga2lkRGljdHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgaWYgKCFraWREaWN0cykge1xuICAgICAgICAgICAgLy8gVGhpcyBmaWVsZCBpcyBpdHNlbGYgYSB3aWRnZXRcbiAgICAgICAgICAgIGlmIChpZHggIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluZGV4T3V0T2ZCb3VuZHNFcnJvcihpZHgsIDAsIDApO1xuICAgICAgICAgICAgdGhpcy5zZXRLaWRzKFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZmllbGQncyBraWRzIGFyZSBpdHMgd2lkZ2V0c1xuICAgICAgICAgICAgaWYgKGlkeCA8IDAgfHwgaWR4ID4ga2lkRGljdHMuc2l6ZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluZGV4T3V0T2ZCb3VuZHNFcnJvcihpZHgsIDAsIGtpZERpY3RzLnNpemUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBraWREaWN0cy5yZW1vdmUoaWR4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGQWNyb1Rlcm1pbmFsLnByb3RvdHlwZS5ub3JtYWxpemVkRW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgLy8gSWYgdGhpcyBmaWVsZCBpcyBpdHNlbGYgYSB3aWRnZXQgKGJlY2F1c2UgaXQgd2FzIG9ubHkgcmVuZGVyZWQgb25jZSBpblxuICAgICAgICAvLyB0aGUgZG9jdW1lbnQsIHNvIHRoZSBmaWVsZCBhbmQgd2lkZ2V0IHByb3BlcnRpZXMgd2VyZSBtZXJnZWQpIHRoZW4gd2VcbiAgICAgICAgLy8gYWRkIGl0c2VsZiB0byB0aGUgYEtpZHNgIGFycmF5LiBUaGUgYWx0ZXJuYXRpdmUgd291bGQgYmUgdG8gdHJ5XG4gICAgICAgIC8vIHNwbGl0dGluZyBhcGFydCB0aGUgd2lkZ2V0IHByb3BlcnRpZXMgYW5kIGNyZWF0aW5nIGEgc2VwYXJhdGUgb2JqZWN0XG4gICAgICAgIC8vIGZvciB0aGVtLlxuICAgICAgICBpZiAoIUtpZHMpIHtcbiAgICAgICAgICAgIEtpZHMgPSB0aGlzLmRpY3QuY29udGV4dC5vYmooW3RoaXMucmVmXSk7XG4gICAgICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0tpZHMnKSwgS2lkcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgS2lkczogS2lkcyB9O1xuICAgIH07XG4gICAgUERGQWNyb1Rlcm1pbmFsLmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QsIHJlZikge1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9UZXJtaW5hbChkaWN0LCByZWYpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9UZXJtaW5hbDtcbn0oUERGQWNyb0ZpZWxkKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvVGVybWluYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvVGVybWluYWwuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGU3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERlN0cmluZ1wiO1xuaW1wb3J0IFBERkhleFN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZIZXhTdHJpbmdcIjtcbmltcG9ydCBQREZBcnJheSBmcm9tIFwiLi4vb2JqZWN0cy9QREZBcnJheVwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERkFjcm9UZXJtaW5hbCBmcm9tIFwiLi9QREZBY3JvVGVybWluYWxcIjtcbmltcG9ydCB7IEluZGV4T3V0T2ZCb3VuZHNFcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbnZhciBQREZBY3JvQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBY3JvQnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkFjcm9CdXR0b24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGQWNyb0J1dHRvbi5wcm90b3R5cGUuT3B0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaWN0Lmxvb2t1cE1heWJlKFBERk5hbWUub2YoJ09wdCcpLCBQREZTdHJpbmcsIFBERkhleFN0cmluZywgUERGQXJyYXkpO1xuICAgIH07XG4gICAgUERGQWNyb0J1dHRvbi5wcm90b3R5cGUuc2V0T3B0ID0gZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ09wdCcpLCB0aGlzLmRpY3QuY29udGV4dC5vYmoob3B0KSk7XG4gICAgfTtcbiAgICBQREZBY3JvQnV0dG9uLnByb3RvdHlwZS5nZXRFeHBvcnRWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcHQgPSB0aGlzLk9wdCgpO1xuICAgICAgICBpZiAoIW9wdClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChvcHQgaW5zdGFuY2VvZiBQREZTdHJpbmcgfHwgb3B0IGluc3RhbmNlb2YgUERGSGV4U3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gW29wdF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvcHQuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBvcHQubG9va3VwKGlkeCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQREZTdHJpbmcgfHwgdmFsdWUgaW5zdGFuY2VvZiBQREZIZXhTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9O1xuICAgIFBERkFjcm9CdXR0b24ucHJvdG90eXBlLnJlbW92ZUV4cG9ydFZhbHVlID0gZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICB2YXIgb3B0ID0gdGhpcy5PcHQoKTtcbiAgICAgICAgaWYgKCFvcHQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChvcHQgaW5zdGFuY2VvZiBQREZTdHJpbmcgfHwgb3B0IGluc3RhbmNlb2YgUERGSGV4U3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbmRleE91dE9mQm91bmRzRXJyb3IoaWR4LCAwLCAwKTtcbiAgICAgICAgICAgIHRoaXMuc2V0T3B0KFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpZHggPCAwIHx8IGlkeCA+IG9wdC5zaXplKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW5kZXhPdXRPZkJvdW5kc0Vycm9yKGlkeCwgMCwgb3B0LnNpemUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHQucmVtb3ZlKGlkeCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEVuZm9yY2UgdXNlIHVzZSBvZiAvT3B0IGV2ZW4gaWYgaXQgaXNuJ3Qgc3RyaWN0bHkgbmVjZXNzYXJ5XG4gICAgUERGQWNyb0J1dHRvbi5wcm90b3R5cGUubm9ybWFsaXplRXhwb3J0VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHZhciBleHBvcnRWYWx1ZXMgPSAoX2EgPSB0aGlzLmdldEV4cG9ydFZhbHVlcygpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgdmFyIE9wdCA9IFtdO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHZhciBleHBvcnRWYWwgPSAoX2IgPSBleHBvcnRWYWx1ZXNbaWR4XSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogUERGSGV4U3RyaW5nLmZyb21UZXh0KChfZCA9IChfYyA9IHdpZGdldC5nZXRPblZhbHVlKCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kZWNvZGVUZXh0KCkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnKTtcbiAgICAgICAgICAgIE9wdC5wdXNoKGV4cG9ydFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRPcHQoT3B0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldXNlcyBleGlzdGluZyBvcHQgaWYgb25lIGV4aXN0cyB3aXRoIHRoZSBzYW1lIHZhbHVlIChhc3N1bWluZ1xuICAgICAqIGB1c2VFeGlzdGluZ0lkeGAgaXMgYHRydWVgKS4gUmV0dXJucyBpbmRleCBvZiBleGlzdGluZyAob3IgbmV3KSBvcHQuXG4gICAgICovXG4gICAgUERGQWNyb0J1dHRvbi5wcm90b3R5cGUuYWRkT3B0ID0gZnVuY3Rpb24gKG9wdCwgdXNlRXhpc3RpbmdPcHRJZHgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZUV4cG9ydFZhbHVlcygpO1xuICAgICAgICB2YXIgb3B0VGV4dCA9IG9wdC5kZWNvZGVUZXh0KCk7XG4gICAgICAgIHZhciBleGlzdGluZ0lkeDtcbiAgICAgICAgaWYgKHVzZUV4aXN0aW5nT3B0SWR4KSB7XG4gICAgICAgICAgICB2YXIgZXhwb3J0VmFsdWVzID0gKF9hID0gdGhpcy5nZXRFeHBvcnRWYWx1ZXMoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBleHBvcnRWYWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4cG9ydFZhbCA9IGV4cG9ydFZhbHVlc1tpZHhdO1xuICAgICAgICAgICAgICAgIGlmIChleHBvcnRWYWwuZGVjb2RlVGV4dCgpID09PSBvcHRUZXh0KVxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0lkeCA9IGlkeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgT3B0ID0gdGhpcy5PcHQoKTtcbiAgICAgICAgT3B0LnB1c2gob3B0KTtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nSWR4ICE9PSBudWxsICYmIGV4aXN0aW5nSWR4ICE9PSB2b2lkIDAgPyBleGlzdGluZ0lkeCA6IE9wdC5zaXplKCkgLSAxO1xuICAgIH07XG4gICAgUERGQWNyb0J1dHRvbi5wcm90b3R5cGUuYWRkV2lkZ2V0V2l0aE9wdCA9IGZ1bmN0aW9uICh3aWRnZXQsIG9wdCwgdXNlRXhpc3RpbmdPcHRJZHgpIHtcbiAgICAgICAgdmFyIG9wdElkeCA9IHRoaXMuYWRkT3B0KG9wdCwgdXNlRXhpc3RpbmdPcHRJZHgpO1xuICAgICAgICB2YXIgYXBTdGF0ZVZhbHVlID0gUERGTmFtZS5vZihTdHJpbmcob3B0SWR4KSk7XG4gICAgICAgIHRoaXMuYWRkV2lkZ2V0KHdpZGdldCk7XG4gICAgICAgIHJldHVybiBhcFN0YXRlVmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gUERGQWNyb0J1dHRvbjtcbn0oUERGQWNyb1Rlcm1pbmFsKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvQnV0dG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQWNyb0J1dHRvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCBQREZBY3JvQnV0dG9uIGZyb20gXCIuL1BERkFjcm9CdXR0b25cIjtcbmltcG9ydCB7IEludmFsaWRBY3JvRmllbGRWYWx1ZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xudmFyIFBERkFjcm9DaGVja0JveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQWNyb0NoZWNrQm94LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkFjcm9DaGVja0JveCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBQREZBY3JvQ2hlY2tCb3gucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIG9uVmFsdWUgPSAoX2EgPSB0aGlzLmdldE9uVmFsdWUoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUERGTmFtZS5vZignWWVzJyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb25WYWx1ZSAmJiB2YWx1ZSAhPT0gUERGTmFtZS5vZignT2ZmJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQWNyb0ZpZWxkVmFsdWVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignVicpLCB2YWx1ZSk7XG4gICAgICAgIHZhciB3aWRnZXRzID0gdGhpcy5nZXRXaWRnZXRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0ID0gd2lkZ2V0c1tpZHhdO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gd2lkZ2V0LmdldE9uVmFsdWUoKSA9PT0gdmFsdWUgPyB2YWx1ZSA6IFBERk5hbWUub2YoJ09mZicpO1xuICAgICAgICAgICAgd2lkZ2V0LnNldEFwcGVhcmFuY2VTdGF0ZShzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERkFjcm9DaGVja0JveC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2ID0gdGhpcy5WKCk7XG4gICAgICAgIGlmICh2IGluc3RhbmNlb2YgUERGTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICByZXR1cm4gUERGTmFtZS5vZignT2ZmJyk7XG4gICAgfTtcbiAgICBQREZBY3JvQ2hlY2tCb3gucHJvdG90eXBlLmdldE9uVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aWRnZXQgPSB0aGlzLmdldFdpZGdldHMoKVswXTtcbiAgICAgICAgcmV0dXJuIHdpZGdldCA9PT0gbnVsbCB8fCB3aWRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpZGdldC5nZXRPblZhbHVlKCk7XG4gICAgfTtcbiAgICBQREZBY3JvQ2hlY2tCb3guZnJvbURpY3QgPSBmdW5jdGlvbiAoZGljdCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb0NoZWNrQm94KGRpY3QsIHJlZik7XG4gICAgfTtcbiAgICBQREZBY3JvQ2hlY2tCb3guY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBGVDogJ0J0bicsXG4gICAgICAgICAgICBLaWRzOiBbXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWYgPSBjb250ZXh0LnJlZ2lzdGVyKGRpY3QpO1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9DaGVja0JveChkaWN0LCByZWYpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9DaGVja0JveDtcbn0oUERGQWNyb0J1dHRvbikpO1xuZXhwb3J0IGRlZmF1bHQgUERGQWNyb0NoZWNrQm94O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQWNyb0NoZWNrQm94LmpzLm1hcCIsInZhciBmbGFnID0gZnVuY3Rpb24gKGJpdEluZGV4KSB7IHJldHVybiAxIDw8IGJpdEluZGV4OyB9O1xuLyoqIEZyb20gUERGIHNwZWMgdGFibGUgMjIxICovXG5leHBvcnQgdmFyIEFjcm9GaWVsZEZsYWdzO1xuKGZ1bmN0aW9uIChBY3JvRmllbGRGbGFncykge1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgdGhlIHVzZXIgbWF5IG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZC4gQW55IGFzc29jaWF0ZWRcbiAgICAgKiB3aWRnZXQgYW5ub3RhdGlvbnMgd2lsbCBub3QgaW50ZXJhY3Qgd2l0aCB0aGUgdXNlcjsgdGhhdCBpcywgdGhleSB3aWxsIG5vdFxuICAgICAqIHJlc3BvbmQgdG8gbW91c2UgY2xpY2tzIG9yIGNoYW5nZSB0aGVpciBhcHBlYXJhbmNlIGluIHJlc3BvbnNlIHRvIG1vdXNlXG4gICAgICogbW90aW9ucy4gVGhpcyBmbGFnIGlzIHVzZWZ1bCBmb3IgZmllbGRzIHdob3NlIHZhbHVlcyBhcmUgY29tcHV0ZWQgb3JcbiAgICAgKiBpbXBvcnRlZCBmcm9tIGEgZGF0YWJhc2UuXG4gICAgICovXG4gICAgQWNyb0ZpZWxkRmxhZ3NbQWNyb0ZpZWxkRmxhZ3NbXCJSZWFkT25seVwiXSA9IGZsYWcoMSAtIDEpXSA9IFwiUmVhZE9ubHlcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRoZSBmaWVsZCBzaGFsbCBoYXZlIGEgdmFsdWUgYXQgdGhlIHRpbWUgaXQgaXMgZXhwb3J0ZWQgYnkgYVxuICAgICAqIHN1Ym1pdC1mb3JtIGFjdGlvbiAoc2VlIDEyLjcuNS4yLCBcIlN1Ym1pdC1Gb3JtIEFjdGlvblwiKS5cbiAgICAgKi9cbiAgICBBY3JvRmllbGRGbGFnc1tBY3JvRmllbGRGbGFnc1tcIlJlcXVpcmVkXCJdID0gZmxhZygyIC0gMSldID0gXCJSZXF1aXJlZFwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgdGhlIGZpZWxkIHNoYWxsIG5vdCBiZSBleHBvcnRlZCBieSBhIHN1Ym1pdC1mb3JtIGFjdGlvblxuICAgICAqIChzZWUgMTIuNy41LjIsIFwiU3VibWl0LUZvcm0gQWN0aW9uXCIpLlxuICAgICAqL1xuICAgIEFjcm9GaWVsZEZsYWdzW0Fjcm9GaWVsZEZsYWdzW1wiTm9FeHBvcnRcIl0gPSBmbGFnKDMgLSAxKV0gPSBcIk5vRXhwb3J0XCI7XG59KShBY3JvRmllbGRGbGFncyB8fCAoQWNyb0ZpZWxkRmxhZ3MgPSB7fSkpO1xuLyoqIEZyb20gUERGIHNwZWMgdGFibGUgMjI2ICovXG5leHBvcnQgdmFyIEFjcm9CdXR0b25GbGFncztcbihmdW5jdGlvbiAoQWNyb0J1dHRvbkZsYWdzKSB7XG4gICAgLyoqXG4gICAgICogKFJhZGlvIGJ1dHRvbnMgb25seSkgSWYgc2V0LCBleGFjdGx5IG9uZSByYWRpbyBidXR0b24gc2hhbGwgYmUgc2VsZWN0ZWQgYXRcbiAgICAgKiBhbGwgdGltZXM7IHNlbGVjdGluZyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGJ1dHRvbiBoYXMgbm8gZWZmZWN0LiBJZiBjbGVhcixcbiAgICAgKiBjbGlja2luZyB0aGUgc2VsZWN0ZWQgYnV0dG9uIGRlc2VsZWN0cyBpdCwgbGVhdmluZyBubyBidXR0b24gc2VsZWN0ZWQuXG4gICAgICovXG4gICAgQWNyb0J1dHRvbkZsYWdzW0Fjcm9CdXR0b25GbGFnc1tcIk5vVG9nZ2xlVG9PZmZcIl0gPSBmbGFnKDE1IC0gMSldID0gXCJOb1RvZ2dsZVRvT2ZmXCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQgaXMgYSBzZXQgb2YgcmFkaW8gYnV0dG9uczsgaWYgY2xlYXIsIHRoZSBmaWVsZCBpcyBhIGNoZWNrXG4gICAgICogYm94LiBUaGlzIGZsYWcgbWF5IGJlIHNldCBvbmx5IGlmIHRoZSBQdXNoYnV0dG9uIGZsYWcgaXMgY2xlYXIuXG4gICAgICovXG4gICAgQWNyb0J1dHRvbkZsYWdzW0Fjcm9CdXR0b25GbGFnc1tcIlJhZGlvXCJdID0gZmxhZygxNiAtIDEpXSA9IFwiUmFkaW9cIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRoZSBmaWVsZCBpcyBhIHB1c2hidXR0b24gdGhhdCBkb2VzIG5vdCByZXRhaW4gYSBwZXJtYW5lbnQgdmFsdWUuXG4gICAgICovXG4gICAgQWNyb0J1dHRvbkZsYWdzW0Fjcm9CdXR0b25GbGFnc1tcIlB1c2hCdXR0b25cIl0gPSBmbGFnKDE3IC0gMSldID0gXCJQdXNoQnV0dG9uXCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCBhIGdyb3VwIG9mIHJhZGlvIGJ1dHRvbnMgd2l0aGluIGEgcmFkaW8gYnV0dG9uIGZpZWxkIHRoYXQgdXNlIHRoZVxuICAgICAqIHNhbWUgdmFsdWUgZm9yIHRoZSBvbiBzdGF0ZSB3aWxsIHR1cm4gb24gYW5kIG9mZiBpbiB1bmlzb247IHRoYXQgaXMgaWYgb25lXG4gICAgICogaXMgY2hlY2tlZCwgdGhleSBhcmUgYWxsIGNoZWNrZWQuIElmIGNsZWFyLCB0aGUgYnV0dG9ucyBhcmUgbXV0dWFsbHlcbiAgICAgKiBleGNsdXNpdmUgKHRoZSBzYW1lIGJlaGF2aW9yIGFzIEhUTUwgcmFkaW8gYnV0dG9ucykuXG4gICAgICovXG4gICAgQWNyb0J1dHRvbkZsYWdzW0Fjcm9CdXR0b25GbGFnc1tcIlJhZGlvc0luVW5pc29uXCJdID0gZmxhZygyNiAtIDEpXSA9IFwiUmFkaW9zSW5Vbmlzb25cIjtcbn0pKEFjcm9CdXR0b25GbGFncyB8fCAoQWNyb0J1dHRvbkZsYWdzID0ge30pKTtcbi8qKiBGcm9tIFBERiBzcGVjIHRhYmxlIDIyOCAqL1xuZXhwb3J0IHZhciBBY3JvVGV4dEZsYWdzO1xuKGZ1bmN0aW9uIChBY3JvVGV4dEZsYWdzKSB7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQgbWF5IGNvbnRhaW4gbXVsdGlwbGUgbGluZXMgb2YgdGV4dDsgaWYgY2xlYXIsIHRoZSBmaWVsZCdzXG4gICAgICogdGV4dCBzaGFsbCBiZSByZXN0cmljdGVkIHRvIGEgc2luZ2xlIGxpbmUuXG4gICAgICovXG4gICAgQWNyb1RleHRGbGFnc1tBY3JvVGV4dEZsYWdzW1wiTXVsdGlsaW5lXCJdID0gZmxhZygxMyAtIDEpXSA9IFwiTXVsdGlsaW5lXCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQgaXMgaW50ZW5kZWQgZm9yIGVudGVyaW5nIGEgc2VjdXJlIHBhc3N3b3JkIHRoYXQgc2hvdWxkXG4gICAgICogbm90IGJlIGVjaG9lZCB2aXNpYmx5IHRvIHRoZSBzY3JlZW4uIENoYXJhY3RlcnMgdHlwZWQgZnJvbSB0aGUga2V5Ym9hcmRcbiAgICAgKiBzaGFsbCBpbnN0ZWFkIGJlIGVjaG9lZCBpbiBzb21lIHVucmVhZGFibGUgZm9ybSwgc3VjaCBhcyBhc3Rlcmlza3Mgb3JcbiAgICAgKiBidWxsZXQgY2hhcmFjdGVycy5cbiAgICAgKiA+IE5PVEUgICBUbyBwcm90ZWN0IHBhc3N3b3JkIGNvbmZpZGVudGlhbGl0eSwgcmVhZGVycyBzaG91bGQgbmV2ZXIgc3RvcmVcbiAgICAgKiA+ICAgICAgICB0aGUgdmFsdWUgb2YgdGhlIHRleHQgZmllbGQgaW4gdGhlIFBERiBmaWxlIGlmIHRoaXMgZmxhZyBpcyBzZXQuXG4gICAgICovXG4gICAgQWNyb1RleHRGbGFnc1tBY3JvVGV4dEZsYWdzW1wiUGFzc3dvcmRcIl0gPSBmbGFnKDE0IC0gMSldID0gXCJQYXNzd29yZFwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgdGhlIHRleHQgZW50ZXJlZCBpbiB0aGUgZmllbGQgcmVwcmVzZW50cyB0aGUgcGF0aG5hbWUgb2YgYSBmaWxlXG4gICAgICogd2hvc2UgY29udGVudHMgc2hhbGwgYmUgc3VibWl0dGVkIGFzIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQuXG4gICAgICovXG4gICAgQWNyb1RleHRGbGFnc1tBY3JvVGV4dEZsYWdzW1wiRmlsZVNlbGVjdFwiXSA9IGZsYWcoMjEgLSAxKV0gPSBcIkZpbGVTZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRleHQgZW50ZXJlZCBpbiB0aGUgZmllbGQgc2hhbGwgbm90IGJlIHNwZWxsLWNoZWNrZWQuXG4gICAgICovXG4gICAgQWNyb1RleHRGbGFnc1tBY3JvVGV4dEZsYWdzW1wiRG9Ob3RTcGVsbENoZWNrXCJdID0gZmxhZygyMyAtIDEpXSA9IFwiRG9Ob3RTcGVsbENoZWNrXCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQgc2hhbGwgbm90IHNjcm9sbCAoaG9yaXpvbnRhbGx5IGZvciBzaW5nbGUtbGluZSBmaWVsZHMsXG4gICAgICogdmVydGljYWxseSBmb3IgbXVsdGlwbGUtbGluZSBmaWVsZHMpIHRvIGFjY29tbW9kYXRlIG1vcmUgdGV4dCB0aGFuIGZpdHNcbiAgICAgKiB3aXRoaW4gaXRzIGFubm90YXRpb24gcmVjdGFuZ2xlLiBPbmNlIHRoZSBmaWVsZCBpcyBmdWxsLCBubyBmdXJ0aGVyIHRleHRcbiAgICAgKiBzaGFsbCBiZSBhY2NlcHRlZCBmb3IgaW50ZXJhY3RpdmUgZm9ybSBmaWxsaW5nOyBmb3Igbm9uLWludGVyYWN0aXZlIGZvcm1cbiAgICAgKiBmaWxsaW5nLCB0aGUgZmlsbGVyIHNob3VsZCB0YWtlIGNhcmUgbm90IHRvIGFkZCBtb3JlIGNoYXJhY3RlciB0aGFuIHdpbGxcbiAgICAgKiB2aXNpYmx5IGZpdCBpbiB0aGUgZGVmaW5lZCBhcmVhLlxuICAgICAqL1xuICAgIEFjcm9UZXh0RmxhZ3NbQWNyb1RleHRGbGFnc1tcIkRvTm90U2Nyb2xsXCJdID0gZmxhZygyNCAtIDEpXSA9IFwiRG9Ob3RTY3JvbGxcIjtcbiAgICAvKipcbiAgICAgKiBNYXkgYmUgc2V0IG9ubHkgaWYgdGhlIE1heExlbiBlbnRyeSBpcyBwcmVzZW50IGluIHRoZSB0ZXh0IGZpZWxkIGRpY3Rpb25hcnlcbiAgICAgKiAoc2VlIFRhYmxlIDIyOSkgYW5kIGlmIHRoZSBNdWx0aWxpbmUsIFBhc3N3b3JkLCBhbmQgRmlsZVNlbGVjdCBmbGFncyBhcmVcbiAgICAgKiBjbGVhci4gSWYgc2V0LCB0aGUgZmllbGQgc2hhbGwgYmUgYXV0b21hdGljYWxseSBkaXZpZGVkIGludG8gYXMgbWFueVxuICAgICAqIGVxdWFsbHkgc3BhY2VkIHBvc2l0aW9ucywgb3IgY29tYnMsIGFzIHRoZSB2YWx1ZSBvZiBNYXhMZW4sIGFuZCB0aGUgdGV4dFxuICAgICAqIGlzIGxhaWQgb3V0IGludG8gdGhvc2UgY29tYnMuXG4gICAgICovXG4gICAgQWNyb1RleHRGbGFnc1tBY3JvVGV4dEZsYWdzW1wiQ29tYlwiXSA9IGZsYWcoMjUgLSAxKV0gPSBcIkNvbWJcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRoZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIHNoYWxsIGJlIGEgcmljaCB0ZXh0IHN0cmluZ1xuICAgICAqIChzZWUgMTIuNy4zLjQsIFwiUmljaCBUZXh0IFN0cmluZ3NcIikuIElmIHRoZSBmaWVsZCBoYXMgYSB2YWx1ZSwgdGhlIFJWXG4gICAgICogZW50cnkgb2YgdGhlIGZpZWxkIGRpY3Rpb25hcnkgKFRhYmxlIDIyMikgc2hhbGwgc3BlY2lmeSB0aGUgcmljaCB0ZXh0XG4gICAgICogc3RyaW5nLlxuICAgICAqL1xuICAgIEFjcm9UZXh0RmxhZ3NbQWNyb1RleHRGbGFnc1tcIlJpY2hUZXh0XCJdID0gZmxhZygyNiAtIDEpXSA9IFwiUmljaFRleHRcIjtcbn0pKEFjcm9UZXh0RmxhZ3MgfHwgKEFjcm9UZXh0RmxhZ3MgPSB7fSkpO1xuLyoqIEZyb20gUERGIHNwZWMgdGFibGUgMjMwICovXG5leHBvcnQgdmFyIEFjcm9DaG9pY2VGbGFncztcbihmdW5jdGlvbiAoQWNyb0Nob2ljZUZsYWdzKSB7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQgaXMgYSBjb21ibyBib3g7IGlmIGNsZWFyLCB0aGUgZmllbGQgaXMgYSBsaXN0IGJveC5cbiAgICAgKi9cbiAgICBBY3JvQ2hvaWNlRmxhZ3NbQWNyb0Nob2ljZUZsYWdzW1wiQ29tYm9cIl0gPSBmbGFnKDE4IC0gMSldID0gXCJDb21ib1wiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgdGhlIGNvbWJvIGJveCBzaGFsbCBpbmNsdWRlIGFuIGVkaXRhYmxlIHRleHQgYm94IGFzIHdlbGwgYXMgYVxuICAgICAqIGRyb3AtZG93biBsaXN0OyBpZiBjbGVhciwgaXQgc2hhbGwgaW5jbHVkZSBvbmx5IGEgZHJvcC1kb3duIGxpc3QuIFRoaXNcbiAgICAgKiBmbGFnIHNoYWxsIGJlIHVzZWQgb25seSBpZiB0aGUgQ29tYm8gZmxhZyBpcyBzZXQuXG4gICAgICovXG4gICAgQWNyb0Nob2ljZUZsYWdzW0Fjcm9DaG9pY2VGbGFnc1tcIkVkaXRcIl0gPSBmbGFnKDE5IC0gMSldID0gXCJFZGl0XCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCB0aGUgZmllbGQncyBvcHRpb24gaXRlbXMgc2hhbGwgYmUgc29ydGVkIGFscGhhYmV0aWNhbGx5LiBUaGlzIGZsYWdcbiAgICAgKiBpcyBpbnRlbmRlZCBmb3IgdXNlIGJ5IHdyaXRlcnMsIG5vdCBieSByZWFkZXJzLiBDb25mb3JtaW5nIHJlYWRlcnMgc2hhbGxcbiAgICAgKiBkaXNwbGF5IHRoZSBvcHRpb25zIGluIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IG9jY3VyIGluIHRoZSBPcHQgYXJyYXlcbiAgICAgKiAoc2VlIFRhYmxlIDIzMSkuXG4gICAgICovXG4gICAgQWNyb0Nob2ljZUZsYWdzW0Fjcm9DaG9pY2VGbGFnc1tcIlNvcnRcIl0gPSBmbGFnKDIwIC0gMSldID0gXCJTb3J0XCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCBtb3JlIHRoYW4gb25lIG9mIHRoZSBmaWVsZCdzIG9wdGlvbiBpdGVtcyBtYXkgYmUgc2VsZWN0ZWRcbiAgICAgKiBzaW11bHRhbmVvdXNseTsgaWYgY2xlYXIsIGF0IG1vc3Qgb25lIGl0ZW0gc2hhbGwgYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgQWNyb0Nob2ljZUZsYWdzW0Fjcm9DaG9pY2VGbGFnc1tcIk11bHRpU2VsZWN0XCJdID0gZmxhZygyMiAtIDEpXSA9IFwiTXVsdGlTZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRleHQgZW50ZXJlZCBpbiB0aGUgZmllbGQgc2hhbGwgbm90IGJlIHNwZWxsLWNoZWNrZWQuIFRoaXMgZmxhZ1xuICAgICAqIHNoYWxsIG5vdCBiZSB1c2VkIHVubGVzcyB0aGUgQ29tYm8gYW5kIEVkaXQgZmxhZ3MgYXJlIGJvdGggc2V0LlxuICAgICAqL1xuICAgIEFjcm9DaG9pY2VGbGFnc1tBY3JvQ2hvaWNlRmxhZ3NbXCJEb05vdFNwZWxsQ2hlY2tcIl0gPSBmbGFnKDIzIC0gMSldID0gXCJEb05vdFNwZWxsQ2hlY2tcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHRoZSBuZXcgdmFsdWUgc2hhbGwgYmUgY29tbWl0dGVkIGFzIHNvb24gYXMgYSBzZWxlY3Rpb24gaXMgbWFkZVxuICAgICAqIChjb21tb25seSB3aXRoIHRoZSBwb2ludGluZyBkZXZpY2UpLiBJbiB0aGlzIGNhc2UsIHN1cHBseWluZyBhIHZhbHVlIGZvclxuICAgICAqIGEgZmllbGQgaW52b2x2ZXMgdGhyZWUgYWN0aW9uczogc2VsZWN0aW5nIHRoZSBmaWVsZCBmb3IgZmlsbC1pbixcbiAgICAgKiBzZWxlY3RpbmcgYSBjaG9pY2UgZm9yIHRoZSBmaWxsLWluIHZhbHVlLCBhbmQgbGVhdmluZyB0aGF0IGZpZWxkLCB3aGljaFxuICAgICAqIGZpbmFsaXplcyBvciBcImNvbW1pdHNcIiB0aGUgZGF0YSBjaG9pY2UgYW5kIHRyaWdnZXJzIGFueSBhY3Rpb25zIGFzc29jaWF0ZWRcbiAgICAgKiB3aXRoIHRoZSBlbnRyeSBvciBjaGFuZ2luZyBvZiB0aGlzIGRhdGEuIElmIHRoaXMgZmxhZyBpcyBvbiwgdGhlblxuICAgICAqIHByb2Nlc3NpbmcgZG9lcyBub3Qgd2FpdCBmb3IgbGVhdmluZyB0aGUgZmllbGQgYWN0aW9uIHRvIG9jY3VyLCBidXRcbiAgICAgKiBpbW1lZGlhdGVseSBwcm9jZWVkcyB0byB0aGUgdGhpcmQgc3RlcC5cbiAgICAgKlxuICAgICAqIFRoaXMgb3B0aW9uIGVuYWJsZXMgYXBwbGljYXRpb25zIHRvIHBlcmZvcm0gYW4gYWN0aW9uIG9uY2UgYSBzZWxlY3Rpb24gaXNcbiAgICAgKiBtYWRlLCB3aXRob3V0IHJlcXVpcmluZyB0aGUgdXNlciB0byBleGl0IHRoZSBmaWVsZC4gSWYgY2xlYXIsIHRoZSBuZXdcbiAgICAgKiB2YWx1ZSBpcyBub3QgY29tbWl0dGVkIHVudGlsIHRoZSB1c2VyIGV4aXRzIHRoZSBmaWVsZC5cbiAgICAgKi9cbiAgICBBY3JvQ2hvaWNlRmxhZ3NbQWNyb0Nob2ljZUZsYWdzW1wiQ29tbWl0T25TZWxDaGFuZ2VcIl0gPSBmbGFnKDI3IC0gMSldID0gXCJDb21taXRPblNlbENoYW5nZVwiO1xufSkoQWNyb0Nob2ljZUZsYWdzIHx8IChBY3JvQ2hvaWNlRmxhZ3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmxhZ3MuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGQWNyb1Rlcm1pbmFsIGZyb20gXCIuL1BERkFjcm9UZXJtaW5hbFwiO1xuaW1wb3J0IFBERkhleFN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZIZXhTdHJpbmdcIjtcbmltcG9ydCBQREZTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGU3RyaW5nXCI7XG5pbXBvcnQgUERGQXJyYXkgZnJvbSBcIi4uL29iamVjdHMvUERGQXJyYXlcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCB7IEFjcm9DaG9pY2VGbGFncyB9IGZyb20gXCIuL2ZsYWdzXCI7XG5pbXBvcnQgeyBJbnZhbGlkQWNyb0ZpZWxkVmFsdWVFcnJvciwgTXVsdGlTZWxlY3RWYWx1ZUVycm9yLCB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbnZhciBQREZBY3JvQ2hvaWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBY3JvQ2hvaWNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkFjcm9DaG9pY2UoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGQWNyb0Nob2ljZS5wcm90b3R5cGUuc2V0VmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICBpZiAodGhpcy5oYXNGbGFnKEFjcm9DaG9pY2VGbGFncy5Db21ibykgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc0ZsYWcoQWNyb0Nob2ljZUZsYWdzLkVkaXQpICYmXG4gICAgICAgICAgICAhdGhpcy52YWx1ZXNBcmVWYWxpZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFjcm9GaWVsZFZhbHVlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kaWN0LmRlbGV0ZShQREZOYW1lLm9mKCdWJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1YnKSwgdmFsdWVzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNGbGFnKEFjcm9DaG9pY2VGbGFncy5NdWx0aVNlbGVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTXVsdGlTZWxlY3RWYWx1ZUVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1YnKSwgdGhpcy5kaWN0LmNvbnRleHQub2JqKHZhbHVlcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRpY2VzKHZhbHVlcyk7XG4gICAgfTtcbiAgICBQREZBY3JvQ2hvaWNlLnByb3RvdHlwZS52YWx1ZXNBcmVWYWxpZCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaWR4LCBsZW4pIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB2YWx1ZXNbaWR4XS5kZWNvZGVUZXh0KCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZmluZChmdW5jdGlvbiAobykgeyByZXR1cm4gdmFsID09PSAoby5kaXNwbGF5IHx8IG8udmFsdWUpLmRlY29kZVRleHQoKTsgfSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogZmFsc2UgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKGlkeCwgbGVuKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFBERkFjcm9DaG9pY2UucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkSW5kaWNlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IG5ldyBBcnJheSh2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChpZHgsIGxlbikge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB2YWx1ZXNbaWR4XS5kZWNvZGVUZXh0KCk7XG4gICAgICAgICAgICAgICAgaW5kaWNlc1tpZHhdID0gb3B0aW9ucy5maW5kSW5kZXgoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHZhbCA9PT0gKG8uZGlzcGxheSB8fCBvLnZhbHVlKS5kZWNvZGVUZXh0KCk7IH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8yKGlkeCwgbGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignSScpLCB0aGlzLmRpY3QuY29udGV4dC5vYmooaW5kaWNlcy5zb3J0KCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGljdC5kZWxldGUoUERGTmFtZS5vZignSScpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGQWNyb0Nob2ljZS5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdiA9IHRoaXMuVigpO1xuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFBERlN0cmluZyB8fCB2IGluc3RhbmNlb2YgUERGSGV4U3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIFt2XTtcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBQREZBcnJheSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdi5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2Lmxvb2t1cChpZHgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBERlN0cmluZyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFBERkhleFN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcbiAgICBQREZBY3JvQ2hvaWNlLnByb3RvdHlwZS5PcHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3QubG9va3VwTWF5YmUoUERGTmFtZS5vZignT3B0JyksIFBERlN0cmluZywgUERGSGV4U3RyaW5nLCBQREZBcnJheSk7XG4gICAgfTtcbiAgICBQREZBY3JvQ2hvaWNlLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG5ld09wdCA9IG5ldyBBcnJheShvcHRpb25zLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBvcHRpb25zW2lkeF0sIHZhbHVlID0gX2EudmFsdWUsIGRpc3BsYXkgPSBfYS5kaXNwbGF5O1xuICAgICAgICAgICAgbmV3T3B0W2lkeF0gPSB0aGlzLmRpY3QuY29udGV4dC5vYmooW3ZhbHVlLCBkaXNwbGF5IHx8IHZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdPcHQnKSwgdGhpcy5kaWN0LmNvbnRleHQub2JqKG5ld09wdCkpO1xuICAgIH07XG4gICAgUERGQWNyb0Nob2ljZS5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE9wdCA9IHRoaXMuT3B0KCk7XG4gICAgICAgIC8vIE5vdCBzdXBwb3NlZCB0byBoYXBwZW4gLSBPcHQgX3Nob3VsZF8gYWx3YXlzIGJlIGBQREZBcnJheSB8IHVuZGVmaW5lZGBcbiAgICAgICAgaWYgKE9wdCBpbnN0YW5jZW9mIFBERlN0cmluZyB8fCBPcHQgaW5zdGFuY2VvZiBQREZIZXhTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBbeyB2YWx1ZTogT3B0LCBkaXNwbGF5OiBPcHQgfV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9wdCBpbnN0YW5jZW9mIFBERkFycmF5KSB7XG4gICAgICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBPcHQuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBPcHQubG9va3VwKGlkeCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgYGl0ZW1gIGlzIGEgc3RyaW5nLCB1c2UgdGhhdCBhcyBib3RoIHRoZSBleHBvcnQgYW5kIHRleHQgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFBERlN0cmluZyB8fCBpdGVtIGluc3RhbmNlb2YgUERGSGV4U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHsgdmFsdWU6IGl0ZW0sIGRpc3BsYXk6IGl0ZW0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIGBpdGVtYCBpcyBhbiBhcnJheSBvZiBvbmUsIHRyZWF0IGl0IHRoZSBzYW1lIGFzIGp1c3QgYSBzdHJpbmcsXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhbiBhcnJheSBvZiB0d28gdGhlbiBgaXRlbVswXWAgaXMgdGhlIGV4cG9ydCB2YWx1ZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBgaXRlbVsxXWAgaXMgdGhlIHRleHQgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFBERkFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnNpemUoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IGl0ZW0ubG9va3VwKDAsIFBERlN0cmluZywgUERGSGV4U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWNvbmQgPSBpdGVtLmxvb2t1cE1heWJlKDEsIFBERlN0cmluZywgUERGSGV4U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHsgdmFsdWU6IGZpcnN0LCBkaXNwbGF5OiBzZWNvbmQgfHwgZmlyc3QgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuICAgIHJldHVybiBQREZBY3JvQ2hvaWNlO1xufShQREZBY3JvVGVybWluYWwpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkFjcm9DaG9pY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvQ2hvaWNlLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkFjcm9DaG9pY2UgZnJvbSBcIi4vUERGQWNyb0Nob2ljZVwiO1xuaW1wb3J0IHsgQWNyb0Nob2ljZUZsYWdzIH0gZnJvbSBcIi4vZmxhZ3NcIjtcbnZhciBQREZBY3JvQ29tYm9Cb3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkFjcm9Db21ib0JveCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZBY3JvQ29tYm9Cb3goKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGQWNyb0NvbWJvQm94LmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QsIHJlZikge1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9Db21ib0JveChkaWN0LCByZWYpO1xuICAgIH07XG4gICAgUERGQWNyb0NvbWJvQm94LmNyZWF0ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBkaWN0ID0gY29udGV4dC5vYmooe1xuICAgICAgICAgICAgRlQ6ICdDaCcsXG4gICAgICAgICAgICBGZjogQWNyb0Nob2ljZUZsYWdzLkNvbWJvLFxuICAgICAgICAgICAgS2lkczogW10sXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmVmID0gY29udGV4dC5yZWdpc3RlcihkaWN0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZBY3JvQ29tYm9Cb3goZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZBY3JvQ29tYm9Cb3g7XG59KFBERkFjcm9DaG9pY2UpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkFjcm9Db21ib0JveDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkFjcm9Db21ib0JveC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCBQREZBY3JvRmllbGQgZnJvbSBcIi4vUERGQWNyb0ZpZWxkXCI7XG52YXIgUERGQWNyb05vblRlcm1pbmFsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBY3JvTm9uVGVybWluYWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQWNyb05vblRlcm1pbmFsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFBERkFjcm9Ob25UZXJtaW5hbC5wcm90b3R5cGUuYWRkRmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzKCkuS2lkcztcbiAgICAgICAgS2lkcyA9PT0gbnVsbCB8fCBLaWRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBLaWRzLnB1c2goZmllbGQpO1xuICAgIH07XG4gICAgUERGQWNyb05vblRlcm1pbmFsLnByb3RvdHlwZS5ub3JtYWxpemVkRW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgaWYgKCFLaWRzKSB7XG4gICAgICAgICAgICBLaWRzID0gdGhpcy5kaWN0LmNvbnRleHQub2JqKFtdKTtcbiAgICAgICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignS2lkcycpLCBLaWRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBLaWRzOiBLaWRzIH07XG4gICAgfTtcbiAgICBQREZBY3JvTm9uVGVybWluYWwuZnJvbURpY3QgPSBmdW5jdGlvbiAoZGljdCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb05vblRlcm1pbmFsKGRpY3QsIHJlZik7XG4gICAgfTtcbiAgICBQREZBY3JvTm9uVGVybWluYWwuY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7fSk7XG4gICAgICAgIHZhciByZWYgPSBjb250ZXh0LnJlZ2lzdGVyKGRpY3QpO1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9Ob25UZXJtaW5hbChkaWN0LCByZWYpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9Ob25UZXJtaW5hbDtcbn0oUERGQWNyb0ZpZWxkKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvTm9uVGVybWluYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvTm9uVGVybWluYWwuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGQWNyb1Rlcm1pbmFsIGZyb20gXCIuL1BERkFjcm9UZXJtaW5hbFwiO1xudmFyIFBERkFjcm9TaWduYXR1cmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkFjcm9TaWduYXR1cmUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQWNyb1NpZ25hdHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBQREZBY3JvU2lnbmF0dXJlLmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QsIHJlZikge1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9TaWduYXR1cmUoZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZBY3JvU2lnbmF0dXJlO1xufShQREZBY3JvVGVybWluYWwpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkFjcm9TaWduYXR1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvU2lnbmF0dXJlLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZTdHJpbmcgZnJvbSBcIi4uL29iamVjdHMvUERGU3RyaW5nXCI7XG5pbXBvcnQgUERGSGV4U3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERkhleFN0cmluZ1wiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERkFjcm9UZXJtaW5hbCBmcm9tIFwiLi9QREZBY3JvVGVybWluYWxcIjtcbnZhciBQREZBY3JvVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQWNyb1RleHQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQWNyb1RleHQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGQWNyb1RleHQucHJvdG90eXBlLk1heExlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1heExlbiA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignTWF4TGVuJykpO1xuICAgICAgICBpZiAobWF4TGVuIGluc3RhbmNlb2YgUERGTnVtYmVyKVxuICAgICAgICAgICAgcmV0dXJuIG1heExlbjtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERkFjcm9UZXh0LnByb3RvdHlwZS5RID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcSA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignUScpKTtcbiAgICAgICAgaWYgKHEgaW5zdGFuY2VvZiBQREZOdW1iZXIpXG4gICAgICAgICAgICByZXR1cm4gcTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERkFjcm9UZXh0LnByb3RvdHlwZS5zZXRNYXhMZW5ndGggPSBmdW5jdGlvbiAobWF4TGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZGljdC5zZXQoUERGTmFtZS5vZignTWF4TGVuJyksIFBERk51bWJlci5vZihtYXhMZW5ndGgpKTtcbiAgICB9O1xuICAgIFBERkFjcm9UZXh0LnByb3RvdHlwZS5yZW1vdmVNYXhMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGljdC5kZWxldGUoUERGTmFtZS5vZignTWF4TGVuJykpO1xuICAgIH07XG4gICAgUERGQWNyb1RleHQucHJvdG90eXBlLmdldE1heExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5NYXhMZW4oKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzTnVtYmVyKCk7XG4gICAgfTtcbiAgICBQREZBY3JvVGV4dC5wcm90b3R5cGUuc2V0UXVhZGRpbmcgPSBmdW5jdGlvbiAocXVhZGRpbmcpIHtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdRJyksIFBERk51bWJlci5vZihxdWFkZGluZykpO1xuICAgIH07XG4gICAgUERGQWNyb1RleHQucHJvdG90eXBlLmdldFF1YWRkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLlEoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzTnVtYmVyKCk7XG4gICAgfTtcbiAgICBQREZBY3JvVGV4dC5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kaWN0LnNldChQREZOYW1lLm9mKCdWJyksIHZhbHVlKTtcbiAgICAgICAgLy8gY29uc3Qgd2lkZ2V0cyA9IHRoaXMuZ2V0V2lkZ2V0cygpO1xuICAgICAgICAvLyBmb3IgKGxldCBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAvLyAgIGNvbnN0IHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgLy8gICBjb25zdCBzdGF0ZSA9IHdpZGdldC5nZXRPblZhbHVlKCkgPT09IHZhbHVlID8gdmFsdWUgOiBQREZOYW1lLm9mKCdPZmYnKTtcbiAgICAgICAgLy8gICB3aWRnZXQuc2V0QXBwZWFyYW5jZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgLy8gfVxuICAgIH07XG4gICAgUERGQWNyb1RleHQucHJvdG90eXBlLnJlbW92ZVZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpY3QuZGVsZXRlKFBERk5hbWUub2YoJ1YnKSk7XG4gICAgfTtcbiAgICBQREZBY3JvVGV4dC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2ID0gdGhpcy5WKCk7XG4gICAgICAgIGlmICh2IGluc3RhbmNlb2YgUERGU3RyaW5nIHx8IHYgaW5zdGFuY2VvZiBQREZIZXhTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFBERkFjcm9UZXh0LmZyb21EaWN0ID0gZnVuY3Rpb24gKGRpY3QsIHJlZikgeyByZXR1cm4gbmV3IFBERkFjcm9UZXh0KGRpY3QsIHJlZik7IH07XG4gICAgUERGQWNyb1RleHQuY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBGVDogJ1R4JyxcbiAgICAgICAgICAgIEtpZHM6IFtdLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlZiA9IGNvbnRleHQucmVnaXN0ZXIoZGljdCk7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb1RleHQoZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZBY3JvVGV4dDtcbn0oUERGQWNyb1Rlcm1pbmFsKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvVGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkFjcm9UZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkFjcm9CdXR0b24gZnJvbSBcIi4vUERGQWNyb0J1dHRvblwiO1xuaW1wb3J0IHsgQWNyb0J1dHRvbkZsYWdzIH0gZnJvbSBcIi4vZmxhZ3NcIjtcbnZhciBQREZBY3JvUHVzaEJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQWNyb1B1c2hCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQWNyb1B1c2hCdXR0b24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUERGQWNyb1B1c2hCdXR0b24uZnJvbURpY3QgPSBmdW5jdGlvbiAoZGljdCwgcmVmKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb1B1c2hCdXR0b24oZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIFBERkFjcm9QdXNoQnV0dG9uLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBkaWN0ID0gY29udGV4dC5vYmooe1xuICAgICAgICAgICAgRlQ6ICdCdG4nLFxuICAgICAgICAgICAgRmY6IEFjcm9CdXR0b25GbGFncy5QdXNoQnV0dG9uLFxuICAgICAgICAgICAgS2lkczogW10sXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmVmID0gY29udGV4dC5yZWdpc3RlcihkaWN0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZBY3JvUHVzaEJ1dHRvbihkaWN0LCByZWYpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9QdXNoQnV0dG9uO1xufShQREZBY3JvQnV0dG9uKSk7XG5leHBvcnQgZGVmYXVsdCBQREZBY3JvUHVzaEJ1dHRvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkFjcm9QdXNoQnV0dG9uLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERkFjcm9CdXR0b24gZnJvbSBcIi4vUERGQWNyb0J1dHRvblwiO1xuaW1wb3J0IHsgQWNyb0J1dHRvbkZsYWdzIH0gZnJvbSBcIi4vZmxhZ3NcIjtcbmltcG9ydCB7IEludmFsaWRBY3JvRmllbGRWYWx1ZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xudmFyIFBERkFjcm9SYWRpb0J1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGQWNyb1JhZGlvQnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERkFjcm9SYWRpb0J1dHRvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBQREZBY3JvUmFkaW9CdXR0b24ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvblZhbHVlcyA9IHRoaXMuZ2V0T25WYWx1ZXMoKTtcbiAgICAgICAgaWYgKCFvblZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkgJiYgdmFsdWUgIT09IFBERk5hbWUub2YoJ09mZicpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFjcm9GaWVsZFZhbHVlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ1YnKSwgdmFsdWUpO1xuICAgICAgICB2YXIgd2lkZ2V0cyA9IHRoaXMuZ2V0V2lkZ2V0cygpO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB3aWRnZXRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldHNbaWR4XTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHdpZGdldC5nZXRPblZhbHVlKCkgPT09IHZhbHVlID8gdmFsdWUgOiBQREZOYW1lLm9mKCdPZmYnKTtcbiAgICAgICAgICAgIHdpZGdldC5zZXRBcHBlYXJhbmNlU3RhdGUoc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQREZBY3JvUmFkaW9CdXR0b24ucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdiA9IHRoaXMuVigpO1xuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFBERk5hbWUpXG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgcmV0dXJuIFBERk5hbWUub2YoJ09mZicpO1xuICAgIH07XG4gICAgUERGQWNyb1JhZGlvQnV0dG9uLnByb3RvdHlwZS5nZXRPblZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpZGdldHMgPSB0aGlzLmdldFdpZGdldHMoKTtcbiAgICAgICAgdmFyIG9uVmFsdWVzID0gW107XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHdpZGdldHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIgb25WYWx1ZSA9IHdpZGdldHNbaWR4XS5nZXRPblZhbHVlKCk7XG4gICAgICAgICAgICBpZiAob25WYWx1ZSlcbiAgICAgICAgICAgICAgICBvblZhbHVlcy5wdXNoKG9uVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvblZhbHVlcztcbiAgICB9O1xuICAgIFBERkFjcm9SYWRpb0J1dHRvbi5mcm9tRGljdCA9IGZ1bmN0aW9uIChkaWN0LCByZWYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZBY3JvUmFkaW9CdXR0b24oZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIFBERkFjcm9SYWRpb0J1dHRvbi5jcmVhdGUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgZGljdCA9IGNvbnRleHQub2JqKHtcbiAgICAgICAgICAgIEZUOiAnQnRuJyxcbiAgICAgICAgICAgIEZmOiBBY3JvQnV0dG9uRmxhZ3MuUmFkaW8sXG4gICAgICAgICAgICBLaWRzOiBbXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWYgPSBjb250ZXh0LnJlZ2lzdGVyKGRpY3QpO1xuICAgICAgICByZXR1cm4gbmV3IFBERkFjcm9SYWRpb0J1dHRvbihkaWN0LCByZWYpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkFjcm9SYWRpb0J1dHRvbjtcbn0oUERGQWNyb0J1dHRvbikpO1xuZXhwb3J0IGRlZmF1bHQgUERGQWNyb1JhZGlvQnV0dG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGQWNyb1JhZGlvQnV0dG9uLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkFjcm9DaG9pY2UgZnJvbSBcIi4vUERGQWNyb0Nob2ljZVwiO1xudmFyIFBERkFjcm9MaXN0Qm94ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQREZBY3JvTGlzdEJveCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZBY3JvTGlzdEJveCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBQREZBY3JvTGlzdEJveC5mcm9tRGljdCA9IGZ1bmN0aW9uIChkaWN0LCByZWYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZBY3JvTGlzdEJveChkaWN0LCByZWYpO1xuICAgIH07XG4gICAgUERGQWNyb0xpc3RCb3guY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7XG4gICAgICAgICAgICBGVDogJ0NoJyxcbiAgICAgICAgICAgIEtpZHM6IFtdLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlZiA9IGNvbnRleHQucmVnaXN0ZXIoZGljdCk7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb0xpc3RCb3goZGljdCwgcmVmKTtcbiAgICB9O1xuICAgIHJldHVybiBQREZBY3JvTGlzdEJveDtcbn0oUERGQWNyb0Nob2ljZSkpO1xuZXhwb3J0IGRlZmF1bHQgUERGQWNyb0xpc3RCb3g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvTGlzdEJveC5qcy5tYXAiLCJpbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERkRpY3QgZnJvbSBcIi4uL29iamVjdHMvUERGRGljdFwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGUmVmIGZyb20gXCIuLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERkFjcm9UZXJtaW5hbCBmcm9tIFwiLi9QREZBY3JvVGVybWluYWxcIjtcbmltcG9ydCBQREZBY3JvTm9uVGVybWluYWwgZnJvbSBcIi4vUERGQWNyb05vblRlcm1pbmFsXCI7XG5pbXBvcnQgUERGQWNyb1NpZ25hdHVyZSBmcm9tIFwiLi9QREZBY3JvU2lnbmF0dXJlXCI7XG5pbXBvcnQgUERGQWNyb1RleHQgZnJvbSBcIi4vUERGQWNyb1RleHRcIjtcbmltcG9ydCBQREZBY3JvUHVzaEJ1dHRvbiBmcm9tIFwiLi9QREZBY3JvUHVzaEJ1dHRvblwiO1xuaW1wb3J0IFBERkFjcm9SYWRpb0J1dHRvbiBmcm9tIFwiLi9QREZBY3JvUmFkaW9CdXR0b25cIjtcbmltcG9ydCBQREZBY3JvQ2hlY2tCb3ggZnJvbSBcIi4vUERGQWNyb0NoZWNrQm94XCI7XG5pbXBvcnQgUERGQWNyb0NvbWJvQm94IGZyb20gXCIuL1BERkFjcm9Db21ib0JveFwiO1xuaW1wb3J0IFBERkFjcm9MaXN0Qm94IGZyb20gXCIuL1BERkFjcm9MaXN0Qm94XCI7XG5pbXBvcnQgeyBBY3JvQnV0dG9uRmxhZ3MsIEFjcm9DaG9pY2VGbGFncyB9IGZyb20gXCIuL2ZsYWdzXCI7XG5leHBvcnQgdmFyIGNyZWF0ZVBERkFjcm9GaWVsZHMgPSBmdW5jdGlvbiAoa2lkRGljdHMpIHtcbiAgICBpZiAoIWtpZERpY3RzKVxuICAgICAgICByZXR1cm4gW107XG4gICAgdmFyIGtpZHMgPSBbXTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBraWREaWN0cy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIHJlZiA9IGtpZERpY3RzLmdldChpZHgpO1xuICAgICAgICB2YXIgZGljdCA9IGtpZERpY3RzLmxvb2t1cChpZHgpO1xuICAgICAgICAvLyBpZiAoZGljdCBpbnN0YW5jZW9mIFBERkRpY3QpIGtpZHMucHVzaChQREZBY3JvRmllbGQuZnJvbURpY3QoZGljdCkpO1xuICAgICAgICBpZiAocmVmIGluc3RhbmNlb2YgUERGUmVmICYmIGRpY3QgaW5zdGFuY2VvZiBQREZEaWN0KSB7XG4gICAgICAgICAgICBraWRzLnB1c2goW2NyZWF0ZVBERkFjcm9GaWVsZChkaWN0LCByZWYpLCByZWZdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2lkcztcbn07XG5leHBvcnQgdmFyIGNyZWF0ZVBERkFjcm9GaWVsZCA9IGZ1bmN0aW9uIChkaWN0LCByZWYpIHtcbiAgICB2YXIgaXNOb25UZXJtaW5hbCA9IGlzTm9uVGVybWluYWxBY3JvRmllbGQoZGljdCk7XG4gICAgaWYgKGlzTm9uVGVybWluYWwpXG4gICAgICAgIHJldHVybiBQREZBY3JvTm9uVGVybWluYWwuZnJvbURpY3QoZGljdCwgcmVmKTtcbiAgICByZXR1cm4gY3JlYXRlUERGQWNyb1Rlcm1pbmFsKGRpY3QsIHJlZik7XG59O1xuLy8gVE9ETzogTWF5YmUganVzdCBjaGVjayBpZiB0aGUgZGljdCBpcyAqbm90KiBhIHdpZGdldD8gVGhhdCBtaWdodCBiZSBiZXR0ZXIuXG4vLyBBY2NvcmRpbmcgdG8gdGhlIFBERiBzcGVjOlxuLy9cbi8vICAgPiBBIGZpZWxkJ3MgY2hpbGRyZW4gaW4gdGhlIGhpZXJhcmNoeSBtYXkgYWxzbyBpbmNsdWRlIHdpZGdldCBhbm5vdGF0aW9uc1xuLy8gICA+IHRoYXQgZGVmaW5lIGl0cyBhcHBlYXJhbmNlIG9uIHRoZSBwYWdlLiBBIGZpZWxkIHRoYXQgaGFzIGNoaWxkcmVuIHRoYXRcbi8vICAgPiBhcmUgZmllbGRzIGlzIGNhbGxlZCBhIG5vbi10ZXJtaW5hbCBmaWVsZC4gQSBmaWVsZCB0aGF0IGRvZXMgbm90IGhhdmVcbi8vICAgPiBjaGlsZHJlbiB0aGF0IGFyZSBmaWVsZHMgaXMgY2FsbGVkIGEgdGVybWluYWwgZmllbGQuXG4vL1xuLy8gVGhlIHNwZWMgaXMgbm90IGVudGlyZWx5IGNsZWFyIGFib3V0IGhvdyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGdpdmVuXG4vLyBkaWN0aW9uYXJ5IHJlcHJlc2VudHMgYW4gYWNyb2ZpZWxkIG9yIGEgd2lkZ2V0IGFubm90YXRpb24uIFNvIHdlIHdpbGwgYXNzdW1lXG4vLyB0aGF0IGEgZGljdGlvbmFyeSBpcyBhbiBhY3JvZmllbGQgaWYgaXQgaXMgYSBtZW1iZXIgb2YgdGhlIGAvS2lkc2AgYXJyYXlcbi8vIGFuZCBpdCBjb250YWlucyBhIGAvVGAgZW50cnkgKHdpZGdldHMgZG8gbm90IGhhdmUgYC9UYCBlbnRyaWVzKS4gVGhpcyBpc24ndFxuLy8gYSBidWxsZXQgcHJvb2Ygc29sdXRpb24sIGJlY2F1c2UgdGhlIGAvVGAgZW50cnkgaXMgdGVjaG5pY2FsbHkgZGVmaW5lZCBhc1xuLy8gb3B0aW9uYWwgZm9yIGFjcm9maWVsZHMgYnkgdGhlIFBERiBzcGVjLiBCdXQgaW4gcHJhY3RpY2UgYWxsIGFjcm9maWVsZHMgc2VlbVxuLy8gdG8gaGF2ZSBhIGAvVGAgZW50cnkgZGVmaW5lZC5cbnZhciBpc05vblRlcm1pbmFsQWNyb0ZpZWxkID0gZnVuY3Rpb24gKGRpY3QpIHtcbiAgICB2YXIga2lkcyA9IGRpY3QubG9va3VwKFBERk5hbWUub2YoJ0tpZHMnKSk7XG4gICAgaWYgKGtpZHMgaW5zdGFuY2VvZiBQREZBcnJheSkge1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBraWRzLnNpemUoKTsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGtpZCA9IGtpZHMubG9va3VwKGlkeCk7XG4gICAgICAgICAgICB2YXIga2lkSXNGaWVsZCA9IGtpZCBpbnN0YW5jZW9mIFBERkRpY3QgJiYga2lkLmhhcyhQREZOYW1lLm9mKCdUJykpO1xuICAgICAgICAgICAgaWYgKGtpZElzRmllbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBjcmVhdGVQREZBY3JvVGVybWluYWwgPSBmdW5jdGlvbiAoZGljdCwgcmVmKSB7XG4gICAgdmFyIGZ0TmFtZU9yUmVmID0gZ2V0SW5oZXJpdGFibGVBdHRyaWJ1dGUoZGljdCwgUERGTmFtZS5vZignRlQnKSk7XG4gICAgdmFyIHR5cGUgPSBkaWN0LmNvbnRleHQubG9va3VwKGZ0TmFtZU9yUmVmLCBQREZOYW1lKTtcbiAgICBpZiAodHlwZSA9PT0gUERGTmFtZS5vZignQnRuJykpXG4gICAgICAgIHJldHVybiBjcmVhdGVQREZBY3JvQnV0dG9uKGRpY3QsIHJlZik7XG4gICAgaWYgKHR5cGUgPT09IFBERk5hbWUub2YoJ0NoJykpXG4gICAgICAgIHJldHVybiBjcmVhdGVQREZBY3JvQ2hvaWNlKGRpY3QsIHJlZik7XG4gICAgaWYgKHR5cGUgPT09IFBERk5hbWUub2YoJ1R4JykpXG4gICAgICAgIHJldHVybiBQREZBY3JvVGV4dC5mcm9tRGljdChkaWN0LCByZWYpO1xuICAgIGlmICh0eXBlID09PSBQREZOYW1lLm9mKCdTaWcnKSlcbiAgICAgICAgcmV0dXJuIFBERkFjcm9TaWduYXR1cmUuZnJvbURpY3QoZGljdCwgcmVmKTtcbiAgICAvLyBXZSBzaG91bGQgbmV2ZXIgcmVhY2ggdGhpcyBsaW5lLiBCdXQgdGhlcmUgYXJlIGEgbG90IG9mIHdlaXJkIFBERnMgb3V0XG4gICAgLy8gdGhlcmUuIFNvLCBqdXN0IHRvIGJlIHNhZmUsIHdlJ2xsIHRyeSB0byBoYW5kbGUgdGhpbmdzIGdyYWNlZnVsbHkgaW5zdGVhZFxuICAgIC8vIG9mIHRocm93aW5nIGFuIGVycm9yLlxuICAgIHJldHVybiBQREZBY3JvVGVybWluYWwuZnJvbURpY3QoZGljdCwgcmVmKTtcbn07XG52YXIgY3JlYXRlUERGQWNyb0J1dHRvbiA9IGZ1bmN0aW9uIChkaWN0LCByZWYpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGZmTnVtYmVyT3JSZWYgPSBnZXRJbmhlcml0YWJsZUF0dHJpYnV0ZShkaWN0LCBQREZOYW1lLm9mKCdGZicpKTtcbiAgICB2YXIgZmZOdW1iZXIgPSBkaWN0LmNvbnRleHQubG9va3VwTWF5YmUoZmZOdW1iZXJPclJlZiwgUERGTnVtYmVyKTtcbiAgICB2YXIgZmxhZ3MgPSAoX2EgPSBmZk51bWJlciA9PT0gbnVsbCB8fCBmZk51bWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmZOdW1iZXIuYXNOdW1iZXIoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICBpZiAoZmxhZ0lzU2V0KGZsYWdzLCBBY3JvQnV0dG9uRmxhZ3MuUHVzaEJ1dHRvbikpIHtcbiAgICAgICAgcmV0dXJuIFBERkFjcm9QdXNoQnV0dG9uLmZyb21EaWN0KGRpY3QsIHJlZik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGZsYWdJc1NldChmbGFncywgQWNyb0J1dHRvbkZsYWdzLlJhZGlvKSkge1xuICAgICAgICByZXR1cm4gUERGQWNyb1JhZGlvQnV0dG9uLmZyb21EaWN0KGRpY3QsIHJlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUERGQWNyb0NoZWNrQm94LmZyb21EaWN0KGRpY3QsIHJlZik7XG4gICAgfVxufTtcbnZhciBjcmVhdGVQREZBY3JvQ2hvaWNlID0gZnVuY3Rpb24gKGRpY3QsIHJlZikge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZmZOdW1iZXJPclJlZiA9IGdldEluaGVyaXRhYmxlQXR0cmlidXRlKGRpY3QsIFBERk5hbWUub2YoJ0ZmJykpO1xuICAgIHZhciBmZk51bWJlciA9IGRpY3QuY29udGV4dC5sb29rdXBNYXliZShmZk51bWJlck9yUmVmLCBQREZOdW1iZXIpO1xuICAgIHZhciBmbGFncyA9IChfYSA9IGZmTnVtYmVyID09PSBudWxsIHx8IGZmTnVtYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZk51bWJlci5hc051bWJlcigpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xuICAgIGlmIChmbGFnSXNTZXQoZmxhZ3MsIEFjcm9DaG9pY2VGbGFncy5Db21ibykpIHtcbiAgICAgICAgcmV0dXJuIFBERkFjcm9Db21ib0JveC5mcm9tRGljdChkaWN0LCByZWYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFBERkFjcm9MaXN0Qm94LmZyb21EaWN0KGRpY3QsIHJlZik7XG4gICAgfVxufTtcbnZhciBmbGFnSXNTZXQgPSBmdW5jdGlvbiAoZmxhZ3MsIGZsYWcpIHtcbiAgICByZXR1cm4gKGZsYWdzICYgZmxhZykgIT09IDA7XG59O1xudmFyIGdldEluaGVyaXRhYmxlQXR0cmlidXRlID0gZnVuY3Rpb24gKHN0YXJ0Tm9kZSwgbmFtZSkge1xuICAgIHZhciBhdHRyaWJ1dGU7XG4gICAgYXNjZW5kKHN0YXJ0Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKCFhdHRyaWJ1dGUpXG4gICAgICAgICAgICBhdHRyaWJ1dGUgPSBub2RlLmdldChuYW1lKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlO1xufTtcbnZhciBhc2NlbmQgPSBmdW5jdGlvbiAoc3RhcnROb2RlLCB2aXNpdG9yKSB7XG4gICAgdmlzaXRvcihzdGFydE5vZGUpO1xuICAgIHZhciBQYXJlbnQgPSBzdGFydE5vZGUubG9va3VwTWF5YmUoUERGTmFtZS5vZignUGFyZW50JyksIFBERkRpY3QpO1xuICAgIGlmIChQYXJlbnQpXG4gICAgICAgIGFzY2VuZChQYXJlbnQsIHZpc2l0b3IpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCBQREZEaWN0IGZyb20gXCIuLi9vYmplY3RzL1BERkRpY3RcIjtcbmltcG9ydCBQREZBcnJheSBmcm9tIFwiLi4vb2JqZWN0cy9QREZBcnJheVwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERkFjcm9Ob25UZXJtaW5hbCBmcm9tIFwiLi9QREZBY3JvTm9uVGVybWluYWxcIjtcbmltcG9ydCB7IGNyZWF0ZVBERkFjcm9GaWVsZCwgY3JlYXRlUERGQWNyb0ZpZWxkcywgfSBmcm9tIFwiLi91dGlsc1wiO1xudmFyIFBERkFjcm9Gb3JtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkFjcm9Gb3JtKGRpY3QpIHtcbiAgICAgICAgdGhpcy5kaWN0ID0gZGljdDtcbiAgICB9XG4gICAgUERGQWNyb0Zvcm0ucHJvdG90eXBlLkZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpZWxkcyA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignRmllbGRzJykpO1xuICAgICAgICBpZiAoZmllbGRzIGluc3RhbmNlb2YgUERGQXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUERGQWNyb0Zvcm0ucHJvdG90eXBlLmdldEZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEZpZWxkcyA9IHRoaXMubm9ybWFsaXplZEVudHJpZXMoKS5GaWVsZHM7XG4gICAgICAgIHZhciBmaWVsZHMgPSBuZXcgQXJyYXkoRmllbGRzLnNpemUoKSk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IEZpZWxkcy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciByZWYgPSBGaWVsZHMuZ2V0KGlkeCk7XG4gICAgICAgICAgICB2YXIgZGljdCA9IEZpZWxkcy5sb29rdXAoaWR4LCBQREZEaWN0KTtcbiAgICAgICAgICAgIGZpZWxkc1tpZHhdID0gW2NyZWF0ZVBERkFjcm9GaWVsZChkaWN0LCByZWYpLCByZWZdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfTtcbiAgICBQREZBY3JvRm9ybS5wcm90b3R5cGUuZ2V0QWxsRmllbGRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWxsRmllbGRzID0gW107XG4gICAgICAgIHZhciBwdXNoRmllbGRzID0gZnVuY3Rpb24gKGZpZWxkcykge1xuICAgICAgICAgICAgaWYgKCFmaWVsZHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZmllbGRzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1tpZHhdO1xuICAgICAgICAgICAgICAgIGFsbEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGRNb2RlbCA9IGZpZWxkWzBdO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZE1vZGVsIGluc3RhbmNlb2YgUERGQWNyb05vblRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hGaWVsZHMoY3JlYXRlUERGQWNyb0ZpZWxkcyhmaWVsZE1vZGVsLktpZHMoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcHVzaEZpZWxkcyh0aGlzLmdldEZpZWxkcygpKTtcbiAgICAgICAgcmV0dXJuIGFsbEZpZWxkcztcbiAgICB9O1xuICAgIFBERkFjcm9Gb3JtLnByb3RvdHlwZS5hZGRGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICB2YXIgRmllbGRzID0gdGhpcy5ub3JtYWxpemVkRW50cmllcygpLkZpZWxkcztcbiAgICAgICAgRmllbGRzID09PSBudWxsIHx8IEZpZWxkcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogRmllbGRzLnB1c2goZmllbGQpO1xuICAgIH07XG4gICAgUERGQWNyb0Zvcm0ucHJvdG90eXBlLnJlbW92ZUZpZWxkID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBmaWVsZC5nZXRQYXJlbnQoKTtcbiAgICAgICAgdmFyIGZpZWxkcyA9IHBhcmVudCA9PT0gdW5kZWZpbmVkID8gdGhpcy5ub3JtYWxpemVkRW50cmllcygpLkZpZWxkcyA6IHBhcmVudC5LaWRzKCk7XG4gICAgICAgIHZhciBpbmRleCA9IGZpZWxkcyA9PT0gbnVsbCB8fCBmaWVsZHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkcy5pbmRleE9mKGZpZWxkLnJlZik7XG4gICAgICAgIGlmIChmaWVsZHMgPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmllZCB0byByZW1vdmUgaW5leGlzdGVudCBmaWVsZCBcIiArIGZpZWxkLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZHMucmVtb3ZlKGluZGV4KTtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkICYmIGZpZWxkcy5zaXplKCkgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRmllbGQocGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGQWNyb0Zvcm0ucHJvdG90eXBlLm5vcm1hbGl6ZWRFbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgRmllbGRzID0gdGhpcy5GaWVsZHMoKTtcbiAgICAgICAgaWYgKCFGaWVsZHMpIHtcbiAgICAgICAgICAgIEZpZWxkcyA9IHRoaXMuZGljdC5jb250ZXh0Lm9iaihbXSk7XG4gICAgICAgICAgICB0aGlzLmRpY3Quc2V0KFBERk5hbWUub2YoJ0ZpZWxkcycpLCBGaWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IEZpZWxkczogRmllbGRzIH07XG4gICAgfTtcbiAgICBQREZBY3JvRm9ybS5mcm9tRGljdCA9IGZ1bmN0aW9uIChkaWN0KSB7IHJldHVybiBuZXcgUERGQWNyb0Zvcm0oZGljdCk7IH07XG4gICAgUERGQWNyb0Zvcm0uY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRpY3QgPSBjb250ZXh0Lm9iaih7IEZpZWxkczogW10gfSk7XG4gICAgICAgIHJldHVybiBuZXcgUERGQWNyb0Zvcm0oZGljdCk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGQWNyb0Zvcm07XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUERGQWNyb0Zvcm07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZBY3JvRm9ybS5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZEaWN0IGZyb20gXCIuLi9vYmplY3RzL1BERkRpY3RcIjtcbmltcG9ydCBQREZOYW1lIGZyb20gXCIuLi9vYmplY3RzL1BERk5hbWVcIjtcbmltcG9ydCB7IFBERkFjcm9Gb3JtIH0gZnJvbSBcIi4uL2Fjcm9mb3JtXCI7XG5pbXBvcnQgVmlld2VyUHJlZmVyZW5jZXMgZnJvbSAnLi4vaW50ZXJhY3RpdmUvVmlld2VyUHJlZmVyZW5jZXMnO1xudmFyIFBERkNhdGFsb2cgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkNhdGFsb2csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUERGQ2F0YWxvZygpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBQREZDYXRhbG9nLnByb3RvdHlwZS5QYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwKFBERk5hbWUub2YoJ1BhZ2VzJyksIFBERkRpY3QpO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy5wcm90b3R5cGUuQWNyb0Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE1heWJlKFBERk5hbWUub2YoJ0Fjcm9Gb3JtJyksIFBERkRpY3QpO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy5wcm90b3R5cGUuZ2V0QWNyb0Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaWN0ID0gdGhpcy5BY3JvRm9ybSgpO1xuICAgICAgICBpZiAoIWRpY3QpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gUERGQWNyb0Zvcm0uZnJvbURpY3QoZGljdCk7XG4gICAgfTtcbiAgICBQREZDYXRhbG9nLnByb3RvdHlwZS5nZXRPckNyZWF0ZUFjcm9Gb3JtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWNyb0Zvcm0gPSB0aGlzLmdldEFjcm9Gb3JtKCk7XG4gICAgICAgIGlmICghYWNyb0Zvcm0pIHtcbiAgICAgICAgICAgIGFjcm9Gb3JtID0gUERGQWNyb0Zvcm0uY3JlYXRlKHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICB2YXIgYWNyb0Zvcm1SZWYgPSB0aGlzLmNvbnRleHQucmVnaXN0ZXIoYWNyb0Zvcm0uZGljdCk7XG4gICAgICAgICAgICB0aGlzLnNldChQREZOYW1lLm9mKCdBY3JvRm9ybScpLCBhY3JvRm9ybVJlZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjcm9Gb3JtO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy5wcm90b3R5cGUuVmlld2VyUHJlZmVyZW5jZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cE1heWJlKFBERk5hbWUub2YoJ1ZpZXdlclByZWZlcmVuY2VzJyksIFBERkRpY3QpO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy5wcm90b3R5cGUuZ2V0Vmlld2VyUHJlZmVyZW5jZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaWN0ID0gdGhpcy5WaWV3ZXJQcmVmZXJlbmNlcygpO1xuICAgICAgICBpZiAoIWRpY3QpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gVmlld2VyUHJlZmVyZW5jZXMuZnJvbURpY3QoZGljdCk7XG4gICAgfTtcbiAgICBQREZDYXRhbG9nLnByb3RvdHlwZS5nZXRPckNyZWF0ZVZpZXdlclByZWZlcmVuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmlld2VyUHJlZnMgPSB0aGlzLmdldFZpZXdlclByZWZlcmVuY2VzKCk7XG4gICAgICAgIGlmICghdmlld2VyUHJlZnMpIHtcbiAgICAgICAgICAgIHZpZXdlclByZWZzID0gVmlld2VyUHJlZmVyZW5jZXMuY3JlYXRlKHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICB2YXIgdmlld2VyUHJlZnNSZWYgPSB0aGlzLmNvbnRleHQucmVnaXN0ZXIodmlld2VyUHJlZnMuZGljdCk7XG4gICAgICAgICAgICB0aGlzLnNldChQREZOYW1lLm9mKCdWaWV3ZXJQcmVmZXJlbmNlcycpLCB2aWV3ZXJQcmVmc1JlZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXdlclByZWZzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB0aGUgZ2l2ZW4gcmVmIGFzIGEgbGVhZiBub2RlIG9mIHRoaXMgY2F0YWxvZydzIHBhZ2UgdHJlZSBhdCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgaW5kZXggKHplcm8tYmFzZWQpLiBBbHNvIGluY3JlbWVudHMgdGhlIGBDb3VudGAgb2YgZWFjaCBub2RlIGluXG4gICAgICogdGhlIHBhZ2UgdHJlZSBoaWVyYXJjaHkgdG8gYWNjb21vZGF0ZSB0aGUgbmV3IHBhZ2UuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIHRoZSByZWYgb2YgdGhlIFBERlBhZ2VUcmVlIG5vZGUgaW50byB3aGljaCBgbGVhZlJlZmAgd2FzIGluc2VydGVkLlxuICAgICAqL1xuICAgIFBERkNhdGFsb2cucHJvdG90eXBlLmluc2VydExlYWZOb2RlID0gZnVuY3Rpb24gKGxlYWZSZWYsIGluZGV4KSB7XG4gICAgICAgIHZhciBwYWdlc1JlZiA9IHRoaXMuZ2V0KFBERk5hbWUub2YoJ1BhZ2VzJykpO1xuICAgICAgICB2YXIgbWF5YmVQYXJlbnRSZWYgPSB0aGlzLlBhZ2VzKCkuaW5zZXJ0TGVhZk5vZGUobGVhZlJlZiwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbWF5YmVQYXJlbnRSZWYgfHwgcGFnZXNSZWY7XG4gICAgfTtcbiAgICBQREZDYXRhbG9nLnByb3RvdHlwZS5yZW1vdmVMZWFmTm9kZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB0aGlzLlBhZ2VzKCkucmVtb3ZlTGVhZk5vZGUoaW5kZXgpO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy53aXRoQ29udGV4dEFuZFBhZ2VzID0gZnVuY3Rpb24gKGNvbnRleHQsIHBhZ2VzKSB7XG4gICAgICAgIHZhciBkaWN0ID0gbmV3IE1hcCgpO1xuICAgICAgICBkaWN0LnNldChQREZOYW1lLm9mKCdUeXBlJyksIFBERk5hbWUub2YoJ0NhdGFsb2cnKSk7XG4gICAgICAgIGRpY3Quc2V0KFBERk5hbWUub2YoJ1BhZ2VzJyksIHBhZ2VzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZDYXRhbG9nKGRpY3QsIGNvbnRleHQpO1xuICAgIH07XG4gICAgUERGQ2F0YWxvZy5mcm9tTWFwV2l0aENvbnRleHQgPSBmdW5jdGlvbiAobWFwLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGQ2F0YWxvZyhtYXAsIGNvbnRleHQpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERkNhdGFsb2c7XG59KFBERkRpY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkNhdGFsb2c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZDYXRhbG9nLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGTnVtYmVyIGZyb20gXCIuLi9vYmplY3RzL1BERk51bWJlclwiO1xuaW1wb3J0IFBERlBhZ2VMZWFmIGZyb20gXCIuL1BERlBhZ2VMZWFmXCI7XG5pbXBvcnQgeyBJbnZhbGlkVGFyZ2V0SW5kZXhFcnJvciwgQ29ycnVwdFBhZ2VUcmVlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG52YXIgUERGUGFnZVRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERlBhZ2VUcmVlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERlBhZ2VUcmVlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFBERlBhZ2VUcmVlLnByb3RvdHlwZS5QYXJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvb2t1cChQREZOYW1lLm9mKCdQYXJlbnQnKSk7XG4gICAgfTtcbiAgICBQREZQYWdlVHJlZS5wcm90b3R5cGUuS2lkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwKFBERk5hbWUub2YoJ0tpZHMnKSwgUERGQXJyYXkpO1xuICAgIH07XG4gICAgUERGUGFnZVRyZWUucHJvdG90eXBlLkNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXAoUERGTmFtZS5vZignQ291bnQnKSwgUERGTnVtYmVyKTtcbiAgICB9O1xuICAgIFBERlBhZ2VUcmVlLnByb3RvdHlwZS5wdXNoVHJlZU5vZGUgPSBmdW5jdGlvbiAodHJlZVJlZikge1xuICAgICAgICB2YXIgS2lkcyA9IHRoaXMuS2lkcygpO1xuICAgICAgICBLaWRzLnB1c2godHJlZVJlZik7XG4gICAgfTtcbiAgICBQREZQYWdlVHJlZS5wcm90b3R5cGUucHVzaExlYWZOb2RlID0gZnVuY3Rpb24gKGxlYWZSZWYpIHtcbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgdGhpcy5pbnNlcnRMZWFmS2lkKEtpZHMuc2l6ZSgpLCBsZWFmUmVmKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhlIGdpdmVuIHJlZiBhcyBhIGxlYWYgbm9kZSBvZiB0aGlzIHBhZ2UgdHJlZSBhdCB0aGUgc3BlY2lmaWVkXG4gICAgICogaW5kZXggKHplcm8tYmFzZWQpLiBBbHNvIGluY3JlbWVudHMgdGhlIGBDb3VudGAgb2YgZWFjaCBwYWdlIHRyZWUgaW4gdGhlXG4gICAgICogaGllcmFyY2h5IHRvIGFjY29tb2RhdGUgdGhlIG5ldyBwYWdlLlxuICAgICAqXG4gICAgICogUmV0dXJucyB0aGUgcmVmIG9mIHRoZSBQREZQYWdlVHJlZSBub2RlIGludG8gd2hpY2ggYGxlYWZSZWZgIHdhcyBpbnNlcnRlZCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYCBpZiBpdCB3YXMgaW5zZXJ0ZWQgaW50byB0aGUgcm9vdCBub2RlICh0aGUgUERGUGFnZVRyZWUgdXBvblxuICAgICAqIHdoaWNoIHRoZSBtZXRob2Qgd2FzIGZpcnN0IGNhbGxlZCkuXG4gICAgICovXG4gICAgUERGUGFnZVRyZWUucHJvdG90eXBlLmluc2VydExlYWZOb2RlID0gZnVuY3Rpb24gKGxlYWZSZWYsIHRhcmdldEluZGV4KSB7XG4gICAgICAgIHZhciBLaWRzID0gdGhpcy5LaWRzKCk7XG4gICAgICAgIHZhciBDb3VudCA9IHRoaXMuQ291bnQoKS5hc051bWJlcigpO1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPiBDb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUYXJnZXRJbmRleEVycm9yKHRhcmdldEluZGV4LCBDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQgPSB0YXJnZXRJbmRleDtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gS2lkcy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChsZWFmc1JlbWFpbmluZ1VudGlsVGFyZ2V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHBhZ2UgYW5kIHJldHVyblxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGVhZktpZChpZHgsIGxlYWZSZWYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIga2lkUmVmID0gS2lkcy5nZXQoaWR4KTtcbiAgICAgICAgICAgIHZhciBraWQgPSB0aGlzLmNvbnRleHQubG9va3VwKGtpZFJlZik7XG4gICAgICAgICAgICBpZiAoa2lkIGluc3RhbmNlb2YgUERGUGFnZVRyZWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2lkLkNvdW50KCkuYXNOdW1iZXIoKSA+IGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlnIGluXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoa2lkLmluc2VydExlYWZOb2RlKGxlYWZSZWYsIGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQpIHx8IGtpZFJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIG9uXG4gICAgICAgICAgICAgICAgICAgIGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQgLT0ga2lkLkNvdW50KCkuYXNOdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2lkIGluc3RhbmNlb2YgUERGUGFnZUxlYWYpIHtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIG9uXG4gICAgICAgICAgICAgICAgbGVhZnNSZW1haW5pbmdVbnRpbFRhcmdldCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsZWFmc1JlbWFpbmluZ1VudGlsVGFyZ2V0ID09PSAwKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgcGFnZSBhdCB0aGUgZW5kIGFuZCByZXR1cm5cbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGVhZktpZChLaWRzLnNpemUoKSwgbGVhZlJlZik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSBpZiBgdGFyZ2V0SW5kZXhgIGlzIHZhbGlkXG4gICAgICAgIHRocm93IG5ldyBDb3JydXB0UGFnZVRyZWVFcnJvcih0YXJnZXRJbmRleCwgJ2luc2VydExlYWZOb2RlJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsZWFmIG5vZGUgYXQgdGhlIHNwZWNpZmllZCBpbmRleCAoemVyby1iYXNlZCkgZnJvbSB0aGlzIHBhZ2VcbiAgICAgKiB0cmVlLiBBbHNvIGRlY3JlbWVudHMgdGhlIGBDb3VudGAgb2YgZWFjaCBwYWdlIHRyZWUgaW4gdGhlIGhpZXJhcmNoeSB0b1xuICAgICAqIGFjY291bnQgZm9yIHRoZSByZW1vdmVkIHBhZ2UuXG4gICAgICpcbiAgICAgKiBJZiBgcHJ1bmVgIGlzIHRydWUsIHRoZW4gaW50ZXJtZWRpYXRlIHRyZWUgbm9kZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlXG4gICAgICogdHJlZSBpZiB0aGV5IGNvbnRhaW4gMCBjaGlsZHJlbiBhZnRlciB0aGUgbGVhZiBub2RlIGlzIHJlbW92ZWQuXG4gICAgICovXG4gICAgUERGUGFnZVRyZWUucHJvdG90eXBlLnJlbW92ZUxlYWZOb2RlID0gZnVuY3Rpb24gKHRhcmdldEluZGV4LCBwcnVuZSkge1xuICAgICAgICBpZiAocHJ1bmUgPT09IHZvaWQgMCkgeyBwcnVuZSA9IHRydWU7IH1cbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgdmFyIENvdW50ID0gdGhpcy5Db3VudCgpLmFzTnVtYmVyKCk7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSBDb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUYXJnZXRJbmRleEVycm9yKHRhcmdldEluZGV4LCBDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQgPSB0YXJnZXRJbmRleDtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gS2lkcy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHZhciBraWRSZWYgPSBLaWRzLmdldChpZHgpO1xuICAgICAgICAgICAgdmFyIGtpZCA9IHRoaXMuY29udGV4dC5sb29rdXAoa2lkUmVmKTtcbiAgICAgICAgICAgIGlmIChraWQgaW5zdGFuY2VvZiBQREZQYWdlVHJlZSkge1xuICAgICAgICAgICAgICAgIGlmIChraWQuQ291bnQoKS5hc051bWJlcigpID4gbGVhZnNSZW1haW5pbmdVbnRpbFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEaWcgaW5cbiAgICAgICAgICAgICAgICAgICAga2lkLnJlbW92ZUxlYWZOb2RlKGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQsIHBydW5lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBydW5lICYmIGtpZC5LaWRzKCkuc2l6ZSgpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgS2lkcy5yZW1vdmUoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSBvblxuICAgICAgICAgICAgICAgICAgICBsZWFmc1JlbWFpbmluZ1VudGlsVGFyZ2V0IC09IGtpZC5Db3VudCgpLmFzTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtpZCBpbnN0YW5jZW9mIFBERlBhZ2VMZWFmKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHBhZ2UgYW5kIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUtpZChpZHgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIG9uXG4gICAgICAgICAgICAgICAgICAgIGxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlIGlmIGB0YXJnZXRJbmRleGAgaXMgdmFsaWRcbiAgICAgICAgdGhyb3cgbmV3IENvcnJ1cHRQYWdlVHJlZUVycm9yKHRhcmdldEluZGV4LCAncmVtb3ZlTGVhZk5vZGUnKTtcbiAgICB9O1xuICAgIFBERlBhZ2VUcmVlLnByb3RvdHlwZS5hc2NlbmQgPSBmdW5jdGlvbiAodmlzaXRvcikge1xuICAgICAgICB2aXNpdG9yKHRoaXMpO1xuICAgICAgICB2YXIgUGFyZW50ID0gdGhpcy5QYXJlbnQoKTtcbiAgICAgICAgaWYgKFBhcmVudClcbiAgICAgICAgICAgIFBhcmVudC5hc2NlbmQodmlzaXRvcik7XG4gICAgfTtcbiAgICAvKiogUGVyZm9ybXMgYSBQb3N0LU9yZGVyIHRyYXZlcnNhbCBvZiB0aGlzIHBhZ2UgdHJlZSAqL1xuICAgIFBERlBhZ2VUcmVlLnByb3RvdHlwZS50cmF2ZXJzZSA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7XG4gICAgICAgIHZhciBLaWRzID0gdGhpcy5LaWRzKCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IEtpZHMuc2l6ZSgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICB2YXIga2lkUmVmID0gS2lkcy5nZXQoaWR4KTtcbiAgICAgICAgICAgIHZhciBraWQgPSB0aGlzLmNvbnRleHQubG9va3VwKGtpZFJlZik7XG4gICAgICAgICAgICBpZiAoa2lkIGluc3RhbmNlb2YgUERGUGFnZVRyZWUpXG4gICAgICAgICAgICAgICAga2lkLnRyYXZlcnNlKHZpc2l0b3IpO1xuICAgICAgICAgICAgdmlzaXRvcihraWQsIGtpZFJlZik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERlBhZ2VUcmVlLnByb3RvdHlwZS5pbnNlcnRMZWFmS2lkID0gZnVuY3Rpb24gKGtpZElkeCwgbGVhZlJlZikge1xuICAgICAgICB2YXIgS2lkcyA9IHRoaXMuS2lkcygpO1xuICAgICAgICB0aGlzLmFzY2VuZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5ld0NvdW50ID0gbm9kZS5Db3VudCgpLmFzTnVtYmVyKCkgKyAxO1xuICAgICAgICAgICAgbm9kZS5zZXQoUERGTmFtZS5vZignQ291bnQnKSwgUERGTnVtYmVyLm9mKG5ld0NvdW50KSk7XG4gICAgICAgIH0pO1xuICAgICAgICBLaWRzLmluc2VydChraWRJZHgsIGxlYWZSZWYpO1xuICAgIH07XG4gICAgUERGUGFnZVRyZWUucHJvdG90eXBlLnJlbW92ZUtpZCA9IGZ1bmN0aW9uIChraWRJZHgpIHtcbiAgICAgICAgdmFyIEtpZHMgPSB0aGlzLktpZHMoKTtcbiAgICAgICAgdmFyIGtpZCA9IEtpZHMubG9va3VwKGtpZElkeCk7XG4gICAgICAgIGlmIChraWQgaW5zdGFuY2VvZiBQREZQYWdlTGVhZikge1xuICAgICAgICAgICAgdGhpcy5hc2NlbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q291bnQgPSBub2RlLkNvdW50KCkuYXNOdW1iZXIoKSAtIDE7XG4gICAgICAgICAgICAgICAgbm9kZS5zZXQoUERGTmFtZS5vZignQ291bnQnKSwgUERGTnVtYmVyLm9mKG5ld0NvdW50KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBLaWRzLnJlbW92ZShraWRJZHgpO1xuICAgIH07XG4gICAgUERGUGFnZVRyZWUud2l0aENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgcGFyZW50KSB7XG4gICAgICAgIHZhciBkaWN0ID0gbmV3IE1hcCgpO1xuICAgICAgICBkaWN0LnNldChQREZOYW1lLm9mKCdUeXBlJyksIFBERk5hbWUub2YoJ1BhZ2VzJykpO1xuICAgICAgICBkaWN0LnNldChQREZOYW1lLm9mKCdLaWRzJyksIGNvbnRleHQub2JqKFtdKSk7XG4gICAgICAgIGRpY3Quc2V0KFBERk5hbWUub2YoJ0NvdW50JyksIGNvbnRleHQub2JqKDApKTtcbiAgICAgICAgaWYgKHBhcmVudClcbiAgICAgICAgICAgIGRpY3Quc2V0KFBERk5hbWUub2YoJ1BhcmVudCcpLCBwYXJlbnQpO1xuICAgICAgICByZXR1cm4gbmV3IFBERlBhZ2VUcmVlKGRpY3QsIGNvbnRleHQpO1xuICAgIH07XG4gICAgUERGUGFnZVRyZWUuZnJvbU1hcFdpdGhDb250ZXh0ID0gZnVuY3Rpb24gKG1hcCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IFBERlBhZ2VUcmVlKG1hcCwgY29udGV4dCk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGUGFnZVRyZWU7XG59KFBERkRpY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlBhZ2VUcmVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGUGFnZVRyZWUuanMubWFwIiwiaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi9DaGFyQ29kZXNcIjtcbmV4cG9ydCB2YXIgSXNEaWdpdCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5Jc0RpZ2l0W0NoYXJDb2Rlcy5aZXJvXSA9IDE7XG5Jc0RpZ2l0W0NoYXJDb2Rlcy5PbmVdID0gMTtcbklzRGlnaXRbQ2hhckNvZGVzLlR3b10gPSAxO1xuSXNEaWdpdFtDaGFyQ29kZXMuVGhyZWVdID0gMTtcbklzRGlnaXRbQ2hhckNvZGVzLkZvdXJdID0gMTtcbklzRGlnaXRbQ2hhckNvZGVzLkZpdmVdID0gMTtcbklzRGlnaXRbQ2hhckNvZGVzLlNpeF0gPSAxO1xuSXNEaWdpdFtDaGFyQ29kZXMuU2V2ZW5dID0gMTtcbklzRGlnaXRbQ2hhckNvZGVzLkVpZ2h0XSA9IDE7XG5Jc0RpZ2l0W0NoYXJDb2Rlcy5OaW5lXSA9IDE7XG5leHBvcnQgdmFyIElzTnVtZXJpY1ByZWZpeCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5Jc051bWVyaWNQcmVmaXhbQ2hhckNvZGVzLlBlcmlvZF0gPSAxO1xuSXNOdW1lcmljUHJlZml4W0NoYXJDb2Rlcy5QbHVzXSA9IDE7XG5Jc051bWVyaWNQcmVmaXhbQ2hhckNvZGVzLk1pbnVzXSA9IDE7XG5leHBvcnQgdmFyIElzTnVtZXJpYyA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5mb3IgKHZhciBpZHggPSAwLCBsZW4gPSAyNTY7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICBJc051bWVyaWNbaWR4XSA9IElzRGlnaXRbaWR4XSB8fCBJc051bWVyaWNQcmVmaXhbaWR4XSA/IDEgOiAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TnVtZXJpYy5qcy5tYXAiLCJpbXBvcnQgeyBOdW1iZXJQYXJzaW5nRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBJc0RpZ2l0LCBJc051bWVyaWMgfSBmcm9tIFwiLi4vc3ludGF4L051bWVyaWNcIjtcbmltcG9ydCB7IElzV2hpdGVzcGFjZSB9IGZyb20gXCIuLi9zeW50YXgvV2hpdGVzcGFjZVwiO1xuaW1wb3J0IHsgY2hhckZyb21Db2RlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG52YXIgTmV3bGluZSA9IENoYXJDb2Rlcy5OZXdsaW5lLCBDYXJyaWFnZVJldHVybiA9IENoYXJDb2Rlcy5DYXJyaWFnZVJldHVybjtcbi8vIFRPRE86IFRocm93IGVycm9yIGlmIGVvZiBpcyByZWFjaGVkIGJlZm9yZSBmaW5pc2hpbmcgb2JqZWN0IHBhcnNlLi4uXG52YXIgQmFzZVBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlUGFyc2VyKGJ5dGVzLCBjYXBOdW1iZXJzKSB7XG4gICAgICAgIGlmIChjYXBOdW1iZXJzID09PSB2b2lkIDApIHsgY2FwTnVtYmVycyA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcbiAgICAgICAgdGhpcy5jYXBOdW1iZXJzID0gY2FwTnVtYmVycztcbiAgICB9XG4gICAgQmFzZVBhcnNlci5wcm90b3R5cGUucGFyc2VSYXdJbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICcnO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRoaXMuYnl0ZXMucGVlaygpO1xuICAgICAgICAgICAgaWYgKCFJc0RpZ2l0W2J5dGVdKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgdmFsdWUgKz0gY2hhckZyb21Db2RlKHRoaXMuYnl0ZXMubmV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbnVtYmVyVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICBpZiAoIXZhbHVlIHx8ICFpc0Zpbml0ZShudW1iZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOdW1iZXJQYXJzaW5nRXJyb3IodGhpcy5ieXRlcy5wb3NpdGlvbigpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlclZhbHVlO1xuICAgIH07XG4gICAgLy8gVE9ETzogTWF5YmUgaGFuZGxlIGV4cG9uZW50aWFsIGZvcm1hdD9cbiAgICAvLyBUT0RPOiBDb21wYXJlIHBlcmZvcm1hbmNlIG9mIHN0cmluZyBjb25jYXRlbmF0aW9uIHRvIGNoYXJGcm9tQ29kZSguLi5ieXRlcylcbiAgICBCYXNlUGFyc2VyLnByb3RvdHlwZS5wYXJzZVJhd051bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgIC8vIFBhcnNlIGludGVnZXItcGFydCwgdGhlIGxlYWRpbmcgKCsgfCAtIHwgLiB8IDAtOSlcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSkge1xuICAgICAgICAgICAgdmFyIGJ5dGUgPSB0aGlzLmJ5dGVzLnBlZWsoKTtcbiAgICAgICAgICAgIGlmICghSXNOdW1lcmljW2J5dGVdKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgdmFsdWUgKz0gY2hhckZyb21Db2RlKHRoaXMuYnl0ZXMubmV4dCgpKTtcbiAgICAgICAgICAgIGlmIChieXRlID09PSBDaGFyQ29kZXMuUGVyaW9kKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIGRlY2ltYWwtcGFydCwgdGhlIHRyYWlsaW5nICgwLTkpXG4gICAgICAgIHdoaWxlICghdGhpcy5ieXRlcy5kb25lKCkpIHtcbiAgICAgICAgICAgIHZhciBieXRlID0gdGhpcy5ieXRlcy5wZWVrKCk7XG4gICAgICAgICAgICBpZiAoIUlzRGlnaXRbYnl0ZV0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB2YWx1ZSArPSBjaGFyRnJvbUNvZGUodGhpcy5ieXRlcy5uZXh0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBudW1iZXJWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGlmICghdmFsdWUgfHwgIWlzRmluaXRlKG51bWJlclZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE51bWJlclBhcnNpbmdFcnJvcih0aGlzLmJ5dGVzLnBvc2l0aW9uKCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyVmFsdWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FwTnVtYmVycykge1xuICAgICAgICAgICAgICAgIHZhciBtc2cgPSBcIlBhcnNlZCBudW1iZXIgdGhhdCBpcyB0b28gbGFyZ2UgZm9yIHNvbWUgUERGIHJlYWRlcnM6IFwiICsgdmFsdWUgKyBcIiwgdXNpbmcgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgaW5zdGVhZC5cIjtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gXCJQYXJzZWQgbnVtYmVyIHRoYXQgaXMgdG9vIGxhcmdlIGZvciBzb21lIFBERiByZWFkZXJzOiBcIiArIHZhbHVlICsgXCIsIG5vdCBjYXBwaW5nLlwiO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXJWYWx1ZTtcbiAgICB9O1xuICAgIEJhc2VQYXJzZXIucHJvdG90eXBlLnNraXBXaGl0ZXNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpICYmIElzV2hpdGVzcGFjZVt0aGlzLmJ5dGVzLnBlZWsoKV0pIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlUGFyc2VyLnByb3RvdHlwZS5za2lwTGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSkge1xuICAgICAgICAgICAgdmFyIGJ5dGUgPSB0aGlzLmJ5dGVzLnBlZWsoKTtcbiAgICAgICAgICAgIGlmIChieXRlID09PSBOZXdsaW5lIHx8IGJ5dGUgPT09IENhcnJpYWdlUmV0dXJuKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlUGFyc2VyLnByb3RvdHlwZS5za2lwQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnl0ZXMucGVlaygpICE9PSBDaGFyQ29kZXMuUGVyY2VudClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSkge1xuICAgICAgICAgICAgdmFyIGJ5dGUgPSB0aGlzLmJ5dGVzLnBlZWsoKTtcbiAgICAgICAgICAgIGlmIChieXRlID09PSBOZXdsaW5lIHx8IGJ5dGUgPT09IENhcnJpYWdlUmV0dXJuKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ieXRlcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBCYXNlUGFyc2VyLnByb3RvdHlwZS5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLnNraXBDb21tZW50KCkpXG4gICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlKCk7XG4gICAgfTtcbiAgICBCYXNlUGFyc2VyLnByb3RvdHlwZS5tYXRjaEtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuICAgICAgICB2YXIgaW5pdGlhbE9mZnNldCA9IHRoaXMuYnl0ZXMub2Zmc2V0KCk7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGtleXdvcmQubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ieXRlcy5kb25lKCkgfHwgdGhpcy5ieXRlcy5uZXh0KCkgIT09IGtleXdvcmRbaWR4XSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZXMubW92ZVRvKGluaXRpYWxPZmZzZXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlUGFyc2VyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IEJhc2VQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlUGFyc2VyLmpzLm1hcCIsImltcG9ydCB7IE5leHRCeXRlQXNzZXJ0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBkZWNvZGVQREZSYXdTdHJlYW0gfSBmcm9tIFwiLi4vc3RyZWFtcy9kZWNvZGVcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbi8vIFRPRE86IFNlZSBob3cgbGluZS9jb2wgdHJhY2tpbmcgYWZmZWN0cyBwZXJmb3JtYW5jZVxudmFyIEJ5dGVTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnl0ZVN0cmVhbShieXRlcykge1xuICAgICAgICB0aGlzLmlkeCA9IDA7XG4gICAgICAgIHRoaXMubGluZSA9IDA7XG4gICAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICAgICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZXMubGVuZ3RoO1xuICAgIH1cbiAgICBCeXRlU3RyZWFtLnByb3RvdHlwZS5tb3ZlVG8gPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuaWR4ID0gb2Zmc2V0O1xuICAgIH07XG4gICAgQnl0ZVN0cmVhbS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ5dGUgPSB0aGlzLmJ5dGVzW3RoaXMuaWR4KytdO1xuICAgICAgICBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLk5ld2xpbmUpIHtcbiAgICAgICAgICAgIHRoaXMubGluZSArPSAxO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLmFzc2VydE5leHQgPSBmdW5jdGlvbiAoZXhwZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygpICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5leHRCeXRlQXNzZXJ0aW9uRXJyb3IodGhpcy5wb3NpdGlvbigpLCBleHBlY3RlZCwgdGhpcy5wZWVrKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQoKTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzW3RoaXMuaWR4XTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLnBlZWtBaGVhZCA9IGZ1bmN0aW9uIChzdGVwcykge1xuICAgICAgICByZXR1cm4gdGhpcy5ieXRlc1t0aGlzLmlkeCArIHN0ZXBzXTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLnBlZWtBdCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXNbb2Zmc2V0XTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkeCA+PSB0aGlzLmxlbmd0aDtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWR4O1xuICAgIH07XG4gICAgQnl0ZVN0cmVhbS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ieXRlcy5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4geyBsaW5lOiB0aGlzLmxpbmUsIGNvbHVtbjogdGhpcy5jb2x1bW4sIG9mZnNldDogdGhpcy5pZHggfTtcbiAgICB9O1xuICAgIEJ5dGVTdHJlYW0ub2YgPSBmdW5jdGlvbiAoYnl0ZXMpIHsgcmV0dXJuIG5ldyBCeXRlU3RyZWFtKGJ5dGVzKTsgfTtcbiAgICBCeXRlU3RyZWFtLmZyb21QREZSYXdTdHJlYW0gPSBmdW5jdGlvbiAocmF3U3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBCeXRlU3RyZWFtLm9mKGRlY29kZVBERlJhd1N0cmVhbShyYXdTdHJlYW0pLmRlY29kZSgpKTtcbiAgICB9O1xuICAgIHJldHVybiBCeXRlU3RyZWFtO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IEJ5dGVTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CeXRlU3RyZWFtLmpzLm1hcCIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuL0NoYXJDb2Rlc1wiO1xudmFyIFNwYWNlID0gQ2hhckNvZGVzLlNwYWNlLCBDYXJyaWFnZVJldHVybiA9IENoYXJDb2Rlcy5DYXJyaWFnZVJldHVybiwgTmV3bGluZSA9IENoYXJDb2Rlcy5OZXdsaW5lO1xudmFyIHN0cmVhbSA9IFtcbiAgICBDaGFyQ29kZXMucyxcbiAgICBDaGFyQ29kZXMudCxcbiAgICBDaGFyQ29kZXMucixcbiAgICBDaGFyQ29kZXMuZSxcbiAgICBDaGFyQ29kZXMuYSxcbiAgICBDaGFyQ29kZXMubSxcbl07XG52YXIgZW5kc3RyZWFtID0gW1xuICAgIENoYXJDb2Rlcy5lLFxuICAgIENoYXJDb2Rlcy5uLFxuICAgIENoYXJDb2Rlcy5kLFxuICAgIENoYXJDb2Rlcy5zLFxuICAgIENoYXJDb2Rlcy50LFxuICAgIENoYXJDb2Rlcy5yLFxuICAgIENoYXJDb2Rlcy5lLFxuICAgIENoYXJDb2Rlcy5hLFxuICAgIENoYXJDb2Rlcy5tLFxuXTtcbmV4cG9ydCB2YXIgS2V5d29yZHMgPSB7XG4gICAgaGVhZGVyOiBbXG4gICAgICAgIENoYXJDb2Rlcy5QZXJjZW50LFxuICAgICAgICBDaGFyQ29kZXMuUCxcbiAgICAgICAgQ2hhckNvZGVzLkQsXG4gICAgICAgIENoYXJDb2Rlcy5GLFxuICAgICAgICBDaGFyQ29kZXMuRGFzaCxcbiAgICBdLFxuICAgIGVvZjogW1xuICAgICAgICBDaGFyQ29kZXMuUGVyY2VudCxcbiAgICAgICAgQ2hhckNvZGVzLlBlcmNlbnQsXG4gICAgICAgIENoYXJDb2Rlcy5FLFxuICAgICAgICBDaGFyQ29kZXMuTyxcbiAgICAgICAgQ2hhckNvZGVzLkYsXG4gICAgXSxcbiAgICBvYmo6IFtDaGFyQ29kZXMubywgQ2hhckNvZGVzLmIsIENoYXJDb2Rlcy5qXSxcbiAgICBlbmRvYmo6IFtcbiAgICAgICAgQ2hhckNvZGVzLmUsXG4gICAgICAgIENoYXJDb2Rlcy5uLFxuICAgICAgICBDaGFyQ29kZXMuZCxcbiAgICAgICAgQ2hhckNvZGVzLm8sXG4gICAgICAgIENoYXJDb2Rlcy5iLFxuICAgICAgICBDaGFyQ29kZXMuaixcbiAgICBdLFxuICAgIHhyZWY6IFtDaGFyQ29kZXMueCwgQ2hhckNvZGVzLnIsIENoYXJDb2Rlcy5lLCBDaGFyQ29kZXMuZl0sXG4gICAgdHJhaWxlcjogW1xuICAgICAgICBDaGFyQ29kZXMudCxcbiAgICAgICAgQ2hhckNvZGVzLnIsXG4gICAgICAgIENoYXJDb2Rlcy5hLFxuICAgICAgICBDaGFyQ29kZXMuaSxcbiAgICAgICAgQ2hhckNvZGVzLmwsXG4gICAgICAgIENoYXJDb2Rlcy5lLFxuICAgICAgICBDaGFyQ29kZXMucixcbiAgICBdLFxuICAgIHN0YXJ0eHJlZjogW1xuICAgICAgICBDaGFyQ29kZXMucyxcbiAgICAgICAgQ2hhckNvZGVzLnQsXG4gICAgICAgIENoYXJDb2Rlcy5hLFxuICAgICAgICBDaGFyQ29kZXMucixcbiAgICAgICAgQ2hhckNvZGVzLnQsXG4gICAgICAgIENoYXJDb2Rlcy54LFxuICAgICAgICBDaGFyQ29kZXMucixcbiAgICAgICAgQ2hhckNvZGVzLmUsXG4gICAgICAgIENoYXJDb2Rlcy5mLFxuICAgIF0sXG4gICAgdHJ1ZTogW0NoYXJDb2Rlcy50LCBDaGFyQ29kZXMuciwgQ2hhckNvZGVzLnUsIENoYXJDb2Rlcy5lXSxcbiAgICBmYWxzZTogW0NoYXJDb2Rlcy5mLCBDaGFyQ29kZXMuYSwgQ2hhckNvZGVzLmwsIENoYXJDb2Rlcy5zLCBDaGFyQ29kZXMuZV0sXG4gICAgbnVsbDogW0NoYXJDb2Rlcy5uLCBDaGFyQ29kZXMudSwgQ2hhckNvZGVzLmwsIENoYXJDb2Rlcy5sXSxcbiAgICBzdHJlYW06IHN0cmVhbSxcbiAgICBzdHJlYW1FT0YxOiBfX3NwcmVhZEFycmF5cyhzdHJlYW0sIFtTcGFjZSwgQ2FycmlhZ2VSZXR1cm4sIE5ld2xpbmVdKSxcbiAgICBzdHJlYW1FT0YyOiBfX3NwcmVhZEFycmF5cyhzdHJlYW0sIFtDYXJyaWFnZVJldHVybiwgTmV3bGluZV0pLFxuICAgIHN0cmVhbUVPRjM6IF9fc3ByZWFkQXJyYXlzKHN0cmVhbSwgW0NhcnJpYWdlUmV0dXJuXSksXG4gICAgc3RyZWFtRU9GNDogX19zcHJlYWRBcnJheXMoc3RyZWFtLCBbTmV3bGluZV0pLFxuICAgIGVuZHN0cmVhbTogZW5kc3RyZWFtLFxuICAgIEVPRjFlbmRzdHJlYW06IF9fc3ByZWFkQXJyYXlzKFtDYXJyaWFnZVJldHVybiwgTmV3bGluZV0sIGVuZHN0cmVhbSksXG4gICAgRU9GMmVuZHN0cmVhbTogX19zcHJlYWRBcnJheXMoW0NhcnJpYWdlUmV0dXJuXSwgZW5kc3RyZWFtKSxcbiAgICBFT0YzZW5kc3RyZWFtOiBfX3NwcmVhZEFycmF5cyhbTmV3bGluZV0sIGVuZHN0cmVhbSksXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5d29yZHMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBQREZPYmplY3RQYXJzaW5nRXJyb3IsIFBERlN0cmVhbVBhcnNpbmdFcnJvciwgVW5iYWxhbmNlZFBhcmVudGhlc2lzRXJyb3IsIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IFBERkFycmF5IGZyb20gXCIuLi9vYmplY3RzL1BERkFycmF5XCI7XG5pbXBvcnQgUERGQm9vbCBmcm9tIFwiLi4vb2JqZWN0cy9QREZCb29sXCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGSGV4U3RyaW5nIGZyb20gXCIuLi9vYmplY3RzL1BERkhleFN0cmluZ1wiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bGwgZnJvbSBcIi4uL29iamVjdHMvUERGTnVsbFwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZSYXdTdHJlYW0gZnJvbSBcIi4uL29iamVjdHMvUERGUmF3U3RyZWFtXCI7XG5pbXBvcnQgUERGUmVmIGZyb20gXCIuLi9vYmplY3RzL1BERlJlZlwiO1xuaW1wb3J0IFBERlN0cmluZyBmcm9tIFwiLi4vb2JqZWN0cy9QREZTdHJpbmdcIjtcbmltcG9ydCBCYXNlUGFyc2VyIGZyb20gXCIuL0Jhc2VQYXJzZXJcIjtcbmltcG9ydCBCeXRlU3RyZWFtIGZyb20gXCIuL0J5dGVTdHJlYW1cIjtcbmltcG9ydCBQREZDYXRhbG9nIGZyb20gXCIuLi9zdHJ1Y3R1cmVzL1BERkNhdGFsb2dcIjtcbmltcG9ydCBQREZQYWdlTGVhZiBmcm9tIFwiLi4vc3RydWN0dXJlcy9QREZQYWdlTGVhZlwiO1xuaW1wb3J0IFBERlBhZ2VUcmVlIGZyb20gXCIuLi9zdHJ1Y3R1cmVzL1BERlBhZ2VUcmVlXCI7XG5pbXBvcnQgQ2hhckNvZGVzIGZyb20gXCIuLi9zeW50YXgvQ2hhckNvZGVzXCI7XG5pbXBvcnQgeyBJc0RlbGltaXRlciB9IGZyb20gXCIuLi9zeW50YXgvRGVsaW1pdGVyc1wiO1xuaW1wb3J0IHsgS2V5d29yZHMgfSBmcm9tIFwiLi4vc3ludGF4L0tleXdvcmRzXCI7XG5pbXBvcnQgeyBJc0RpZ2l0LCBJc051bWVyaWMgfSBmcm9tIFwiLi4vc3ludGF4L051bWVyaWNcIjtcbmltcG9ydCB7IElzV2hpdGVzcGFjZSB9IGZyb20gXCIuLi9zeW50YXgvV2hpdGVzcGFjZVwiO1xuaW1wb3J0IHsgY2hhckZyb21Db2RlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG4vLyBUT0RPOiBUaHJvdyBlcnJvciBpZiBlb2YgaXMgcmVhY2hlZCBiZWZvcmUgZmluaXNoaW5nIG9iamVjdCBwYXJzZS4uLlxudmFyIFBERk9iamVjdFBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGT2JqZWN0UGFyc2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERk9iamVjdFBhcnNlcihieXRlU3RyZWFtLCBjb250ZXh0LCBjYXBOdW1iZXJzKSB7XG4gICAgICAgIGlmIChjYXBOdW1iZXJzID09PSB2b2lkIDApIHsgY2FwTnVtYmVycyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGJ5dGVTdHJlYW0sIGNhcE51bWJlcnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8vIFRPRE86IElzIGl0IHBvc3NpYmxlIHRvIHJlZHVjZSBkdXBsaWNhdGUgcGFyc2luZyBmb3IgcmVmIGxvb2thaGVhZHM/XG4gICAgUERGT2JqZWN0UGFyc2VyLnByb3RvdHlwZS5wYXJzZU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy50cnVlKSlcbiAgICAgICAgICAgIHJldHVybiBQREZCb29sLlRydWU7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5mYWxzZSkpXG4gICAgICAgICAgICByZXR1cm4gUERGQm9vbC5GYWxzZTtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLm51bGwpKVxuICAgICAgICAgICAgcmV0dXJuIFBERk51bGw7XG4gICAgICAgIHZhciBieXRlID0gdGhpcy5ieXRlcy5wZWVrKCk7XG4gICAgICAgIGlmIChieXRlID09PSBDaGFyQ29kZXMuTGVzc1RoYW4gJiZcbiAgICAgICAgICAgIHRoaXMuYnl0ZXMucGVla0FoZWFkKDEpID09PSBDaGFyQ29kZXMuTGVzc1RoYW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGljdE9yU3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5MZXNzVGhhbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSGV4U3RyaW5nKCk7XG4gICAgICAgIGlmIChieXRlID09PSBDaGFyQ29kZXMuTGVmdFBhcmVuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTdHJpbmcoKTtcbiAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5Gb3J3YXJkU2xhc2gpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5MZWZ0U3F1YXJlQnJhY2tldClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyYXkoKTtcbiAgICAgICAgaWYgKElzTnVtZXJpY1tieXRlXSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlTnVtYmVyT3JSZWYoKTtcbiAgICAgICAgdGhyb3cgbmV3IFBERk9iamVjdFBhcnNpbmdFcnJvcih0aGlzLmJ5dGVzLnBvc2l0aW9uKCksIGJ5dGUpO1xuICAgIH07XG4gICAgUERGT2JqZWN0UGFyc2VyLnByb3RvdHlwZS5wYXJzZU51bWJlck9yUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmlyc3ROdW0gPSB0aGlzLnBhcnNlUmF3TnVtYmVyKCk7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB2YXIgbG9va2FoZWFkU3RhcnQgPSB0aGlzLmJ5dGVzLm9mZnNldCgpO1xuICAgICAgICBpZiAoSXNEaWdpdFt0aGlzLmJ5dGVzLnBlZWsoKV0pIHtcbiAgICAgICAgICAgIHZhciBzZWNvbmROdW0gPSB0aGlzLnBhcnNlUmF3TnVtYmVyKCk7XG4gICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVzLnBlZWsoKSA9PT0gQ2hhckNvZGVzLlIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ5dGVzLmFzc2VydE5leHQoQ2hhckNvZGVzLlIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQREZSZWYub2YoZmlyc3ROdW0sIHNlY29uZE51bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ieXRlcy5tb3ZlVG8obG9va2FoZWFkU3RhcnQpO1xuICAgICAgICByZXR1cm4gUERGTnVtYmVyLm9mKGZpcnN0TnVtKTtcbiAgICB9O1xuICAgIC8vIFRPRE86IE1heWJlIHVwZGF0ZSBQREZIZXhTdHJpbmcub2YoKSBsb2dpYyB0byByZW1vdmUgd2hpdGVzcGFjZSBhbmQgdmFsaWRhdGUgaW5wdXQ/XG4gICAgUERGT2JqZWN0UGFyc2VyLnByb3RvdHlwZS5wYXJzZUhleFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgIHRoaXMuYnl0ZXMuYXNzZXJ0TmV4dChDaGFyQ29kZXMuTGVzc1RoYW4pO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpICYmIHRoaXMuYnl0ZXMucGVlaygpICE9PSBDaGFyQ29kZXMuR3JlYXRlclRoYW4pIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNoYXJGcm9tQ29kZSh0aGlzLmJ5dGVzLm5leHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ieXRlcy5hc3NlcnROZXh0KENoYXJDb2Rlcy5HcmVhdGVyVGhhbik7XG4gICAgICAgIHJldHVybiBQREZIZXhTdHJpbmcub2YodmFsdWUpO1xuICAgIH07XG4gICAgUERGT2JqZWN0UGFyc2VyLnByb3RvdHlwZS5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5lc3RpbmdMdmwgPSAwO1xuICAgICAgICB2YXIgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB2YWx1ZSA9ICcnO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICAgICAgdmFsdWUgKz0gY2hhckZyb21Db2RlKGJ5dGUpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVuZXNjYXBlZCBwYXJlbnRoZXNpc1xuICAgICAgICAgICAgaWYgKCFpc0VzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLkxlZnRQYXJlbilcbiAgICAgICAgICAgICAgICAgICAgbmVzdGluZ0x2bCArPSAxO1xuICAgICAgICAgICAgICAgIGlmIChieXRlID09PSBDaGFyQ29kZXMuUmlnaHRQYXJlbilcbiAgICAgICAgICAgICAgICAgICAgbmVzdGluZ0x2bCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVHJhY2sgd2hldGhlciBjdXJyZW50IGNoYXJhY3RlciBpcyBiZWluZyBlc2NhcGVkIG9yIG5vdFxuICAgICAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5CYWNrU2xhc2gpIHtcbiAgICAgICAgICAgICAgICBpc0VzY2FwZWQgPSAhaXNFc2NhcGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNFc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPbmNlIChpZikgdGhlIHVuZXNjYXBlZCBwYXJlbnRoZXNpcyBiYWxhbmNlIG91dCwgcmV0dXJuIHRoZWlyIGNvbnRlbnRzXG4gICAgICAgICAgICBpZiAobmVzdGluZ0x2bCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgb3V0ZXIgcGFyZW5zIHNvIHRoZXkgYXJlbid0IHBhcnQgb2YgdGhlIGNvbnRlbnRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBERlN0cmluZy5vZih2YWx1ZS5zdWJzdHJpbmcoMSwgdmFsdWUubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVbmJhbGFuY2VkUGFyZW50aGVzaXNFcnJvcih0aGlzLmJ5dGVzLnBvc2l0aW9uKCkpO1xuICAgIH07XG4gICAgLy8gVE9ETzogQ29tcGFyZSBwZXJmb3JtYW5jZSBvZiBzdHJpbmcgY29uY2F0ZW5hdGlvbiB0byBjaGFyRnJvbUNvZGUoLi4uYnl0ZXMpXG4gICAgLy8gVE9ETzogTWF5YmUgcHJlYWxsb2NhdGUgc21hbGwgVWludDhBcnJheSBpZiBjYW4gdXNlIGNoYXJGcm9tQ29kZT9cbiAgICBQREZPYmplY3RQYXJzZXIucHJvdG90eXBlLnBhcnNlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ieXRlcy5hc3NlcnROZXh0KENoYXJDb2Rlcy5Gb3J3YXJkU2xhc2gpO1xuICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRoaXMuYnl0ZXMucGVlaygpO1xuICAgICAgICAgICAgaWYgKElzV2hpdGVzcGFjZVtieXRlXSB8fCBJc0RlbGltaXRlcltieXRlXSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIG5hbWUgKz0gY2hhckZyb21Db2RlKGJ5dGUpO1xuICAgICAgICAgICAgdGhpcy5ieXRlcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBERk5hbWUub2YobmFtZSk7XG4gICAgfTtcbiAgICBQREZPYmplY3RQYXJzZXIucHJvdG90eXBlLnBhcnNlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnl0ZXMuYXNzZXJ0TmV4dChDaGFyQ29kZXMuTGVmdFNxdWFyZUJyYWNrZXQpO1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgdmFyIHBkZkFycmF5ID0gUERGQXJyYXkud2l0aENvbnRleHQodGhpcy5jb250ZXh0KTtcbiAgICAgICAgd2hpbGUgKHRoaXMuYnl0ZXMucGVlaygpICE9PSBDaGFyQ29kZXMuUmlnaHRTcXVhcmVCcmFja2V0KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VPYmplY3QoKTtcbiAgICAgICAgICAgIHBkZkFycmF5LnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ5dGVzLmFzc2VydE5leHQoQ2hhckNvZGVzLlJpZ2h0U3F1YXJlQnJhY2tldCk7XG4gICAgICAgIHJldHVybiBwZGZBcnJheTtcbiAgICB9O1xuICAgIFBERk9iamVjdFBhcnNlci5wcm90b3R5cGUucGFyc2VEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJ5dGVzLmFzc2VydE5leHQoQ2hhckNvZGVzLkxlc3NUaGFuKTtcbiAgICAgICAgdGhpcy5ieXRlcy5hc3NlcnROZXh0KENoYXJDb2Rlcy5MZXNzVGhhbik7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB2YXIgZGljdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSAmJlxuICAgICAgICAgICAgdGhpcy5ieXRlcy5wZWVrKCkgIT09IENoYXJDb2Rlcy5HcmVhdGVyVGhhbiAmJlxuICAgICAgICAgICAgdGhpcy5ieXRlcy5wZWVrQWhlYWQoMSkgIT09IENoYXJDb2Rlcy5HcmVhdGVyVGhhbikge1xuICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlT2JqZWN0KCk7XG4gICAgICAgICAgICBkaWN0LnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB0aGlzLmJ5dGVzLmFzc2VydE5leHQoQ2hhckNvZGVzLkdyZWF0ZXJUaGFuKTtcbiAgICAgICAgdGhpcy5ieXRlcy5hc3NlcnROZXh0KENoYXJDb2Rlcy5HcmVhdGVyVGhhbik7XG4gICAgICAgIHZhciBUeXBlID0gZGljdC5nZXQoUERGTmFtZS5vZignVHlwZScpKTtcbiAgICAgICAgaWYgKFR5cGUgPT09IFBERk5hbWUub2YoJ0NhdGFsb2cnKSkge1xuICAgICAgICAgICAgcmV0dXJuIFBERkNhdGFsb2cuZnJvbU1hcFdpdGhDb250ZXh0KGRpY3QsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVHlwZSA9PT0gUERGTmFtZS5vZignUGFnZXMnKSkge1xuICAgICAgICAgICAgcmV0dXJuIFBERlBhZ2VUcmVlLmZyb21NYXBXaXRoQ29udGV4dChkaWN0LCB0aGlzLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFR5cGUgPT09IFBERk5hbWUub2YoJ1BhZ2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuIFBERlBhZ2VMZWFmLmZyb21NYXBXaXRoQ29udGV4dChkaWN0LCB0aGlzLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFBERkRpY3QuZnJvbU1hcFdpdGhDb250ZXh0KGRpY3QsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERk9iamVjdFBhcnNlci5wcm90b3R5cGUucGFyc2VEaWN0T3JTdHJlYW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydFBvcyA9IHRoaXMuYnl0ZXMucG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGRpY3QgPSB0aGlzLnBhcnNlRGljdCgpO1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5zdHJlYW1FT0YxKSAmJlxuICAgICAgICAgICAgIXRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLnN0cmVhbUVPRjIpICYmXG4gICAgICAgICAgICAhdGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMuc3RyZWFtRU9GMykgJiZcbiAgICAgICAgICAgICF0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5zdHJlYW1FT0Y0KSAmJlxuICAgICAgICAgICAgIXRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLnN0cmVhbSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWN0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuYnl0ZXMub2Zmc2V0KCk7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIHZhciBMZW5ndGggPSBkaWN0LmdldChQREZOYW1lLm9mKCdMZW5ndGgnKSk7XG4gICAgICAgIGlmIChMZW5ndGggaW5zdGFuY2VvZiBQREZOdW1iZXIpIHtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgTGVuZ3RoLmFzTnVtYmVyKCk7XG4gICAgICAgICAgICB0aGlzLmJ5dGVzLm1vdmVUbyhlbmQpO1xuICAgICAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLmVuZHN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ5dGVzLm1vdmVUbyhzdGFydCk7XG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5maW5kRW5kT2ZTdHJlYW1GYWxsYmFjayhzdGFydFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmZpbmRFbmRPZlN0cmVhbUZhbGxiYWNrKHN0YXJ0UG9zKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudHMgPSB0aGlzLmJ5dGVzLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICByZXR1cm4gUERGUmF3U3RyZWFtLm9mKGRpY3QsIGNvbnRlbnRzKTtcbiAgICB9O1xuICAgIFBERk9iamVjdFBhcnNlci5wcm90b3R5cGUuZmluZEVuZE9mU3RyZWFtRmFsbGJhY2sgPSBmdW5jdGlvbiAoc3RhcnRQb3MpIHtcbiAgICAgICAgLy8gTW92ZSB0byBlbmQgb2Ygc3RyZWFtLCB3aGlsZSBoYW5kbGluZyBuZXN0ZWQgc3RyZWFtc1xuICAgICAgICB2YXIgbmVzdGluZ0x2bCA9IDE7XG4gICAgICAgIHZhciBlbmQgPSB0aGlzLmJ5dGVzLm9mZnNldCgpO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpKSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmJ5dGVzLm9mZnNldCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLnN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgICBuZXN0aW5nTHZsICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5FT0YxZW5kc3RyZWFtKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLkVPRjJlbmRzdHJlYW0pIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMuRU9GM2VuZHN0cmVhbSkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5lbmRzdHJlYW0pKSB7XG4gICAgICAgICAgICAgICAgbmVzdGluZ0x2bCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlcy5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVzdGluZ0x2bCA9PT0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAobmVzdGluZ0x2bCAhPT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBQREZTdHJlYW1QYXJzaW5nRXJyb3Ioc3RhcnRQb3MpO1xuICAgICAgICByZXR1cm4gZW5kO1xuICAgIH07XG4gICAgUERGT2JqZWN0UGFyc2VyLmZvckJ5dGVzID0gZnVuY3Rpb24gKGJ5dGVzLCBjb250ZXh0LCBjYXBOdW1iZXJzKSB7IHJldHVybiBuZXcgUERGT2JqZWN0UGFyc2VyKEJ5dGVTdHJlYW0ub2YoYnl0ZXMpLCBjb250ZXh0LCBjYXBOdW1iZXJzKTsgfTtcbiAgICBQREZPYmplY3RQYXJzZXIuZm9yQnl0ZVN0cmVhbSA9IGZ1bmN0aW9uIChieXRlU3RyZWFtLCBjb250ZXh0LCBjYXBOdW1iZXJzKSB7XG4gICAgICAgIGlmIChjYXBOdW1iZXJzID09PSB2b2lkIDApIHsgY2FwTnVtYmVycyA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBuZXcgUERGT2JqZWN0UGFyc2VyKGJ5dGVTdHJlYW0sIGNvbnRleHQsIGNhcE51bWJlcnMpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERk9iamVjdFBhcnNlcjtcbn0oQmFzZVBhcnNlcikpO1xuZXhwb3J0IGRlZmF1bHQgUERGT2JqZWN0UGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT2JqZWN0UGFyc2VyLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUmVwYXJzZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZSZWYgZnJvbSBcIi4uL29iamVjdHMvUERGUmVmXCI7XG5pbXBvcnQgQnl0ZVN0cmVhbSBmcm9tIFwiLi9CeXRlU3RyZWFtXCI7XG5pbXBvcnQgUERGT2JqZWN0UGFyc2VyIGZyb20gXCIuL1BERk9iamVjdFBhcnNlclwiO1xuaW1wb3J0IHsgd2FpdEZvclRpY2sgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBQREZPYmplY3RTdHJlYW1QYXJzZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERk9iamVjdFN0cmVhbVBhcnNlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZPYmplY3RTdHJlYW1QYXJzZXIocmF3U3RyZWFtLCBzaG91bGRXYWl0Rm9yVGljaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBCeXRlU3RyZWFtLmZyb21QREZSYXdTdHJlYW0ocmF3U3RyZWFtKSwgcmF3U3RyZWFtLmRpY3QuY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgdmFyIGRpY3QgPSByYXdTdHJlYW0uZGljdDtcbiAgICAgICAgX3RoaXMuYWxyZWFkeVBhcnNlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zaG91bGRXYWl0Rm9yVGljayA9IHNob3VsZFdhaXRGb3JUaWNrIHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7XG4gICAgICAgIF90aGlzLmZpcnN0T2Zmc2V0ID0gZGljdC5sb29rdXAoUERGTmFtZS5vZignRmlyc3QnKSwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgICAgICBfdGhpcy5vYmplY3RDb3VudCA9IGRpY3QubG9va3VwKFBERk5hbWUub2YoJ04nKSwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERk9iamVjdFN0cmVhbVBhcnNlci5wcm90b3R5cGUucGFyc2VJbnRvQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldHNBbmRPYmplY3ROdW1iZXJzLCBpZHgsIGxlbiwgX2EsIG9iamVjdE51bWJlciwgb2Zmc2V0LCBvYmplY3QsIHJlZjtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFscmVhZHlQYXJzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVwYXJzZUVycm9yKCdQREZPYmplY3RTdHJlYW1QYXJzZXInLCAncGFyc2VJbnRvQ29udGV4dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHJlYWR5UGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldHNBbmRPYmplY3ROdW1iZXJzID0gdGhpcy5wYXJzZU9mZnNldHNBbmRPYmplY3ROdW1iZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSAwLCBsZW4gPSBvZmZzZXRzQW5kT2JqZWN0TnVtYmVycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlkeCA8IGxlbikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBvZmZzZXRzQW5kT2JqZWN0TnVtYmVyc1tpZHhdLCBvYmplY3ROdW1iZXIgPSBfYS5vYmplY3ROdW1iZXIsIG9mZnNldCA9IF9hLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnl0ZXMubW92ZVRvKHRoaXMuZmlyc3RPZmZzZXQgKyBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gUERGUmVmLm9mKG9iamVjdE51bWJlciwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYXNzaWduKHJlZiwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG91bGRXYWl0Rm9yVGljaygpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHdhaXRGb3JUaWNrKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBERk9iamVjdFN0cmVhbVBhcnNlci5wcm90b3R5cGUucGFyc2VPZmZzZXRzQW5kT2JqZWN0TnVtYmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldHNBbmRPYmplY3ROdW1iZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHRoaXMub2JqZWN0Q291bnQ7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICAgICAgdmFyIG9iamVjdE51bWJlciA9IHRoaXMucGFyc2VSYXdJbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMucGFyc2VSYXdJbnQoKTtcbiAgICAgICAgICAgIG9mZnNldHNBbmRPYmplY3ROdW1iZXJzLnB1c2goeyBvYmplY3ROdW1iZXI6IG9iamVjdE51bWJlciwgb2Zmc2V0OiBvZmZzZXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldHNBbmRPYmplY3ROdW1iZXJzO1xuICAgIH07XG4gICAgUERGT2JqZWN0U3RyZWFtUGFyc2VyLmZvclN0cmVhbSA9IGZ1bmN0aW9uIChyYXdTdHJlYW0sIHNob3VsZFdhaXRGb3JUaWNrKSB7IHJldHVybiBuZXcgUERGT2JqZWN0U3RyZWFtUGFyc2VyKHJhd1N0cmVhbSwgc2hvdWxkV2FpdEZvclRpY2spOyB9O1xuICAgIHJldHVybiBQREZPYmplY3RTdHJlYW1QYXJzZXI7XG59KFBERk9iamVjdFBhcnNlcikpO1xuZXhwb3J0IGRlZmF1bHQgUERGT2JqZWN0U3RyZWFtUGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT2JqZWN0U3RyZWFtUGFyc2VyLmpzLm1hcCIsImltcG9ydCB7IFJlcGFyc2VFcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmltcG9ydCBQREZBcnJheSBmcm9tIFwiLi4vb2JqZWN0cy9QREZBcnJheVwiO1xuaW1wb3J0IFBERk5hbWUgZnJvbSBcIi4uL29iamVjdHMvUERGTmFtZVwiO1xuaW1wb3J0IFBERk51bWJlciBmcm9tIFwiLi4vb2JqZWN0cy9QREZOdW1iZXJcIjtcbmltcG9ydCBQREZSZWYgZnJvbSBcIi4uL29iamVjdHMvUERGUmVmXCI7XG5pbXBvcnQgQnl0ZVN0cmVhbSBmcm9tIFwiLi9CeXRlU3RyZWFtXCI7XG52YXIgUERGWFJlZlN0cmVhbVBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZYUmVmU3RyZWFtUGFyc2VyKHJhd1N0cmVhbSkge1xuICAgICAgICB0aGlzLmFscmVhZHlQYXJzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaWN0ID0gcmF3U3RyZWFtLmRpY3Q7XG4gICAgICAgIHRoaXMuYnl0ZXMgPSBCeXRlU3RyZWFtLmZyb21QREZSYXdTdHJlYW0ocmF3U3RyZWFtKTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5kaWN0LmNvbnRleHQ7XG4gICAgICAgIHZhciBTaXplID0gdGhpcy5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdTaXplJyksIFBERk51bWJlcik7XG4gICAgICAgIHZhciBJbmRleCA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignSW5kZXgnKSk7XG4gICAgICAgIGlmIChJbmRleCBpbnN0YW5jZW9mIFBERkFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNlY3Rpb25zID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBJbmRleC5zaXplKCk7IGlkeCA8IGxlbjsgaWR4ICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RPYmplY3ROdW1iZXIgPSBJbmRleC5sb29rdXAoaWR4ICsgMCwgUERGTnVtYmVyKS5hc051bWJlcigpO1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IEluZGV4Lmxvb2t1cChpZHggKyAxLCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzZWN0aW9ucy5wdXNoKHsgZmlyc3RPYmplY3ROdW1iZXI6IGZpcnN0T2JqZWN0TnVtYmVyLCBsZW5ndGg6IGxlbmd0aF8xIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWJzZWN0aW9ucyA9IFt7IGZpcnN0T2JqZWN0TnVtYmVyOiAwLCBsZW5ndGg6IFNpemUuYXNOdW1iZXIoKSB9XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgVyA9IHRoaXMuZGljdC5sb29rdXAoUERGTmFtZS5vZignVycpLCBQREZBcnJheSk7XG4gICAgICAgIHRoaXMuYnl0ZVdpZHRocyA9IFstMSwgLTEsIC0xXTtcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gVy5zaXplKCk7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZVdpZHRoc1tpZHhdID0gVy5sb29rdXAoaWR4LCBQREZOdW1iZXIpLmFzTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgUERGWFJlZlN0cmVhbVBhcnNlci5wcm90b3R5cGUucGFyc2VJbnRvQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxyZWFkeVBhcnNlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlcGFyc2VFcnJvcignUERGWFJlZlN0cmVhbVBhcnNlcicsICdwYXJzZUludG9Db250ZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbHJlYWR5UGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYWlsZXJJbmZvID0ge1xuICAgICAgICAgICAgUm9vdDogdGhpcy5kaWN0LmdldChQREZOYW1lLm9mKCdSb290JykpLFxuICAgICAgICAgICAgRW5jcnlwdDogdGhpcy5kaWN0LmdldChQREZOYW1lLm9mKCdFbmNyeXB0JykpLFxuICAgICAgICAgICAgSW5mbzogdGhpcy5kaWN0LmdldChQREZOYW1lLm9mKCdJbmZvJykpLFxuICAgICAgICAgICAgSUQ6IHRoaXMuZGljdC5nZXQoUERGTmFtZS5vZignSUQnKSksXG4gICAgICAgIH07XG4gICAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5wYXJzZUVudHJpZXMoKTtcbiAgICAgICAgLy8gZm9yIChsZXQgaWR4ID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgLy8gY29uc3QgZW50cnkgPSBlbnRyaWVzW2lkeF07XG4gICAgICAgIC8vIGlmIChlbnRyeS5kZWxldGVkKSB0aGlzLmNvbnRleHQuZGVsZXRlKGVudHJ5LnJlZik7XG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfTtcbiAgICBQREZYUmVmU3RyZWFtUGFyc2VyLnByb3RvdHlwZS5wYXJzZUVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICAgIHZhciBfYSA9IHRoaXMuYnl0ZVdpZHRocywgdHlwZUZpZWxkV2lkdGggPSBfYVswXSwgb2Zmc2V0RmllbGRXaWR0aCA9IF9hWzFdLCBnZW5GaWVsZFdpZHRoID0gX2FbMl07XG4gICAgICAgIGZvciAodmFyIHN1YnNlY3Rpb25JZHggPSAwLCBzdWJzZWN0aW9uTGVuID0gdGhpcy5zdWJzZWN0aW9ucy5sZW5ndGg7IHN1YnNlY3Rpb25JZHggPCBzdWJzZWN0aW9uTGVuOyBzdWJzZWN0aW9uSWR4KyspIHtcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMuc3Vic2VjdGlvbnNbc3Vic2VjdGlvbklkeF0sIGZpcnN0T2JqZWN0TnVtYmVyID0gX2IuZmlyc3RPYmplY3ROdW1iZXIsIGxlbmd0aF8yID0gX2IubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgb2JqSWR4ID0gMDsgb2JqSWR4IDwgbGVuZ3RoXzI7IG9iaklkeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHR5cGVGaWVsZFdpZHRoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAodHlwZSA8PCA4KSB8IHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBvZmZzZXRGaWVsZFdpZHRoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IChvZmZzZXQgPDwgOCkgfCB0aGlzLmJ5dGVzLm5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGdlbmVyYXRpb25OdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGdlbkZpZWxkV2lkdGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbk51bWJlciA9IChnZW5lcmF0aW9uTnVtYmVyIDw8IDgpIHwgdGhpcy5ieXRlcy5uZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIGB0eXBlYCBmaWVsZCBpcyBhYnNlbnQsIGl0IGRlZmF1bHRzIHRvIDFcbiAgICAgICAgICAgICAgICBpZiAodHlwZUZpZWxkV2lkdGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAxO1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3ROdW1iZXIgPSBmaXJzdE9iamVjdE51bWJlciArIG9iaklkeDtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogUERGUmVmLm9mKG9iamVjdE51bWJlciwgZ2VuZXJhdGlvbk51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVkOiB0eXBlID09PSAwLFxuICAgICAgICAgICAgICAgICAgICBpbk9iamVjdFN0cmVhbTogdHlwZSA9PT0gMixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfTtcbiAgICBQREZYUmVmU3RyZWFtUGFyc2VyLmZvclN0cmVhbSA9IGZ1bmN0aW9uIChyYXdTdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZYUmVmU3RyZWFtUGFyc2VyKHJhd1N0cmVhbSk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGWFJlZlN0cmVhbVBhcnNlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZYUmVmU3RyZWFtUGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGWFJlZlN0cmVhbVBhcnNlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBQREZDcm9zc1JlZlNlY3Rpb24gZnJvbSBcIi4uL2RvY3VtZW50L1BERkNyb3NzUmVmU2VjdGlvblwiO1xuaW1wb3J0IFBERkhlYWRlciBmcm9tIFwiLi4vZG9jdW1lbnQvUERGSGVhZGVyXCI7XG5pbXBvcnQgUERGVHJhaWxlciBmcm9tIFwiLi4vZG9jdW1lbnQvUERGVHJhaWxlclwiO1xuaW1wb3J0IHsgTWlzc2luZ0tleXdvcmRFcnJvciwgTWlzc2luZ1BERkhlYWRlckVycm9yLCBQREZJbnZhbGlkT2JqZWN0UGFyc2luZ0Vycm9yLCBSZXBhcnNlRXJyb3IsIFN0YWxsZWRQYXJzZXJFcnJvciwgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgUERGRGljdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZEaWN0XCI7XG5pbXBvcnQgUERGSW52YWxpZE9iamVjdCBmcm9tIFwiLi4vb2JqZWN0cy9QREZJbnZhbGlkT2JqZWN0XCI7XG5pbXBvcnQgUERGTmFtZSBmcm9tIFwiLi4vb2JqZWN0cy9QREZOYW1lXCI7XG5pbXBvcnQgUERGUmF3U3RyZWFtIGZyb20gXCIuLi9vYmplY3RzL1BERlJhd1N0cmVhbVwiO1xuaW1wb3J0IFBERlJlZiBmcm9tIFwiLi4vb2JqZWN0cy9QREZSZWZcIjtcbmltcG9ydCBCeXRlU3RyZWFtIGZyb20gXCIuL0J5dGVTdHJlYW1cIjtcbmltcG9ydCBQREZPYmplY3RQYXJzZXIgZnJvbSBcIi4vUERGT2JqZWN0UGFyc2VyXCI7XG5pbXBvcnQgUERGT2JqZWN0U3RyZWFtUGFyc2VyIGZyb20gXCIuL1BERk9iamVjdFN0cmVhbVBhcnNlclwiO1xuaW1wb3J0IFBERlhSZWZTdHJlYW1QYXJzZXIgZnJvbSBcIi4vUERGWFJlZlN0cmVhbVBhcnNlclwiO1xuaW1wb3J0IFBERkNvbnRleHQgZnJvbSBcIi4uL1BERkNvbnRleHRcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IEtleXdvcmRzIH0gZnJvbSBcIi4uL3N5bnRheC9LZXl3b3Jkc1wiO1xuaW1wb3J0IHsgSXNEaWdpdCB9IGZyb20gXCIuLi9zeW50YXgvTnVtZXJpY1wiO1xuaW1wb3J0IHsgd2FpdEZvclRpY2sgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbnZhciBQREZQYXJzZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERlBhcnNlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZQYXJzZXIocGRmQnl0ZXMsIG9iamVjdHNQZXJUaWNrLCB0aHJvd09uSW52YWxpZE9iamVjdCwgY2FwTnVtYmVycykge1xuICAgICAgICBpZiAob2JqZWN0c1BlclRpY2sgPT09IHZvaWQgMCkgeyBvYmplY3RzUGVyVGljayA9IEluZmluaXR5OyB9XG4gICAgICAgIGlmICh0aHJvd09uSW52YWxpZE9iamVjdCA9PT0gdm9pZCAwKSB7IHRocm93T25JbnZhbGlkT2JqZWN0ID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGNhcE51bWJlcnMgPT09IHZvaWQgMCkgeyBjYXBOdW1iZXJzID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgQnl0ZVN0cmVhbS5vZihwZGZCeXRlcyksIFBERkNvbnRleHQuY3JlYXRlKCksIGNhcE51bWJlcnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFscmVhZHlQYXJzZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMucGFyc2VkT2JqZWN0cyA9IDA7XG4gICAgICAgIF90aGlzLnNob3VsZFdhaXRGb3JUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucGFyc2VkT2JqZWN0cyArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnBhcnNlZE9iamVjdHMgJSBfdGhpcy5vYmplY3RzUGVyVGljayA9PT0gMDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub2JqZWN0c1BlclRpY2sgPSBvYmplY3RzUGVyVGljaztcbiAgICAgICAgX3RoaXMudGhyb3dPbkludmFsaWRPYmplY3QgPSB0aHJvd09uSW52YWxpZE9iamVjdDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZQYXJzZXIucHJvdG90eXBlLnBhcnNlRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcmV2T2Zmc2V0LCBvZmZzZXQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbHJlYWR5UGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcGFyc2VFcnJvcignUERGUGFyc2VyJywgJ3BhcnNlRG9jdW1lbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxyZWFkeVBhcnNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaGVhZGVyID0gdGhpcy5wYXJzZUhlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLmJ5dGVzLmRvbmUoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBhcnNlRG9jdW1lbnRTZWN0aW9uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmJ5dGVzLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gcHJldk9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTdGFsbGVkUGFyc2VyRXJyb3IodGhpcy5ieXRlcy5wb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXliZVJlY292ZXJSb290KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0Lmxvb2t1cChQREZSZWYub2YoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdSZW1vdmluZyBwYXJzZWQgb2JqZWN0OiAwIDAgUicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kZWxldGUoUERGUmVmLm9mKDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLmNvbnRleHRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUubWF5YmVSZWNvdmVyUm9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzVmFsaWRDYXRhbG9nID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFBERkRpY3QgJiZcbiAgICAgICAgICAgICAgICBvYmoubG9va3VwKFBERk5hbWUub2YoJ1R5cGUnKSkgPT09IFBERk5hbWUub2YoJ0NhdGFsb2cnKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhdGFsb2cgPSB0aGlzLmNvbnRleHQubG9va3VwKHRoaXMuY29udGV4dC50cmFpbGVySW5mby5Sb290KTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkQ2F0YWxvZyhjYXRhbG9nKSkge1xuICAgICAgICAgICAgdmFyIGluZGlyZWN0T2JqZWN0cyA9IHRoaXMuY29udGV4dC5lbnVtZXJhdGVJbmRpcmVjdE9iamVjdHMoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGluZGlyZWN0T2JqZWN0cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBpbmRpcmVjdE9iamVjdHNbaWR4XSwgcmVmID0gX2FbMF0sIG9iamVjdCA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkQ2F0YWxvZyhvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC50cmFpbGVySW5mby5Sb290ID0gcmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgUERGUGFyc2VyLnByb3RvdHlwZS5wYXJzZUhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLmhlYWRlcikpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFqb3IgPSB0aGlzLnBhcnNlUmF3SW50KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlcy5hc3NlcnROZXh0KENoYXJDb2Rlcy5QZXJpb2QpO1xuICAgICAgICAgICAgICAgIHZhciBtaW5vciA9IHRoaXMucGFyc2VSYXdJbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyID0gUERGSGVhZGVyLmZvclZlcnNpb24obWFqb3IsIG1pbm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBCaW5hcnlIZWFkZXJDb21tZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlYWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBNaXNzaW5nUERGSGVhZGVyRXJyb3IodGhpcy5ieXRlcy5wb3NpdGlvbigpKTtcbiAgICB9O1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUucGFyc2VJbmRpcmVjdE9iamVjdEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHZhciBvYmplY3ROdW1iZXIgPSB0aGlzLnBhcnNlUmF3SW50KCk7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB2YXIgZ2VuZXJhdGlvbk51bWJlciA9IHRoaXMucGFyc2VSYXdJbnQoKTtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMub2JqKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdLZXl3b3JkRXJyb3IodGhpcy5ieXRlcy5wb3NpdGlvbigpLCBLZXl3b3Jkcy5vYmopO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQREZSZWYub2Yob2JqZWN0TnVtYmVyLCBnZW5lcmF0aW9uTnVtYmVyKTtcbiAgICB9O1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUubWF0Y2hJbmRpcmVjdE9iamVjdEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluaXRpYWxPZmZzZXQgPSB0aGlzLmJ5dGVzLm9mZnNldCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUluZGlyZWN0T2JqZWN0SGVhZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5ieXRlcy5tb3ZlVG8oaW5pdGlhbE9mZnNldCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUucGFyc2VJbmRpcmVjdE9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlZiwgb2JqZWN0O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gdGhpcy5wYXJzZUluZGlyZWN0T2JqZWN0SGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCF0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5lbmRvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyBuZXcgTWlzc2luZ0tleXdvcmRFcnJvcih0aGlzLmJ5dGVzLnBvc2l0aW9uKCksIEtleXdvcmRzLmVuZG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBMb2cgYSB3YXJuaW5nIGlmIHRoaXMgZmFpbHMuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLmVuZG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBQREZSYXdTdHJlYW0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGljdC5sb29rdXAoUERGTmFtZS5vZignVHlwZScpKSA9PT0gUERGTmFtZS5vZignT2JqU3RtJykpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFBERk9iamVjdFN0cmVhbVBhcnNlci5mb3JTdHJlYW0ob2JqZWN0LCB0aGlzLnNob3VsZFdhaXRGb3JUaWNrKS5wYXJzZUludG9Db250ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBERlJhd1N0cmVhbSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5kaWN0Lmxvb2t1cChQREZOYW1lLm9mKCdUeXBlJykpID09PSBQREZOYW1lLm9mKCdYUmVmJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQREZYUmVmU3RyZWFtUGFyc2VyLmZvclN0cmVhbShvYmplY3QpLnBhcnNlSW50b0NvbnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hc3NpZ24ocmVmLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCByZWZdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIFRPRE86IEltcHJvdmUgYW5kIGNsZWFuIHRoaXMgdXBcbiAgICBQREZQYXJzZXIucHJvdG90eXBlLnRyeVRvUGFyc2VJbnZhbGlkSW5kaXJlY3RPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydFBvcyA9IHRoaXMuYnl0ZXMucG9zaXRpb24oKTtcbiAgICAgICAgdmFyIG1zZyA9IFwiVHJ5aW5nIHRvIHBhcnNlIGludmFsaWQgb2JqZWN0OiBcIiArIEpTT04uc3RyaW5naWZ5KHN0YXJ0UG9zKSArIFwiKVwiO1xuICAgICAgICBpZiAodGhpcy50aHJvd09uSW52YWxpZE9iamVjdClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMucGFyc2VJbmRpcmVjdE9iamVjdEhlYWRlcigpO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIG9iamVjdCByZWY6IFwiICsgcmVmKTtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuYnl0ZXMub2Zmc2V0KCk7XG4gICAgICAgIHZhciBmYWlsZWQgPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIXRoaXMuYnl0ZXMuZG9uZSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMuZW5kb2JqKSkge1xuICAgICAgICAgICAgICAgIGZhaWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmYWlsZWQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB0aGlzLmJ5dGVzLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmFpbGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFBERkludmFsaWRPYmplY3RQYXJzaW5nRXJyb3Ioc3RhcnRQb3MpO1xuICAgICAgICB2YXIgZW5kID0gdGhpcy5ieXRlcy5vZmZzZXQoKSAtIEtleXdvcmRzLmVuZG9iai5sZW5ndGg7XG4gICAgICAgIHZhciBvYmplY3QgPSBQREZJbnZhbGlkT2JqZWN0Lm9mKHRoaXMuYnl0ZXMuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgICB0aGlzLmNvbnRleHQuYXNzaWduKHJlZiwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlZjtcbiAgICB9O1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUucGFyc2VJbmRpcmVjdE9iamVjdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsT2Zmc2V0LCBlXzE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXRoaXMuYnl0ZXMuZG9uZSgpICYmIElzRGlnaXRbdGhpcy5ieXRlcy5wZWVrKCldKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsT2Zmc2V0ID0gdGhpcy5ieXRlcy5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsyLCA0LCAsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGFyc2VJbmRpcmVjdE9iamVjdCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEFkZCB0cmFjaW5nL2xvZ2dpbmcgbWVjaGFuaXNtIHRvIHRyYWNrIHdoZW4gdGhpcyBoYXBwZW5zIVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ieXRlcy5tb3ZlVG8oaW5pdGlhbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeVRvUGFyc2VJbnZhbGlkSW5kaXJlY3RPYmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IENhbiB0aGlzIGJlIGRvbmUgb25seSB3aGVuIG5lZWRlZCwgdG8gYXZvaWQgaGFybWluZyBwZXJmb3JtYW5jZT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcEppYmJlcmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3VsZFdhaXRGb3JUaWNrKCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgd2FpdEZvclRpY2soKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUERGUGFyc2VyLnByb3RvdHlwZS5tYXliZVBhcnNlQ3Jvc3NSZWZTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy54cmVmKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHZhciBvYmplY3ROdW1iZXIgPSAtMTtcbiAgICAgICAgdmFyIHhyZWYgPSBQREZDcm9zc1JlZlNlY3Rpb24uY3JlYXRlRW1wdHkoKTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmJ5dGVzLmRvbmUoKSAmJiBJc0RpZ2l0W3RoaXMuYnl0ZXMucGVlaygpXSkge1xuICAgICAgICAgICAgdmFyIGZpcnN0SW50ID0gdGhpcy5wYXJzZVJhd0ludCgpO1xuICAgICAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgICAgICB2YXIgc2Vjb25kSW50ID0gdGhpcy5wYXJzZVJhd0ludCgpO1xuICAgICAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRoaXMuYnl0ZXMucGVlaygpO1xuICAgICAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5uIHx8IGJ5dGUgPT09IENoYXJDb2Rlcy5mKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IFBERlJlZi5vZihvYmplY3ROdW1iZXIsIHNlY29uZEludCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnl0ZXMubmV4dCgpID09PSBDaGFyQ29kZXMubikge1xuICAgICAgICAgICAgICAgICAgICB4cmVmLmFkZEVudHJ5KHJlZiwgZmlyc3RJbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5jb250ZXh0LmRlbGV0ZShyZWYpO1xuICAgICAgICAgICAgICAgICAgICB4cmVmLmFkZERlbGV0ZWRFbnRyeShyZWYsIGZpcnN0SW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqZWN0TnVtYmVyICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmplY3ROdW1iZXIgPSBmaXJzdEludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4cmVmO1xuICAgIH07XG4gICAgUERGUGFyc2VyLnByb3RvdHlwZS5tYXliZVBhcnNlVHJhaWxlckRpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICBpZiAoIXRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLnRyYWlsZXIpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgdmFyIGRpY3QgPSB0aGlzLnBhcnNlRGljdCgpO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY29udGV4dC50cmFpbGVySW5mbyA9IHtcbiAgICAgICAgICAgIFJvb3Q6IGRpY3QuZ2V0KFBERk5hbWUub2YoJ1Jvb3QnKSkgfHwgY29udGV4dC50cmFpbGVySW5mby5Sb290LFxuICAgICAgICAgICAgRW5jcnlwdDogZGljdC5nZXQoUERGTmFtZS5vZignRW5jcnlwdCcpKSB8fCBjb250ZXh0LnRyYWlsZXJJbmZvLkVuY3J5cHQsXG4gICAgICAgICAgICBJbmZvOiBkaWN0LmdldChQREZOYW1lLm9mKCdJbmZvJykpIHx8IGNvbnRleHQudHJhaWxlckluZm8uSW5mbyxcbiAgICAgICAgICAgIElEOiBkaWN0LmdldChQREZOYW1lLm9mKCdJRCcpKSB8fCBjb250ZXh0LnRyYWlsZXJJbmZvLklELFxuICAgICAgICB9O1xuICAgIH07XG4gICAgUERGUGFyc2VyLnByb3RvdHlwZS5tYXliZVBhcnNlVHJhaWxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMuc3RhcnR4cmVmKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnBhcnNlUmF3SW50KCk7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgdGhpcy5tYXRjaEtleXdvcmQoS2V5d29yZHMuZW9mKTtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHRoaXMubWF0Y2hLZXl3b3JkKEtleXdvcmRzLmVvZik7XG4gICAgICAgIHRoaXMuc2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cygpO1xuICAgICAgICByZXR1cm4gUERGVHJhaWxlci5mb3JMYXN0Q3Jvc3NSZWZTZWN0aW9uT2Zmc2V0KG9mZnNldCk7XG4gICAgfTtcbiAgICBQREZQYXJzZXIucHJvdG90eXBlLnBhcnNlRG9jdW1lbnRTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGFyc2VJbmRpcmVjdE9iamVjdHMoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF5YmVQYXJzZUNyb3NzUmVmU2VjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXliZVBhcnNlVHJhaWxlckRpY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF5YmVQYXJzZVRyYWlsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IENhbiB0aGlzIGJlIGRvbmUgb25seSB3aGVuIG5lZWRlZCwgdG8gYXZvaWQgaGFybWluZyBwZXJmb3JtYW5jZT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcEppYmJlcmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgb3BlcmF0aW9uIGlzIG5vdCBuZWNlc3NhcnkgZm9yIHZhbGlkIFBERiBmaWxlcy4gQnV0IHNvbWUgaW52YWxpZCBQREZzXG4gICAgICogY29udGFpbiBqaWJiZXJpc2ggaW4gYmV0d2VlbiBpbmRpcmVjdCBvYmplY3RzLiBUaGlzIG1ldGhvZCBpcyBkZXNpZ25lZCB0b1xuICAgICAqIHNraXAgcGFzdCB0aGF0IGppYmJlcmlzaCwgc2hvdWxkIGl0IGV4aXN0LCB1bnRpbCBpdCByZWFjaGVzIHRoZSBuZXh0XG4gICAgICogaW5kaXJlY3Qgb2JqZWN0IGhlYWRlciwgYW4geHJlZiB0YWJsZSBzZWN0aW9uLCBvciB0aGUgZmlsZSB0cmFpbGVyLlxuICAgICAqL1xuICAgIFBERlBhcnNlci5wcm90b3R5cGUuc2tpcEppYmJlcmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIHdoaWxlICghdGhpcy5ieXRlcy5kb25lKCkpIHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsT2Zmc2V0ID0gdGhpcy5ieXRlcy5vZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBieXRlID0gdGhpcy5ieXRlcy5wZWVrKCk7XG4gICAgICAgICAgICB2YXIgaXNBbHBoYU51bWVyaWMgPSBieXRlID49IENoYXJDb2Rlcy5TcGFjZSAmJiBieXRlIDw9IENoYXJDb2Rlcy5UaWxkZTtcbiAgICAgICAgICAgIGlmIChpc0FscGhhTnVtZXJpYykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy54cmVmKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy50cmFpbGVyKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoS2V5d29yZChLZXl3b3Jkcy5zdGFydHhyZWYpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hJbmRpcmVjdE9iamVjdEhlYWRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnl0ZXMubW92ZVRvKGluaXRpYWxPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJ5dGVzLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2tpcHMgdGhlIGJpbmFyeSBjb21tZW50IGZvbGxvd2luZyBhIFBERiBoZWFkZXIuIFRoZSBzcGVjaWZpY2F0aW9uXG4gICAgICogZGVmaW5lcyB0aGlzIGJpbmFyeSBjb21tZW50IChzZWN0aW9uIDcuNS4yIEZpbGUgSGVhZGVyKSBhcyBhIHNlcXVlbmNlIG9mIDRcbiAgICAgKiBvciBtb3JlIGJ5dGVzIHRoYXQgYXJlIDEyOCBvciBncmVhdGVyLCBhbmQgd2hpY2ggYXJlIHByZWNlZGVkIGJ5IGEgXCIlXCIuXG4gICAgICpcbiAgICAgKiBUaGlzIHdvdWxkIGltcGx5IHRoYXQgdG8gc3RyaXAgb3V0IHRoaXMgYmluYXJ5IGNvbW1lbnQsIHdlIGNvdWxkIGNoZWNrIGZvclxuICAgICAqIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgc3RhcnRpbmcgd2l0aCBcIiVcIiwgYW5kIHJlbW92ZSBhbGwgc3Vic2VxdWVudCBieXRlcyB0aGF0XG4gICAgICogYXJlIDEyOCBvciBncmVhdGVyLiBUaGlzIHdvcmtzIGZvciBtYW55IGRvY3VtZW50cyB0aGF0IHByb3Blcmx5IGNvbXBseSB3aXRoXG4gICAgICogdGhlIHNwZWMuIEJ1dCBpbiB0aGUgd2lsZCwgdGhlcmUgYXJlIFBERnMgdGhhdCBvbWl0IHRoZSBsZWFkaW5nIFwiJVwiLCBhbmRcbiAgICAgKiBpbmNsdWRlIGJ5dGVzIHRoYXQgYXJlIGxlc3MgdGhhbiAxMjggKGUuZy4gMCBvciAxKS4gU28gaW4gb3JkZXIgdG8gcGFyc2VcbiAgICAgKiB0aGVzZSBoZWFkZXJzIGNvcnJlY3RseSwgd2UganVzdCB0aHJvdyBvdXQgYWxsIGJ5dGVzIGxlYWRpbmcgdXAgdG8gdGhlXG4gICAgICogZmlyc3QgaW5kaXJlY3Qgb2JqZWN0IGhlYWRlci5cbiAgICAgKi9cbiAgICBQREZQYXJzZXIucHJvdG90eXBlLnNraXBCaW5hcnlIZWFkZXJDb21tZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNraXBXaGl0ZXNwYWNlQW5kQ29tbWVudHMoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsT2Zmc2V0ID0gdGhpcy5ieXRlcy5vZmZzZXQoKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VJbmRpcmVjdE9iamVjdEhlYWRlcigpO1xuICAgICAgICAgICAgdGhpcy5ieXRlcy5tb3ZlVG8oaW5pdGlhbE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZXMubmV4dCgpO1xuICAgICAgICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZUFuZENvbW1lbnRzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBERlBhcnNlci5mb3JCeXRlc1dpdGhPcHRpb25zID0gZnVuY3Rpb24gKHBkZkJ5dGVzLCBvYmplY3RzUGVyVGljaywgdGhyb3dPbkludmFsaWRPYmplY3QsIGNhcE51bWJlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZQYXJzZXIocGRmQnl0ZXMsIG9iamVjdHNQZXJUaWNrLCB0aHJvd09uSW52YWxpZE9iamVjdCwgY2FwTnVtYmVycyk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGUGFyc2VyO1xufShQREZPYmplY3RQYXJzZXIpKTtcbmV4cG9ydCBkZWZhdWx0IFBERlBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERlBhcnNlci5qcy5tYXAiLCJ2YXIgZmxhZyA9IGZ1bmN0aW9uIChiaXRJbmRleCkgeyByZXR1cm4gMSA8PCBiaXRJbmRleDsgfTtcbi8qKiBGcm9tIFBERiBzcGVjIHRhYmxlIDE2NSAqL1xuZXhwb3J0IHZhciBBbm5vdGF0aW9uRmxhZ3M7XG4oZnVuY3Rpb24gKEFubm90YXRpb25GbGFncykge1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgZG8gbm90IGRpc3BsYXkgdGhlIGFubm90YXRpb24gaWYgaXQgZG9lcyBub3QgYmVsb25nIHRvIG9uZSBvZiB0aGVcbiAgICAgKiBzdGFuZGFyZCBhbm5vdGF0aW9uIHR5cGVzIGFuZCBubyBhbm5vdGF0aW9uIGhhbmRsZXIgaXMgYXZhaWxhYmxlLiBJZiBjbGVhcixcbiAgICAgKiBkaXNwbGF5IHN1Y2ggYW4gdW5rbm93biBhbm5vdGF0aW9uIHVzaW5nIGFuIGFwcGVhcmFuY2Ugc3RyZWFtIHNwZWNpZmllZCBieVxuICAgICAqIGl0cyBhcHBlYXJhbmNlIGRpY3Rpb25hcnksIGlmIGFueS5cbiAgICAgKi9cbiAgICBBbm5vdGF0aW9uRmxhZ3NbQW5ub3RhdGlvbkZsYWdzW1wiSW52aXNpYmxlXCJdID0gZmxhZygxIC0gMSldID0gXCJJbnZpc2libGVcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIGRvIG5vdCBkaXNwbGF5IG9yIHByaW50IHRoZSBhbm5vdGF0aW9uIG9yIGFsbG93IGl0IHRvIGludGVyYWN0IHdpdGhcbiAgICAgKiB0aGUgdXNlciwgcmVnYXJkbGVzcyBvZiBpdHMgYW5ub3RhdGlvbiB0eXBlIG9yIHdoZXRoZXIgYW4gYW5ub3RhdGlvblxuICAgICAqIGhhbmRsZXIgaXMgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogSW4gY2FzZXMgd2hlcmUgc2NyZWVuIHNwYWNlIGlzIGxpbWl0ZWQsIHRoZSBhYmlsaXR5IHRvIGhpZGUgYW5kIHNob3dcbiAgICAgKiBhbm5vdGF0aW9ucyBzZWxlY3RpdmVseSBjYW4gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGFwcGVhcmFuY2Ugc3RyZWFtc1xuICAgICAqIHRvIGRpc3BsYXkgYXV4aWxpYXJ5IHBvcC11cCBpbmZvcm1hdGlvbiBzaW1pbGFyIGluIGZ1bmN0aW9uIHRvIG9ubGluZSBoZWxwXG4gICAgICogc3lzdGVtcy5cbiAgICAgKi9cbiAgICBBbm5vdGF0aW9uRmxhZ3NbQW5ub3RhdGlvbkZsYWdzW1wiSGlkZGVuXCJdID0gZmxhZygyIC0gMSldID0gXCJIaWRkZW5cIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIHByaW50IHRoZSBhbm5vdGF0aW9uIHdoZW4gdGhlIHBhZ2UgaXMgcHJpbnRlZC4gSWYgY2xlYXIsIG5ldmVyXG4gICAgICogcHJpbnQgdGhlIGFubm90YXRpb24sIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBpdCBpcyBkaXNwbGF5ZWQgb24gdGhlIHNjcmVlbi5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgYW5ub3RhdGlvbnMgcmVwcmVzZW50aW5nIGludGVyYWN0aXZlIHB1c2hidXR0b25zLFxuICAgICAqIHdoaWNoIHdvdWxkIHNlcnZlIG5vIG1lYW5pbmdmdWwgcHVycG9zZSBvbiB0aGUgcHJpbnRlZCBwYWdlLlxuICAgICAqL1xuICAgIEFubm90YXRpb25GbGFnc1tBbm5vdGF0aW9uRmxhZ3NbXCJQcmludFwiXSA9IGZsYWcoMyAtIDEpXSA9IFwiUHJpbnRcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIGRvIG5vdCBzY2FsZSB0aGUgYW5ub3RhdGlvbuKAmXMgYXBwZWFyYW5jZSB0byBtYXRjaCB0aGUgbWFnbmlmaWNhdGlvblxuICAgICAqIG9mIHRoZSBwYWdlLiBUaGUgbG9jYXRpb24gb2YgdGhlIGFubm90YXRpb24gb24gdGhlIHBhZ2UgKGRlZmluZWQgYnkgdGhlXG4gICAgICogdXBwZXItbGVmdCBjb3JuZXIgb2YgaXRzIGFubm90YXRpb24gcmVjdGFuZ2xlKSBzaGFsbCByZW1haW4gZml4ZWQsXG4gICAgICogcmVnYXJkbGVzcyBvZiB0aGUgcGFnZSBtYWduaWZpY2F0aW9uLlxuICAgICAqL1xuICAgIEFubm90YXRpb25GbGFnc1tBbm5vdGF0aW9uRmxhZ3NbXCJOb1pvb21cIl0gPSBmbGFnKDQgLSAxKV0gPSBcIk5vWm9vbVwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgZG8gbm90IHJvdGF0ZSB0aGUgYW5ub3RhdGlvbuKAmXMgYXBwZWFyYW5jZSB0byBtYXRjaCB0aGUgcm90YXRpb24gb2ZcbiAgICAgKiB0aGUgcGFnZS4gVGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBhbm5vdGF0aW9uIHJlY3RhbmdsZSBzaGFsbCByZW1haW4gaW5cbiAgICAgKiBhIGZpeGVkIGxvY2F0aW9uIG9uIHRoZSBwYWdlLCByZWdhcmRsZXNzIG9mIHRoZSBwYWdlIHJvdGF0aW9uLlxuICAgICAqL1xuICAgIEFubm90YXRpb25GbGFnc1tBbm5vdGF0aW9uRmxhZ3NbXCJOb1JvdGF0ZVwiXSA9IGZsYWcoNSAtIDEpXSA9IFwiTm9Sb3RhdGVcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIGRvIG5vdCBkaXNwbGF5IHRoZSBhbm5vdGF0aW9uIG9uIHRoZSBzY3JlZW4gb3IgYWxsb3cgaXQgdG8gaW50ZXJhY3RcbiAgICAgKiB3aXRoIHRoZSB1c2VyLiBUaGUgYW5ub3RhdGlvbiBtYXkgYmUgcHJpbnRlZCAoZGVwZW5kaW5nIG9uIHRoZSBzZXR0aW5nIG9mXG4gICAgICogdGhlIFByaW50IGZsYWcpIGJ1dCBzaG91bGQgYmUgY29uc2lkZXJlZCBoaWRkZW4gZm9yIHB1cnBvc2VzIG9mIG9uLXNjcmVlblxuICAgICAqIGRpc3BsYXkgYW5kIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICovXG4gICAgQW5ub3RhdGlvbkZsYWdzW0Fubm90YXRpb25GbGFnc1tcIk5vVmlld1wiXSA9IGZsYWcoNiAtIDEpXSA9IFwiTm9WaWV3XCI7XG4gICAgLyoqXG4gICAgICogSWYgc2V0LCBkbyBub3QgYWxsb3cgdGhlIGFubm90YXRpb24gdG8gaW50ZXJhY3Qgd2l0aCB0aGUgdXNlci4gVGhlXG4gICAgICogYW5ub3RhdGlvbiBtYXkgYmUgZGlzcGxheWVkIG9yIHByaW50ZWQgKGRlcGVuZGluZyBvbiB0aGUgc2V0dGluZ3Mgb2YgdGhlXG4gICAgICogTm9WaWV3IGFuZCBQcmludCBmbGFncykgYnV0IHNob3VsZCBub3QgcmVzcG9uZCB0byBtb3VzZSBjbGlja3Mgb3IgY2hhbmdlXG4gICAgICogaXRzIGFwcGVhcmFuY2UgaW4gcmVzcG9uc2UgdG8gbW91c2UgbW90aW9ucy5cbiAgICAgKlxuICAgICAqIFRoaXMgZmxhZyBzaGFsbCBiZSBpZ25vcmVkIGZvciB3aWRnZXQgYW5ub3RhdGlvbnM7IGl0cyBmdW5jdGlvbiBpc1xuICAgICAqIHN1YnN1bWVkIGJ5IHRoZSBSZWFkT25seSBmbGFnIG9mIHRoZSBhc3NvY2lhdGVkIGZvcm0gZmllbGQuXG4gICAgICovXG4gICAgQW5ub3RhdGlvbkZsYWdzW0Fubm90YXRpb25GbGFnc1tcIlJlYWRPbmx5XCJdID0gZmxhZyg3IC0gMSldID0gXCJSZWFkT25seVwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgZG8gbm90IGFsbG93IHRoZSBhbm5vdGF0aW9uIHRvIGJlIGRlbGV0ZWQgb3IgaXRzIHByb3BlcnRpZXNcbiAgICAgKiAoaW5jbHVkaW5nIHBvc2l0aW9uIGFuZCBzaXplKSB0byBiZSBtb2RpZmllZCBieSB0aGUgdXNlci4gSG93ZXZlciwgdGhpc1xuICAgICAqIGZsYWcgZG9lcyBub3QgcmVzdHJpY3QgY2hhbmdlcyB0byB0aGUgYW5ub3RhdGlvbuKAmXMgY29udGVudHMsIHN1Y2ggYXMgdGhlXG4gICAgICogdmFsdWUgb2YgYSBmb3JtIGZpZWxkLlxuICAgICAqL1xuICAgIEFubm90YXRpb25GbGFnc1tBbm5vdGF0aW9uRmxhZ3NbXCJMb2NrZWRcIl0gPSBmbGFnKDggLSAxKV0gPSBcIkxvY2tlZFwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCwgaW52ZXJ0IHRoZSBpbnRlcnByZXRhdGlvbiBvZiB0aGUgTm9WaWV3IGZsYWcgZm9yIGNlcnRhaW4gZXZlbnRzLlxuICAgICAqXG4gICAgICogQSB0eXBpY2FsIHVzZSBpcyB0byBoYXZlIGFuIGFubm90YXRpb24gdGhhdCBhcHBlYXJzIG9ubHkgd2hlbiBhIG1vdXNlXG4gICAgICogY3Vyc29yIGlzIGhlbGQgb3ZlciBpdC5cbiAgICAgKi9cbiAgICBBbm5vdGF0aW9uRmxhZ3NbQW5ub3RhdGlvbkZsYWdzW1wiVG9nZ2xlTm9WaWV3XCJdID0gZmxhZyg5IC0gMSldID0gXCJUb2dnbGVOb1ZpZXdcIjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQsIGRvIG5vdCBhbGxvdyB0aGUgY29udGVudHMgb2YgdGhlIGFubm90YXRpb24gdG8gYmUgbW9kaWZpZWQgYnkgdGhlXG4gICAgICogdXNlci4gVGhpcyBmbGFnIGRvZXMgbm90IHJlc3RyaWN0IGRlbGV0aW9uIG9mIHRoZSBhbm5vdGF0aW9uIG9yIGNoYW5nZXMgdG9cbiAgICAgKiBvdGhlciBhbm5vdGF0aW9uIHByb3BlcnRpZXMsIHN1Y2ggYXMgcG9zaXRpb24gYW5kIHNpemUuXG4gICAgICovXG4gICAgQW5ub3RhdGlvbkZsYWdzW0Fubm90YXRpb25GbGFnc1tcIkxvY2tlZENvbnRlbnRzXCJdID0gZmxhZygxMCAtIDEpXSA9IFwiTG9ja2VkQ29udGVudHNcIjtcbn0pKEFubm90YXRpb25GbGFncyB8fCAoQW5ub3RhdGlvbkZsYWdzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZsYWdzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFBERk9iamVjdCBmcm9tIFwiLi9QREZPYmplY3RcIjtcbmltcG9ydCBDaGFyQ29kZXMgZnJvbSBcIi4uL3N5bnRheC9DaGFyQ29kZXNcIjtcbmltcG9ydCB7IGNvcHlTdHJpbmdJbnRvQnVmZmVyLCB0b0hleFN0cmluZ09mTWluTGVuZ3RoLCB1dGYxNkRlY29kZSwgdXRmMTZFbmNvZGUsIHBkZkRvY0VuY29kaW5nRGVjb2RlLCBwYXJzZURhdGUsIGhhc1V0ZjE2Qk9NLCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgSW52YWxpZFBERkRhdGVTdHJpbmdFcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbnZhciBQREZIZXhTdHJpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBERkhleFN0cmluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQREZIZXhTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQREZIZXhTdHJpbmcucHJvdG90eXBlLmFzQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEFwcGVuZCBhIHplcm8gaWYgdGhlIG51bWJlciBvZiBkaWdpdHMgaXMgb2RkLiBTZWUgUERGIHNwZWMgNy4zLjQuM1xuICAgICAgICB2YXIgaGV4ID0gdGhpcy52YWx1ZSArICh0aGlzLnZhbHVlLmxlbmd0aCAlIDIgPT09IDEgPyAnMCcgOiAnJyk7XG4gICAgICAgIHZhciBoZXhMZW5ndGggPSBoZXgubGVuZ3RoO1xuICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgICAgIHZhciBoZXhPZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnl0ZXNPZmZzZXQgPSAwO1xuICAgICAgICAvLyBJbnRlcnByZXQgZWFjaCBwYWlyIG9mIGhleCBkaWdpdHMgYXMgYSBzaW5nbGUgYnl0ZVxuICAgICAgICB3aGlsZSAoaGV4T2Zmc2V0IDwgaGV4TGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoaGV4T2Zmc2V0LCBoZXhPZmZzZXQgKyAyKSwgMTYpO1xuICAgICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZzZXRdID0gYnl0ZTtcbiAgICAgICAgICAgIGhleE9mZnNldCArPSAyO1xuICAgICAgICAgICAgYnl0ZXNPZmZzZXQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfTtcbiAgICBQREZIZXhTdHJpbmcucHJvdG90eXBlLmRlY29kZVRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBieXRlcyA9IHRoaXMuYXNCeXRlcygpO1xuICAgICAgICBpZiAoaGFzVXRmMTZCT00oYnl0ZXMpKVxuICAgICAgICAgICAgcmV0dXJuIHV0ZjE2RGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIHBkZkRvY0VuY29kaW5nRGVjb2RlKGJ5dGVzKTtcbiAgICB9O1xuICAgIFBERkhleFN0cmluZy5wcm90b3R5cGUuZGVjb2RlRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmRlY29kZVRleHQoKTtcbiAgICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGUodGV4dCk7XG4gICAgICAgIGlmICghZGF0ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUERGRGF0ZVN0cmluZ0Vycm9yKHRleHQpO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9O1xuICAgIFBERkhleFN0cmluZy5wcm90b3R5cGUuYXNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG4gICAgUERGSGV4U3RyaW5nLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFBERkhleFN0cmluZy5vZih0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIFBERkhleFN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIjxcIiArIHRoaXMudmFsdWUgKyBcIj5cIjtcbiAgICB9O1xuICAgIFBERkhleFN0cmluZy5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aCArIDI7XG4gICAgfTtcbiAgICBQREZIZXhTdHJpbmcucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5MZXNzVGhhbjtcbiAgICAgICAgb2Zmc2V0ICs9IGNvcHlTdHJpbmdJbnRvQnVmZmVyKHRoaXMudmFsdWUsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5HcmVhdGVyVGhhbjtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoICsgMjtcbiAgICB9O1xuICAgIFBERkhleFN0cmluZy5vZiA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFBERkhleFN0cmluZyh2YWx1ZSk7IH07XG4gICAgUERGSGV4U3RyaW5nLmZyb21UZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBlbmNvZGVkID0gdXRmMTZFbmNvZGUodmFsdWUpO1xuICAgICAgICB2YXIgaGV4ID0gJyc7XG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGVuY29kZWQubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgICBoZXggKz0gdG9IZXhTdHJpbmdPZk1pbkxlbmd0aChlbmNvZGVkW2lkeF0sIDQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUERGSGV4U3RyaW5nKGhleCk7XG4gICAgfTtcbiAgICByZXR1cm4gUERGSGV4U3RyaW5nO1xufShQREZPYmplY3QpKTtcbmV4cG9ydCBkZWZhdWx0IFBERkhleFN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBERkhleFN0cmluZy5qcy5tYXAiLCJpbXBvcnQgeyBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xudmFyIFBERk9iamVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREZPYmplY3QoKSB7XG4gICAgfVxuICAgIFBERk9iamVjdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoX2NvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnY2xvbmUnKTtcbiAgICB9O1xuICAgIFBERk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRob2ROb3RJbXBsZW1lbnRlZEVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSwgJ3RvU3RyaW5nJyk7XG4gICAgfTtcbiAgICBQREZPYmplY3QucHJvdG90eXBlLnNpemVJbkJ5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdzaXplSW5CeXRlcycpO1xuICAgIH07XG4gICAgUERGT2JqZWN0LnByb3RvdHlwZS5jb3B5Qnl0ZXNJbnRvID0gZnVuY3Rpb24gKF9idWZmZXIsIF9vZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnY29weUJ5dGVzSW50bycpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERk9iamVjdDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQREZPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgUERGT2JqZWN0IGZyb20gXCIuL1BERk9iamVjdFwiO1xuaW1wb3J0IENoYXJDb2RlcyBmcm9tIFwiLi4vc3ludGF4L0NoYXJDb2Rlc1wiO1xuaW1wb3J0IHsgY29weVN0cmluZ0ludG9CdWZmZXIsIHBhZFN0YXJ0LCB1dGYxNkRlY29kZSwgcGRmRG9jRW5jb2RpbmdEZWNvZGUsIHRvQ2hhckNvZGUsIHBhcnNlRGF0ZSwgaGFzVXRmMTZCT00sIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBJbnZhbGlkUERGRGF0ZVN0cmluZ0Vycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xudmFyIFBERlN0cmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUERGU3RyaW5nLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBERlN0cmluZyh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBERlN0cmluZy5wcm90b3R5cGUuYXNCeXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ5dGVzID0gW107XG4gICAgICAgIHZhciBvY3RhbCA9ICcnO1xuICAgICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgcHVzaEJ5dGUgPSBmdW5jdGlvbiAoYnl0ZSkge1xuICAgICAgICAgICAgaWYgKGJ5dGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBieXRlcy5wdXNoKGJ5dGUpO1xuICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0aGlzLnZhbHVlLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXIgPSB0aGlzLnZhbHVlW2lkeF07XG4gICAgICAgICAgICB2YXIgYnl0ZSA9IHRvQ2hhckNvZGUoY2hhcik7XG4gICAgICAgICAgICB2YXIgbmV4dENoYXIgPSB0aGlzLnZhbHVlW2lkeCArIDFdO1xuICAgICAgICAgICAgaWYgKCFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5CYWNrU2xhc2gpXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcHVzaEJ5dGUoYnl0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLk5ld2xpbmUpXG4gICAgICAgICAgICAgICAgICAgIHB1c2hCeXRlKCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLkNhcnJpYWdlUmV0dXJuKVxuICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZSgpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5uKVxuICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZShDaGFyQ29kZXMuTmV3bGluZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLnIpXG4gICAgICAgICAgICAgICAgICAgIHB1c2hCeXRlKENoYXJDb2Rlcy5DYXJyaWFnZVJldHVybik7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnl0ZSA9PT0gQ2hhckNvZGVzLnQpXG4gICAgICAgICAgICAgICAgICAgIHB1c2hCeXRlKENoYXJDb2Rlcy5UYWIpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5iKVxuICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZShDaGFyQ29kZXMuQmFja3NwYWNlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChieXRlID09PSBDaGFyQ29kZXMuZilcbiAgICAgICAgICAgICAgICAgICAgcHVzaEJ5dGUoQ2hhckNvZGVzLkZvcm1GZWVkKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChieXRlID09PSBDaGFyQ29kZXMuTGVmdFBhcmVuKVxuICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZShDaGFyQ29kZXMuTGVmdFBhcmVuKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChieXRlID09PSBDaGFyQ29kZXMuUmlnaHRQYXJlbilcbiAgICAgICAgICAgICAgICAgICAgcHVzaEJ5dGUoQ2hhckNvZGVzLlJpZ2h0UGFyZW4pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ5dGUgPT09IENoYXJDb2Rlcy5CYWNrc3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIHB1c2hCeXRlKENoYXJDb2Rlcy5CYWNrU2xhc2gpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ5dGUgPj0gQ2hhckNvZGVzLlplcm8gJiYgYnl0ZSA8PSBDaGFyQ29kZXMuU2V2ZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgb2N0YWwgKz0gY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9jdGFsLmxlbmd0aCA9PT0gMyB8fCAhKG5leHRDaGFyID49ICcwJyAmJiBuZXh0Q2hhciA8PSAnNycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQnl0ZShwYXJzZUludChvY3RhbCwgOCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2N0YWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaEJ5dGUoYnl0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShieXRlcyk7XG4gICAgfTtcbiAgICBQREZTdHJpbmcucHJvdG90eXBlLmRlY29kZVRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBieXRlcyA9IHRoaXMuYXNCeXRlcygpO1xuICAgICAgICBpZiAoaGFzVXRmMTZCT00oYnl0ZXMpKVxuICAgICAgICAgICAgcmV0dXJuIHV0ZjE2RGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIHBkZkRvY0VuY29kaW5nRGVjb2RlKGJ5dGVzKTtcbiAgICB9O1xuICAgIFBERlN0cmluZy5wcm90b3R5cGUuZGVjb2RlRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmRlY29kZVRleHQoKTtcbiAgICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGUodGV4dCk7XG4gICAgICAgIGlmICghZGF0ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUERGRGF0ZVN0cmluZ0Vycm9yKHRleHQpO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9O1xuICAgIFBERlN0cmluZy5wcm90b3R5cGUuYXNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG4gICAgUERGU3RyaW5nLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFBERlN0cmluZy5vZih0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIFBERlN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIihcIiArIHRoaXMudmFsdWUgKyBcIilcIjtcbiAgICB9O1xuICAgIFBERlN0cmluZy5wcm90b3R5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aCArIDI7XG4gICAgfTtcbiAgICBQREZTdHJpbmcucHJvdG90eXBlLmNvcHlCeXRlc0ludG8gPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IENoYXJDb2Rlcy5MZWZ0UGFyZW47XG4gICAgICAgIG9mZnNldCArPSBjb3B5U3RyaW5nSW50b0J1ZmZlcih0aGlzLnZhbHVlLCBidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBDaGFyQ29kZXMuUmlnaHRQYXJlbjtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoICsgMjtcbiAgICB9O1xuICAgIC8vIFRoZSBQREYgc3BlYyBhbGxvd3MgbmV3bGluZXMgYW5kIHBhcmVucyB0byBhcHBlYXIgZGlyZWN0bHkgd2l0aGluIGEgbGl0ZXJhbFxuICAgIC8vIHN0cmluZy4gVGhlc2UgY2hhcmFjdGVyIF9tYXlfIGJlIGVzY2FwZWQuIEJ1dCB0aGV5IGRvIG5vdCBfaGF2ZV8gdG8gYmUuIFNvXG4gICAgLy8gZm9yIHNpbXBsaWNpdHksIHdlIHdpbGwgbm90IGJvdGhlciBlc2NhcGluZyB0aGVtLlxuICAgIFBERlN0cmluZy5vZiA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFBERlN0cmluZyh2YWx1ZSk7IH07XG4gICAgUERGU3RyaW5nLmZyb21EYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYWRTdGFydChTdHJpbmcoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSwgNCwgJzAnKTtcbiAgICAgICAgdmFyIG1vbnRoID0gcGFkU3RhcnQoU3RyaW5nKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLCAyLCAnMCcpO1xuICAgICAgICB2YXIgZGF5ID0gcGFkU3RhcnQoU3RyaW5nKGRhdGUuZ2V0VVRDRGF0ZSgpKSwgMiwgJzAnKTtcbiAgICAgICAgdmFyIGhvdXJzID0gcGFkU3RhcnQoU3RyaW5nKGRhdGUuZ2V0VVRDSG91cnMoKSksIDIsICcwJyk7XG4gICAgICAgIHZhciBtaW5zID0gcGFkU3RhcnQoU3RyaW5nKGRhdGUuZ2V0VVRDTWludXRlcygpKSwgMiwgJzAnKTtcbiAgICAgICAgdmFyIHNlY3MgPSBwYWRTdGFydChTdHJpbmcoZGF0ZS5nZXRVVENTZWNvbmRzKCkpLCAyLCAnMCcpO1xuICAgICAgICByZXR1cm4gbmV3IFBERlN0cmluZyhcIkQ6XCIgKyB5ZWFyICsgbW9udGggKyBkYXkgKyBob3VycyArIG1pbnMgKyBzZWNzICsgXCJaXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIFBERlN0cmluZztcbn0oUERGT2JqZWN0KSk7XG5leHBvcnQgZGVmYXVsdCBQREZTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QREZTdHJpbmcuanMubWFwIiwidmFyIENoYXJDb2RlcztcbihmdW5jdGlvbiAoQ2hhckNvZGVzKSB7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIk51bGxcIl0gPSAwXSA9IFwiTnVsbFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJCYWNrc3BhY2VcIl0gPSA4XSA9IFwiQmFja3NwYWNlXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlRhYlwiXSA9IDldID0gXCJUYWJcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTmV3bGluZVwiXSA9IDEwXSA9IFwiTmV3bGluZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJGb3JtRmVlZFwiXSA9IDEyXSA9IFwiRm9ybUZlZWRcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiQ2FycmlhZ2VSZXR1cm5cIl0gPSAxM10gPSBcIkNhcnJpYWdlUmV0dXJuXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNwYWNlXCJdID0gMzJdID0gXCJTcGFjZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJFeGNsYW1hdGlvblBvaW50XCJdID0gMzNdID0gXCJFeGNsYW1hdGlvblBvaW50XCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkhhc2hcIl0gPSAzNV0gPSBcIkhhc2hcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiUGVyY2VudFwiXSA9IDM3XSA9IFwiUGVyY2VudFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMZWZ0UGFyZW5cIl0gPSA0MF0gPSBcIkxlZnRQYXJlblwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJSaWdodFBhcmVuXCJdID0gNDFdID0gXCJSaWdodFBhcmVuXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlBsdXNcIl0gPSA0M10gPSBcIlBsdXNcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTWludXNcIl0gPSA0NV0gPSBcIk1pbnVzXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkRhc2hcIl0gPSA0NV0gPSBcIkRhc2hcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiUGVyaW9kXCJdID0gNDZdID0gXCJQZXJpb2RcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRm9yd2FyZFNsYXNoXCJdID0gNDddID0gXCJGb3J3YXJkU2xhc2hcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiWmVyb1wiXSA9IDQ4XSA9IFwiWmVyb1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJPbmVcIl0gPSA0OV0gPSBcIk9uZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJUd29cIl0gPSA1MF0gPSBcIlR3b1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJUaHJlZVwiXSA9IDUxXSA9IFwiVGhyZWVcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRm91clwiXSA9IDUyXSA9IFwiRm91clwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJGaXZlXCJdID0gNTNdID0gXCJGaXZlXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNpeFwiXSA9IDU0XSA9IFwiU2l4XCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNldmVuXCJdID0gNTVdID0gXCJTZXZlblwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJFaWdodFwiXSA9IDU2XSA9IFwiRWlnaHRcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTmluZVwiXSA9IDU3XSA9IFwiTmluZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMZXNzVGhhblwiXSA9IDYwXSA9IFwiTGVzc1RoYW5cIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiR3JlYXRlclRoYW5cIl0gPSA2Ml0gPSBcIkdyZWF0ZXJUaGFuXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkFcIl0gPSA2NV0gPSBcIkFcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRFwiXSA9IDY4XSA9IFwiRFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJFXCJdID0gNjldID0gXCJFXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkZcIl0gPSA3MF0gPSBcIkZcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiT1wiXSA9IDc5XSA9IFwiT1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJQXCJdID0gODBdID0gXCJQXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlJcIl0gPSA4Ml0gPSBcIlJcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTGVmdFNxdWFyZUJyYWNrZXRcIl0gPSA5MV0gPSBcIkxlZnRTcXVhcmVCcmFja2V0XCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkJhY2tTbGFzaFwiXSA9IDkyXSA9IFwiQmFja1NsYXNoXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlJpZ2h0U3F1YXJlQnJhY2tldFwiXSA9IDkzXSA9IFwiUmlnaHRTcXVhcmVCcmFja2V0XCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcImFcIl0gPSA5N10gPSBcImFcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiYlwiXSA9IDk4XSA9IFwiYlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJkXCJdID0gMTAwXSA9IFwiZFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJlXCJdID0gMTAxXSA9IFwiZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJmXCJdID0gMTAyXSA9IFwiZlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJpXCJdID0gMTA1XSA9IFwiaVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJqXCJdID0gMTA2XSA9IFwialwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJsXCJdID0gMTA4XSA9IFwibFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJtXCJdID0gMTA5XSA9IFwibVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJuXCJdID0gMTEwXSA9IFwiblwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJvXCJdID0gMTExXSA9IFwib1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJyXCJdID0gMTE0XSA9IFwiclwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJzXCJdID0gMTE1XSA9IFwic1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJ0XCJdID0gMTE2XSA9IFwidFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJ1XCJdID0gMTE3XSA9IFwidVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJ4XCJdID0gMTIwXSA9IFwieFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMZWZ0Q3VybHlcIl0gPSAxMjNdID0gXCJMZWZ0Q3VybHlcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiUmlnaHRDdXJseVwiXSA9IDEyNV0gPSBcIlJpZ2h0Q3VybHlcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVGlsZGVcIl0gPSAxMjZdID0gXCJUaWxkZVwiO1xufSkoQ2hhckNvZGVzIHx8IChDaGFyQ29kZXMgPSB7fSkpO1xuZXhwb3J0IGRlZmF1bHQgQ2hhckNvZGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhckNvZGVzLmpzLm1hcCIsIi8qXG4gKiBUaGUgYGNoYXJzYCwgYGxvb2t1cGAsIGBlbmNvZGVgLCBhbmQgYGRlY29kZWAgbWVtYmVycyBvZiB0aGlzIGZpbGUgYXJlXG4gKiBsaWNlbnNlZCB1bmRlciB0aGUgZm9sbG93aW5nOlxuICpcbiAqICAgICBiYXNlNjQtYXJyYXlidWZmZXJcbiAqICAgICBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogICAgIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqICAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICovXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4vLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG52YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xufVxuZXhwb3J0IHZhciBlbmNvZGVUb0Jhc2U2NCA9IGZ1bmN0aW9uIChieXRlcykge1xuICAgIHZhciBiYXNlNjQgPSAnJztcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cbiAgICBpZiAobGVuICUgMyA9PT0gMikge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArICc9JztcbiAgICB9XG4gICAgZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuICAgIHJldHVybiBiYXNlNjQ7XG59O1xuZXhwb3J0IHZhciBkZWNvZGVGcm9tQmFzZTY0ID0gZnVuY3Rpb24gKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NTtcbiAgICB2YXIgbGVuID0gYmFzZTY0Lmxlbmd0aDtcbiAgICB2YXIgaTtcbiAgICB2YXIgcCA9IDA7XG4gICAgdmFyIGVuY29kZWQxO1xuICAgIHZhciBlbmNvZGVkMjtcbiAgICB2YXIgZW5jb2RlZDM7XG4gICAgdmFyIGVuY29kZWQ0O1xuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSAnPScpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSAnPScpIHtcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlckxlbmd0aCk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDMpXTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbn07XG4vLyBUaGlzIHJlZ2V4IGlzIGRlc2lnbmVkIHRvIGJlIGFzIGZsZXhpYmxlIGFzIHBvc3NpYmxlLiBJdCB3aWxsIHBhcnNlIGNlcnRhaW5cbi8vIGludmFsaWQgZGF0YSBVUklzLlxudmFyIERBVEFfVVJJX1BSRUZJWF9SRUdFWCA9IC9eKGRhdGEpPzo/KFtcXHdcXC9cXCtdKyk/Oz8oY2hhcnNldD1bXFx3LV0rfGJhc2U2NCk/LiosL2k7XG4vKipcbiAqIElmIHRoZSBgZGF0YVVyaWAgaW5wdXQgaXMgYSBkYXRhIFVSSSwgdGhlbiB0aGUgZGF0YSBVUkkgcHJlZml4IG11c3Qgbm90IGJlXG4gKiBsb25nZXIgdGhhbiAxMDAgY2hhcmFjdGVycywgb3IgdGhpcyBmdW5jdGlvbiB3aWxsIGZhaWwgdG8gZGVjb2RlIGl0LlxuICpcbiAqIEBwYXJhbSBkYXRhVXJpIGEgYmFzZTY0IGRhdGEgVVJJIG9yIHBsYWluIGJhc2U2NCBzdHJpbmdcbiAqIEByZXR1cm5zIGEgVWludDhBcnJheSBjb250YWluaW5nIHRoZSBkZWNvZGVkIGlucHV0XG4gKi9cbmV4cG9ydCB2YXIgZGVjb2RlRnJvbUJhc2U2NERhdGFVcmkgPSBmdW5jdGlvbiAoZGF0YVVyaSkge1xuICAgIHZhciB0cmltbWVkVXJpID0gZGF0YVVyaS50cmltKCk7XG4gICAgdmFyIHByZWZpeCA9IHRyaW1tZWRVcmkuc3Vic3RyaW5nKDAsIDEwMCk7XG4gICAgdmFyIHJlcyA9IHByZWZpeC5tYXRjaChEQVRBX1VSSV9QUkVGSVhfUkVHRVgpO1xuICAgIC8vIEFzc3VtZSBpdCdzIG5vdCBhIGRhdGEgVVJJIC0ganVzdCBhIHBsYWluIGJhc2U2NCBzdHJpbmdcbiAgICBpZiAoIXJlcylcbiAgICAgICAgcmV0dXJuIGRlY29kZUZyb21CYXNlNjQodHJpbW1lZFVyaSk7XG4gICAgLy8gUmVtb3ZlIHRoZSBkYXRhIFVSSSBwcmVmaXggYW5kIHBhcnNlIHRoZSByZW1haW5kZXIgYXMgYSBiYXNlNjQgc3RyaW5nXG4gICAgdmFyIGZ1bGxNYXRjaCA9IHJlc1swXTtcbiAgICB2YXIgZGF0YSA9IHRyaW1tZWRVcmkuc3Vic3RyaW5nKGZ1bGxNYXRjaC5sZW5ndGgpO1xuICAgIHJldHVybiBkZWNvZGVGcm9tQmFzZTY0KGRhdGEpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC5qcy5tYXAiLCJpbXBvcnQgeyB0b0NoYXJDb2RlIH0gZnJvbSBcIi4vc3RyaW5nc1wiO1xuLy8gTWFwcGluZyBmcm9tIFBERkRvY0VuY29kaW5nIHRvIFVuaWNvZGUgY29kZSBwb2ludFxudmFyIHBkZkRvY0VuY29kaW5nVG9Vbmljb2RlID0gbmV3IFVpbnQxNkFycmF5KDI1Nik7XG4vLyBJbml0aWFsaXplIHRoZSBjb2RlIHBvaW50cyB3aGljaCBhcmUgdGhlIHNhbWVcbmZvciAodmFyIGlkeCA9IDA7IGlkeCA8IDI1NjsgaWR4KyspIHtcbiAgICBwZGZEb2NFbmNvZGluZ1RvVW5pY29kZVtpZHhdID0gaWR4O1xufVxuLy8gU2V0IGRpZmZlcmVuY2VzIChzZWUgXCJUYWJsZSBELjIg4oCTIFBERkRvY0VuY29kaW5nIENoYXJhY3RlciBTZXRcIiBvZiB0aGUgUERGIHNwZWMpXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDE2XSA9IHRvQ2hhckNvZGUoJ1xcdTAwMTcnKTsgLy8gU1lOQ1JPTk9VUyBJRExFXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDE4XSA9IHRvQ2hhckNvZGUoJ1xcdTAyRDgnKTsgLy8gQlJFVkVcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4MTldID0gdG9DaGFyQ29kZSgnXFx1MDJDNycpOyAvLyBDQVJPTlxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHgxYV0gPSB0b0NoYXJDb2RlKCdcXHUwMkM2Jyk7IC8vIE1PRElGSUVSIExFVFRFUiBDSVJDVU1GTEVYIEFDQ0VOVFxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHgxYl0gPSB0b0NoYXJDb2RlKCdcXHUwMkQ5Jyk7IC8vIERPVCBBQk9WRVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHgxY10gPSB0b0NoYXJDb2RlKCdcXHUwMkREJyk7IC8vIERPVUJMRSBBQ1VURSBBQ0NFTlRcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4MWRdID0gdG9DaGFyQ29kZSgnXFx1MDJEQicpOyAvLyBPR09ORUtcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4MWVdID0gdG9DaGFyQ29kZSgnXFx1MDJEQScpOyAvLyBSSU5HIEFCT1ZFXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDFmXSA9IHRvQ2hhckNvZGUoJ1xcdTAyREMnKTsgLy8gU01BTEwgVElMREVcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4N2ZdID0gdG9DaGFyQ29kZSgnXFx1RkZGRCcpOyAvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKGJveCB3aXRoIHF1ZXN0aW9ubWFyaylcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4ODBdID0gdG9DaGFyQ29kZSgnXFx1MjAyMicpOyAvLyBCVUxMRVRcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4ODFdID0gdG9DaGFyQ29kZSgnXFx1MjAyMCcpOyAvLyBEQUdHRVJcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4ODJdID0gdG9DaGFyQ29kZSgnXFx1MjAyMScpOyAvLyBET1VCTEUgREFHR0VSXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDgzXSA9IHRvQ2hhckNvZGUoJ1xcdTIwMjYnKTsgLy8gSE9SSVpPTlRBTCBFTExJUFNJU1xucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg4NF0gPSB0b0NoYXJDb2RlKCdcXHUyMDE0Jyk7IC8vIEVNIERBU0hcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4ODVdID0gdG9DaGFyQ29kZSgnXFx1MjAxMycpOyAvLyBFTiBEQVNIXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDg2XSA9IHRvQ2hhckNvZGUoJ1xcdTAxOTInKTsgLy8gTEFUSU4gU01BTEwgTEVUVEVSIFNDUklQVCBGXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDg3XSA9IHRvQ2hhckNvZGUoJ1xcdTIwNDQnKTsgLy8gRlJBQ1RJT04gU0xBU0ggKHNvbGlkdXMpXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDg4XSA9IHRvQ2hhckNvZGUoJ1xcdTIwMzknKTsgLy8gU0lOR0xFIExFRlQtUE9JTlRJTkcgQU5HTEUgUVVPVEFUSU9OIE1BUktcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4ODldID0gdG9DaGFyQ29kZSgnXFx1MjAzQScpOyAvLyBTSU5HTEUgUklHSFQtUE9JTlRJTkcgQU5HTEUgUVVPVEFUSU9OIE1BUktcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OGFdID0gdG9DaGFyQ29kZSgnXFx1MjIxMicpOyAvLyBNSU5VUyBTSUdOXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDhiXSA9IHRvQ2hhckNvZGUoJ1xcdTIwMzAnKTsgLy8gUEVSIE1JTExFIFNJR05cbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OGNdID0gdG9DaGFyQ29kZSgnXFx1MjAxRScpOyAvLyBET1VCTEUgTE9XLTkgUVVPVEFUSU9OIE1BUksgKHF1b3RlZGJsYmFzZSlcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OGRdID0gdG9DaGFyQ29kZSgnXFx1MjAxQycpOyAvLyBMRUZUIERPVUJMRSBRVU9UQVRJT04gTUFSSyAocXVvdGVkYmxsZWZ0KVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg4ZV0gPSB0b0NoYXJDb2RlKCdcXHUyMDFEJyk7IC8vIFJJR0hUIERPVUJMRSBRVU9UQVRJT04gTUFSSyAocXVvdGVkYmxyaWdodClcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OGZdID0gdG9DaGFyQ29kZSgnXFx1MjAxOCcpOyAvLyBMRUZUIFNJTkdMRSBRVU9UQVRJT04gTUFSSyAocXVvdGVsZWZ0KVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5MF0gPSB0b0NoYXJDb2RlKCdcXHUyMDE5Jyk7IC8vIFJJR0hUIFNJTkdMRSBRVU9UQVRJT04gTUFSSyAocXVvdGVyaWdodClcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OTFdID0gdG9DaGFyQ29kZSgnXFx1MjAxQScpOyAvLyBTSU5HTEUgTE9XLTkgUVVPVEFUSU9OIE1BUksgKHF1b3Rlc2luZ2xiYXNlKVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5Ml0gPSB0b0NoYXJDb2RlKCdcXHUyMTIyJyk7IC8vIFRSQURFIE1BUksgU0lHTlxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5M10gPSB0b0NoYXJDb2RlKCdcXHVGQjAxJyk7IC8vIExBVElOIFNNQUxMIExJR0FUVVJFIEZJXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDk0XSA9IHRvQ2hhckNvZGUoJ1xcdUZCMDInKTsgLy8gTEFUSU4gU01BTEwgTElHQVRVUkUgRkxcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OTVdID0gdG9DaGFyQ29kZSgnXFx1MDE0MScpOyAvLyBMQVRJTiBDQVBJVEFMIExFVFRFUiBMIFdJVEggU1RST0tFXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDk2XSA9IHRvQ2hhckNvZGUoJ1xcdTAxNTInKTsgLy8gTEFUSU4gQ0FQSVRBTCBMSUdBVFVSRSBPRVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5N10gPSB0b0NoYXJDb2RlKCdcXHUwMTYwJyk7IC8vIExBVElOIENBUElUQUwgTEVUVEVSIFMgV0lUSCBDQVJPTlxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5OF0gPSB0b0NoYXJDb2RlKCdcXHUwMTc4Jyk7IC8vIExBVElOIENBUElUQUwgTEVUVEVSIFkgV0lUSCBESUFFUkVTSVNcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OTldID0gdG9DaGFyQ29kZSgnXFx1MDE3RCcpOyAvLyBMQVRJTiBDQVBJVEFMIExFVFRFUiBaIFdJVEggQ0FST05cbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OWFdID0gdG9DaGFyQ29kZSgnXFx1MDEzMScpOyAvLyBMQVRJTiBTTUFMTCBMRVRURVIgRE9UTEVTUyBJXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDliXSA9IHRvQ2hhckNvZGUoJ1xcdTAxNDInKTsgLy8gTEFUSU4gU01BTEwgTEVUVEVSIEwgV0lUSCBTVFJPS0VcbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OWNdID0gdG9DaGFyQ29kZSgnXFx1MDE1MycpOyAvLyBMQVRJTiBTTUFMTCBMSUdBVFVSRSBPRVxucGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbMHg5ZF0gPSB0b0NoYXJDb2RlKCdcXHUwMTYxJyk7IC8vIExBVElOIFNNQUxMIExFVFRFUiBTIFdJVEggQ0FST05cbnBkZkRvY0VuY29kaW5nVG9Vbmljb2RlWzB4OWVdID0gdG9DaGFyQ29kZSgnXFx1MDE3RScpOyAvLyBMQVRJTiBTTUFMTCBMRVRURVIgWiBXSVRIIENBUk9OXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweDlmXSA9IHRvQ2hhckNvZGUoJ1xcdUZGRkQnKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSIChib3ggd2l0aCBxdWVzdGlvbm1hcmspXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweGEwXSA9IHRvQ2hhckNvZGUoJ1xcdTIwQUMnKTsgLy8gRVVSTyBTSUdOXG5wZGZEb2NFbmNvZGluZ1RvVW5pY29kZVsweGFkXSA9IHRvQ2hhckNvZGUoJ1xcdUZGRkQnKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSIChib3ggd2l0aCBxdWVzdGlvbm1hcmspXG4vKipcbiAqIERlY29kZSBhIGJ5dGUgYXJyYXkgaW50byBhIHN0cmluZyB1c2luZyBQREZEb2NFbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgYSBieXRlIGFycmF5IChkZWNpbWFsIHJlcHJlc2VudGF0aW9uKSBjb250YWluaW5nIGEgc3RyaW5nXG4gKiAgICAgICAgICAgICAgZW5jb2RlZCB3aXRoIFBERkRvY0VuY29kaW5nLlxuICovXG5leHBvcnQgdmFyIHBkZkRvY0VuY29kaW5nRGVjb2RlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBuZXcgQXJyYXkoYnl0ZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBieXRlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgY29kZVBvaW50c1tpZHhdID0gcGRmRG9jRW5jb2RpbmdUb1VuaWNvZGVbYnl0ZXNbaWR4XV07XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludC5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBkZkRvY0VuY29kaW5nLmpzLm1hcCIsImltcG9ydCB7IGRlY29kZUZyb21CYXNlNjREYXRhVXJpIH0gZnJvbSBcIi4vYmFzZTY0XCI7XG5pbXBvcnQgeyBjaGFyRnJvbUNvZGUgfSBmcm9tIFwiLi9zdHJpbmdzXCI7XG5leHBvcnQgdmFyIGxhc3QgPSBmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOyB9O1xuLy8gZXhwb3J0IGNvbnN0IGRyb3BMYXN0ID0gPFQ+KGFycmF5OiBUW10pOiBUW10gPT5cbi8vIGFycmF5LnNsaWNlKDAsIGFycmF5Lmxlbmd0aCAtIDEpO1xuZXhwb3J0IHZhciB0eXBlZEFycmF5Rm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgdmFyIHR5cGVkQXJyYXkgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdHlwZWRBcnJheVtpZHhdID0gdmFsdWUuY2hhckNvZGVBdChpZHgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZWRBcnJheTtcbn07XG5leHBvcnQgdmFyIG1lcmdlSW50b1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycmF5c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgYXJyYXlDb3VudCA9IGFycmF5cy5sZW5ndGg7XG4gICAgdmFyIHR5cGVkQXJyYXlzID0gW107XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgYXJyYXlDb3VudDsgaWR4KyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBhcnJheXNbaWR4XTtcbiAgICAgICAgdHlwZWRBcnJheXNbaWR4XSA9XG4gICAgICAgICAgICBlbGVtZW50IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGVsZW1lbnQgOiB0eXBlZEFycmF5Rm9yKGVsZW1lbnQpO1xuICAgIH1cbiAgICB2YXIgdG90YWxTaXplID0gMDtcbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBhcnJheUNvdW50OyBpZHgrKykge1xuICAgICAgICB0b3RhbFNpemUgKz0gYXJyYXlzW2lkeF0ubGVuZ3RoO1xuICAgIH1cbiAgICB2YXIgbWVyZ2VkID0gbmV3IFVpbnQ4QXJyYXkodG90YWxTaXplKTtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKHZhciBhcnJJZHggPSAwOyBhcnJJZHggPCBhcnJheUNvdW50OyBhcnJJZHgrKykge1xuICAgICAgICB2YXIgYXJyID0gdHlwZWRBcnJheXNbYXJySWR4XTtcbiAgICAgICAgZm9yICh2YXIgYnl0ZUlkeCA9IDAsIGFyckxlbiA9IGFyci5sZW5ndGg7IGJ5dGVJZHggPCBhcnJMZW47IGJ5dGVJZHgrKykge1xuICAgICAgICAgICAgbWVyZ2VkW29mZnNldCsrXSA9IGFycltieXRlSWR4XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xufTtcbmV4cG9ydCB2YXIgbWVyZ2VVaW50OEFycmF5cyA9IGZ1bmN0aW9uIChhcnJheXMpIHtcbiAgICB2YXIgdG90YWxTaXplID0gMDtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBhcnJheXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHRvdGFsU2l6ZSArPSBhcnJheXNbaWR4XS5sZW5ndGg7XG4gICAgfVxuICAgIHZhciBtZXJnZWRCdWZmZXIgPSBuZXcgVWludDhBcnJheSh0b3RhbFNpemUpO1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGFycmF5cy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2lkeF07XG4gICAgICAgIG1lcmdlZEJ1ZmZlci5zZXQoYXJyYXksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBhcnJheS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWRCdWZmZXI7XG59O1xuZXhwb3J0IHZhciBhcnJheUFzU3RyaW5nID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBzdHIgKz0gY2hhckZyb21Db2RlKGFycmF5W2lkeF0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcbmV4cG9ydCB2YXIgYnlBc2NlbmRpbmdJZCA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfTtcbmV4cG9ydCB2YXIgc29ydGVkVW5pcSA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXhlcikge1xuICAgIHZhciB1bmlxID0gW107XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHZhciBjdXJyID0gYXJyYXlbaWR4XTtcbiAgICAgICAgdmFyIHByZXYgPSBhcnJheVtpZHggLSAxXTtcbiAgICAgICAgaWYgKGlkeCA9PT0gMCB8fCBpbmRleGVyKGN1cnIpICE9PSBpbmRleGVyKHByZXYpKSB7XG4gICAgICAgICAgICB1bmlxLnB1c2goY3Vycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuaXE7XG59O1xuLy8gQXJyYXlzIGFuZCBUeXBlZEFycmF5cyBpbiBKUyBib3RoIGhhdmUgLnJldmVyc2UoKSBtZXRob2RzLCB3aGljaCB3b3VsZCBzZWVtXG4vLyB0byBuZWdhdGUgdGhlIG5lZWQgZm9yIHRoaXMgZnVuY3Rpb24uIEhvd2V2ZXIsIG5vdCBhbGwgcnVudGltZXMgc3VwcG9ydCB0aGlzXG4vLyBtZXRob2QgKGUuZy4gUmVhY3QgTmF0aXZlKS4gVGhpcyBmdW5jdGlvbiBjb21wZW5zYXRlcyBmb3IgdGhhdCBmYWN0LlxuZXhwb3J0IHZhciByZXZlcnNlQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICB2YXIgYXJyYXlMZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gTWF0aC5mbG9vcihhcnJheUxlbiAvIDIpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHZhciBsZWZ0SWR4ID0gaWR4O1xuICAgICAgICB2YXIgcmlnaHRJZHggPSBhcnJheUxlbiAtIGlkeCAtIDE7XG4gICAgICAgIHZhciB0ZW1wID0gYXJyYXlbaWR4XTtcbiAgICAgICAgYXJyYXlbbGVmdElkeF0gPSBhcnJheVtyaWdodElkeF07XG4gICAgICAgIGFycmF5W3JpZ2h0SWR4XSA9IHRlbXA7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn07XG5leHBvcnQgdmFyIHN1bSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIHZhciB0b3RhbCA9IDA7XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHRvdGFsICs9IGFycmF5W2lkeF07XG4gICAgfVxuICAgIHJldHVybiB0b3RhbDtcbn07XG5leHBvcnQgdmFyIHJhbmdlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgYXJyID0gbmV3IEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGFycltpZHhdID0gc3RhcnQgKyBpZHg7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuZXhwb3J0IHZhciBwbHVja0luZGljZXMgPSBmdW5jdGlvbiAoYXJyLCBpbmRpY2VzKSB7XG4gICAgdmFyIHBsdWNrZWQgPSBuZXcgQXJyYXkoaW5kaWNlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGluZGljZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHBsdWNrZWRbaWR4XSA9IGFycltpbmRpY2VzW2lkeF1dO1xuICAgIH1cbiAgICByZXR1cm4gcGx1Y2tlZDtcbn07XG5leHBvcnQgdmFyIGNhbkJlQ29udmVydGVkVG9VaW50OEFycmF5ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZyc7XG59O1xuZXhwb3J0IHZhciB0b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZGVjb2RlRnJvbUJhc2U2NERhdGFVcmkoaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgaW5wdXRgIG11c3QgYmUgb25lIG9mIGBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXlgJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiLCIvKipcbiAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgYXQgbGVhc3Qgb25lIHRpY2sgb2YgdGhlXG4gKiBNYWNybyBUYXNrIFF1ZXVlIG9jY3Vycy5cbiAqL1xuZXhwb3J0IHZhciB3YWl0Rm9yVGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKCk7IH0sIDApO1xuICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsIi8vIHRzbGludDpkaXNhYmxlIHJhZGl4XG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIHRvIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24gaW4gZGVjaW1hbC4gVGhpcyBmdW5jdGlvblxuICogZGlmZmVycyBmcm9tIHNpbXBseSBjb252ZXJ0aW5nIGEgbnVtYmVyIHRvIGEgc3RyaW5nIHdpdGggYC50b1N0cmluZygpYFxuICogYmVjYXVzZSB0aGlzIGZ1bmN0aW9uJ3Mgb3V0cHV0IHN0cmluZyB3aWxsICoqbm90KiogY29udGFpbiBleHBvbmVudGlhbFxuICogbm90YXRpb24uXG4gKlxuICogQ3JlZGl0OiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDY1NDU1MTlcbiAqL1xuZXhwb3J0IHZhciBudW1iZXJUb1N0cmluZyA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB2YXIgbnVtU3RyID0gU3RyaW5nKG51bSk7XG4gICAgaWYgKE1hdGguYWJzKG51bSkgPCAxLjApIHtcbiAgICAgICAgdmFyIGUgPSBwYXJzZUludChudW0udG9TdHJpbmcoKS5zcGxpdCgnZS0nKVsxXSk7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuICAgICAgICAgICAgaWYgKG5lZ2F0aXZlKVxuICAgICAgICAgICAgICAgIG51bSAqPSAtMTtcbiAgICAgICAgICAgIG51bSAqPSBNYXRoLnBvdygxMCwgZSAtIDEpO1xuICAgICAgICAgICAgbnVtU3RyID0gJzAuJyArIG5ldyBBcnJheShlKS5qb2luKCcwJykgKyBudW0udG9TdHJpbmcoKS5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICBpZiAobmVnYXRpdmUpXG4gICAgICAgICAgICAgICAgbnVtU3RyID0gJy0nICsgbnVtU3RyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZSA9IHBhcnNlSW50KG51bS50b1N0cmluZygpLnNwbGl0KCcrJylbMV0pO1xuICAgICAgICBpZiAoZSA+IDIwKSB7XG4gICAgICAgICAgICBlIC09IDIwO1xuICAgICAgICAgICAgbnVtIC89IE1hdGgucG93KDEwLCBlKTtcbiAgICAgICAgICAgIG51bVN0ciA9IG51bS50b1N0cmluZygpICsgbmV3IEFycmF5KGUgKyAxKS5qb2luKCcwJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bVN0cjtcbn07XG5leHBvcnQgdmFyIHNpemVJbkJ5dGVzID0gZnVuY3Rpb24gKG4pIHsgcmV0dXJuIE1hdGguY2VpbChuLnRvU3RyaW5nKDIpLmxlbmd0aCAvIDgpOyB9O1xuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBpbnRvIGl0cyBjb25zdGl0dWVudCBieXRlcyBhbmQgcmV0dXJucyB0aGVtIGFzXG4gKiBhIG51bWJlcltdLlxuICpcbiAqIFJldHVybnMgbW9zdCBzaWduaWZpY2FudCBieXRlIGFzIGZpcnN0IGVsZW1lbnQgaW4gYXJyYXkuIEl0IG1heSBiZSBuZWNlc3NhcnlcbiAqIHRvIGNhbGwgLnJldmVyc2UoKSB0byBnZXQgdGhlIGJpdHMgaW4gdGhlIGRlc2lyZWQgb3JkZXIuXG4gKlxuICogRXhhbXBsZTpcbiAqICAgYnl0ZXNGb3IoMHgwMkE0MUUpID0+IFsgMGIxMCwgMGIxMDEwMDEwMCwgMGIxMTExMCBdXG4gKlxuICogQ3JlZGl0IGZvciBhbGdvcml0aG06IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTM2ODY1XG4gKi9cbmV4cG9ydCB2YXIgYnl0ZXNGb3IgPSBmdW5jdGlvbiAobikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KHNpemVJbkJ5dGVzKG4pKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBieXRlc1tpIC0gMV0gPSBuID4+ICgoYnl0ZXMubGVuZ3RoIC0gaSkgKiA4KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlcnMuanMubWFwIiwiZXhwb3J0IHZhciBlcnJvciA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiaW1wb3J0IHsgRm9udE5hbWVzIH0gZnJvbSAnQHBkZi1saWIvc3RhbmRhcmQtZm9udHMnO1xuZXhwb3J0IHZhciB2YWx1ZXMgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gb2JqW2tdOyB9KTsgfTtcbmV4cG9ydCB2YXIgU3RhbmRhcmRGb250VmFsdWVzID0gdmFsdWVzKEZvbnROYW1lcyk7XG5leHBvcnQgdmFyIGlzU3RhbmRhcmRGb250ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIFN0YW5kYXJkRm9udFZhbHVlcy5pbmNsdWRlcyhpbnB1dCk7XG59O1xuZXhwb3J0IHZhciByZWN0YW5nbGVzQXJlRXF1YWwgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS54ID09PSBiLnggJiYgYS55ID09PSBiLnkgJiYgYS53aWR0aCA9PT0gYi53aWR0aCAmJiBhLmhlaWdodCA9PT0gYi5oZWlnaHQ7IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3RzLmpzLm1hcCIsIi8qIHRzbGludDpkaXNhYmxlOmJhbi10eXBlcyAqL1xuaW1wb3J0IHsgdmFsdWVzIGFzIG9iamVjdFZhbHVlcyB9IGZyb20gXCIuL29iamVjdHNcIjtcbmV4cG9ydCB2YXIgYmFja3RpY2sgPSBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBcImBcIiArIHZhbCArIFwiYFwiOyB9O1xuZXhwb3J0IHZhciBzaW5nbGVRdW90ZSA9IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIFwiJ1wiICsgdmFsICsgXCInXCI7IH07XG4vLyBwcmV0dGllci1pZ25vcmVcbnZhciBmb3JtYXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHNpbmdsZVF1b3RlKHZhbHVlKTtcbiAgICBlbHNlIGlmICh0eXBlID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIGJhY2t0aWNrKHZhbHVlKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgdmFyIGNyZWF0ZVZhbHVlRXJyb3JNc2cgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlTmFtZSwgdmFsdWVzKSB7XG4gICAgdmFyIGFsbG93ZWRWYWx1ZXMgPSBuZXcgQXJyYXkodmFsdWVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICB2YXIgdiA9IHZhbHVlc1tpZHhdO1xuICAgICAgICBhbGxvd2VkVmFsdWVzW2lkeF0gPSBmb3JtYXRWYWx1ZSh2KTtcbiAgICB9XG4gICAgdmFyIGpvaW5lZFZhbHVlcyA9IGFsbG93ZWRWYWx1ZXMuam9pbignIG9yICcpO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiBiYWNrdGljayh2YWx1ZU5hbWUpICsgXCIgbXVzdCBiZSBvbmUgb2YgXCIgKyBqb2luZWRWYWx1ZXMgKyBcIiwgYnV0IHdhcyBhY3R1YWxseSBcIiArIGZvcm1hdFZhbHVlKHZhbHVlKTtcbn07XG5leHBvcnQgdmFyIGFzc2VydElzT25lT2YgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlTmFtZSwgYWxsb3dlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhbGxvd2VkVmFsdWVzKSkge1xuICAgICAgICBhbGxvd2VkVmFsdWVzID0gb2JqZWN0VmFsdWVzKGFsbG93ZWRWYWx1ZXMpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBhbGxvd2VkVmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAodmFsdWUgPT09IGFsbG93ZWRWYWx1ZXNbaWR4XSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjcmVhdGVWYWx1ZUVycm9yTXNnKHZhbHVlLCB2YWx1ZU5hbWUsIGFsbG93ZWRWYWx1ZXMpKTtcbn07XG5leHBvcnQgdmFyIGFzc2VydElzT25lT2ZPclVuZGVmaW5lZCA9IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVOYW1lLCBhbGxvd2VkVmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFsbG93ZWRWYWx1ZXMpKSB7XG4gICAgICAgIGFsbG93ZWRWYWx1ZXMgPSBvYmplY3RWYWx1ZXMoYWxsb3dlZFZhbHVlcyk7XG4gICAgfVxuICAgIGFzc2VydElzT25lT2YodmFsdWUsIHZhbHVlTmFtZSwgYWxsb3dlZFZhbHVlcy5jb25jYXQodW5kZWZpbmVkKSk7XG59O1xuZXhwb3J0IHZhciBhc3NlcnRJc1N1YnNldCA9IGZ1bmN0aW9uICh2YWx1ZXMsIHZhbHVlTmFtZSwgYWxsb3dlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhbGxvd2VkVmFsdWVzKSkge1xuICAgICAgICBhbGxvd2VkVmFsdWVzID0gb2JqZWN0VmFsdWVzKGFsbG93ZWRWYWx1ZXMpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGFzc2VydElzT25lT2YodmFsdWVzW2lkeF0sIHZhbHVlTmFtZSwgYWxsb3dlZFZhbHVlcyk7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgZ2V0VHlwZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBpZiAodmFsID09PSBudWxsKVxuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuICdzdHJpbmcnO1xuICAgIGlmIChpc05hTih2YWwpKVxuICAgICAgICByZXR1cm4gJ05hTic7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJylcbiAgICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N5bWJvbCcpXG4gICAgICAgIHJldHVybiAnc3ltYm9sJztcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ2JpZ2ludCcpXG4gICAgICAgIHJldHVybiAnYmlnaW50JztcbiAgICBpZiAodmFsLmNvbnN0cnVjdG9yICYmIHZhbC5jb25zdHJ1Y3Rvci5uYW1lKVxuICAgICAgICByZXR1cm4gdmFsLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgaWYgKHZhbC5uYW1lKVxuICAgICAgICByZXR1cm4gdmFsLm5hbWU7XG4gICAgaWYgKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWwuY29uc3RydWN0b3IpO1xuICAgIHJldHVybiBTdHJpbmcodmFsKTtcbn07XG5leHBvcnQgdmFyIGlzVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgIGlmICh0eXBlID09PSAnbnVsbCcpXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpO1xuICAgIGlmICh0eXBlID09PSAnYm9vbGVhbicpXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnO1xuICAgIGlmICh0eXBlID09PSAnYmlnaW50JylcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCc7XG4gICAgaWYgKHR5cGUgPT09IERhdGUpXG4gICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKHR5cGUgPT09IEFycmF5KVxuICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBcnJheTtcbiAgICBpZiAodHlwZSA9PT0gVWludDhBcnJheSlcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICBpZiAodHlwZSA9PT0gQXJyYXlCdWZmZXIpXG4gICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xuICAgIGlmICh0eXBlID09PSBGdW5jdGlvbilcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb247XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgdHlwZVswXTtcbn07XG5leHBvcnQgdmFyIGNyZWF0ZVR5cGVFcnJvck1zZyA9IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVOYW1lLCB0eXBlcykge1xuICAgIHZhciBhbGxvd2VkVHlwZXMgPSBuZXcgQXJyYXkodHlwZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0eXBlcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1tpZHhdO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ251bGwnKVxuICAgICAgICAgICAgYWxsb3dlZFR5cGVzW2lkeF0gPSBiYWNrdGljaygnbnVsbCcpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICBhbGxvd2VkVHlwZXNbaWR4XSA9IGJhY2t0aWNrKCd1bmRlZmluZWQnKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgYWxsb3dlZFR5cGVzW2lkeF0gPSBiYWNrdGljaygnc3RyaW5nJyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgYWxsb3dlZFR5cGVzW2lkeF0gPSBiYWNrdGljaygnbnVtYmVyJyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdib29sZWFuJylcbiAgICAgICAgICAgIGFsbG93ZWRUeXBlc1tpZHhdID0gYmFja3RpY2soJ2Jvb2xlYW4nKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpXG4gICAgICAgICAgICBhbGxvd2VkVHlwZXNbaWR4XSA9IGJhY2t0aWNrKCdzeW1ib2wnKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2JpZ2ludCcpXG4gICAgICAgICAgICBhbGxvd2VkVHlwZXNbaWR4XSA9IGJhY2t0aWNrKCdiaWdpbnQnKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gQXJyYXkpXG4gICAgICAgICAgICBhbGxvd2VkVHlwZXNbaWR4XSA9IGJhY2t0aWNrKCdBcnJheScpO1xuICAgICAgICBlbHNlIGlmICh0eXBlID09PSBVaW50OEFycmF5KVxuICAgICAgICAgICAgYWxsb3dlZFR5cGVzW2lkeF0gPSBiYWNrdGljaygnVWludDhBcnJheScpO1xuICAgICAgICBlbHNlIGlmICh0eXBlID09PSBBcnJheUJ1ZmZlcilcbiAgICAgICAgICAgIGFsbG93ZWRUeXBlc1tpZHhdID0gYmFja3RpY2soJ0FycmF5QnVmZmVyJyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFsbG93ZWRUeXBlc1tpZHhdID0gYmFja3RpY2sodHlwZVsxXSk7XG4gICAgfVxuICAgIHZhciBqb2luZWRUeXBlcyA9IGFsbG93ZWRUeXBlcy5qb2luKCcgb3IgJyk7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIGJhY2t0aWNrKHZhbHVlTmFtZSkgKyBcIiBtdXN0IGJlIG9mIHR5cGUgXCIgKyBqb2luZWRUeXBlcyArIFwiLCBidXQgd2FzIGFjdHVhbGx5IG9mIHR5cGUgXCIgKyBiYWNrdGljayhnZXRUeXBlKHZhbHVlKSk7XG59O1xuZXhwb3J0IHZhciBhc3NlcnRJcyA9IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVOYW1lLCB0eXBlcykge1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IHR5cGVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXNUeXBlKHZhbHVlLCB0eXBlc1tpZHhdKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjcmVhdGVUeXBlRXJyb3JNc2codmFsdWUsIHZhbHVlTmFtZSwgdHlwZXMpKTtcbn07XG5leHBvcnQgdmFyIGFzc2VydE9yVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZU5hbWUsIHR5cGVzKSB7XG4gICAgYXNzZXJ0SXModmFsdWUsIHZhbHVlTmFtZSwgdHlwZXMuY29uY2F0KCd1bmRlZmluZWQnKSk7XG59O1xuZXhwb3J0IHZhciBhc3NlcnRFYWNoSXMgPSBmdW5jdGlvbiAodmFsdWVzLCB2YWx1ZU5hbWUsIHR5cGVzKSB7XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBhc3NlcnRJcyh2YWx1ZXNbaWR4XSwgdmFsdWVOYW1lLCB0eXBlcyk7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgYXNzZXJ0UmFuZ2UgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlTmFtZSwgbWluLCBtYXgpIHtcbiAgICBhc3NlcnRJcyh2YWx1ZSwgdmFsdWVOYW1lLCBbJ251bWJlciddKTtcbiAgICBhc3NlcnRJcyhtaW4sICdtaW4nLCBbJ251bWJlciddKTtcbiAgICBhc3NlcnRJcyhtYXgsICdtYXgnLCBbJ251bWJlciddKTtcbiAgICBtYXggPSBNYXRoLm1heChtaW4sIG1heCk7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYmFja3RpY2sodmFsdWVOYW1lKSArIFwiIG11c3QgYmUgYXQgbGVhc3QgXCIgKyBtaW4gKyBcIiBhbmQgYXQgbW9zdCBcIiArIG1heCArIFwiLCBidXQgd2FzIGFjdHVhbGx5IFwiICsgdmFsdWUpO1xuICAgIH1cbn07XG5leHBvcnQgdmFyIGFzc2VydFJhbmdlT3JVbmRlZmluZWQgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlTmFtZSwgbWluLCBtYXgpIHtcbiAgICBhc3NlcnRJcyh2YWx1ZSwgdmFsdWVOYW1lLCBbJ251bWJlcicsICd1bmRlZmluZWQnXSk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgIGFzc2VydFJhbmdlKHZhbHVlLCB2YWx1ZU5hbWUsIG1pbiwgbWF4KTtcbn07XG5leHBvcnQgdmFyIGFzc2VydE11bHRpcGxlID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZU5hbWUsIG11bHRpcGxpZXIpIHtcbiAgICBhc3NlcnRJcyh2YWx1ZSwgdmFsdWVOYW1lLCBbJ251bWJlciddKTtcbiAgICBpZiAodmFsdWUgJSBtdWx0aXBsaWVyICE9PSAwKSB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYmFja3RpY2sodmFsdWVOYW1lKSArIFwiIG11c3QgYmUgYSBtdWx0aXBsZSBvZiBcIiArIG11bHRpcGxpZXIgKyBcIiwgYnV0IHdhcyBhY3R1YWxseSBcIiArIHZhbHVlKTtcbiAgICB9XG59O1xuZXhwb3J0IHZhciBhc3NlcnRJbnRlZ2VyID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZU5hbWUpIHtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihiYWNrdGljayh2YWx1ZU5hbWUpICsgXCIgbXVzdCBiZSBhbiBpbnRlZ2VyLCBidXQgd2FzIGFjdHVhbGx5IFwiICsgdmFsdWUpO1xuICAgIH1cbn07XG5leHBvcnQgdmFyIGFzc2VydFBvc2l0aXZlID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZU5hbWUpIHtcbiAgICBpZiAoIVsxLCAwXS5pbmNsdWRlcyhNYXRoLnNpZ24odmFsdWUpKSkge1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGJhY2t0aWNrKHZhbHVlTmFtZSkgKyBcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIG9yIDAsIGJ1dCB3YXMgYWN0dWFsbHkgXCIgKyB2YWx1ZSk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIiwidmFyIENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhY2hlKHBvcHVsYXRlKSB7XG4gICAgICAgIHRoaXMucG9wdWxhdGUgPSBwb3B1bGF0ZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgQ2FjaGUucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9O1xuICAgIENhY2hlLnByb3RvdHlwZS5hY2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy52YWx1ZSlcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnBvcHVsYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG4gICAgQ2FjaGUucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBDYWNoZS5wb3B1bGF0ZWRCeSA9IGZ1bmN0aW9uIChwb3B1bGF0ZSkgeyByZXR1cm4gbmV3IENhY2hlKHBvcHVsYXRlKTsgfTtcbiAgICByZXR1cm4gQ2FjaGU7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWNoZS5qcy5tYXAiLCJleHBvcnQgdmFyIHRvQ2hhckNvZGUgPSBmdW5jdGlvbiAoY2hhcmFjdGVyKSB7IHJldHVybiBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKTsgfTtcbmV4cG9ydCB2YXIgdG9Db2RlUG9pbnQgPSBmdW5jdGlvbiAoY2hhcmFjdGVyKSB7IHJldHVybiBjaGFyYWN0ZXIuY29kZVBvaW50QXQoMCk7IH07XG5leHBvcnQgdmFyIHRvSGV4U3RyaW5nT2ZNaW5MZW5ndGggPSBmdW5jdGlvbiAobnVtLCBtaW5MZW5ndGgpIHtcbiAgICByZXR1cm4gcGFkU3RhcnQobnVtLnRvU3RyaW5nKDE2KSwgbWluTGVuZ3RoLCAnMCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuZXhwb3J0IHZhciB0b0hleFN0cmluZyA9IGZ1bmN0aW9uIChudW0pIHsgcmV0dXJuIHRvSGV4U3RyaW5nT2ZNaW5MZW5ndGgobnVtLCAyKTsgfTtcbmV4cG9ydCB2YXIgY2hhckZyb21Db2RlID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7IH07XG5leHBvcnQgdmFyIGNoYXJGcm9tSGV4Q29kZSA9IGZ1bmN0aW9uIChoZXgpIHsgcmV0dXJuIGNoYXJGcm9tQ29kZShwYXJzZUludChoZXgsIDE2KSk7IH07XG5leHBvcnQgdmFyIHBhZFN0YXJ0ID0gZnVuY3Rpb24gKHZhbHVlLCBsZW5ndGgsIHBhZENoYXIpIHtcbiAgICB2YXIgcGFkZGluZyA9ICcnO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGxlbmd0aCAtIHZhbHVlLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBwYWRkaW5nICs9IHBhZENoYXI7XG4gICAgfVxuICAgIHJldHVybiBwYWRkaW5nICsgdmFsdWU7XG59O1xuZXhwb3J0IHZhciBjb3B5U3RyaW5nSW50b0J1ZmZlciA9IGZ1bmN0aW9uIChzdHIsIGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gc3RyLmNoYXJDb2RlQXQoaWR4KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbn07XG5leHBvcnQgdmFyIGFkZFJhbmRvbVN1ZmZpeCA9IGZ1bmN0aW9uIChwcmVmaXgsIHN1ZmZpeExlbmd0aCkge1xuICAgIGlmIChzdWZmaXhMZW5ndGggPT09IHZvaWQgMCkgeyBzdWZmaXhMZW5ndGggPSA0OyB9XG4gICAgcmV0dXJuIHByZWZpeCArIFwiLVwiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTAsIHN1ZmZpeExlbmd0aCkpO1xufTtcbmV4cG9ydCB2YXIgZXNjYXBlUmVnRXhwID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTtcbn07XG5leHBvcnQgdmFyIGNsZWFuVGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvXFx0fFxcdTAwODV8XFx1MjAyOHxcXHUyMDI5L2csICcgICAgJykucmVwbGFjZSgvW1xcYlxcdl0vZywgJycpO1xufTtcbmV4cG9ydCB2YXIgZXNjYXBlZE5ld2xpbmVDaGFycyA9IFsnXFxcXG4nLCAnXFxcXGYnLCAnXFxcXHInLCAnXFxcXHUwMDBCJ107XG5leHBvcnQgdmFyIG5ld2xpbmVDaGFycyA9IFsnXFxuJywgJ1xcZicsICdcXHInLCAnXFx1MDAwQiddO1xuZXhwb3J0IHZhciBpc05ld2xpbmVDaGFyID0gZnVuY3Rpb24gKHRleHQpIHsgcmV0dXJuIC9eW1xcblxcZlxcclxcdTAwMEJdJC8udGVzdCh0ZXh0KTsgfTtcbmV4cG9ydCB2YXIgbGluZVNwbGl0ID0gZnVuY3Rpb24gKHRleHQpIHsgcmV0dXJuIHRleHQuc3BsaXQoL1tcXG5cXGZcXHJcXHUwMDBCXS8pOyB9O1xuZXhwb3J0IHZhciBtZXJnZUxpbmVzID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXFxuXFxmXFxyXFx1MDAwQl0vZywgJyAnKTtcbn07XG4vLyBKYXZhU2NyaXB0J3MgU3RyaW5nLmNoYXJBdCgpIG1ldGhvZCBkb2VzbiB3b3JrIG9uIHN0cmluZ3MgY29udGFpbmluZyBVVEYtMTZcbi8vIGNoYXJhY3RlcnMgKHdpdGggaGlnaCBhbmQgbG93IHN1cnJvZ2F0ZSBwYWlycyksIHN1Y2ggYXMg8J+SqSAocG9vIGVtb2ppKS4gVGhpc1xuLy8gYGNoYXJBdEluZGV4KClgIGZ1bmN0aW9uIGRvZXMuXG4vL1xuLy8gQ3JlZGl0OiBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0L2Jsb2IvbWFzdGVyL2F0LmpzI0wxNC1MNDhcbmV4cG9ydCB2YXIgY2hhckF0SW5kZXggPSBmdW5jdGlvbiAodGV4dCwgaW5kZXgpIHtcbiAgICAvLyBHZXQgdGhlIGZpcnN0IGNvZGUgdW5pdCBhbmQgY29kZSB1bml0IHZhbHVlXG4gICAgdmFyIGN1Rmlyc3QgPSB0ZXh0LmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgIHZhciBjdVNlY29uZDtcbiAgICB2YXIgbmV4dEluZGV4ID0gaW5kZXggKyAxO1xuICAgIHZhciBsZW5ndGggPSAxO1xuICAgIGlmIChcbiAgICAvLyBDaGVjayBpZiBpdCdzIHRoZSBzdGFydCBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgIGN1Rmlyc3QgPj0gMHhkODAwICYmXG4gICAgICAgIGN1Rmlyc3QgPD0gMHhkYmZmICYmIC8vIGhpZ2ggc3Vycm9nYXRlXG4gICAgICAgIHRleHQubGVuZ3RoID4gbmV4dEluZGV4IC8vIHRoZXJlIGlzIGEgbmV4dCBjb2RlIHVuaXRcbiAgICApIHtcbiAgICAgICAgY3VTZWNvbmQgPSB0ZXh0LmNoYXJDb2RlQXQobmV4dEluZGV4KTtcbiAgICAgICAgaWYgKGN1U2Vjb25kID49IDB4ZGMwMCAmJiBjdVNlY29uZCA8PSAweGRmZmYpXG4gICAgICAgICAgICBsZW5ndGggPSAyOyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgfVxuICAgIHJldHVybiBbdGV4dC5zbGljZShpbmRleCwgaW5kZXggKyBsZW5ndGgpLCBsZW5ndGhdO1xufTtcbmV4cG9ydCB2YXIgY2hhclNwbGl0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICB2YXIgY2hhcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSB0ZXh0Lmxlbmd0aDsgaWR4IDwgbGVuOykge1xuICAgICAgICB2YXIgX2EgPSBjaGFyQXRJbmRleCh0ZXh0LCBpZHgpLCBjID0gX2FbMF0sIGNMZW4gPSBfYVsxXTtcbiAgICAgICAgY2hhcnMucHVzaChjKTtcbiAgICAgICAgaWR4ICs9IGNMZW47XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbn07XG52YXIgYnVpbGRXb3JkQnJlYWtSZWdleCA9IGZ1bmN0aW9uICh3b3JkQnJlYWtzKSB7XG4gICAgdmFyIG5ld2xpbmVDaGFyVW5pb24gPSBlc2NhcGVkTmV3bGluZUNoYXJzLmpvaW4oJ3wnKTtcbiAgICB2YXIgZXNjYXBlZFJ1bGVzID0gWyckJ107XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd29yZEJyZWFrcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIHdvcmRCcmVhayA9IHdvcmRCcmVha3NbaWR4XTtcbiAgICAgICAgaWYgKGlzTmV3bGluZUNoYXIod29yZEJyZWFrKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImB3b3JkQnJlYWtgIG11c3Qgbm90IGluY2x1ZGUgXCIgKyBuZXdsaW5lQ2hhclVuaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGVkUnVsZXMucHVzaCh3b3JkQnJlYWsgPT09ICcnID8gJy4nIDogZXNjYXBlUmVnRXhwKHdvcmRCcmVhaykpO1xuICAgIH1cbiAgICB2YXIgYnJlYWtSdWxlcyA9IGVzY2FwZWRSdWxlcy5qb2luKCd8Jyk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoXCIgKyBuZXdsaW5lQ2hhclVuaW9uICsgXCIpfCgoLio/KShcIiArIGJyZWFrUnVsZXMgKyBcIikpXCIsICdnbScpO1xufTtcbmV4cG9ydCB2YXIgYnJlYWtUZXh0SW50b0xpbmVzID0gZnVuY3Rpb24gKHRleHQsIHdvcmRCcmVha3MsIG1heFdpZHRoLCBjb21wdXRlV2lkdGhPZlRleHQpIHtcbiAgICB2YXIgcmVnZXggPSBidWlsZFdvcmRCcmVha1JlZ2V4KHdvcmRCcmVha3MpO1xuICAgIHZhciB3b3JkcyA9IGNsZWFuVGV4dCh0ZXh0KS5tYXRjaChyZWdleCk7XG4gICAgdmFyIGN1cnJMaW5lID0gJyc7XG4gICAgdmFyIGN1cnJXaWR0aCA9IDA7XG4gICAgdmFyIGxpbmVzID0gW107XG4gICAgdmFyIHB1c2hDdXJyTGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGN1cnJMaW5lICE9PSAnJylcbiAgICAgICAgICAgIGxpbmVzLnB1c2goY3VyckxpbmUpO1xuICAgICAgICBjdXJyTGluZSA9ICcnO1xuICAgICAgICBjdXJyV2lkdGggPSAwO1xuICAgIH07XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gd29yZHMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIHZhciB3b3JkID0gd29yZHNbaWR4XTtcbiAgICAgICAgaWYgKGlzTmV3bGluZUNoYXIod29yZCkpIHtcbiAgICAgICAgICAgIHB1c2hDdXJyTGluZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gY29tcHV0ZVdpZHRoT2ZUZXh0KHdvcmQpO1xuICAgICAgICAgICAgaWYgKGN1cnJXaWR0aCArIHdpZHRoID4gbWF4V2lkdGgpXG4gICAgICAgICAgICAgICAgcHVzaEN1cnJMaW5lKCk7XG4gICAgICAgICAgICBjdXJyTGluZSArPSB3b3JkO1xuICAgICAgICAgICAgY3VycldpZHRoICs9IHdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1c2hDdXJyTGluZSgpO1xuICAgIHJldHVybiBsaW5lcztcbn07XG4vLyBTZWUgc2VjdGlvbiBcIjcuOS40IERhdGVzXCIgb2YgdGhlIFBERiBzcGVjaWZpY2F0aW9uXG52YXIgZGF0ZVJlZ2V4ID0gL15EOihcXGRcXGRcXGRcXGQpKFxcZFxcZCk/KFxcZFxcZCk/KFxcZFxcZCk/KFxcZFxcZCk/KFxcZFxcZCk/KFsrXFwtWl0pPyhcXGRcXGQpPyc/KFxcZFxcZCk/Jz8kLztcbmV4cG9ydCB2YXIgcGFyc2VEYXRlID0gZnVuY3Rpb24gKGRhdGVTdHIpIHtcbiAgICB2YXIgbWF0Y2ggPSBkYXRlU3RyLm1hdGNoKGRhdGVSZWdleCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB2YXIgeWVhciA9IG1hdGNoWzFdLCBfYSA9IG1hdGNoWzJdLCBtb250aCA9IF9hID09PSB2b2lkIDAgPyAnMDEnIDogX2EsIF9iID0gbWF0Y2hbM10sIGRheSA9IF9iID09PSB2b2lkIDAgPyAnMDEnIDogX2IsIF9jID0gbWF0Y2hbNF0sIGhvdXJzID0gX2MgPT09IHZvaWQgMCA/ICcwMCcgOiBfYywgX2QgPSBtYXRjaFs1XSwgbWlucyA9IF9kID09PSB2b2lkIDAgPyAnMDAnIDogX2QsIF9lID0gbWF0Y2hbNl0sIHNlY3MgPSBfZSA9PT0gdm9pZCAwID8gJzAwJyA6IF9lLCBfZiA9IG1hdGNoWzddLCBvZmZzZXRTaWduID0gX2YgPT09IHZvaWQgMCA/ICdaJyA6IF9mLCBfZyA9IG1hdGNoWzhdLCBvZmZzZXRIb3VycyA9IF9nID09PSB2b2lkIDAgPyAnMDAnIDogX2csIF9oID0gbWF0Y2hbOV0sIG9mZnNldE1pbnMgPSBfaCA9PT0gdm9pZCAwID8gJzAwJyA6IF9oO1xuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS45LjEuMTVcbiAgICB2YXIgdHpPZmZzZXQgPSBvZmZzZXRTaWduID09PSAnWicgPyAnWicgOiBcIlwiICsgb2Zmc2V0U2lnbiArIG9mZnNldEhvdXJzICsgXCI6XCIgKyBvZmZzZXRNaW5zO1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoeWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRheSArIFwiVFwiICsgaG91cnMgKyBcIjpcIiArIG1pbnMgKyBcIjpcIiArIHNlY3MgKyB0ek9mZnNldCk7XG4gICAgcmV0dXJuIGRhdGU7XG59O1xuZXhwb3J0IHZhciBmaW5kTGFzdE1hdGNoID0gZnVuY3Rpb24gKHZhbHVlLCByZWdleCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBsYXN0TWF0Y2g7XG4gICAgd2hpbGUgKHBvc2l0aW9uIDwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLnN1YnN0cmluZyhwb3NpdGlvbikubWF0Y2gocmVnZXgpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuIHsgbWF0Y2g6IGxhc3RNYXRjaCwgcG9zOiBwb3NpdGlvbiB9O1xuICAgICAgICBsYXN0TWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgcG9zaXRpb24gKz0gKChfYSA9IG1hdGNoLmluZGV4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWF0Y2g6IGxhc3RNYXRjaCwgcG9zOiBwb3NpdGlvbiB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ3MuanMubWFwIiwiaW1wb3J0IHsgdG9IZXhTdHJpbmcgfSBmcm9tIFwiLi9zdHJpbmdzXCI7XG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgdG8gVVRGLTguXG4gKlxuICogQHBhcmFtIGlucHV0IFRoZSBzdHJpbmcgdG8gYmUgZW5jb2RlZC5cbiAqIEBwYXJhbSBieXRlT3JkZXJNYXJrIFdoZXRoZXIgb3Igbm90IGEgYnl0ZSBvcmRlciBtYXJrZXIgKEJPTSkgc2hvdWxkIGJlIGFkZGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc3RhcnQgb2YgdGhlIGVuY29kaW5nLiAoZGVmYXVsdCBgdHJ1ZWApXG4gKiBAcmV0dXJucyBBIFVpbnQ4QXJyYXkgY29udGFpbmluZyB0aGUgVVRGLTggZW5jb2Rpbmcgb2YgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEphdmFTY3JpcHQgc3RyaW5ncyBhcmUgY29tcG9zZWQgb2YgVW5pY29kZSBjb2RlIHBvaW50cy4gQ29kZSBwb2ludHMgYXJlXG4gKiBpbnRlZ2VycyBpbiB0aGUgcmFuZ2UgMCB0byAxLDExNCwxMTEgKDB4MTBGRkZGKS4gV2hlbiBzZXJpYWxpemluZyBhIHN0cmluZyxcbiAqIGl0IG11c3QgYmUgZW5jb2RlZCBhcyBhIHNlcXVlbmNlIG9mIHdvcmRzLiBBIHdvcmQgaXMgdHlwaWNhbGx5IDgsIDE2LCBvciAzMlxuICogYnl0ZXMgaW4gc2l6ZS4gQXMgc3VjaCwgVW5pY29kZSBkZWZpbmVzIHRocmVlIGVuY29kaW5nIGZvcm1zOiBVVEYtOCwgVVRGLTE2LFxuICogYW5kIFVURi0zMi4gVGhlc2UgZW5jb2RpbmcgZm9ybXMgYXJlIGRlc2NyaWJlZCBpbiB0aGUgVW5pY29kZSBzdGFuZGFyZCBbMV0uXG4gKiBUaGlzIGZ1bmN0aW9uIGltcGxlbWVudHMgdGhlIFVURi04IGVuY29kaW5nIGZvcm0uXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBJbiBVVEYtOCwgZWFjaCBjb2RlIHBvaW50IGlzIG1hcHBlZCB0byBhIHNlcXVlbmNlIG9mIDEsIDIsIDMsIG9yIDQgYnl0ZXMuXG4gKiBOb3RlIHRoYXQgdGhlIGxvZ2ljIHdoaWNoIGRlZmluZXMgdGhpcyBtYXBwaW5nIGlzIHNsaWdodGx5IGNvbnZvbHV0ZWQsIGFuZFxuICogbm90IGFzIHN0cmFpZ2h0Zm9yd2FyZCBhcyB0aGUgbWFwcGluZyBsb2dpYyBmb3IgVVRGLTE2IG9yIFVURi0zMi4gVGhlIFVURi04XG4gKiBtYXBwaW5nIGxvZ2ljIGlzIGFzIGZvbGxvd3MgWzJdOlxuICpcbiAqIOKAoiBJZiBhIGNvZGUgcG9pbnQgaXMgaW4gdGhlIHJhbmdlIFUrMDAwMC4uVSswMDdGLCB0aGVuIHZpZXcgaXQgYXMgYSA3LWJpdFxuICogICBpbnRlZ2VyOiAwYnh4eHh4eHguIE1hcCB0aGUgY29kZSBwb2ludCB0byAxIGJ5dGUgd2l0aCB0aGUgZmlyc3QgaGlnaCBvcmRlclxuICogICBiaXQgc2V0IHRvIDA6XG4gKlxuICogICAgICAgYjE9MGIweHh4eHh4eFxuICpcbiAqIOKAoiBJZiBhIGNvZGUgcG9pbnQgaXMgaW4gdGhlIHJhbmdlIFUrMDA4MC4uVSswN0ZGLCB0aGVuIHZpZXcgaXQgYXMgYW4gMTEtYml0XG4gKiAgIGludGVnZXI6IDBieXl5eXl4eHh4eHguIE1hcCB0aGUgY29kZSBwb2ludCB0byAyIGJ5dGVzIHdpdGggdGhlIGZpcnN0IDUgYml0c1xuICogICBvZiB0aGUgY29kZSBwb2ludCBzdG9yZWQgaW4gdGhlIGZpcnN0IGJ5dGUsIGFuZCB0aGUgbGFzdCA2IGJpdHMgc3RvcmVkIGluXG4gKiAgIHRoZSBzZWNvbmQgYnl0ZTpcbiAqXG4gKiAgICAgICBiMT0wYjExMHl5eXl5ICAgIGIyPTBiMTB4eHh4eHhcbiAqXG4gKiDigKIgSWYgYSBjb2RlIHBvaW50IGlzIGluIHRoZSByYW5nZSBVKzA4MDAuLlUrRkZGRiwgdGhlbiB2aWV3IGl0IGFzIGEgMTYtYml0XG4gKiAgIGludGVnZXIsIDBienp6enl5eXl5eXh4eHh4eC4gTWFwIHRoZSBjb2RlIHBvaW50IHRvIDMgYnl0ZXMgd2l0aCB0aGUgZmlyc3RcbiAqICAgNCBiaXRzIHN0b3JlZCBpbiB0aGUgZmlyc3QgYnl0ZSwgdGhlIG5leHQgNiBiaXRzIHN0b3JlZCBpbiB0aGUgc2Vjb25kIGJ5dGUsXG4gKiAgIGFuZCB0aGUgbGFzdCA2IGJpdHMgaW4gdGhlIHRoaXJkIGJ5dGU6XG4gKlxuICogICAgICAgYjE9MGIxMTEwenp6eiAgICBiMj0wYjEweXl5eXl5ICAgIGIzPTBiMTB4eHh4eHhcbiAqXG4gKiDigKIgSWYgYSBjb2RlIHBvaW50IGlzIGluIHRoZSByYW5nZSBVKzEwMDAwLi4uVSsxMEZGRkYsIHRoZW4gdmlldyBpdCBhcyBhXG4gKiAgIDIxLWJpdCBpbnRlZ2VyLCAwYnZ2dnp6enp6enl5eXl5eXh4eHh4eC4gTWFwIHRoZSBjb2RlIHBvaW50IHRvIDQgYnl0ZXMgd2l0aFxuICogICB0aGUgZmlyc3QgMyBiaXRzIHN0b3JlZCBpbiB0aGUgZmlyc3QgYnl0ZSwgdGhlIG5leHQgNiBiaXRzIHN0b3JlZCBpbiB0aGVcbiAqICAgc2Vjb25kIGJ5dGUsIHRoZSBuZXh0IDYgYml0cyBzdG9yZWQgaW4gdGhlIHRoaXJkIGJ5dGUsIGFuZCB0aGUgbGFzdCA2IGJpdHNcbiAqICAgc3RvcmVkIGluIHRoZSBmb3VydGggYnl0ZTpcbiAqXG4gKiAgICAgICBiMT0wYjExMTEweHh4ICAgIGIyPTBiMTB6enp6enogICAgYjM9MGIxMHl5eXl5eSAgICBiND0wYjEweHh4eHh4XG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBJdCBpcyBpbXBvcnRhbnQgdG8gbm90ZSwgd2hlbiBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgY29kZSBwb2ludHMgb2YgYSBzdHJpbmdcbiAqIGluIEphdmFTY3JpcHQsIHRoYXQgaWYgYSBjaGFyYWN0ZXIgaXMgZW5jb2RlZCBhcyBhIHN1cnJvZ2F0ZSBwYWlyIGl0IHdpbGxcbiAqIGluY3JlYXNlIHRoZSBzdHJpbmcncyBsZW5ndGggYnkgMiBpbnN0ZWFkIG9mIDEgWzRdLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqID4gJ2EnLmxlbmd0aFxuICogMVxuICogPiAn8J+SqScubGVuZ3RoXG4gKiAyXG4gKiA+ICfoqp4nLmxlbmd0aFxuICogMVxuICogPiAnYfCfkqnoqp4nLmxlbmd0aFxuICogNFxuICogYGBgXG4gKlxuICogVGhlIHJlc3VsdHMgb2YgdGhlIGFib3ZlIGV4YW1wbGUgYXJlIGV4cGxhaW5lZCBieSB0aGUgZmFjdCB0aGF0IHRoZVxuICogY2hhcmFjdGVycyAnYScgYW5kICfoqp4nIGFyZSBub3QgcmVwcmVzZW50ZWQgYnkgc3Vycm9nYXRlIHBhaXJzLCBidXQgJ/CfkqknIGlzLlxuICpcbiAqIEJlY2F1c2Ugb2YgdGhpcyBpZGlvc3luY3Jhc3kgaW4gSmF2YVNjcmlwdCdzIHN0cmluZyBpbXBsZW1lbnRhdGlvbiBhbmQgQVBJcyxcbiAqIHdlIG11c3QgXCJqdW1wXCIgYW4gZXh0cmEgaW5kZXggYWZ0ZXIgZW5jb2RpbmcgYSBjaGFyYWN0ZXIgYXMgYSBzdXJyb2dhdGVcbiAqIHBhaXIuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zIHdlIG11c3QgaW5jcmVtZW50IHRoZSBpbmRleCBvZiBvdXIgZm9yIGxvb3AgYnlcbiAqIDIgaWYgd2UgZW5jb2RlIGEgc3Vycm9nYXRlIHBhaXIsIGFuZCAxIGluIGFsbCBvdGhlciBjYXNlcy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKiAgIC0gWzFdIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zL1VuaWNvZGUxMi4wLjAvVW5pY29kZVN0YW5kYXJkLTEyLjAucGRmXG4gKiAgICAgICAgIDMuOSAgVW5pY29kZSBFbmNvZGluZyBGb3JtcyAtIFVURi04XG4gKiAgIC0gWzJdIGh0dHA6Ly93d3cuaGVyb25neWFuZy5jb20vVW5pY29kZS9VVEYtOC1VVEYtOC1FbmNvZGluZy5odG1sXG4gKiAgIC0gWzNdIGh0dHA6Ly93d3cuaGVyb25neWFuZy5jb20vVW5pY29kZS9VVEYtOC1VVEYtOC1FbmNvZGluZy1BbGdvcml0aG0uaHRtbFxuICogICAtIFs0XSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvbGVuZ3RoI0Rlc2NyaXB0aW9uXG4gKlxuICovXG5leHBvcnQgdmFyIHV0ZjhFbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQsIGJ5dGVPcmRlck1hcmspIHtcbiAgICBpZiAoYnl0ZU9yZGVyTWFyayA9PT0gdm9pZCAwKSB7IGJ5dGVPcmRlck1hcmsgPSB0cnVlOyB9XG4gICAgdmFyIGVuY29kZWQgPSBbXTtcbiAgICBpZiAoYnl0ZU9yZGVyTWFyaylcbiAgICAgICAgZW5jb2RlZC5wdXNoKDB4ZWYsIDB4YmIsIDB4YmYpO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGlucHV0Lmxlbmd0aDsgaWR4IDwgbGVuOykge1xuICAgICAgICB2YXIgY29kZVBvaW50ID0gaW5wdXQuY29kZVBvaW50QXQoaWR4KTtcbiAgICAgICAgLy8gT25lIGJ5dGUgZW5jb2RpbmdcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgICAgICAgIHZhciBieXRlMSA9IGNvZGVQb2ludCAmIDB4N2Y7XG4gICAgICAgICAgICBlbmNvZGVkLnB1c2goYnl0ZTEpO1xuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHdvIGJ5dGUgZW5jb2RpbmdcbiAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHgwODAwKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZTEgPSAoKGNvZGVQb2ludCA+PiA2KSAmIDB4MWYpIHwgMHhjMDtcbiAgICAgICAgICAgIHZhciBieXRlMiA9IChjb2RlUG9pbnQgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgICBlbmNvZGVkLnB1c2goYnl0ZTEsIGJ5dGUyKTtcbiAgICAgICAgICAgIGlkeCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRocmVlIGJ5dGUgZW5jb2RpbmdcbiAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHgwMTAwMDApIHtcbiAgICAgICAgICAgIHZhciBieXRlMSA9ICgoY29kZVBvaW50ID4+IDEyKSAmIDB4MGYpIHwgMHhlMDtcbiAgICAgICAgICAgIHZhciBieXRlMiA9ICgoY29kZVBvaW50ID4+IDYpICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgICAgdmFyIGJ5dGUzID0gKGNvZGVQb2ludCAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgICAgIGVuY29kZWQucHVzaChieXRlMSwgYnl0ZTIsIGJ5dGUzKTtcbiAgICAgICAgICAgIGlkeCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvdXIgYnl0ZSBlbmNvZGluZyAoc3Vycm9nYXRlIHBhaXIpXG4gICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZTEgPSAoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4ZjA7XG4gICAgICAgICAgICB2YXIgYnl0ZTIgPSAoKGNvZGVQb2ludCA+PiAxMikgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgICB2YXIgYnl0ZTMgPSAoKGNvZGVQb2ludCA+PiA2KSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgICAgIHZhciBieXRlNCA9ICgoY29kZVBvaW50ID4+IDApICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgICAgZW5jb2RlZC5wdXNoKGJ5dGUxLCBieXRlMiwgYnl0ZTMsIGJ5dGU0KTtcbiAgICAgICAgICAgIGlkeCArPSAyO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3VsZCBuZXZlciByZWFjaCB0aGlzIGNhc2VcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50OiAweFwiICsgdG9IZXhTdHJpbmcoY29kZVBvaW50KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShlbmNvZGVkKTtcbn07XG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgdG8gVVRGLTE2LlxuICpcbiAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIHRvIGJlIGVuY29kZWQuXG4gKiBAcGFyYW0gYnl0ZU9yZGVyTWFyayBXaGV0aGVyIG9yIG5vdCBhIGJ5dGUgb3JkZXIgbWFya2VyIChCT00pIHNob3VsZCBiZSBhZGRlZFxuICogICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHN0YXJ0IG9mIHRoZSBlbmNvZGluZy4gKGRlZmF1bHQgYHRydWVgKVxuICogQHJldHVybnMgQSBVaW50MTZBcnJheSBjb250YWluaW5nIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEphdmFTY3JpcHQgc3RyaW5ncyBhcmUgY29tcG9zZWQgb2YgVW5pY29kZSBjb2RlIHBvaW50cy4gQ29kZSBwb2ludHMgYXJlXG4gKiBpbnRlZ2VycyBpbiB0aGUgcmFuZ2UgMCB0byAxLDExNCwxMTEgKDB4MTBGRkZGKS4gV2hlbiBzZXJpYWxpemluZyBhIHN0cmluZyxcbiAqIGl0IG11c3QgYmUgZW5jb2RlZCBhcyBhIHNlcXVlbmNlIG9mIHdvcmRzLiBBIHdvcmQgaXMgdHlwaWNhbGx5IDgsIDE2LCBvciAzMlxuICogYnl0ZXMgaW4gc2l6ZS4gQXMgc3VjaCwgVW5pY29kZSBkZWZpbmVzIHRocmVlIGVuY29kaW5nIGZvcm1zOiBVVEYtOCwgVVRGLTE2LFxuICogYW5kIFVURi0zMi4gVGhlc2UgZW5jb2RpbmcgZm9ybXMgYXJlIGRlc2NyaWJlZCBpbiB0aGUgVW5pY29kZSBzdGFuZGFyZCBbMV0uXG4gKiBUaGlzIGZ1bmN0aW9uIGltcGxlbWVudHMgdGhlIFVURi0xNiBlbmNvZGluZyBmb3JtLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogSW4gVVRGLTE2LCBlYWNoIGNvZGUgcG9pbnQgaXMgbWFwcGVkIHRvIG9uZSBvciB0d28gMTYtYml0IGludGVnZXJzLiBUaGVcbiAqIFVURi0xNiBtYXBwaW5nIGxvZ2ljIGlzIGFzIGZvbGxvd3MgWzJdOlxuICpcbiAqIOKAoiBJZiBhIGNvZGUgcG9pbnQgaXMgaW4gdGhlIHJhbmdlIFUrMDAwMC4uVStGRkZGLCB0aGVuIG1hcCB0aGUgY29kZSBwb2ludCB0b1xuICogICBhIDE2LWJpdCBpbnRlZ2VyIHdpdGggdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBmaXJzdC5cbiAqXG4gKiDigKIgSWYgYSBjb2RlIHBvaW50IGlzIGluIHRoZSByYW5nZSBVKzEwMDAwLi5VKzEwMDAwLCB0aGVuIG1hcCB0aGUgY29kZSBwb2ludFxuICogICB0byB0d28gMTYtYml0IGludGVnZXJzLiBUaGUgZmlyc3QgaW50ZWdlciBzaG91bGQgY29udGFpbiB0aGUgaGlnaCBzdXJyb2dhdGVcbiAqICAgYW5kIHRoZSBzZWNvbmQgaW50ZWdlciBzaG91bGQgY29udGFpbiB0aGUgbG93IHN1cnJvZ2F0ZS4gQm90aCBzdXJyb2dhdGVzXG4gKiAgIHNob3VsZCBiZSB3cml0dGVuIHdpdGggdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBmaXJzdC5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEl0IGlzIGltcG9ydGFudCB0byBub3RlLCB3aGVuIGl0ZXJhdGluZyB0aHJvdWdoIHRoZSBjb2RlIHBvaW50cyBvZiBhIHN0cmluZ1xuICogaW4gSmF2YVNjcmlwdCwgdGhhdCBpZiBhIGNoYXJhY3RlciBpcyBlbmNvZGVkIGFzIGEgc3Vycm9nYXRlIHBhaXIgaXQgd2lsbFxuICogaW5jcmVhc2UgdGhlIHN0cmluZydzIGxlbmd0aCBieSAyIGluc3RlYWQgb2YgMSBbNF0uIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogPiAnYScubGVuZ3RoXG4gKiAxXG4gKiA+ICfwn5KpJy5sZW5ndGhcbiAqIDJcbiAqID4gJ+iqnicubGVuZ3RoXG4gKiAxXG4gKiA+ICdh8J+SqeiqnicubGVuZ3RoXG4gKiA0XG4gKiBgYGBcbiAqXG4gKiBUaGUgcmVzdWx0cyBvZiB0aGUgYWJvdmUgZXhhbXBsZSBhcmUgZXhwbGFpbmVkIGJ5IHRoZSBmYWN0IHRoYXQgdGhlXG4gKiBjaGFyYWN0ZXJzICdhJyBhbmQgJ+iqnicgYXJlIG5vdCByZXByZXNlbnRlZCBieSBzdXJyb2dhdGUgcGFpcnMsIGJ1dCAn8J+SqScgaXMuXG4gKlxuICogQmVjYXVzZSBvZiB0aGlzIGlkaW9zeW5jcmFzeSBpbiBKYXZhU2NyaXB0J3Mgc3RyaW5nIGltcGxlbWVudGF0aW9uIGFuZCBBUElzLFxuICogd2UgbXVzdCBcImp1bXBcIiBhbiBleHRyYSBpbmRleCBhZnRlciBlbmNvZGluZyBhIGNoYXJhY3RlciBhcyBhIHN1cnJvZ2F0ZVxuICogcGFpci4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnMgd2UgbXVzdCBpbmNyZW1lbnQgdGhlIGluZGV4IG9mIG91ciBmb3IgbG9vcCBieVxuICogMiBpZiB3ZSBlbmNvZGUgYSBzdXJyb2dhdGUgcGFpciwgYW5kIDEgaW4gYWxsIG90aGVyIGNhc2VzLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogUmVmZXJlbmNlczpcbiAqICAgLSBbMV0gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvdmVyc2lvbnMvVW5pY29kZTEyLjAuMC9Vbmljb2RlU3RhbmRhcmQtMTIuMC5wZGZcbiAqICAgICAgICAgMy45ICBVbmljb2RlIEVuY29kaW5nIEZvcm1zIC0gVVRGLThcbiAqICAgLSBbMl0gaHR0cDovL3d3dy5oZXJvbmd5YW5nLmNvbS9Vbmljb2RlL1VURi0xNi1VVEYtMTYtRW5jb2RpbmcuaHRtbFxuICogICAtIFszXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvbGVuZ3RoI0Rlc2NyaXB0aW9uXG4gKlxuICovXG5leHBvcnQgdmFyIHV0ZjE2RW5jb2RlID0gZnVuY3Rpb24gKGlucHV0LCBieXRlT3JkZXJNYXJrKSB7XG4gICAgaWYgKGJ5dGVPcmRlck1hcmsgPT09IHZvaWQgMCkgeyBieXRlT3JkZXJNYXJrID0gdHJ1ZTsgfVxuICAgIHZhciBlbmNvZGVkID0gW107XG4gICAgaWYgKGJ5dGVPcmRlck1hcmspXG4gICAgICAgIGVuY29kZWQucHVzaCgweGZlZmYpO1xuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IGlucHV0Lmxlbmd0aDsgaWR4IDwgbGVuOykge1xuICAgICAgICB2YXIgY29kZVBvaW50ID0gaW5wdXQuY29kZVBvaW50QXQoaWR4KTtcbiAgICAgICAgLy8gVHdvIGJ5dGUgZW5jb2RpbmdcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MDEwMDAwKSB7XG4gICAgICAgICAgICBlbmNvZGVkLnB1c2goY29kZVBvaW50KTtcbiAgICAgICAgICAgIGlkeCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvdXIgYnl0ZSBlbmNvZGluZyAoc3Vycm9nYXRlIHBhaXIpXG4gICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICBlbmNvZGVkLnB1c2goaGlnaFN1cnJvZ2F0ZShjb2RlUG9pbnQpLCBsb3dTdXJyb2dhdGUoY29kZVBvaW50KSk7XG4gICAgICAgICAgICBpZHggKz0gMjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaG91bGQgbmV2ZXIgcmVhY2ggdGhpcyBjYXNlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29kZSBwb2ludDogMHhcIiArIHRvSGV4U3RyaW5nKGNvZGVQb2ludCkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KGVuY29kZWQpO1xufTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGBjb2RlUG9pbnRgIGlzIHdpdGhpbiB0aGVcbiAqIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKS4gQ29kZSBwb2ludHMgaW5zaWRlIHRoZSBCTVAgYXJlIG5vdCBlbmNvZGVkXG4gKiB3aXRoIHN1cnJvZ2F0ZSBwYWlycy5cbiAqIEBwYXJhbSBjb2RlUG9pbnQgVGhlIGNvZGUgcG9pbnQgdG8gYmUgZXZhbHVhdGVkLlxuICpcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTE2I0Rlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCB2YXIgaXNXaXRoaW5CTVAgPSBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCA+PSAwICYmIGNvZGVQb2ludCA8PSAweGZmZmY7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYGNvZGVQb2ludGAgaXMgdmFsaWQgYW5kIG11c3QgYmUgcmVwcmVzZW50ZWRcbiAqIHdpdGggYSBzdXJyb2dhdGUgcGFpciB3aGVuIGVuY29kZWQuXG4gKiBAcGFyYW0gY29kZVBvaW50IFRoZSBjb2RlIHBvaW50IHRvIGJlIGV2YWx1YXRlZC5cbiAqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNEZXNjcmlwdGlvblxuICovXG5leHBvcnQgdmFyIGhhc1N1cnJvZ2F0ZXMgPSBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMGZmZmY7XG59O1xuLy8gRnJvbSBVbmljb2RlIDMuMCBzcGVjLCBzZWN0aW9uIDMuNzpcbi8vICAgaHR0cDovL3VuaWNvZGUub3JnL3ZlcnNpb25zL1VuaWNvZGUzLjAuMC9jaDAzLnBkZlxuZXhwb3J0IHZhciBoaWdoU3Vycm9nYXRlID0gZnVuY3Rpb24gKGNvZGVQb2ludCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKChjb2RlUG9pbnQgLSAweDEwMDAwKSAvIDB4NDAwKSArIDB4ZDgwMDtcbn07XG4vLyBGcm9tIFVuaWNvZGUgMy4wIHNwZWMsIHNlY3Rpb24gMy43OlxuLy8gICBodHRwOi8vdW5pY29kZS5vcmcvdmVyc2lvbnMvVW5pY29kZTMuMC4wL2NoMDMucGRmXG5leHBvcnQgdmFyIGxvd1N1cnJvZ2F0ZSA9IGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICByZXR1cm4gKChjb2RlUG9pbnQgLSAweDEwMDAwKSAlIDB4NDAwKSArIDB4ZGMwMDtcbn07XG52YXIgQnl0ZU9yZGVyO1xuKGZ1bmN0aW9uIChCeXRlT3JkZXIpIHtcbiAgICBCeXRlT3JkZXJbXCJCaWdFbmRpYW5cIl0gPSBcIkJpZ0VuZGlhblwiO1xuICAgIEJ5dGVPcmRlcltcIkxpdHRsZUVuZGlhblwiXSA9IFwiTGl0dGxlRW5kaWFuXCI7XG59KShCeXRlT3JkZXIgfHwgKEJ5dGVPcmRlciA9IHt9KSk7XG52YXIgUkVQTEFDRU1FTlQgPSAn77+9Jy5jb2RlUG9pbnRBdCgwKTtcbi8qKlxuICogRGVjb2RlcyBhIFVpbnQ4QXJyYXkgb2YgZGF0YSB0byBhIHN0cmluZyB1c2luZyBVVEYtMTYuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gYXR0ZW1wdHMgdG8gcmVjb3ZlciBmcm9tIGVycm9ub3VzIGlucHV0IGJ5XG4gKiBpbnNlcnRpbmcgdGhlIHJlcGxhY2VtZW50IGNoYXJhY3RlciAo77+9KSB0byBtYXJrIGludmFsaWQgY29kZSBwb2ludHNcbiAqIGFuZCBzdXJyb2dhdGUgcGFpcnMuXG4gKlxuICogQHBhcmFtIGlucHV0IEEgVWludDhBcnJheSBjb250YWluaW5nIFVURi0xNiBlbmNvZGVkIGRhdGFcbiAqIEBwYXJhbSBieXRlT3JkZXJNYXJrIFdoZXRoZXIgb3Igbm90IGEgYnl0ZSBvcmRlciBtYXJrZXIgKEJPTSkgc2hvdWxkIGJlIHJlYWRcbiAqICAgICAgICAgICAgICAgICAgICAgIGF0IHRoZSBzdGFydCBvZiB0aGUgZW5jb2RpbmcuIChkZWZhdWx0IGB0cnVlYClcbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IHZhciB1dGYxNkRlY29kZSA9IGZ1bmN0aW9uIChpbnB1dCwgYnl0ZU9yZGVyTWFyaykge1xuICAgIGlmIChieXRlT3JkZXJNYXJrID09PSB2b2lkIDApIHsgYnl0ZU9yZGVyTWFyayA9IHRydWU7IH1cbiAgICAvLyBOZWVkIGF0IGxlYXN0IDIgYnl0ZXMgb2YgZGF0YSBpbiBVVEYtMTYgZW5jb2RpbmdzXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSAxKVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQoUkVQTEFDRU1FTlQpO1xuICAgIHZhciBieXRlT3JkZXIgPSBieXRlT3JkZXJNYXJrID8gcmVhZEJPTShpbnB1dCkgOiBCeXRlT3JkZXIuQmlnRW5kaWFuO1xuICAgIC8vIFNraXAgYnl0ZSBvcmRlciBtYXJrIGlmIG5lZWRlZFxuICAgIHZhciBpZHggPSBieXRlT3JkZXJNYXJrID8gMiA6IDA7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBbXTtcbiAgICB3aGlsZSAoaW5wdXQubGVuZ3RoIC0gaWR4ID49IDIpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0gZGVjb2RlVmFsdWVzKGlucHV0W2lkeCsrXSwgaW5wdXRbaWR4KytdLCBieXRlT3JkZXIpO1xuICAgICAgICBpZiAoaXNIaWdoU3Vycm9nYXRlKGZpcnN0KSkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCAtIGlkeCA8IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBOZWVkIGF0IGxlYXN0IDIgYnl0ZXMgbGVmdCBmb3IgdGhlIGxvdyBzdXJyb2dhdGUgdGhhdCBpcyByZXF1aXJlZFxuICAgICAgICAgICAgICAgIGNvZGVQb2ludHMucHVzaChSRVBMQUNFTUVOVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kID0gZGVjb2RlVmFsdWVzKGlucHV0W2lkeCsrXSwgaW5wdXRbaWR4KytdLCBieXRlT3JkZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpc0xvd1N1cnJvZ2F0ZShzZWNvbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludHMucHVzaChmaXJzdCwgc2Vjb25kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExvdyBzdXJyb2dhdGVzIHNob3VsZCBhbHdheXMgZm9sbG93IGhpZ2ggc3Vycm9nYXRlc1xuICAgICAgICAgICAgICAgICAgICBjb2RlUG9pbnRzLnB1c2goUkVQTEFDRU1FTlQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0xvd1N1cnJvZ2F0ZShmaXJzdCkpIHtcbiAgICAgICAgICAgIC8vIEhpZ2ggc3Vycm9nYXRlcyBzaG91bGQgYWx3YXlzIGNvbWUgZmlyc3Qgc2luY2UgYGRlY29kZVZhbHVlcygpYFxuICAgICAgICAgICAgLy8gYWNjb3VudHMgZm9yIHRoZSBieXRlIG9yZGVyaW5nXG4gICAgICAgICAgICBpZHggKz0gMjtcbiAgICAgICAgICAgIGNvZGVQb2ludHMucHVzaChSRVBMQUNFTUVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2RlUG9pbnRzLnB1c2goZmlyc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlIHNob3VsZG4ndCBiZSBleHRyYSBieXRlKHMpIGxlZnQgb3ZlclxuICAgIGlmIChpZHggPCBpbnB1dC5sZW5ndGgpXG4gICAgICAgIGNvZGVQb2ludHMucHVzaChSRVBMQUNFTUVOVCk7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZywgY29kZVBvaW50cyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYGNvZGVQb2ludGAgaXMgYSBoaWdoIHN1cnJvZ2F0ZS5cbiAqIEBwYXJhbSBjb2RlUG9pbnQgVGhlIGNvZGUgcG9pbnQgdG8gYmUgZXZhbHVhdGVkLlxuICpcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTE2I0Rlc2NyaXB0aW9uXG4gKi9cbnZhciBpc0hpZ2hTdXJyb2dhdGUgPSBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGJmZjtcbn07XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBgY29kZVBvaW50YCBpcyBhIGxvdyBzdXJyb2dhdGUuXG4gKiBAcGFyYW0gY29kZVBvaW50IFRoZSBjb2RlIHBvaW50IHRvIGJlIGV2YWx1YXRlZC5cbiAqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNEZXNjcmlwdGlvblxuICovXG52YXIgaXNMb3dTdXJyb2dhdGUgPSBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCA+PSAweGRjMDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZjtcbn07XG4vKipcbiAqIERlY29kZXMgdGhlIGdpdmVuIHV0Zi0xNiB2YWx1ZXMgZmlyc3QgYW5kIHNlY29uZCB1c2luZyB0aGUgc3BlY2lmaWVkXG4gKiBieXRlIG9yZGVyLlxuICogQHBhcmFtIGZpcnN0IFRoZSBmaXJzdCBieXRlIG9mIHRoZSBlbmNvZGluZy5cbiAqIEBwYXJhbSBzZWNvbmQgVGhlIHNlY29uZCBieXRlIG9mIHRoZSBlbmNvZGluZy5cbiAqIEBwYXJhbSBieXRlT3JkZXIgVGhlIGJ5dGUgb3JkZXIgb2YgdGhlIGVuY29kaW5nLlxuICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtMTYjRXhhbXBsZXNcbiAqL1xudmFyIGRlY29kZVZhbHVlcyA9IGZ1bmN0aW9uIChmaXJzdCwgc2Vjb25kLCBieXRlT3JkZXIpIHtcbiAgICAvLyBBcHBlbmQgdGhlIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJlY2VkaW5nIGJ5dGUgYnkgc2hpZnRpbmcgdGhlXG4gICAgLy8gZmlyc3Qgb25lIDggdG8gdGhlIGxlZnQgYW5kIHRoYW4gYXBwbHlpbmcgYSBiaXR3aXNlIG9yLW9wZXJhdG9yIHRvIGFwcGVuZFxuICAgIC8vIHRoZSBzZWNvbmQgb25lLlxuICAgIGlmIChieXRlT3JkZXIgPT09IEJ5dGVPcmRlci5MaXR0bGVFbmRpYW4pXG4gICAgICAgIHJldHVybiAoc2Vjb25kIDw8IDgpIHwgZmlyc3Q7XG4gICAgaWYgKGJ5dGVPcmRlciA9PT0gQnl0ZU9yZGVyLkJpZ0VuZGlhbilcbiAgICAgICAgcmV0dXJuIChmaXJzdCA8PCA4KSB8IHNlY29uZDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJ5dGVPcmRlcjogXCIgKyBieXRlT3JkZXIpO1xufTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBhcnJheSBjb250YWlucyBhIGJ5dGUgb3JkZXIgbWFyayBmb3IgdGhlXG4gKiBVVEYtMTZCRSBvciBVVEYtMTZMRSBlbmNvZGluZy4gSWYgaXQgaGFzIG5laXRoZXIsIEJpZ0VuZGlhbiBpcyBhc3N1bWVkLlxuICpcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnl0ZV9vcmRlcl9tYXJrI1VURi0xNlxuICpcbiAqIEBwYXJhbSBieXRlcyBUaGUgYnl0ZSBhcnJheSB0byBiZSBldmFsdWF0ZWQuXG4gKi9cbi8vIHByZXR0aWVyLWlnbm9yZVxudmFyIHJlYWRCT00gPSBmdW5jdGlvbiAoYnl0ZXMpIHsgcmV0dXJuIChoYXNVdGYxNkJpZ0VuZGlhbkJPTShieXRlcykgPyBCeXRlT3JkZXIuQmlnRW5kaWFuXG4gICAgOiBoYXNVdGYxNkxpdHRsZUVuZGlhbkJPTShieXRlcykgPyBCeXRlT3JkZXIuTGl0dGxlRW5kaWFuXG4gICAgICAgIDogQnl0ZU9yZGVyLkJpZ0VuZGlhbik7IH07XG52YXIgaGFzVXRmMTZCaWdFbmRpYW5CT00gPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICByZXR1cm4gYnl0ZXNbMF0gPT09IDB4ZmUgJiYgYnl0ZXNbMV0gPT09IDB4ZmY7XG59O1xudmFyIGhhc1V0ZjE2TGl0dGxlRW5kaWFuQk9NID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGJ5dGVzWzBdID09PSAweGZmICYmIGJ5dGVzWzFdID09PSAweGZlO1xufTtcbmV4cG9ydCB2YXIgaGFzVXRmMTZCT00gPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICByZXR1cm4gaGFzVXRmMTZCaWdFbmRpYW5CT00oYnl0ZXMpIHx8IGhhc1V0ZjE2TGl0dGxlRW5kaWFuQk9NKGJ5dGVzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmljb2RlLmpzLm1hcCIsImNsYXNzIENlbGwge1xuXHRwcml2YXRlIHJvdzogbnVtYmVyO1xuXHRwcml2YXRlIGNvbHVtbjogbnVtYmVyO1xuXHRwcml2YXRlIGJveDogbnVtYmVyO1xuXHRwcml2YXRlIHZhbHVlOiBudW1iZXI7XG5cdHByaXZhdGUgcG9zc2libGVWYWx1ZXM6IG51bWJlcltdO1xuXG5cdGNvbnN0cnVjdG9yKHJvdzogbnVtYmVyID0gbnVsbCwgY29sdW1uOiBudW1iZXIgPSBudWxsLCBwb3NzaWJsZXNWYWx1ZXM6IG51bWJlcltdID0gbnVsbCwgdmFsdWU6IG51bWJlciA9IDApIHtcblx0XHR0aGlzLnJvdyA9IHJvdztcblx0XHR0aGlzLmNvbHVtbiA9IGNvbHVtbjtcblx0XHQvLyBib3hOdW1iZXIgPSBib3hSb3cgKiAzICsgYm94Q29sdW1uXG5cdFx0aWYgKHJvdyA9PT0gbnVsbCB8fCBjb2x1bW4gPT09IG51bGwpIHRoaXMuYm94ID0gbnVsbDtcblx0XHRlbHNlIHRoaXMuYm94ID0gTWF0aC5mbG9vcih0aGlzLnJvdyAvIDMpICogMyArIE1hdGguZmxvb3IodGhpcy5jb2x1bW4gLyAzKTtcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5wb3NzaWJsZVZhbHVlcyA9IHBvc3NpYmxlc1ZhbHVlcztcblx0fVxuXG5cdHB1YmxpYyBnZXRSb3coKSB7IHJldHVybiB0aGlzLnJvdyB9XG5cdHB1YmxpYyBnZXRDb2x1bW4oKSB7IHJldHVybiB0aGlzLmNvbHVtbiB9XG5cdHB1YmxpYyBnZXRCb3goKSB7IHJldHVybiB0aGlzLmJveCB9XG5cdHB1YmxpYyBnZXRQb3NzaWJsZVZhbHVlcygpOiBudW1iZXJbXSB7IHJldHVybiB0aGlzLnBvc3NpYmxlVmFsdWVzIH1cblx0cHVibGljIGdldFZhbHVlKCkgeyByZXR1cm4gdGhpcy52YWx1ZTsgfVxuXG5cdHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7IHRoaXMudmFsdWUgPSB2YWx1ZSB9XG5cdHB1YmxpYyBzZXRQb3NzaWJsZVZhbHVlcyhwb3NzaWJsZXNWYWx1ZXM6IG51bWJlcltdKSB7IHRoaXMucG9zc2libGVWYWx1ZXMgPSBwb3NzaWJsZXNWYWx1ZXMgfVxuXG5cdHB1YmxpYyBjbG9uZSgpOiBDZWxsIHtcblx0XHRjb25zdCBjb3BpZWRDZWxsID0gbmV3IENlbGwodGhpcy5yb3csIHRoaXMuY29sdW1uLCBbLi4udGhpcy5wb3NzaWJsZVZhbHVlc10sIHRoaXMudmFsdWUpO1xuXHRcdHJldHVybiBjb3BpZWRDZWxsO1xuXHR9XG5cblx0cHVibGljIGNvcHkoKTogQ2VsbCB7XG5cdFx0Y29uc3QgY29waWVkQ2VsbCA9IG5ldyBDZWxsKCk7XG5cdFx0Y29waWVkQ2VsbC5yb3cgPSB0aGlzLnJvdztcblx0XHRjb3BpZWRDZWxsLmNvbHVtbiA9IHRoaXMuY29sdW1uO1xuXHRcdGNvcGllZENlbGwuYm94ID0gdGhpcy5ib3g7XG5cdFx0Y29waWVkQ2VsbC52YWx1ZSA9IHRoaXMudmFsdWU7XG5cdFx0Y29waWVkQ2VsbC5wb3NzaWJsZVZhbHVlcyA9IFsuLi50aGlzLnBvc3NpYmxlVmFsdWVzXTtcblx0XHRyZXR1cm4gY29waWVkQ2VsbDtcblx0fVxuXG5cdHB1YmxpYyByZW1vdmVQb3NzaWJsZVZhbHVlKHZhbHVlOiBudW1iZXIpIHtcblx0XHRjb25zdCBpbmRleCA9IHRoaXMucG9zc2libGVWYWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG5cdFx0aWYgKGluZGV4ID4gLTEpIHtcblx0XHRcdHRoaXMucG9zc2libGVWYWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZSA9PT0gMCB8fCB0aGlzLnZhbHVlID09PSBudWxsO1xuXHR9XG5cblx0cHVibGljIGVxdWFscyhvdGhlckNlbGw6IENlbGwpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0dGhpcy5yb3cgPT09IG90aGVyQ2VsbC5nZXRSb3coKSAmJlxuXHRcdFx0dGhpcy5jb2x1bW4gPT09IG90aGVyQ2VsbC5nZXRDb2x1bW4oKSAmJlxuXHRcdFx0dGhpcy5ib3ggPT09IG90aGVyQ2VsbC5nZXRCb3goKSAmJlxuXHRcdFx0dGhpcy52YWx1ZSA9PT0gb3RoZXJDZWxsLmdldFZhbHVlKCkgJiZcblx0XHRcdGFycmF5c0VxdWFsKHRoaXMucG9zc2libGVWYWx1ZXMsIG90aGVyQ2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpKVxuXHRcdCk7XG5cdH1cblxuXHQvLyBwdWJsaWMgaW5jbHVkZXNQb3NzaWJpbGl0eSh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiB7XG5cdC8vIFx0cmV0dXJuIHRoaXMucG9zc2libGVWYWx1ZXMuaW5jbHVkZXModmFsdWUpO1xuXHQvLyB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjb21wYXJlIGFycmF5cyBmb3IgZXF1YWxpdHlcbmZ1bmN0aW9uIGFycmF5c0VxdWFsKGFycjE6IGFueVtdLCBhcnIyOiBhbnlbXSk6IGJvb2xlYW4ge1xuXHRpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnIxLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgQ2VsbCB9XG4iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSBcIi4vQ2VsbFwiO1xuXG5jbGFzcyBHcmlkIHtcbiAgICBjZWxsczogQ2VsbFtdO1xuXG4gICAgY29uc3RydWN0b3IoZ3JpZERhdGE6IG51bWJlcltdW10sIGNlbGxzPzogQ2VsbFtdKSB7XG4gICAgICAgIHRoaXMuY2VsbHMgPSBbXTtcblxuICAgICAgICBpZiAoY2VsbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyQ2VsbHMgPSBjZWxscztcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3RoZXJDZWxsIG9mIG90aGVyQ2VsbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3BpZWRDZWxsID0gb3RoZXJDZWxsLmNvcHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzLnB1c2goY29waWVkQ2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCA5OyByb3crKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDk7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ3JpZERhdGFbcm93XVtjb2xdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gbmV3IENlbGwocm93LCBjb2wsIHZhbHVlICE9PSAwID8gW10gOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0sIHZhbHVlICE9PSAwID8gdmFsdWUgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjb3B5KCk6IEdyaWQge1xuICAgICAgICBjb25zdCBjb3BpZWRHcmlkRGF0YSA9IHRoaXMudG9OdW1iZXJBcnJheSgpO1xuICAgICAgICByZXR1cm4gbmV3IEdyaWQoY29waWVkR3JpZERhdGEsIHRoaXMuY2VsbHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcXVhbHMob3RoZXJHcmlkOiBHcmlkKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHRoaXNDZWxscyA9IHRoaXMuZ2V0Q2VsbHMoKTtcbiAgICAgICAgY29uc3Qgb3RoZXJDZWxscyA9IG90aGVyR3JpZC5nZXRDZWxscygpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpc0NlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXNDZWxsc1tpXS5lcXVhbHMob3RoZXJDZWxsc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBnZXRDZWxscygpIHsgcmV0dXJuIHRoaXMuY2VsbHM7IH1cblxuICAgIHB1YmxpYyBnZXRDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCA5OyByKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgOTsgYysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHIgPT09IHJvd0luZGV4ICYmIGMgPT09IGNvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbGxzW3IgKiA5ICsgY107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRvTnVtYmVyQXJyYXkoKTogbnVtYmVyW11bXSB7XG4gICAgICAgIGNvbnN0IG51bUFycmF5OiBudW1iZXJbXVtdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgOTsgcm93KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd0RhdGE6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA5OyBjb2wrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwocm93LCBjb2wpO1xuICAgICAgICAgICAgICAgIHJvd0RhdGEucHVzaChjZWxsLmdldFZhbHVlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnVtQXJyYXkucHVzaChyb3dEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudW1BcnJheTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNGdWxsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jZWxscy5ldmVyeSgoY2VsbCkgPT4gY2VsbC5nZXRWYWx1ZSgpICE9PSAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHN0cmluZzogc3RyaW5nID0gXCJcIjtcbiAgICAgIFxuICAgICAgICAvLyBBZGQgaG9yaXpvbnRhbCBkaXZpZGVycyBiZXR3ZWVuIGJveGVzXG4gICAgICAgIGNvbnN0IGJveERpdmlkZXIgPSBcIistLS0rLS0tKy0tLStcXG5cIjtcbiAgICAgIFxuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCA5OyByb3crKykge1xuICAgICAgICAgIGlmIChyb3cgJSAzID09PSAwICYmIHJvdyAhPT0gMCkge1xuICAgICAgICAgICAgLy8gQWRkIGhvcml6b250YWwgZGl2aWRlcnMgYmV0d2VlbiBib3hlc1xuICAgICAgICAgICAgc3RyaW5nICs9IGJveERpdmlkZXI7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgOTsgY29sKyspIHtcbiAgICAgICAgICAgIGlmIChjb2wgJSAzID09PSAwICYmIGNvbCAhPT0gMCkge1xuICAgICAgICAgICAgICAvLyBBZGQgdmVydGljYWwgZGl2aWRlcnMgYmV0d2VlbiBib3hlc1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gXCJ8XCI7XG4gICAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwocm93LCBjb2wpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICBcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gXCIgXCI7IC8vIERpc3BsYXkgZW1wdHkgY2VsbHMgYXMgc3BhY2VzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICBzdHJpbmcgKz0gXCJcXG5cIjtcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICBcblxufVxuXG5leHBvcnQgeyBHcmlkIH0iLCJcbi8vIGdldHRpbmcgdGhlIGN1cnJlbnQgR3JpZCBvdXQgb2YgRE9NXG5jb25zdCBnZXRDdXJyZW50R3JpZCA9ICgpOiBudW1iZXJbXVtdID0+IHtcbiAgICBsZXQgZ3JpZDogbnVtYmVyW11bXSA9IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgICAgZ3JpZFtpXSA9IG5ldyBBcnJheSg5KS5maWxsKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgaWYoY2VsbHMgPT09IG51bGwgfHwgY2VsbHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8PSA4OyBpKyspIHtcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8PSA4OyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBjZWxsc1tpKjkral07IC8vIG1hcHBzIHRoZSA4MSBjZWxscyB0byB0aGUgMiBkaW0gYXJyYXlcbiAgICAgICAgICAgIGlmKCEodGVtcCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZighdGVtcCkgcmV0dXJuIG51bGw7IC8vIGNoZWNraW5nIGlmIHRlbXAgaXMgZmFsc3lcbiAgICAgICAgICAgIGNvbnN0IHRlbXBOdW0gPSB0ZW1wLmlubmVyVGV4dDtcbiAgICAgICAgICAgIGdyaWRbaV1bal0gPSBOdW1iZXIodGVtcE51bSk7IC8vIHJldHVybiAnMCcgd2hlbiAndGVtcE51bSA9IG51bGwnIVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncmlkO1xufVxuXG5leHBvcnQgeyBnZXRDdXJyZW50R3JpZCB9IiwiaW1wb3J0IHsgdW5kb1N0YWNrIH0gZnJvbSBcIi4uL2J1dHRvbi91bmRvXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tY3JlYXRpbmcgR3JpZC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGNyZWF0aW5nIEdyaWQgd2l0aCBldmVudExpc3RlbmVyIGlucHV0dGluZyBjZWxsc1xuLy8gYSBmdW5jdGlvbiBjcmVhdGluZyBhIDl4OSBncmlkIG9mIHNxdWFyZXNcbmNvbnN0IGNyZWF0ZUJvYXJkID0gKHdpdGhHcmlkOiBudW1iZXJbXVtdKTogdm9pZCA9PiB7XG4gICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3JpZFwiKTtcbiAgICBpZihncmlkID09PSBudWxsIHx8IGdyaWQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgLy8gY3JlYXRlIDkgcm93cyBmb3IgdGhlIHN1ZG9rdSBncmlkXG4gICAgd2l0aEdyaWQuZm9yRWFjaCgoZWxlbTogbnVtYmVyW10sIHJvd0luZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGlmKHJvdyA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgncm93Jyk7XG4gICAgICAgIHJvdy5zZXRBdHRyaWJ1dGUoXCJyb3dcIiwgYCR7cm93SW5kZXh9YCk7XG4gICAgICAgIGlmIChyb3dJbmRleCA9PT0gMiB8fCByb3dJbmRleCA9PT0gNSkgcm93LmNsYXNzTGlzdC5hZGQoJ3VuZGVybGluZScpO1xuICAgICAgICBncmlkLmFwcGVuZChyb3cpO1xuXG4gICAgICAgIC8vIGluc2VydCBjZWxscyBpbnRvIGVhY2ggcm93XG4gICAgICAgIGVsZW0uZm9yRWFjaCgodmFsdWU6IG51bWJlciwgY29sSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBpZihjZWxsID09PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShcInJvd1wiLCBgJHtyb3dJbmRleH1gKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJjb2x1bW5cIiwgYCR7Y29sSW5kZXh9YClcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgICAgICAgICBpZiAoY29sSW5kZXggPT0gMiB8fCBjb2xJbmRleCA9PSA1KSBjZWxsLmNsYXNzTGlzdC5hZGQoJ3JpZ2h0bGluZScpO1xuXG4gICAgICAgICAgICAvLyBjb25zdCBjZWxsTnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYWRkTnVtYmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBjZWxsLmlubmVyVGV4dCA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJvdy5hcHBlbmQoY2VsbCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5jb25zdCBhZGROdW1iZXIgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCBlbGVtID0gZXZlbnQudGFyZ2V0O1xuICAgIGlmICghKGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHJldHVybjtcbiAgICBjb25zdCByb3cgPSBlbGVtLmdldEF0dHJpYnV0ZShcInJvd1wiKTtcbiAgICBjb25zdCBjb2x1bW4gPSBlbGVtLmdldEF0dHJpYnV0ZShcImNvbHVtblwiKTtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3Jvdz1cIiR7cm93fVwiXVtjb2x1bW49XCIke2NvbHVtbn1cIl1gKTtcbiAgICBpZighKGNlbGwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHJldHVybjtcbiAgICBsZXQgbnVtOiBudW1iZXI7XG4gICAgZG8ge1xuICAgICAgICBjb25zdCBwcm9tdCA9IHByb21wdChcIkVudGVyIGEgbnVtYmVyIGJldHdlZW4gMSBhbmQgOTpcIik7XG4gICAgICAgIGlmKHByb210ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIG51bSA9IE51bWJlci5wYXJzZUludChwcm9tdCk7XG4gICAgfSB3aGlsZSAoaXNOYU4oTnVtYmVyKG51bSkpKVxuICAgIGlmICghaXNOYU4oTnVtYmVyKG51bSkpICYmIGNlbGwgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IG51bWJlckJlZm9yZUNoYW5nZTogbnVtYmVyO1xuICAgICAgICBpZihjZWxsLmlubmVySFRNTCA9PT0gYGApIG51bWJlckJlZm9yZUNoYW5nZSA9IDA7XG4gICAgICAgIGVsc2UgbnVtYmVyQmVmb3JlQ2hhbmdlID0gTnVtYmVyLnBhcnNlSW50KGNlbGwuaW5uZXJIVE1MKTtcbiAgICAgICAgY2VsbC5pbm5lclRleHQgPSBudW0udG9TdHJpbmcoKTtcbiAgICAgICAgdW5kb1N0YWNrLnB1c2goW051bWJlci5wYXJzZUludChyb3cpLCBOdW1iZXIucGFyc2VJbnQoY29sdW1uKSwgbnVtYmVyQmVmb3JlQ2hhbmdlXSlcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJvYXJkIH1cbiIsImNvbnN0IG51bU9mRWFzeUdyaWRzID0gMjtcblxuY29uc3QgZWFzeUdyaWQxID0gW1xuICAgIFs4LCAyLCA3LCAzLCAwLCAwLCAwLCA0LCA5XSxcbiAgICBbNiwgNCwgOSwgMCwgNSwgMCwgOCwgMywgMF0sXG4gICAgWzAsIDAsIDAsIDQsIDgsIDksIDYsIDAsIDBdLFxuICAgIFswLCAwLCAwLCA2LCAwLCAxLCAyLCAwLCAwXSxcbiAgICBbMiwgMSwgMCwgMCwgMCwgNywgMCwgMCwgNl0sXG4gICAgWzQsIDksIDAsIDAsIDAsIDAsIDEsIDUsIDddLFxuICAgIFsxLCA4LCAwLCAwLCAyLCA0LCA3LCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgNywgMywgMCwgMCwgMF0sXG4gICAgWzMsIDAsIDQsIDEsIDAsIDAsIDAsIDAsIDBdXG5dO1xuXG5jb25zdCBlYXN5R3JpZDIgPSBbXG4gICAgWzQsIDksIDAsIDgsIDAsIDAsIDUsIDEsIDBdLFxuICAgIFswLCAxLCA4LCAwLCA1LCAwLCAwLCAwLCA2XSxcbiAgICBbMCwgMCwgMCwgMCwgNiwgOSwgMCwgMCwgNF0sXG4gICAgWzAsIDAsIDUsIDAsIDAsIDAsIDYsIDAsIDBdLFxuICAgIFswLCA3LCA0LCA1LCAwLCA2LCAyLCA5LCAwXSxcbiAgICBbOSwgMCwgMCwgMywgMCwgMCwgMSwgNCwgNV0sXG4gICAgWzUsIDAsIDAsIDksIDQsIDAsIDAsIDYsIDBdLFxuICAgIFswLCAwLCA5LCAyLCA3LCA1LCAwLCAwLCAwXSxcbiAgICBbOCwgMiwgNywgMCwgMywgMSwgMCwgMCwgMF1cbl1cblxuZXhwb3J0IHtcbiAgICBudW1PZkVhc3lHcmlkcyxcbiAgICBlYXN5R3JpZDEsXG4gICAgZWFzeUdyaWQyXG59IiwiY29uc3QgbnVtT2ZIYXJkcmlkcyA9IDI7XG5cbmNvbnN0IGhhcmRHcmlkMSA9IFtcbiAgICBbMCwgOCwgOSwgMywgNywgMCwgMCwgNCwgMF0sXG4gICAgWzMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAxLCAwLCAwLCAyLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgOCwgMCwgMCwgNF0sXG4gICAgWzAsIDcsIDYsIDAsIDksIDAsIDAsIDgsIDBdLFxuICAgIFswLCA1LCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbNSwgMCwgMCwgMCAsMCwgMCwgMCwgNiwgMF0sXG4gICAgWzQsIDAsIDAsIDAsIDMsIDAsIDAsIDAsIDBdLFxuICAgIFswLCA2LCAzLCA3LCAwLCAwLCAwLCAwLCAxXVxuXTtcblxuY29uc3QgaGFyZEdyaWQyID0gW1xuICAgIFswLCAwLCA4LCAxLCAwLCAwLCA1LCAwLCAwXSxcbiAgICBbNywgMCwgMCwgOSwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDQsIDAsIDUsIDcsIDAsIDYsIDBdLFxuICAgIFsyLCAwLCAwLCAwLCA0LCA1LCA4LCAwLCAwXSxcbiAgICBbMCwgOCwgMCwgMCwgMCwgMCwgMCwgOSwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCA3LCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbNCwgMCwgMCwgMCwgOCwgMiwgOSwgMCwgMF0sXG4gICAgWzAsIDAsIDYsIDAsIDAsIDAsIDAsIDAsIDNdXG5dO1xuXG5leHBvcnQge1xuICAgIG51bU9mSGFyZHJpZHMsXG4gICAgaGFyZEdyaWQxLFxuICAgIGhhcmRHcmlkMlxufSIsImNvbnN0IG51bU9mTWVkaXVtR3JpZHMgPSAyO1xuXG5jb25zdCBtZWRpdW1HcmlkMSA9IFtcbiAgICBbOSwgMCwgMCwgMCwgMCwgNCwgMCwgMCwgMF0sIFxuICAgIFswLCAwLCA1LCAwLCAwLCAwLCAwLCA2LCAwXSxcbiAgICBbMCwgNywgMCwgMCwgMSwgMiwgMCwgMCwgNV0sXG4gICAgWzAsIDAsMCAsIDgsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFszLCAwLCAwLCAwLCAwLCAwLCA5LCAwLCAwXSxcbiAgICBbMCwgMiwgMCwgMCwgNywgNSwgMCwgMCwgNl0sXG4gICAgWzIsIDAsIDAsIDAsIDgsIDEsIDAsIDMsIDBdLFxuICAgIFswLCAwLCAwLCA0LCAwLCAwLCAwLCAwLCAxXSxcbiAgICBbMCwgOCwgMCwgNiwgMCwgMCwgMCwgMCwgMF1cbl07XG5cbmNvbnN0IG1lZGl1bUdyaWQyID0gW1xuICAgIFs1LCAwLCAwLCAyLCAwLCAwLCAwLCA0LCAwXSxcbiAgICBbNiwgMCwgMCwgMCwgMywgMCwgMCwgMCwgMl0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDMsIDAsIDFdLFxuICAgIFswLCA4LCAwLCAwLCA0LCAwLCA5LCAxLCAwXSxcbiAgICBbMCwgMSwgMCwgMywgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDksIDAsIDcsIDAsIDAsIDAsIDYsIDBdLFxuICAgIFswLCA2LCAwLCAwLCAwLCA4LCAwLCAyLCAwXSxcbiAgICBbNywgMCwgMCwgNCwgMCwgMCwgMCwgOSwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdXG5dO1xuXG5leHBvcnQge1xuICAgIG51bU9mTWVkaXVtR3JpZHMsXG4gICAgbWVkaXVtR3JpZDEsXG4gICAgbWVkaXVtR3JpZDJcbn0iLCJpbXBvcnQgeyBlcnJvck1vbml0b3IgfSBmcm9tIFwiZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyBFYXN5R3JpZHMgZnJvbSBcIi4vRWFzeUdyaWRzL2dyaWRzRWFzeVwiO1xuaW1wb3J0ICogYXMgSGFyZEdyaWRzIGZyb20gXCIuL0hhcmRHcmlkcy9ncmlkc0hhcmRcIjtcbmltcG9ydCAqIGFzIE1lZGl1bUdyaWRzIGZyb20gXCIuL01lZGl1bUdyaWRzL2dyaWRzTWVkaXVtXCI7XG5cbi8qKlxuICogbm90ZTogdXNpbmcgQnJhY2tldCBOb3RhdGlvbiB0byBBY2Nlc3MgdGhlIEdyaWQgUmVwb3MgcmVzcGVjdGl2ZWx5XG4gKiBlLmc6IFwiRWFzeUdyaWRzW3JhbmRHcmlkTmFtZV1cIlwiIGlzIGVxdWl2YWxlbnQgdG86XG4gKiBcIkVhc3lHcmlkcy5lYXN5R3JpZDFcIiwgaWYgcmFuZEdyaWROYW1lIGlzIFwiZWFzeUdyaWQxXCJcbiAqL1xuXG5jb25zdCBnZXRSYW5kb21FYXN5R3JpZCA9ICgpOiBudW1iZXJbXVtdID0+IHtcbiAgICBjb25zdCByYW5kTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwICUgRWFzeUdyaWRzLm51bU9mRWFzeUdyaWRzKSArIDE7XG4gICAgY29uc3QgcmFuZEdyaWROYW1lID0gYGVhc3lHcmlkJHtyYW5kTnVtfWA7XG4gICAgY29uc3QgcmFuZEdyaWQgPSBFYXN5R3JpZHNbcmFuZEdyaWROYW1lXTtcbiAgICByZXR1cm4gcmFuZEdyaWQ7XG59XG5cbmNvbnN0IGdldFJhbmRvbU1lZGl1bUdyaWQgPSAoKTogbnVtYmVyW11bXSA9PiB7XG4gICAgY29uc3QgcmFuZE51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCAlIE1lZGl1bUdyaWRzLm51bU9mTWVkaXVtR3JpZHMpICsgMTtcbiAgICBjb25zdCByYW5kR3JpZE5hbWUgPSBgbWVkaXVtR3JpZCR7cmFuZE51bX1gO1xuICAgIGNvbnN0IHJhbmRHcmlkID0gTWVkaXVtR3JpZHNbcmFuZEdyaWROYW1lXTtcbiAgICByZXR1cm4gcmFuZEdyaWQ7XG59XG5cbmNvbnN0IGdldFJhbmRvbUhhcmRHcmlkID0gKCk6IG51bWJlcltdW10gPT4ge1xuICAgIGNvbnN0IHJhbmROdW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAgJSBIYXJkR3JpZHMubnVtT2ZIYXJkcmlkcykgKyAxO1xuICAgIGNvbnN0IHJhbmRHcmlkTmFtZSA9IGBoYXJkR3JpZCR7cmFuZE51bX1gO1xuICAgIGNvbnN0IHJhbmRHcmlkID0gSGFyZEdyaWRzW3JhbmRHcmlkTmFtZV07XG4gICAgcmV0dXJuIHJhbmRHcmlkO1xufVxuXG5leHBvcnQgeyBcbiAgICBnZXRSYW5kb21FYXN5R3JpZCwgXG4gICAgZ2V0UmFuZG9tTWVkaXVtR3JpZCwgXG4gICAgZ2V0UmFuZG9tSGFyZEdyaWQgXG59OyIsImltcG9ydCB7IGdldEN1cnJlbnRHcmlkIH0gZnJvbSBcIi4uL0dldHRlci9nZXRHcmlkXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tY2hlY2tpbmcgdGhlIEdyaWQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBmdW5jdGlvbnMgZm9yIHRoZSBjaGVjayBCdXR0b25cblxuLyoqXG4gKiB0aGUgbWFpbiBjaGVja2luZyBmdW5jdGlvbiB0aGF0IHdpbGwgdXNlIGFsbCBvdGhlciBmdW5jdGlvbiBpbiB0aGlzIGZpbGUgKGFuZCBnZXR0aW5nIHRoZSBjdXJyZW50IGdyaWQpXG4gKi9cbmNvbnN0IGNoZWNrR3JpZCA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGxldCBvdXRwdXQ6IHN0cmluZztcbiAgICBjb25zdCBnID0gZ2V0Q3VycmVudEdyaWQoKTtcbiAgICBpZiAoZyA9PT0gbnVsbCB8fCBnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0ID0gYHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggZmV0Y2hpbmcgdGhlIGdyaWQgOlNgO1xuICAgICAgICBhbGVydChvdXRwdXQpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1lbHNlIGlmIChncmlkSXNGdWxsKCkgIT09IHRydWUpIHtcbiAgICAgICAgb3V0cHV0ID0gYHRoZSBncmlkIGlzIG5vdCBmdWxseSBmaWxsZWQgOlNgO1xuICAgICAgICBhbGVydChvdXRwdXQpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1lbHNlIGlmIChjaGVja1Jvd3NBbmRDb2x1bW5zKCkgIT09IHRydWUgJiYgY2hlY2tCb3hlcygpICE9PSB0cnVlKSB7XG4gICAgICAgIG91dHB1dCA9IGB0aGUgZ3JpZCBpcyBpbmNvcnJlY3QgOlNgO1xuICAgICAgICBhbGVydChvdXRwdXQpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1lbHNlIHtcbiAgICAgICAgb3V0cHV0ID0gYHRoZSBncmlkIGlzIGNvcnJlY3QgOkQuIFdlbGwgZG9uZSFgO1xuICAgICAgICBhbGVydChvdXRwdXQgKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgIH07XG59XG5cbmNvbnN0IGdyaWRJc0Z1bGwgPSAoKTogYm9vbGVhbiAgID0+IHtcbiAgICBjb25zdCBnID0gZ2V0Q3VycmVudEdyaWQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDk7IGorKykge1xuICAgICAgICAgICAgaWYgKGdbaV1bal0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBhIGxvdCBvZiB0cm91YmxlIHdpdGggdGhpcyBvbmUuIFNldCB0aGUgY291bnRlciBBcnJheSB0byBhbGwgMHMgYWZ0ZXIgZWFjaCByb3cvY29sdW1uO1xuICogLS0+IGNvdW50aW5nIHRoZSBvY2N1cnJlbmNlIG9mIG51bWJlcnMgaW4gZWFjaCByb3cvY29sdW1uLCBjaGVja2luZyBpZiBpdCBpcyBlcXVhbCB0byAxXG4gKiBAcmV0dXJucyBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHN1ZG9rdSBncmlkJ3Mgcm93cyBhbmQgY29sdW1ucyBhcmUgY29ycmVjdCBcbiAqIGFzIHBlciBzdWRva3UgcnVsZXNcbiAqL1xuY29uc3QgY2hlY2tSb3dzQW5kQ29sdW1ucyA9ICgpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCBjdXJyZW50R3JpZCA9IGdldEN1cnJlbnRHcmlkKCk7XG4gICAgbGV0IGNvdW50ZXJSb3dzID0gbmV3IEFycmF5KDkpLmZpbGwoMCk7XG4gICAgbGV0IGNvdW50ZXJDb2x1bW5zID0gbmV3IEFycmF5KDkpLmZpbGwoMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgICAgY291bnRlclJvd3MuZmlsbCgwKTsgXG4gICAgICAgIGNvdW50ZXJDb2x1bW5zLmZpbGwoMCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgOTsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBudW1Sb3cgPSBjdXJyZW50R3JpZFtpXVtqXTtcbiAgICAgICAgICAgIGNvbnN0IG51bUNvbCA9IGN1cnJlbnRHcmlkW2pdW2ldO1xuICAgICAgICAgICAgY291bnRlclJvd3NbbnVtUm93LTFdKys7XG4gICAgICAgICAgICBjb3VudGVyQ29sdW1uc1tudW1Db2wtMV0rKztcbiAgICAgICAgICAgIGlmKGNvdW50ZXJSb3dzW251bVJvdy0xXSAhPSAxKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZihjb3VudGVyQ29sdW1uc1tudW1Db2wtMV0gIT0gMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGV2ZW4gb25lIGVsZW0gb2YgdGhlIGNvdW50QXJyYXlzIGlzIG5vdCBlcXVhbCAxIGZhbHNlIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgICAgLy8gaWYoY291bnRlclJvd3Muc29tZShjb3VudCA9PiBjb3VudCAhPT0gOSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gZWxzZSBpZihjb3VudGVyQ29sdW1ucy5zb21lKGNvdW50ID0+IGNvdW50ICE9PSA5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyBkb2Vzbid0IHdvcmsgZm9yIHRoZSBpbmNvcnJlY3Qgb3JkZXIgb2YgbnVtYmVycyBpbiB0aGUgZ3JpZFxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuXG4vLyBhIGxpdHRsZSB1bnBsZWFzYW50LCBidXQgYXMgb2YgcmlnaHQgbm93IEkgZG9uJ3Qga25vdyB3aGF0IGVsc2UgdG8gZG8gOi9cbi8vIEBNZSBzdXJlbHkgaXQgY2FuIGJlIHNvbHZlZCBtb3JlIGVsZWdhbnRseSBidXQgXCJkb24ndCBjaGFuZ2UgYSBydW5uaW5nIHN5c3RlbVwiIDpEIFxuY29uc3QgY2hlY2tCb3hlcyA9ICgpOiBib29sZWFuID0+IHtcbiAgICAvLyBmaXJzdCByb3cgb2YgYm94ZXM6XG4gICAgaWYgKGJveENoZWNrSGVscGVyKDAsIDIsIDAsIDIpICE9IHRydWUpIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChib3hDaGVja0hlbHBlcigwLCAyLCAzLCA1KSAhPSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSBpZiAoYm94Q2hlY2tIZWxwZXIoMCwgMiwgNiwgOCkgIT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIHNlY29uZCByb3cgb2YgYm94ZXM6XG4gICAgZWxzZSBpZiAoYm94Q2hlY2tIZWxwZXIoMywgNSwgMCwgMikgIT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIGVsc2UgaWYgKGJveENoZWNrSGVscGVyKDMsIDUsIDYsIDgpICE9IHRydWUpIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChib3hDaGVja0hlbHBlcigzLCA1LCAwLCAyKSAhPSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gdGhpcmQgcm93IG9mIGJveGVzOlxuICAgIGVsc2UgaWYgKGJveENoZWNrSGVscGVyKDUsIDgsIDAsIDIpICE9IHRydWUpIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChib3hDaGVja0hlbHBlcig1LCA4LCAzLCA1KSAhPSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSBpZiAoYm94Q2hlY2tIZWxwZXIoNSwgOCwgNSwgOCkgIT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIGVsc2UgcmV0dXJuIHRydWVcbn1cblxuY29uc3QgYm94Q2hlY2tIZWxwZXIgPSAoZnJvbVJvdzogbnVtYmVyLCB0b1JvdzogbnVtYmVyLCBmcm9tQ29sdW1uOiBudW1iZXIsIHRvQ29sdW1uOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCBnID0gZ2V0Q3VycmVudEdyaWQoKTtcbiAgICBsZXQgY291bnRlciA9IG5ldyBBcnJheSg5KS5maWxsKDApO1xuICAgIC8vIGlmIChmcm9tUm93ID09IG51bGwgfHwgZnJvbVJvdyA9PSB1bmRlZmluZWQgfHwgdG9Sb3cgPT0gbnVsbCB8fCB0b1JvdyA9PSB1bmRlZmluZWRcbiAgICAvLyAgICAgfHwgZnJvbUNvbHVtbiA9PSBudWxsIHx8IGZyb21Db2x1bW4gPT0gdW5kZWZpbmVkIHx8IHRvQ29sdW1uID09IG51bGwgfHwgdG9Db2x1bW4gPT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IGZyb21Sb3c7IGkgPD0gdG9Sb3c7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gZnJvbUNvbHVtbjsgaiA8PSB0b0NvbHVtbjsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBudW0gPSBnW2ldW2pdO1xuICAgICAgICAgICAgY291bnRlcltudW0tMV0rKztcbiAgICAgICAgICAgIGlmIChjb3VudGVyW251bS0xXSA+IDEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgY2hlY2tHcmlkLCBjaGVja1Jvd3NBbmRDb2x1bW5zIH0iLCJpbXBvcnQgeyBjcmVhdGVCb2FyZCB9IGZyb20gXCIuLi9NYW5hZ2luZ0dyaWQvY3JlYXRlXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tY2xlYXJpbmcgdGhlIEdyaWQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNyZWF0ZVZvaWRHcmlkID0gKCk6IG51bWJlcltdW10gPT4ge1xuICAgIGxldCBncmlkOiBudW1iZXJbXVtdID0gW107XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICBncmlkW2ldID0gbmV3IEFycmF5KDkpLmZpbGwobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBncmlkO1xufVxuXG5jb25zdCBkZWxldGVCb2FyZCA9ICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBncmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyaWRgKTtcbiAgICBpZihncmlkID09PSBudWxsKSByZXR1cm47XG4gICAgd2hpbGUoZ3JpZC5sYXN0Q2hpbGQpIHtcbiAgICAgICAgZ3JpZC5yZW1vdmVDaGlsZChncmlkLmxhc3RDaGlsZCk7XG4gICAgfVxufVxuXG5jb25zdCBjbGVhckJvYXJkID0gKCk6IHZvaWQgPT4ge1xuICAgIGRlbGV0ZUJvYXJkKCk7XG4gICAgY3JlYXRlQm9hcmQoY3JlYXRlVm9pZEdyaWQoKSk7XG59XG5cbmV4cG9ydCB7IGNsZWFyQm9hcmQsIGRlbGV0ZUJvYXJkIH0iLCJpbXBvcnQgeyBQREZEb2N1bWVudCwgUGFnZVNpemVzLCByZ2IgfSBmcm9tIFwicGRmLWxpYlwiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEdyaWQgfSBmcm9tIFwiLi4vR2V0dGVyL2dldEdyaWRcIjtcblxuY29uc3QgZ2VuZXJhdGVTdWRva3VQREYgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZ3JpZERhdGEgPSBnZXRDdXJyZW50R3JpZCgpOyAvLyBHZXQgdGhlIGN1cnJlbnQgZ3JpZCB2YWx1ZXNcblxuICAgIGlmICghZ3JpZERhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gcmV0cmlldmUgZ3JpZCBkYXRhIGZyb20gdGhlIERPTVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcGRmRG9jID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKCk7XG4gICAgY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKFBhZ2VTaXplcy5BNCk7XG5cbiAgICAvLyBTZXQgZm9udCBhbmQgZm9udCBzaXplXG4gICAgY29uc3QgZm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoXCJIZWx2ZXRpY2FcIik7XG4gICAgY29uc3QgZm9udFNpemUgPSAyNDtcblxuICAgIC8vIERlZmluZSBncmlkIHByb3BlcnRpZXNcbiAgICBjb25zdCBncmlkWCA9IDUwO1xuICAgIGNvbnN0IGdyaWRZID0gcGFnZS5nZXRIZWlnaHQoKSAtIDEwMDtcbiAgICBjb25zdCBjZWxsU2l6ZSA9IDQwO1xuXG4gICAgLy8gRHJhdyBncmlkIGxpbmVzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHggPSBncmlkWCArIGkgKiBjZWxsU2l6ZTtcbiAgICAgICAgY29uc3QgeTEgPSBncmlkWTtcbiAgICAgICAgY29uc3QgeTIgPSBncmlkWSAtIDkgKiBjZWxsU2l6ZTtcblxuICAgICAgICBwYWdlLmRyYXdMaW5lKHtcbiAgICAgICAgICAgIHN0YXJ0OiB7IHgsIHk6IHkxIH0sXG4gICAgICAgICAgICBlbmQ6IHsgeCwgeTogeTIgfSxcbiAgICAgICAgICAgIHRoaWNrbmVzczogMSxcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMCwgMCwgMCksIC8vIENvbnZlcnQgdG8gYW4gYXJyYXkgb2YgbnVtYmVyc1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaSAlIDMgPT09IDApIHtcbiAgICAgICAgICAgIHBhZ2UuZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiB7IHgsIHk6IHkxIH0sXG4gICAgICAgICAgICAgICAgZW5kOiB7IHgsIHk6IHkyIH0sXG4gICAgICAgICAgICAgICAgdGhpY2tuZXNzOiAzLFxuICAgICAgICAgICAgICAgIGNvbG9yOiByZ2IoMCwgMCwgMCksIC8vIENvbnZlcnQgdG8gYW4gYXJyYXkgb2YgbnVtYmVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSA5OyBpKyspIHtcbiAgICAgICAgY29uc3QgeSA9IGdyaWRZIC0gaSAqIGNlbGxTaXplO1xuICAgICAgICBjb25zdCB4MSA9IGdyaWRYO1xuICAgICAgICBjb25zdCB4MiA9IGdyaWRYICsgOSAqIGNlbGxTaXplO1xuXG4gICAgICAgIHBhZ2UuZHJhd0xpbmUoe1xuICAgICAgICAgICAgc3RhcnQ6IHsgeDogeDEsIHkgfSxcbiAgICAgICAgICAgIGVuZDogeyB4OiB4MiwgeSB9LFxuICAgICAgICAgICAgdGhpY2tuZXNzOiAxLFxuICAgICAgICAgICAgY29sb3I6IHJnYigwLCAwLCAwKSwgLy8gQ29udmVydCB0byBhbiBhcnJheSBvZiBudW1iZXJzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpICUgMyA9PT0gMCkge1xuICAgICAgICAgICAgcGFnZS5kcmF3TGluZSh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHsgeDogeDEsIHkgfSxcbiAgICAgICAgICAgICAgICBlbmQ6IHsgeDogeDIsIHkgfSxcbiAgICAgICAgICAgICAgICB0aGlja25lc3M6IDMsXG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYigwLCAwLCAwKSwgLy8gQ29udmVydCB0byBhbiBhcnJheSBvZiBudW1iZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbGwgaW4gZ3JpZCB2YWx1ZXNcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCA5OyByb3crKykge1xuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA5OyBjb2wrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBncmlkRGF0YVtyb3ddW2NvbF07XG4gICAgICAgICAgICBjb25zdCB0ZXh0WCA9IGdyaWRYICsgY29sICogY2VsbFNpemUgKyBjZWxsU2l6ZSAvIDIgLSBmb250U2l6ZSAvIDM7XG4gICAgICAgICAgICBjb25zdCB0ZXh0WSA9IGdyaWRZIC0gcm93ICogY2VsbFNpemUgLSBjZWxsU2l6ZSAvIDIgLSBmb250U2l6ZSAvIDI7XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZUFzU3RyaW5nOiBzdHJpbmc7XG4gICAgICAgICAgICBpZih2YWx1ZSA9PT0gMCkgdmFsdWVBc1N0cmluZyA9ICcnO1xuICAgICAgICAgICAgZWxzZSB2YWx1ZUFzU3RyaW5nID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIHBhZ2UuZHJhd1RleHQodmFsdWVBc1N0cmluZywgeyB4OiB0ZXh0WCwgeTogdGV4dFksIGZvbnQsIHNpemU6IGZvbnRTaXplIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcGRmQnl0ZXMgPSBhd2FpdCBwZGZEb2Muc2F2ZSgpO1xuXG4gICAgLy8gYmxvYiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcGRmIGRhdGEgICBcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3BkZkJ5dGVzXSwgeyB0eXBlOiBcImFwcGxpY2F0aW9uL3BkZlwiIH0pO1xuXG4gICAgLy8gQ3JlYXRlIGEgZG93bmxvYWQgbGluayBhbmQgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBsaW5rLmRvd25sb2FkID0gXCJzdWRva3UucGRmXCI7XG4gICAgbGluay5jbGljaygpO1xuXG4gICAgLy8gQ2xlYW4gdXAgdGhlIFVSTCBvYmplY3RcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGxpbmsuaHJlZik7XG59O1xuXG5leHBvcnQgeyBnZW5lcmF0ZVN1ZG9rdVBERiB9XG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50R3JpZCB9IGZyb20gXCIuLi9HZXR0ZXIvZ2V0R3JpZFwiO1xuLy8gaW1wb3J0IHsgZmluZE51bWJlcnMgfSBmcm9tIFwiLi9maW5kTWlzc2luZ051bWJlcnNcIjtcbmltcG9ydCB7IGNsZWFyQm9hcmQsIGRlbGV0ZUJvYXJkIH0gZnJvbSBcIi4vY2xlYXJcIjtcbmltcG9ydCB7IGNyZWF0ZUJvYXJkIH0gZnJvbSBcIi4uL01hbmFnaW5nR3JpZC9jcmVhdGVcIjtcbmltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi4vRW50aXRpZXMvR3JpZFwiO1xuaW1wb3J0IHsgc29sdmVTdWRva3UgfSBmcm9tIFwiLi4vc29sdmVHcmlkL3NvbHZlU3Vkb2t1XCI7XG5cbmNvbnN0IHNvbHZlR3JpZCA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgdGhlIHNvbHZlIGJ1dHRvbiB3YXMgcHJlc3NlZC5gKVxuICAgIGNvbnN0IGN1cnJlbnRHcmlkOiBudW1iZXJbXVtdID0gZ2V0Q3VycmVudEdyaWQoKTtcbiAgICBjb25zdCBncmlkOiBHcmlkID0gbmV3IEdyaWQoY3VycmVudEdyaWQpO1xuICAgIGNvbnN0IHJlc3VsdGluZ0dyaWQ6IEdyaWQgPSBzb2x2ZVN1ZG9rdShncmlkKTtcbiAgICBjb25zdCByZXN1bHRpbmdHcmlkVG9OdW1BcnIgPSByZXN1bHRpbmdHcmlkLnRvTnVtYmVyQXJyYXkoKTtcbiAgICBkZWxldGVCb2FyZCgpO1xuICAgIGNyZWF0ZUJvYXJkKHJlc3VsdGluZ0dyaWRUb051bUFycik7XG59XG5cbmV4cG9ydCB7IHNvbHZlR3JpZCB9IiwiLyoqXG4gKiB1bmRvIGlzIGltcGxlbWVudGVkIGJ5IGEgc3RhY2sgdGhhdCB3aWxsIGJlIHB1c2hlZCAoS29vcmRpbmF0ZXMsIE51bWJlcikgXG4gKiB3aGVuIGEgbnVtYmVyIGdldHMgYWRkZWQgdG8gdGhlIGdyaWRcbiAqIHRoZSBzdGFjayB3aWxsIGJlIHBvcHBlZCB3aGVuOiB0aGUgdW5kbyBidXR0b24gaXMgcHJlc3NlZFxuICogLS0+IHRoZSBzdGFjayBtdXN0IGJlIGdsb2JhbCBvZiBzb21lIGtpbmRcbiAqL1xuXG5pbnRlcmZhY2UgSVN0YWNrPFQ+IHtcbiAgICBwdXNoKGl0ZW06IFQpOiB2b2lkO1xuICAgIHBvcCgpOiBUIHwgdW5kZWZpbmVkO1xuICAgIHBlZWsoKTogVCB8IHVuZGVmaW5lZDtcbiAgICBzaXplKCk6IFQgfCBudW1iZXI7XG59XG5cbmFic3RyYWN0IGNsYXNzIENvbGxlY3Rpb248VD4ge1xuICAgIHByb3RlY3RlZCBzdG9yYWdlOiBUW10gPSBbXTtcbiAgXG4gICAgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5sZW5ndGg7XG4gICAgfVxuICAgIGFic3RyYWN0IGlzRnVsbCgpOiBib29sZWFuO1xuICB9XG5cbiAgY2xhc3MgU3RhY2tDb2xsZWN0aW9uPFQ+IGV4dGVuZHMgQ29sbGVjdGlvbjxUPiBpbXBsZW1lbnRzIElTdGFjazxUPiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjYXBhY2l0eTogbnVtYmVyID0gSW5maW5pdHkpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgfVxuICBcbiAgICBwdXNoKGl0ZW06IFQpIHtcbiAgICAgIGlmICh0aGlzLmlzRnVsbCgpKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiU3RhY2sgaGFzIHJlYWNoZWQgbWF4IGNhcGFjaXR5LCB5b3UgY2Fubm90IGFkZCBtb3JlIGl0ZW1zXCIpO1xuICAgICAgfVxuICAgICAgLy8gSW4gdGhlIGRlcml2ZWQgY2xhc3MsIHdlIGNhbiBhY2Nlc3MgcHJvdGVjdGVkIHByb3BlcnRpZXMgb2YgdGhlIGFic3RyYWN0IGNsYXNzXG4gICAgICB0aGlzLnN0b3JhZ2UucHVzaChpdGVtKTtcbiAgICB9XG4gIFxuICAgIHBvcCgpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucG9wKCk7XG4gICAgfVxuICBcbiAgICBwZWVrKCk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVt0aGlzLnNpemUoKSAtIDFdO1xuICAgIH1cbiAgXG4gICAgLy8gSW1wbGVtZW50YXRpb24gb2YgdGhlIGFic3RyYWN0IG1ldGhvZFxuICAgIGlzRnVsbCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLmNhcGFjaXR5ID09PSB0aGlzLnNpemUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYSBTdGFjayBDb2xsZWN0aW9uIGZpbGxlZCB3aXRoIGEgMiBkaW0gbnVtYmVyIEFycmF5OlxuICAgKiBlLmc6IGluIHRoZSBncmlkIHRoZSBjZWxsIGluIHJvdyAzLCBjb2x1bW4gNSBnZXRzIHVwZGF0ZWQgdG8gNzpcbiAgICogc3RhY2tGb3JVbmRvLnB1c2goWzMsNSwwXSkgLS0+IGluIHRoZSBjcmVhdGluZ0dyaWQuYWRkTnVtYmVyKClcbiAgICogMCBzYXlzIGluIHRoaXMgY2FzZSwgdGhhdCBvbmUgc3RlcCBiZWZvcmUgdGhlIGNlbGwgd2FzIG5vdCBmaWxsZWRcbiAgICogSWYgdGhlIHVuZG8gYnV0dG9uIGlzIHByZXNzZWQgdGhlIGlubmVyVGV4dCBodG1sIG9mIHRoZSBjZWxsIGluIHJvdyAzLCBjb2x1bW4gNSB3aWxsIGJlIHNldCB0byB6ZXJvLlxuICAgKiAuLi5hbmQ6IHN0YWNrRm9yVW5kby5wb3AoKSAtLT4gaW4gdGhlIGNyZWF0aW5nR3JpZC5hZGROdW1iZXIoKVxuICAgKi9cbiAgY29uc3QgdW5kb1N0YWNrID0gbmV3IFN0YWNrQ29sbGVjdGlvbjxudW1iZXJbXT4oKTtcblxuICBjb25zdCB1bmRvU3RlcCA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGlmKHVuZG9TdGFjay5wZWVrKCkgPT09IG51bGwgfHwgdW5kb1N0YWNrLnBlZWsoKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IGB1bmRvU3RhY2sgaXMgbnVsbCBvciB1bmRlZmluZWRgO1xuICAgICAgICBhbGVydChzdHIpO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH0gZWxzZSBpZih1bmRvU3RhY2suc2l6ZSgpID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IGB0aGUgdW5kb1N0YWNrIGlzIG5vdCB5ZXQgYnVpbHRgO1xuICAgICAgICBhbGVydChzdHIpO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBjb25zdCBhcnIgPSB1bmRvU3RhY2sucG9wKCk7XG4gICAgaWYoYXJyLmxlbmd0aCAhPT0gMykge1xuICAgICAgICBjb25zdCBzdHIgPSBgc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCBmZXRjaGluZyBhbiB1bmRvU3RhY2stZWxlbWVudGA7XG4gICAgICAgIGFsZXJ0KHN0cik7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbcm93PVwiJHthcnJbMF19XCJdW2NvbHVtbj1cIiR7YXJyWzFdfVwiXWApO1xuICAgIGNvbnNvbGUubG9nKGB1bmRpZCByb3cgJHthcnJbMF0rMX0gY29sdW1uICR7YXJyWzFdKzF9IGZyb20gJHtjZWxsLmlubmVySFRNTH0gdG8gJHthcnJbMl19YCk7XG4gICAgaWYoYXJyWzJdID09PSAwKSBjZWxsLmlubmVySFRNTCA9IGBgO1xuICAgIGVsc2UgY2VsbC5pbm5lckhUTUwgPSBhcnJbMl0udG9TdHJpbmcoKTtcbiAgICByZXR1cm4gYGdvb2Qgd29yayBtYXRlYDtcbiAgfVxuXG5cbmV4cG9ydHsgdW5kb1N0YWNrLCB1bmRvU3RlcCB9IiwiaW1wb3J0IHsgR3JpZCB9IGZyb20gXCIuLi8uLi9FbnRpdGllcy9HcmlkXCI7XG5pbXBvcnQgeyBDZWxsIH0gZnJvbSBcIi4uLy4uL0VudGl0aWVzL0NlbGxcIjtcblxuY29uc3QgYXBwbHlIaWRkZW5TaW5nbGUgPSAoZ3JpZDogR3JpZCk6IEdyaWQgPT4ge1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDk7IHJvdysrKSB7XG4gICAgICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDk7IGNvbHVtbisrKSB7XG4gICAgICAgICAgICAvLyBnZXR0aW5nIGEgcmVmZXJlbmNlIG9mIHRoZSBjZWxsIGluIHRoZSBncmlkIVxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGdyaWQuZ2V0Q2VsbChyb3csIGNvbHVtbik7XG4gICAgICAgICAgICBpZiAoIWNlbGwuaXNFbXB0eSgpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGhpZGRlbiBzaW5nbGVzIGluIHRoZSByb3dcbiAgICAgICAgICAgIGxldCBoaWRkZW5TaW5nbGVGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Um93ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IDk7IGMrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvd0NlbGwgPSBncmlkLmdldENlbGwocm93LCBjKTtcbiAgICAgICAgICAgICAgICBpZiAoYyAhPT0gY29sdW1uICYmIHJvd0NlbGwuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0NlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3NzaWJsZVZhbHVlc09mQ3VycmVudFJvdy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVZhbHVlc09mQ3VycmVudFJvdy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3NzaWJsZVZhbHVlc09mQ3VycmVudFJvdy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0UG9zc2libGVWYWx1ZXMoW10pO1xuICAgICAgICAgICAgICAgICAgICBoaWRkZW5TaW5nbGVGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChoaWRkZW5TaW5nbGVGb3VuZCkge1xuICAgICAgICAgICAgICAgIC8vIGluaXRpYWwgbG9naWMgZXJyb3IgYnkgbWU6XG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBSRVRVUk4gbm90IGNvbnRpbnVlISFcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGhpZGRlbiBzaW5nbGVzIGluIHRoZSBjb2x1bW5cbiAgICAgICAgICAgIGhpZGRlblNpbmdsZUZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgcG9zc2libGVWYWx1ZXNPZkN1cnJlbnRDb2x1bW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgOTsgcisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sQ2VsbCA9IGdyaWQuZ2V0Q2VsbChyLCBjb2x1bW4pO1xuICAgICAgICAgICAgICAgIGlmIChyICE9PSByb3cgJiYgY29sQ2VsbC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sQ2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Q29sdW1uLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Q29sdW1uLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsLmdldFBvc3NpYmxlVmFsdWVzKCkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Q29sdW1uLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRQb3NzaWJsZVZhbHVlcyhbXSk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlblNpbmdsZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGhpZGRlblNpbmdsZUZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBoaWRkZW4gc2luZ2xlcyBpbiB0aGUgYm94XG4gICAgICAgICAgICBjb25zdCBzdGFydFJvdyA9IE1hdGguZmxvb3Iocm93IC8gMykgKiAzO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRDb2wgPSBNYXRoLmZsb29yKGNvbHVtbiAvIDMpICogMztcbiAgICAgICAgICAgIGxldCBwb3NzaWJsZVZhbHVlc09mQ3VycmVudEJveCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgciA9IHN0YXJ0Um93OyByIDwgc3RhcnRSb3cgKyAzOyByKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gc3RhcnRDb2w7IGMgPCBzdGFydENvbCArIDM7IGMrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJveENlbGwgPSBncmlkLmdldENlbGwocixjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEociA9PT0gcm93ICYmIGMgPT09IGNvbHVtbikgJiYgYm94Q2VsbC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveENlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9zc2libGVWYWx1ZXNPZkN1cnJlbnRCb3guaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Qm94LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3NzaWJsZVZhbHVlc09mQ3VycmVudEJveC5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0UG9zc2libGVWYWx1ZXMoW10pO1xuICAgICAgICAgICAgICAgICAgICBoaWRkZW5TaW5nbGVGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaGlkZGVuU2luZ2xlRm91bmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC0tPiBnb2luZyBmb3IgdGhlIG5leHQgQ2VsbCBpbiB0aGUgbmV4dCBmb3ItaXRlcmF0aW9uXG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncmlkO1xufTtcblxuZXhwb3J0IHsgYXBwbHlIaWRkZW5TaW5nbGUgfSIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi4vLi4vRW50aXRpZXMvR3JpZFwiO1xuXG5jb25zdCBhcHBseU5ha2VkU2luZ2xlID0gKGdyaWQ6IEdyaWQpOiBHcmlkID0+IHtcbiAgICBncmlkLmdldENlbGxzKCkuZm9yRWFjaChmdW5jdGlvbihjZWxsKSB7XG4gICAgICAgIGlmIChjZWxsLmdldFBvc3NpYmxlVmFsdWVzKCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjZWxsLnNldFZhbHVlKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKVswXSk7XG4gICAgICAgICAgICBjZWxsLnNldFBvc3NpYmxlVmFsdWVzKFtdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBncmlkO1xufVxuXG5leHBvcnQgeyBhcHBseU5ha2VkU2luZ2xlIH0iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSBcIi4uLy4uL0VudGl0aWVzL0NlbGxcIjtcbmltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi4vLi4vRW50aXRpZXMvR3JpZFwiO1xuXG5jb25zdCBhcHBseUhpZGRlblBhaXIgPSAoZ3JpZDogR3JpZCk6IEdyaWQgPT4ge1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDk7IHJvdysrKSB7XG4gICAgICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDk7IGNvbHVtbisrKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsOiBDZWxsID0gZ3JpZC5nZXRDZWxsKHJvdywgY29sdW1uKTtcbiAgICAgICAgICAgIGlmICghY2VsbC5pc0VtcHR5KCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgY2VsbCBoYXMgdHdvIHBvc3NpYmxlIHZhbHVlc1xuICAgICAgICAgICAgaWYgKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMubGVuZ3RoICE9PSAyKSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYW5vdGhlciBjZWxsIHdpdGhpbiB0aGUgc2FtZSByb3cgdGhhdCBoYXMgdGhlIHNhbWUgcG9zc2libGUgdmFsdWVzXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IDk7IGMrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvd0NlbGw6IENlbGwgPSBncmlkLmdldENlbGwocm93LCBjKTtcbiAgICAgICAgICAgICAgICBpZiAoYyAhPT0gY29sdW1uICYmIHJvd0NlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKSA9PT0gcm93Q2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgdGhlIHBvc3NpYmxlIHZhbHVlcyBpbiBhbnkgb3RoZXIgY2VsbCBvZiB0aGUgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2xEZWxldGUgPSAwOyBjb2xEZWxldGUgPCA5OyBjb2xEZWxldGUrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZUNlbGw6IENlbGwgPSBncmlkLmdldENlbGwocm93LCBjb2xEZWxldGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuZGlkYXRlQ2VsbC5lcXVhbHMocm93Q2VsbCkgJiYgIWNhbmRpZGF0ZUNlbGwuZXF1YWxzKGNlbGwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBwb3NzaWJsZUNlbGwgaGFzIG9uZSBvZiB0aGUgaGlkZGVuUGFpciBhcyBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZUNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5pbmNsdWRlcyhjZWxsLmdldFBvc3NpYmxlVmFsdWVzKClbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVDZWxsLnJlbW92ZVBvc3NpYmxlVmFsdWUoY2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlQ2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmluY2x1ZGVzKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUNlbGwucmVtb3ZlUG9zc2libGVWYWx1ZShjZWxsLmdldFBvc3NpYmxlVmFsdWVzKClbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgdGhlIGNvbHVtblxuICAgICAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCA5OyByKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xDZWxsOiBDZWxsID0gZ3JpZC5nZXRDZWxsKHIsIGNvbHVtbik7XG4gICAgICAgICAgICAgICAgaWYgKHIgIT09IHJvdyAmJiBjb2xDZWxsLmdldFBvc3NpYmxlVmFsdWVzKCkubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmdldFBvc3NpYmxlVmFsdWVzKCkgPT09IGNvbENlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIHRoZSBwb3NzaWJsZSB2YWx1ZXMgaW4gYW55IG90aGVyIGNlbGwgb2YgdGhlIHJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcm93RGVsZXRlID0gMDsgcm93RGVsZXRlIDwgOTsgcm93RGVsZXRlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWRhdGVDZWxsOiBDZWxsID0gZ3JpZC5nZXRDZWxsKHJvd0RlbGV0ZSwgY29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmRpZGF0ZUNlbGwuZXF1YWxzKGNvbENlbGwpICYmICFjYW5kaWRhdGVDZWxsLmVxdWFscyhjZWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgcG9zc2libGVDZWxsIGhhcyBvbmUgb2YgdGhlIGhpZGRlblBhaXIgYXMgcG9zc2libGUgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5kaWRhdGVDZWxsLmdldFBvc3NpYmxlVmFsdWVzKCkuaW5jbHVkZXMoY2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlQ2VsbC5yZW1vdmVQb3NzaWJsZVZhbHVlKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZUNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5pbmNsdWRlcyhjZWxsLmdldFBvc3NpYmxlVmFsdWVzKClbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVDZWxsLnJlbW92ZVBvc3NpYmxlVmFsdWUoY2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW4gdGhlIGJveFxuICAgICAgICAgICAgY29uc3Qgc3RhcnRSb3cgPSBNYXRoLmZsb29yKHJvdyAvIDMpICogMztcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29sID0gTWF0aC5mbG9vcihjb2x1bW4gLyAzKSAqIDM7XG4gICAgICAgICAgICBmb3IgKGxldCByID0gc3RhcnRSb3c7IHIgPCBzdGFydFJvdyArIDM7IHIrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSBzdGFydENvbDsgYyA8IHN0YXJ0Q29sICsgMzsgYysrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm94Q2VsbCA9IGdyaWQuZ2V0Q2VsbChyLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEociA9PT0gcm93ICYmIGMgPT09IGNvbHVtbikgJiYgYm94Q2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKSA9PT0gYm94Q2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFJvd0RlbCA9IE1hdGguZmxvb3Iocm93IC8gMykgKiAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29sRGVsID0gTWF0aC5mbG9vcihjb2x1bW4gLyAzKSAqIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IHN0YXJ0Um93RGVsOyByIDwgc3RhcnRSb3dEZWwgKyAzOyByKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IHN0YXJ0Q29sRGVsOyBjIDwgc3RhcnRDb2xEZWwgKyAzOyBjKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlQ2VsbDogQ2VsbCA9IGdyaWQuZ2V0Q2VsbChzdGFydFJvd0RlbCwgc3RhcnRDb2xEZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGVDZWxsLmVxdWFscyhib3hDZWxsKSAmJiAhY2FuZGlkYXRlQ2VsbC5lcXVhbHMoY2VsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgcG9zc2libGVDZWxsIGhhcyBvbmUgb2YgdGhlIGhpZGRlblBhaXIgYXMgcG9zc2libGUgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZUNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKS5pbmNsdWRlcyhjZWxsLmdldFBvc3NpYmxlVmFsdWVzKClbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUNlbGwucmVtb3ZlUG9zc2libGVWYWx1ZShjZWxsLmdldFBvc3NpYmxlVmFsdWVzKClbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlQ2VsbC5nZXRQb3NzaWJsZVZhbHVlcygpLmluY2x1ZGVzKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlQ2VsbC5yZW1vdmVQb3NzaWJsZVZhbHVlKGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyaWQ7XG59XG5cbmV4cG9ydCB7IGFwcGx5SGlkZGVuUGFpciB9XG4iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSBcIi4uLy4uL0VudGl0aWVzL0NlbGxcIjtcbmltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi4vLi4vRW50aXRpZXMvR3JpZFwiO1xuXG4vKipcbiAqIG5ha2VkIFNpbmdsZTogc2ltcGxlIFRlY2huaXF1ZTpcbiAqIGEgY2VsbCB3aXRoIGEgcG9zc2libGUgVmFsdWUgdGhhdCBpcyB0aGUgb25seSBvbmUgb2YgaXQncyBraW5kIGFuIGVudGlyZSByb3csIGNvbHVtbiBvciBib3hcbiAqIEBwYXJhbSBjZWxsIFxuICogQHBhcmFtIGdyaWQgXG4gKiBAcmV0dXJucyBwb3NzaWJsZVZhbHVlczogbnVtYmVyW10gYWNjb3JkaW5nIHRvIHRoZSBuYWtlZCBTaW5nbGUgdGFjdGljIFxuICovXG5jb25zdCBhcHBseVN1ZG9rdVJ1bGVzID0gKGdyaWQ6IEdyaWQpOiBHcmlkID0+IHtcbiAgICBjb25zdCBjZWxscyA9IGdyaWQuZ2V0Q2VsbHMoKTtcblxuICAgIGNlbGxzLmZvckVhY2goKGNlbGw6IENlbGwpID0+IHtcbiAgICAgICAgaWYoY2VsbC5nZXRWYWx1ZSgpICE9PSAwKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHJvdyA9IGNlbGwuZ2V0Um93KCk7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IGNlbGwuZ2V0Q29sdW1uKCk7XG4gICAgICAgIGNvbnN0IGJveCA9IGNlbGwuZ2V0Qm94KCk7XG4gICAgICAgIGNvbnN0IHBvc3NpYmxlVmFsdWVzOiBudW1iZXJbXSA9IGNlbGwuZ2V0UG9zc2libGVWYWx1ZXMoKTtcblxuICAgICAgICAvLyBSZW1vdmUgdmFsdWVzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgc2FtZSByb3dcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCA5OyBjKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ3JpZC5nZXRDZWxsKHJvdywgYykuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChjICE9PSBjb2x1bW4gJiYgdmFsdWUgIT09IG51bGwgJiYgcG9zc2libGVWYWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY2VsbC5yZW1vdmVQb3NzaWJsZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB2YWx1ZXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBzYW1lIGNvbHVtblxuICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IDk7IHIrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBncmlkLmdldENlbGwociwgY29sdW1uKS5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKHIgIT09IHJvdyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiBwb3NzaWJsZVZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZVBvc3NpYmxlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHZhbHVlcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIHNhbWUgYm94XG4gICAgICAgIGNvbnN0IGJveFJvdyA9IE1hdGguZmxvb3IoYm94IC8gMykgKiAzO1xuICAgICAgICBjb25zdCBib3hDb2x1bW4gPSAoYm94ICUgMykgKiAzO1xuICAgICAgICBmb3IgKGxldCByID0gYm94Um93OyByIDwgYm94Um93ICsgMzsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gYm94Q29sdW1uOyBjIDwgYm94Q29sdW1uICsgMzsgYysrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBncmlkLmdldENlbGwociwgYykuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBpZiAoKHIgIT09IHJvdyB8fCBjICE9PSBjb2x1bW4pICYmIHZhbHVlICE9PSBudWxsICYmIHBvc3NpYmxlVmFsdWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZVBvc3NpYmxlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwuc2V0UG9zc2libGVWYWx1ZXMocG9zc2libGVWYWx1ZXMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdyaWQ7XG59XG5cbmV4cG9ydCB7IGFwcGx5U3Vkb2t1UnVsZXMgfSIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi4vRW50aXRpZXMvR3JpZFwiO1xuaW1wb3J0IHsgYXBwbHlIaWRkZW5TaW5nbGUgfSBmcm9tIFwiLi9maW5kTnVtYmVycy9oaWRkZW5TaW5nbGVcIjtcbmltcG9ydCB7IGFwcGx5U3Vkb2t1UnVsZXMgfSBmcm9tIFwiLi9yZWR1Y2VQb3NzaWJpbGl0aWVzL3N1ZG9rdVJ1bGVzXCI7XG5pbXBvcnQgeyBhcHBseVBvaW50aW5nUGFpcnMgfSBmcm9tIFwiLi9yZWR1Y2VQb3NzaWJpbGl0aWVzL3BvaW50aW5nUGFpclwiO1xuaW1wb3J0IHsgYXBwbHlOYWtlZFNpbmdsZSB9IGZyb20gXCIuL2ZpbmROdW1iZXJzL25ha2VkU2luZ2xlXCI7XG5pbXBvcnQgeyBhcHBseUhpZGRlblBhaXIgfSBmcm9tIFwiLi9yZWR1Y2VQb3NzaWJpbGl0aWVzL2hpZGRlblBhaXJcIjtcblxuXG5cbi8qKlxuICogU29sdmUgdGhlIFN1ZG9rdSBncmlkIHVzaW5nIHZhcmlvdXMgc29sdmluZyB0ZWNobmlxdWVzLlxuICogQHBhcmFtIGdyaWQgVGhlIFN1ZG9rdSBncmlkIHRvIHNvbHZlXG4gKiBAcmV0dXJucyBUaGUgc29sdmVkIFN1ZG9rdSBncmlkXG4gKi9cbmNvbnN0IHNvbHZlU3Vkb2t1ID0gKGdyaWQ6IEdyaWQpOiBHcmlkID0+IHtcbiAgICBjb25zb2xlLmxvZyhgaW5zaWRlICdzb2x2ZVN1ZG9rdScgbWV0aG9kLmApO1xuICAgIGxldCBoYXNNYWRlQ2hhbmdlcyA9IGZhbHNlO1xuICAgIGNvbnN0IG1heEl0ZXJhdGlvbnMgPSAxMDtcbiAgICBsZXQgaXRlcmF0aW9uID0gMDtcblxuICAgIGRvIHtcbiAgICAgICAgaGFzTWFkZUNoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgbGV0IG9sZEdyaWQ7XG5cbiAgICAgICAgLy8gYXBwbHkgU3Vkb2t1IHJ1bGVzXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGhhc01hZGVDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgICAgICBvbGRHcmlkID0gZ3JpZC5jb3B5KCk7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIHN1ZG9rdVJ1bGVzIHRvIHJlZHVjZSBwb3NzaWJpbGl0aWVzXG4gICAgICAgICAgICBncmlkID0gYXBwbHlTdWRva3VSdWxlcyhncmlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCFncmlkLmVxdWFscyhvbGRHcmlkKSk7XG4gICAgICAgICAgICBpZiAoIWdyaWQuZXF1YWxzKG9sZEdyaWQpKSB7XG4gICAgICAgICAgICAgICAgaGFzTWFkZUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbmFrZWQgc2luZ2xlc1xuICAgICAgICAgICAgb2xkR3JpZCA9IGdyaWQuY29weSgpO1xuICAgICAgICAgICAgZ3JpZCA9IGFwcGx5TmFrZWRTaW5nbGUoZ3JpZCk7XG4gICAgICAgICAgICBpZiAoIWdyaWQuZXF1YWxzKG9sZEdyaWQpKSB7XG4gICAgICAgICAgICAgICAgaGFzTWFkZUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICghZ3JpZC5pc0Z1bGwoKSAmJiBoYXNNYWRlQ2hhbmdlcyk7XG5cbiAgICAgICAgLy8gYXBwbHkgaGlkZGVuIHNpbmxlcyB0ZWNobmlxdWVcbiAgICAgICAgb2xkR3JpZCA9IGdyaWQuY29weSgpO1xuICAgICAgICAvLyBleGVjdXRlIGhpZGRlblNpbmdsZSBBbGdvcml0aG1cbiAgICAgICAgZ3JpZCA9IGFwcGx5SGlkZGVuU2luZ2xlKGdyaWQpO1xuICAgICAgICBpZiAoIWdyaWQuZXF1YWxzKG9sZEdyaWQpKSB7XG4gICAgICAgICAgICBoYXNNYWRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgb2xkR3JpZCA9IGdyaWQuY29weSgpO1xuXG4gICAgICAgIGlmKGhhc01hZGVDaGFuZ2VzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gYWxnb3JpdGhtcyB0byByZWR1Y2UgcG9zc2liaWxpdGllcyAobmV4dCB0byB0aGUgZnVuZGFtZW50YWwgc3Vkb2t1IHJ1bGVzKVxuICAgICAgICAgICAgZ3JpZCA9IGFwcGx5SGlkZGVuUGFpcihncmlkKTtcbiAgICAgICAgICAgIGlmKCFncmlkLmVxdWFscyhvbGRHcmlkKSkge1xuICAgICAgICAgICAgICAgIGhhc01hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9sZEdyaWQgPSBncmlkLmNvcHkoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gY29kZSBmb3IgcG9pbnRpbmcgcGFpcnMgbm90IHRlc3RlZCB5ZXQhXG4gICAgICAgIC8vIGJlZm9yZSBwb2ludGluZyBwYWlycyBhZGQgaGlkZGVuIHBhaXJzLCBiZWNhdXNlIG1vcmUgZWZmZWN0aXZlISEhXG4gICAgICAgIC8vIEFwcGx5IHBvaW50aW5nIHBhaXJzIHRlY2huaXF1ZVxuICAgICAgICAvLyBvbGRHcmlkID0gbmV3IEdyaWQoZ3JpZC50b051bWJlckFycmF5KCkpO1xuICAgICAgICAvLyBncmlkID0gYXBwbHlQb2ludGluZ1BhaXJzKGdyaWQpO1xuICAgICAgICAvLyBpZiAoZ3JpZCAhPT0gdXBkYXRlZEdyaWQpIHtcbiAgICAgICAgLy8gICAgIG9sZEdyaWQgPSBncmlkO1xuICAgICAgICAvLyAgICAgaGFzTWFkZUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgaXRlcmF0aW9uKys7XG4gICAgfSB3aGlsZSAoIWdyaWQuaXNGdWxsKCkgJiYgaGFzTWFkZUNoYW5nZXMgJiYgaXRlcmF0aW9uIDw9IG1heEl0ZXJhdGlvbnMpO1xuXG4gICAgcmV0dXJuIGdyaWQ7XG59XG5cbmV4cG9ydCB7IHNvbHZlU3Vkb2t1IH1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBjaGVja0dyaWQgfSBmcm9tIFwiLi9idXR0b24vY2hlY2tpbmdHcmlkXCI7XG5pbXBvcnQgeyBjcmVhdGVCb2FyZCB9IGZyb20gXCIuL01hbmFnaW5nR3JpZC9jcmVhdGVcIjtcbmltcG9ydCB7IGNsZWFyQm9hcmQgfSBmcm9tIFwiLi9idXR0b24vY2xlYXJcIjtcbmltcG9ydCB7IHVuZG9TdGVwIH0gZnJvbSBcIi4vYnV0dG9uL3VuZG9cIjtcbmltcG9ydCAqIGFzIFJhbmRvbUdyaWQgZnJvbSBcIi4vUmVwb3NpdG9yeS9nZXR0aW5nUmFuZG9tR3JpZFwiO1xuaW1wb3J0ICogYXMgUmVwbyBmcm9tIFwiLi9SZXBvc2l0b3J5L1Rlc3RpbmdHcmlkcy9zdWRva3VUZXN0R3JpZFwiO1xuaW1wb3J0ICogYXMgVGVzdEdyaWRzIGZyb20gXCIuL1JlcG9zaXRvcnkvVGVzdGluZ0dyaWRzL3Rlc3RTb2x2aW5nXCI7XG5pbXBvcnQgeyBzb2x2ZUdyaWQgfSBmcm9tIFwiLi9idXR0b24vc29sdmVcIjtcbmltcG9ydCB7IGdlbmVyYXRlU3Vkb2t1UERGIH0gZnJvbSBcIi4vYnV0dG9uL2Rvd25sb2FkR3JpZFwiO1xuLy8gaW1wb3J0IHsgZ2V0Q3VycmVudEdyaWQgfSBmcm9tIFwiLi9HZXR0ZXIvZ2V0R3JpZFwiO1xuXG4vLyBkZWJ1Z2dlcjsgXG4vLyBsaW50OyB6b2Q7IHByZXR0aWVyIGxpYnMgXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1idXR0b25zLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjbGVhckJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjbGVhcmApO1xuaWYoY2xlYXJCdXR0b24gIT09IG51bGwpIGNsZWFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgY2xlYXJCb2FyZCk7XG5lbHNlIGFsZXJ0KGB3ZSd2ZSBnb3QgYSBwcm9ibGVtIHdpdGggdGhlIGNoZWNrIGJ1dHRvbiA6L2ApO1xuXG5jb25zdCBjaGVja2VyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGVja1wiKTtcbmlmKGNoZWNrZXJCdXR0b24gIT09IG51bGwpIGNoZWNrZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoZWNrR3JpZCk7XG5lbHNlIGFsZXJ0KGB3ZSd2ZSBnb3QgYSBwcm9ibGVtIHdpdGggdGhlIGNoZWNrIGJ1dHRvbmApO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLmtleSA9PT0gXCJ6XCIgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gRXhlY3V0ZSBVbmRvIGZ1bmN0aW9uIHdoZW4gc3RyZyt1IGlzIHByZXNzZWRcbiAgICAgICAgdW5kb1N0ZXAoKTtcbiAgICB9XG59KTtcblxuY29uc3QgdW5kb0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB1bmRvYCk7XG5pZih1bmRvQnV0dG9uICE9PSBudWxsKSB7XG4gICAgdW5kb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdW5kb1N0ZXApOyAgICAgXG59IGVsc2UgYWxlcnQoYHdlJ3ZlIGdvdCBhIHByb2JsZW0gd2l0aCB0aGUgdW5kbyBidXR0b25gKTtcblxuY29uc3Qgc29sdmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc29sdmUnKTtcbmlmKHNvbHZlQnV0dG9uICE9PSBudWxsIHx8IHNvbHZlQnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBzb2x2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNvbHZlR3JpZCk7XG59IGVsc2UgYWxlcnQoYHdlJ3ZlIGdvdCBhIHByb2JsZW0gd2l0aCB0aGUgdW5kbyBidXR0b25gKTtcblxuY29uc3QgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZG93bmxvYWRgKTtcbmlmKGRvd25sb2FkQnV0dG9uICE9PSBudWxsKSB7XG4gICAgZG93bmxvYWRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdlbmVyYXRlU3Vkb2t1UERGKTtcbn0gZWxzZSBhbGVydChgd2UndmUgZ290IGEgcHJvYmxlbSB3aXRoIGRvd25sb2FkaW5nIHRoZSBncmlkYCk7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWV4ZWN1dGluZy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBjcmVhdGVCb2FyZChSYW5kb21HcmlkLmdldFJhbmRvbUhhcmRHcmlkKCkpO1xuLy8gY3JlYXRlQm9hcmQoUmFuZG9tR3JpZC5nZXRSYW5kb21NZWRpdW1HcmlkKCkpO1xuLy8gY3JlYXRlQm9hcmQoUmFuZG9tR3JpZC5nZXRSYW5kb21FYXN5R3JpZCgpKTtcbmNyZWF0ZUJvYXJkKFJhbmRvbUdyaWQuZ2V0UmFuZG9tTWVkaXVtR3JpZCgpKTtcbiJdLCJuYW1lcyI6WyJjaGFycyIsImxvb2t1cCIsIlVpbnQ4QXJyYXkiLCJpIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsIkZvbnROYW1lcyIsImRlY29tcHJlc3NKc29uIiwiY29tcHJlc3NlZEpzb24iLCJhcnJheSIsInN0ciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFycmF5VG9TdHJpbmciLCJiYXNlNjQiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsImxlbiIsInAiLCJieXRlcyIsImRlY29kZUZyb21CYXNlNjQiLCJjb21wcmVzc2VkSnNvbkZvckZvbnROYW1lIiwiZm9udENhY2hlIiwiRm9udCIsIl90aGlzIiwidGhpcyIsImdldFdpZHRoT2ZHbHlwaCIsImdseXBoTmFtZSIsIkNoYXJXaWR0aHMiLCJnZXRYQXhpc0tlcm5pbmdGb3JQYWlyIiwibGVmdEdseXBoTmFtZSIsInJpZ2h0R2x5cGhOYW1lIiwiS2VyblBhaXJYQW1vdW50cyIsImxvYWQiLCJmb250TmFtZSIsImNhY2hlZEZvbnQiLCJqc29uIiwiZm9udCIsIk9iamVjdCIsImFzc2lnbiIsIkpTT04iLCJwYXJzZSIsIkNoYXJNZXRyaWNzIiwicmVkdWNlIiwiYWNjIiwibWV0cmljIiwiTiIsIldYIiwiS2VyblBhaXJzIiwiX2EiLCJuYW1lMSIsIm5hbWUyIiwid2lkdGgiLCJkZWNvbXByZXNzZWRFbmNvZGluZ3MiLCJhbGxVbmljb2RlTWFwcGluZ3MiLCJFbmNvZGluZyIsIm5hbWUiLCJ1bmljb2RlTWFwcGluZ3MiLCJjYW5FbmNvZGVVbmljb2RlQ29kZVBvaW50IiwiY29kZVBvaW50IiwiZW5jb2RlVW5pY29kZUNvZGVQb2ludCIsIm1hcHBlZCIsImhleENvZGUiLCJ2YWx1ZSIsInBhZENoYXIiLCJwYWRkaW5nIiwiaWR4IiwicGFkU3RhcnQiLCJ0b1N0cmluZyIsIm1zZyIsIkVycm9yIiwiY29kZSIsInN1cHBvcnRlZENvZGVQb2ludHMiLCJrZXlzIiwibWFwIiwiTnVtYmVyIiwic29ydCIsImEiLCJiIiwiRW5jb2RpbmdzIiwiU3ltYm9sIiwic3ltYm9sIiwiWmFwZkRpbmdiYXRzIiwiemFwZmRpbmdiYXRzIiwiV2luQW5zaSIsIndpbjEyNTIiLCJwYWtvIiwibW9kdWxlIiwiZXhwb3J0cyIsInpsaWJfZGVmbGF0ZSIsInV0aWxzIiwic3RyaW5ncyIsIlpTdHJlYW0iLCJwcm90b3R5cGUiLCJaX09LIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiWl9ERUZMQVRFRCIsIkRlZmxhdGUiLCJvcHRpb25zIiwibGV2ZWwiLCJtZXRob2QiLCJjaHVua1NpemUiLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsInRvIiwib3B0IiwicmF3IiwiZ3ppcCIsImVyciIsImVuZGVkIiwiY2h1bmtzIiwic3RybSIsImF2YWlsX291dCIsInN0YXR1cyIsImRlZmxhdGVJbml0MiIsImhlYWRlciIsImRlZmxhdGVTZXRIZWFkZXIiLCJkaWN0aW9uYXJ5IiwiZGljdCIsInN0cmluZzJidWYiLCJjYWxsIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJfZGljdF9zZXQiLCJkZWZsYXRlIiwiaW5wdXQiLCJkZWZsYXRvciIsInB1c2giLCJyZXN1bHQiLCJkYXRhIiwibW9kZSIsIl9tb2RlIiwibmV4dF9pbiIsImF2YWlsX2luIiwib3V0cHV0IiwiQnVmOCIsIm5leHRfb3V0Iiwib25FbmQiLCJvbkRhdGEiLCJidWYyYmluc3RyaW5nIiwic2hyaW5rQnVmIiwiZGVmbGF0ZUVuZCIsImNodW5rIiwiam9pbiIsImZsYXR0ZW5DaHVua3MiLCJkZWZsYXRlUmF3IiwiemxpYl9pbmZsYXRlIiwiYyIsIkdaaGVhZGVyIiwiSW5mbGF0ZSIsImluZmxhdGVJbml0MiIsImluZmxhdGVHZXRIZWFkZXIiLCJpbmZsYXRlU2V0RGljdGlvbmFyeSIsImluZmxhdGUiLCJpbmZsYXRvciIsIm5leHRfb3V0X3V0ZjgiLCJ0YWlsIiwidXRmOHN0ciIsImFsbG93QnVmRXJyb3IiLCJaX0ZJTklTSCIsIlpfTk9fRkxVU0giLCJiaW5zdHJpbmcyYnVmIiwiWl9ORUVEX0RJQ1QiLCJaX0JVRl9FUlJPUiIsIlpfU1RSRUFNX0VORCIsIlpfU1lOQ19GTFVTSCIsInV0Zjhib3JkZXIiLCJidWYyc3RyaW5nIiwiYXJyYXlTZXQiLCJpbmZsYXRlRW5kIiwiaW5mbGF0ZVJhdyIsInVuZ3ppcCIsIlRZUEVEX09LIiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiX2hhcyIsIm9iaiIsImtleSIsImhhc093blByb3BlcnR5Iiwic291cmNlcyIsIkFycmF5Iiwic2xpY2UiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJzaGlmdCIsIlR5cGVFcnJvciIsImJ1ZiIsInNpemUiLCJzdWJhcnJheSIsImZuVHlwZWQiLCJkZXN0Iiwic3JjIiwic3JjX29mZnMiLCJkZXN0X29mZnMiLCJzZXQiLCJsIiwicG9zIiwiZm5VbnR5cGVkIiwiY29uY2F0IiwiYXBwbHkiLCJzZXRUeXBlZCIsIm9uIiwiQnVmMTYiLCJCdWYzMiIsIlNUUl9BUFBMWV9PSyIsIlNUUl9BUFBMWV9VSUFfT0siLCJfXyIsIl91dGY4bGVuIiwicSIsImMyIiwibV9wb3MiLCJzdHJfbGVuIiwiYnVmX2xlbiIsIm1heCIsIm91dCIsImNfbGVuIiwidXRmMTZidWYiLCJhZGxlciIsInMxIiwiczIiLCJuIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9CTE9DSyIsIlpfVFJFRVMiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiWl9GSUxURVJFRCIsIlpfSFVGRk1BTl9PTkxZIiwiWl9STEUiLCJaX0ZJWEVEIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJjcmNUYWJsZSIsInRhYmxlIiwiayIsIm1ha2VUYWJsZSIsImNyYyIsInQiLCJlbmQiLCJjb25maWd1cmF0aW9uX3RhYmxlIiwidHJlZXMiLCJhZGxlcjMyIiwiY3JjMzIiLCJMX0NPREVTIiwiTElURVJBTFMiLCJEX0NPREVTIiwiQkxfQ09ERVMiLCJIRUFQX1NJWkUiLCJNQVhfQklUUyIsIk1JTl9NQVRDSCIsIk1BWF9NQVRDSCIsIk1JTl9MT09LQUhFQUQiLCJJTklUX1NUQVRFIiwiSENSQ19TVEFURSIsIkJVU1lfU1RBVEUiLCJGSU5JU0hfU1RBVEUiLCJCU19ORUVEX01PUkUiLCJCU19CTE9DS19ET05FIiwiQlNfRklOSVNIX1NUQVJURUQiLCJCU19GSU5JU0hfRE9ORSIsImVycm9yQ29kZSIsInJhbmsiLCJmIiwiemVybyIsImZsdXNoX3BlbmRpbmciLCJzIiwic3RhdGUiLCJwZW5kaW5nIiwicGVuZGluZ19idWYiLCJwZW5kaW5nX291dCIsInRvdGFsX291dCIsImZsdXNoX2Jsb2NrX29ubHkiLCJsYXN0IiwiX3RyX2ZsdXNoX2Jsb2NrIiwiYmxvY2tfc3RhcnQiLCJzdHJzdGFydCIsInB1dF9ieXRlIiwicHV0U2hvcnRNU0IiLCJsb25nZXN0X21hdGNoIiwiY3VyX21hdGNoIiwibWF0Y2giLCJjaGFpbl9sZW5ndGgiLCJtYXhfY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwibGltaXQiLCJ3X3NpemUiLCJfd2luIiwid2luZG93Iiwid21hc2siLCJ3X21hc2siLCJwcmV2Iiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJmaWxsX3dpbmRvdyIsIm0iLCJtb3JlIiwic3RhcnQiLCJfd19zaXplIiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJoZWFkIiwid3JhcCIsInRvdGFsX2luIiwiaW5zZXJ0IiwiaW5zX2giLCJoYXNoX3NoaWZ0IiwiaGFzaF9tYXNrIiwiZGVmbGF0ZV9mYXN0IiwiZmx1c2giLCJoYXNoX2hlYWQiLCJiZmx1c2giLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsImxhc3RfbGl0IiwiZGVmbGF0ZV9zbG93IiwibWF4X2luc2VydCIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJmdW5jIiwiRGVmbGF0ZVN0YXRlIiwicGVuZGluZ19idWZfc2l6ZSIsImd6aGVhZCIsImd6aW5kZXgiLCJsYXN0X2ZsdXNoIiwid19iaXRzIiwiaGFzaF9iaXRzIiwiZHluX2x0cmVlIiwiZHluX2R0cmVlIiwiYmxfdHJlZSIsImxfZGVzYyIsImRfZGVzYyIsImJsX2Rlc2MiLCJibF9jb3VudCIsImhlYXAiLCJoZWFwX2xlbiIsImhlYXBfbWF4IiwiZGVwdGgiLCJsX2J1ZiIsImxpdF9idWZzaXplIiwiZF9idWYiLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsIm1hdGNoZXMiLCJiaV9idWYiLCJiaV92YWxpZCIsImRlZmxhdGVSZXNldEtlZXAiLCJkYXRhX3R5cGUiLCJfdHJfaW5pdCIsImRlZmxhdGVSZXNldCIsInJldCIsIm1heF9ibG9ja19zaXplIiwibWF4X3N0YXJ0IiwiZGVmbGF0ZUluaXQiLCJvbGRfZmx1c2giLCJiZWciLCJ2YWwiLCJ0ZXh0IiwiaGNyYyIsImV4dHJhIiwiY29tbWVudCIsInRpbWUiLCJvcyIsImJzdGF0ZSIsImRlZmxhdGVfaHVmZiIsImRlZmxhdGVfcmxlIiwiX3RyX2FsaWduIiwiX3RyX3N0b3JlZF9ibG9jayIsImF2YWlsIiwibmV4dCIsInRtcERpY3QiLCJkaWN0TGVuZ3RoIiwiZGVmbGF0ZUluZm8iLCJ4ZmxhZ3MiLCJleHRyYV9sZW4iLCJkb25lIiwiX2luIiwiX291dCIsImRtYXgiLCJ3c2l6ZSIsIndoYXZlIiwid25leHQiLCJzX3dpbmRvdyIsImhvbGQiLCJiaXRzIiwibGNvZGUiLCJkY29kZSIsImxtYXNrIiwiZG1hc2siLCJoZXJlIiwib3AiLCJkaXN0IiwiZnJvbSIsImZyb21fc291cmNlIiwibGVuY29kZSIsImRpc3Rjb2RlIiwibGVuYml0cyIsImRpc3RiaXRzIiwidG9wIiwiZG9sZW4iLCJkb2Rpc3QiLCJzYW5lIiwiaW5mbGF0ZV9mYXN0IiwiaW5mbGF0ZV90YWJsZSIsIkxFTlMiLCJESVNUUyIsIkhFQUQiLCJUWVBFIiwiQkFEIiwiRU5PVUdIX0xFTlMiLCJFTk9VR0hfRElTVFMiLCJ6c3dhcDMyIiwiSW5mbGF0ZVN0YXRlIiwiaGF2ZWRpY3QiLCJmbGFncyIsImNoZWNrIiwidG90YWwiLCJ3Yml0cyIsIm9mZnNldCIsIm5jb2RlIiwibmxlbiIsIm5kaXN0IiwiaGF2ZSIsImxlbnMiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXRLZWVwIiwiaW5mbGF0ZVJlc2V0IiwiaW5mbGF0ZVJlc2V0MiIsImxlbmZpeCIsImRpc3RmaXgiLCJ2aXJnaW4iLCJmaXhlZHRhYmxlcyIsInN5bSIsInVwZGF0ZXdpbmRvdyIsImNvcHkiLCJpbmZsYXRlSW5pdCIsInB1dCIsImxlZnQiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJvcHRzIiwiaGJ1ZiIsIm9yZGVyIiwiaW5mX2xlYXZlIiwiaW5mbGF0ZUluZm8iLCJsYmFzZSIsImxleHQiLCJkYmFzZSIsImRleHQiLCJ0eXBlIiwibGVuc19pbmRleCIsImNvZGVzIiwidGFibGVfaW5kZXgiLCJpbmNyIiwiZmlsbCIsImxvdyIsIm1hc2siLCJtaW4iLCJyb290IiwiY3VyciIsImRyb3AiLCJ1c2VkIiwiaHVmZiIsImJhc2UiLCJiYXNlX2luZGV4IiwiY291bnQiLCJNQVhCSVRTIiwib2ZmcyIsImV4dHJhX2luZGV4IiwiQnVmX3NpemUiLCJFTkRfQkxPQ0siLCJleHRyYV9sYml0cyIsImV4dHJhX2RiaXRzIiwiZXh0cmFfYmxiaXRzIiwiYmxfb3JkZXIiLCJzdGF0aWNfbHRyZWUiLCJzdGF0aWNfZHRyZWUiLCJfZGlzdF9jb2RlIiwiX2xlbmd0aF9jb2RlIiwiYmFzZV9sZW5ndGgiLCJzdGF0aWNfbF9kZXNjIiwic3RhdGljX2RfZGVzYyIsInN0YXRpY19ibF9kZXNjIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiVHJlZURlc2MiLCJkeW5fdHJlZSIsInN0YXRfZGVzYyIsIm1heF9jb2RlIiwiZF9jb2RlIiwicHV0X3Nob3J0IiwidyIsInNlbmRfYml0cyIsInNlbmRfY29kZSIsInRyZWUiLCJiaV9yZXZlcnNlIiwicmVzIiwiZ2VuX2NvZGVzIiwibmV4dF9jb2RlIiwiaW5pdF9ibG9jayIsImJpX3dpbmR1cCIsInNtYWxsZXIiLCJfbjIiLCJfbTIiLCJwcWRvd25oZWFwIiwidiIsImoiLCJjb21wcmVzc19ibG9jayIsImx0cmVlIiwiZHRyZWUiLCJsYyIsImx4IiwiYnVpbGRfdHJlZSIsImRlc2MiLCJub2RlIiwic3RyZWUiLCJoIiwieGJpdHMiLCJvdmVyZmxvdyIsImdlbl9iaXRsZW4iLCJzY2FuX3RyZWUiLCJjdXJsZW4iLCJwcmV2bGVuIiwibmV4dGxlbiIsIm1heF9jb3VudCIsIm1pbl9jb3VudCIsIlJFUF8zXzYiLCJSRVBaXzNfMTAiLCJSRVBaXzExXzEzOCIsInNlbmRfdHJlZSIsInN0YXRpY19pbml0X2RvbmUiLCJzdG9yZWRfbGVuIiwiY29weV9ibG9jayIsIkxFTkdUSF9DT0RFUyIsInRyX3N0YXRpY19pbml0Iiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsIm1heF9ibGluZGV4IiwiYmxhY2tfbWFzayIsImRldGVjdF9kYXRhX3R5cGUiLCJidWlsZF9ibF90cmVlIiwibGNvZGVzIiwiZGNvZGVzIiwiYmxjb2RlcyIsInNlbmRfYWxsX3RyZWVzIiwiU1RBVElDX1RSRUVTIiwiYmlfZmx1c2giLCJSb3RhdGlvblR5cGVzIiwiYXNQREZOYW1lIiwiYXNQREZOdW1iZXIiLCJudW0iLCJhc051bWJlciIsIkxpbmVDYXBTdHlsZSIsInJhZGlhbnMiLCJyYWRpYW5BbmdsZSIsIlJhZGlhbnMiLCJhbmdsZSIsImRlZ3JlZXMiLCJkZWdyZWVBbmdsZSIsIkRlZ3JlZXMiLCJkZWdyZWVzVG9SYWRpYW5zIiwiZGVncmVlIiwiTWF0aCIsIlBJIiwicmFkaWFuc1RvRGVncmVlcyIsInJhZGlhbiIsInRvUmFkaWFucyIsInJvdGF0aW9uIiwic3RyaW5naWZ5IiwidG9EZWdyZWVzIiwicmVkdWNlUm90YXRpb24iLCJxdWFkcmFudHMiLCJhZGp1c3REaW1zRm9yUm90YXRpb24iLCJkaW1zIiwiaGVpZ2h0Iiwicm90YXRlUmVjdGFuZ2xlIiwicmVjdGFuZ2xlIiwiYm9yZGVyV2lkdGgiLCJ4IiwieSIsInIiLCJjbGlwIiwiY2xpcEV2ZW5PZGQiLCJjb3MiLCJzaW4iLCJ0YW4iLCJjb25jYXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCIsImQiLCJlIiwidHJhbnNsYXRlIiwieFBvcyIsInlQb3MiLCJzY2FsZSIsInJvdGF0ZVJhZGlhbnMiLCJyb3RhdGVEZWdyZWVzIiwic2tld1JhZGlhbnMiLCJ4U2tld0FuZ2xlIiwieVNrZXdBbmdsZSIsInNrZXdEZWdyZWVzIiwic2V0RGFzaFBhdHRlcm4iLCJkYXNoQXJyYXkiLCJkYXNoUGhhc2UiLCJyZXN0b3JlRGFzaFBhdHRlcm4iLCJMaW5lSm9pblN0eWxlIiwic2V0TGluZUNhcCIsInN0eWxlIiwiVGV4dFJlbmRlcmluZ01vZGUiLCJzZXRMaW5lSm9pbiIsInNldEdyYXBoaWNzU3RhdGUiLCJwdXNoR3JhcGhpY3NTdGF0ZSIsInBvcEdyYXBoaWNzU3RhdGUiLCJzZXRMaW5lV2lkdGgiLCJhcHBlbmRCZXppZXJDdXJ2ZSIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsImFwcGVuZFF1YWRyYXRpY0N1cnZlIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3F1YXJlIiwic3Ryb2tlIiwiZmlsbEFuZFN0cm9rZSIsImVuZFBhdGgiLCJuZXh0TGluZSIsIm1vdmVUZXh0Iiwic2hvd1RleHQiLCJiZWdpblRleHQiLCJlbmRUZXh0Iiwic2V0Rm9udEFuZFNpemUiLCJzZXRDaGFyYWN0ZXJTcGFjaW5nIiwic3BhY2luZyIsInNldFdvcmRTcGFjaW5nIiwic2V0Q2hhcmFjdGVyU3F1ZWV6ZSIsInNxdWVlemUiLCJzZXRMaW5lSGVpZ2h0IiwibGluZUhlaWdodCIsInNldFRleHRSaXNlIiwicmlzZSIsIkNvbG9yVHlwZXMiLCJzZXRUZXh0UmVuZGVyaW5nTW9kZSIsInNldFRleHRNYXRyaXgiLCJyb3RhdGVBbmRTa2V3VGV4dFJhZGlhbnNBbmRUcmFuc2xhdGUiLCJyb3RhdGlvbkFuZ2xlIiwicm90YXRlQW5kU2tld1RleHREZWdyZWVzQW5kVHJhbnNsYXRlIiwiZHJhd09iamVjdCIsInNldEZpbGxpbmdHcmF5c2NhbGVDb2xvciIsImdyYXkiLCJzZXRTdHJva2luZ0dyYXlzY2FsZUNvbG9yIiwic2V0RmlsbGluZ1JnYkNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwic2V0U3Ryb2tpbmdSZ2JDb2xvciIsInNldEZpbGxpbmdDbXlrQ29sb3IiLCJjeWFuIiwibWFnZW50YSIsInllbGxvdyIsInNldFN0cm9raW5nQ215a0NvbG9yIiwiYmVnaW5NYXJrZWRDb250ZW50IiwidGFnIiwiZW5kTWFya2VkQ29udGVudCIsIlRleHRBbGlnbm1lbnQiLCJncmF5c2NhbGUiLCJHcmF5c2NhbGUiLCJyZ2IiLCJSR0IiLCJjbXlrIiwiQ01ZSyIsInNldEZpbGxpbmdDb2xvciIsImNvbG9yIiwic2V0U3Ryb2tpbmdDb2xvciIsImNvbXBvbmVudHNUb0NvbG9yIiwiY29tcHMiLCJ1bmRlZmluZWQiLCJjb2xvclRvQ29tcG9uZW50cyIsImN4IiwiY3kiLCJweCIsInB5Iiwic3giLCJzeSIsInBhcmFtZXRlcnMiLCJNYXAiLCJydW5uZXJzIiwiTSIsIkMiLCJjbWQiLCJTIiwiUSIsIlQiLCJBIiwiY21kcyIsInNvbHZlQXJjIiwiTCIsIkgiLCJWIiwiWiIsInoiLCJjb29yZHMiLCJyeCIsInJ5Iiwicm90IiwibGFyZ2UiLCJzd2VlcCIsImV4IiwiZXkiLCJfaSIsInNlZ3NfMSIsImFyY1RvU2VnbWVudHMiLCJzZWciLCJiZXoiLCJzZWdtZW50VG9CZXppZXIiLCJyb3RhdGVYIiwib3giLCJveSIsInRoIiwic2luVGgiLCJjb3NUaCIsImFicyIsInBsIiwic3FydCIsImEwMCIsImEwMSIsImExMCIsImExMSIsIngwIiwieTAiLCJzZmFjdG9yU3EiLCJzZmFjdG9yIiwieGMiLCJ5YyIsInRoMCIsImF0YW4yIiwidGhBcmMiLCJzZWdtZW50cyIsImNlaWwiLCJ0aDIiLCJ0aDMiLCJjeDEiLCJjeTEiLCJ0aDEiLCJ0aEhhbGYiLCJkcmF3VGV4dCIsImxpbmUiLCJncmFwaGljc1N0YXRlIiwicm90YXRlIiwieFNrZXciLCJ5U2tldyIsImZpbHRlciIsIkJvb2xlYW4iLCJkcmF3TGluZXNPZlRleHQiLCJsaW5lcyIsIm9wZXJhdG9ycyIsImRyYXdJbWFnZSIsImRyYXdQYWdlIiwieFNjYWxlIiwieVNjYWxlIiwiZHJhd0xpbmUiLCJfYiIsInRoaWNrbmVzcyIsImxpbmVDYXAiLCJkcmF3UmVjdGFuZ2xlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJMaW5lQ2FwIiwiYm9yZGVyRGFzaEFycmF5IiwiYm9yZGVyRGFzaFBoYXNlIiwiS0FQUEEiLCJkcmF3RWxsaXBzZVBhdGgiLCJjb25maWciLCJ4ZSIsInllIiwieG0iLCJ5bSIsImRyYXdFbGxpcHNlIiwiX2MiLCJjZW50ZXJYIiwiY2VudGVyWSIsImRyYXdTdmdQYXRoIiwicGF0aCIsImNvbW1hbmRzIiwiYXJncyIsImlzQXJyYXkiLCJjdXJBcmciLCJmb3VuZERlY2ltYWwiLCJwYXJhbXMiLCJwYXRoXzEiLCJoYXMiLCJnZXQiLCJpbmNsdWRlcyIsInN2Z1BhdGhUb09wZXJhdG9ycyIsImRyYXdDaGVja01hcmsiLCJyb3RhdGVJblBsYWNlIiwiZHJhd0NoZWNrQm94Iiwib3V0bGluZSIsImZpbGxlZCIsImNoZWNrTWFya1NpemUiLCJjaGVja01hcmsiLCJtYXJrQ29sb3IiLCJkcmF3UmFkaW9CdXR0b24iLCJvdXRsaW5lU2NhbGUiLCJkb3QiLCJkb3RDb2xvciIsImRyYXdCdXR0b24iLCJiYWNrZ3JvdW5kIiwiZHJhd1RleHRMaW5lcyIsInRleHRMaW5lcyIsInRleHRDb2xvciIsImZvbnRTaXplIiwiZW5jb2RlZCIsImRyYXdUZXh0RmllbGQiLCJjbGlwWCIsImNsaXBZIiwiY2xpcFdpZHRoIiwiY2xpcEhlaWdodCIsImNsaXBwaW5nQXJlYSIsIm1hcmtlZENvbnRlbnQiLCJkcmF3T3B0aW9uTGlzdCIsImhpZ2hsaWdodHMiLCJzZWxlY3RlZExpbmVzIiwic2VsZWN0ZWRDb2xvciIsIkVuY3J5cHRlZFBERkVycm9yIiwiX3N1cGVyIiwiRm9udGtpdE5vdFJlZ2lzdGVyZWRFcnJvciIsIkZvcmVpZ25QYWdlRXJyb3IiLCJSZW1vdmVQYWdlRnJvbUVtcHR5RG9jdW1lbnRFcnJvciIsIk5vU3VjaEZpZWxkRXJyb3IiLCJVbmV4cGVjdGVkRmllbGRUeXBlRXJyb3IiLCJleHBlY3RlZCIsImFjdHVhbCIsImNvbnN0cnVjdG9yIiwiTWlzc2luZ09uVmFsdWVDaGVja0Vycm9yIiwib25WYWx1ZSIsIkZpZWxkQWxyZWFkeUV4aXN0c0Vycm9yIiwiSW52YWxpZEZpZWxkTmFtZVBhcnRFcnJvciIsIm5hbWVQYXJ0IiwiRmllbGRFeGlzdHNBc05vblRlcm1pbmFsRXJyb3IiLCJSaWNoVGV4dEZpZWxkUmVhZEVycm9yIiwiZmllbGROYW1lIiwiQ29tYmVkVGV4dExheW91dEVycm9yIiwibGluZUxlbmd0aCIsImNlbGxDb3VudCIsIkV4Y2VlZGVkTWF4TGVuZ3RoRXJyb3IiLCJ0ZXh0TGVuZ3RoIiwibWF4TGVuZ3RoIiwiSW52YWxpZE1heExlbmd0aEVycm9yIiwiY29tcHV0ZUZvbnRTaXplIiwiYm91bmRzIiwibXVsdGlsaW5lIiwibGluZXNVc2VkIiwibGluZUlkeCIsImxpbmVMZW4iLCJ3b3JkcyIsInNwbGl0Iiwic3BhY2VJbkxpbmVSZW1haW5pbmciLCJ3b3JkIiwid2lkdGhPZldvcmQiLCJ3aWR0aE9mVGV4dEF0U2l6ZSIsImhlaWdodEF0U2l6ZSIsImxhc3RJbmRleE9mV2hpdGVzcGFjZSIsInRlc3QiLCJzcGxpdE91dExpbmVzIiwibWF4V2lkdGgiLCJsYXN0V2hpdGVzcGFjZUlkeCIsInN1YnN0cmluZyIsImVuY29kZVRleHQiLCJyZW1haW5kZXIiLCJsYXlvdXRNdWx0aWxpbmVUZXh0IiwiYWxpZ25tZW50IiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsInByZXZSZW1haW5kZXIiLCJMZWZ0IiwiQ2VudGVyIiwiUmlnaHQiLCJ0cmltIiwibGF5b3V0Q29tYmVkVGV4dCIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJkZXNjZW5kZXIiLCJjb21wdXRlQ29tYmVkRm9udFNpemUiLCJjZWxscyIsImNlbGxPZmZzZXQiLCJjaGFyT2Zmc2V0IiwiY2hhciIsImNoYXJMZW5ndGgiLCJsYXlvdXRTaW5nbGVsaW5lVGV4dCIsIm5vcm1hbGl6ZUFwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIiwibm9ybWFsIiwidGZSZWdleCIsImdldERlZmF1bHRGb250U2l6ZSIsImZpZWxkIiwiZGEiLCJnZXREZWZhdWx0QXBwZWFyYW5jZSIsImRhTWF0Y2giLCJkZWZhdWx0Rm9udFNpemUiLCJpc0Zpbml0ZSIsImNvbG9yUmVnZXgiLCJnZXREZWZhdWx0Q29sb3IiLCJjMSIsImMzIiwiYzQiLCJjb2xvclNwYWNlIiwidXBkYXRlRGVmYXVsdEFwcGVhcmFuY2UiLCJzZXREZWZhdWx0QXBwZWFyYW5jZSIsImRlZmF1bHRDaGVja0JveEFwcGVhcmFuY2VQcm92aWRlciIsImNoZWNrQm94Iiwid2lkZ2V0Iiwid2lkZ2V0Q29sb3IiLCJmaWVsZENvbG9yIiwiYWNyb0ZpZWxkIiwiZ2V0UmVjdGFuZ2xlIiwiYXAiLCJnZXRBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzIiwiYnMiLCJnZXRCb3JkZXJTdHlsZSIsImdldFdpZHRoIiwiZ2V0Um90YXRpb24iLCJfZCIsImJsYWNrIiwiZ2V0Qm9yZGVyQ29sb3IiLCJub3JtYWxCYWNrZ3JvdW5kQ29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJkb3duQmFja2dyb3VuZENvbG9yIiwib2ZmIiwiZG93biIsImRlZmF1bHRSYWRpb0dyb3VwQXBwZWFyYW5jZVByb3ZpZGVyIiwicmFkaW9Hcm91cCIsImRlZmF1bHRCdXR0b25BcHBlYXJhbmNlUHJvdmlkZXIiLCJidXR0b24iLCJfZSIsIndpZGdldEZvbnRTaXplIiwiZmllbGRGb250U2l6ZSIsImNhcHRpb25zIiwiZ2V0Q2FwdGlvbnMiLCJub3JtYWxUZXh0IiwiZG93blRleHQiLCJfZiIsIm5vcm1hbExheW91dCIsImRvd25MYXlvdXQiLCJkZWZhdWx0VGV4dEZpZWxkQXBwZWFyYW5jZVByb3ZpZGVyIiwidGV4dEZpZWxkIiwiZ2V0VGV4dCIsImlzQ29tYmVkIiwiaXNNdWx0aWxpbmUiLCJsYXlvdXQiLCJnZXRBbGlnbm1lbnQiLCJnZXRNYXhMZW5ndGgiLCJkZWZhdWx0RHJvcGRvd25BcHBlYXJhbmNlUHJvdmlkZXIiLCJkcm9wZG93biIsImdldFNlbGVjdGVkIiwiZGVmYXVsdE9wdGlvbkxpc3RBcHBlYXJhbmNlUHJvdmlkZXIiLCJvcHRpb25MaXN0IiwiZ2V0T3B0aW9ucyIsInNlbGVjdGVkIiwiaXNTb3J0ZWQiLCJQREZFbWJlZGRlZFBhZ2UiLCJyZWYiLCJkb2MiLCJlbWJlZGRlciIsImFscmVhZHlFbWJlZGRlZCIsImZhY3RvciIsImVtYmVkIiwibGFiZWwiLCJlbWJlZEludG9Db250ZXh0IiwiY29udGV4dCIsInNlbnQiLCJvZiIsIlBERkZvbnQiLCJtb2RpZmllZCIsImhlaWdodE9mRm9udEF0U2l6ZSIsInNpemVBdEhlaWdodCIsInNpemVPZkZvbnRBdEhlaWdodCIsImdldENoYXJhY3RlclNldCIsImVuY29kaW5nIiwiY2hhcmFjdGVyU2V0IiwiUERGSW1hZ2UiLCJzY2FsZVRvRml0IiwiaW1nV2lkdGhTY2FsZSIsImltZ0hlaWdodFNjYWxlIiwiZW1iZWRUYXNrIiwiSW1hZ2VBbGlnbm1lbnQiLCJhc3NlcnRGaWVsZEFwcGVhcmFuY2VPcHRpb25zIiwiYmFja2dyb3VuZENvbG9yIiwiUERGRmllbGQiLCJnZXROYW1lIiwiZ2V0RnVsbHlRdWFsaWZpZWROYW1lIiwiaXNSZWFkT25seSIsImhhc0ZsYWciLCJlbmFibGVSZWFkT25seSIsInNldEZsYWdUbyIsImRpc2FibGVSZWFkT25seSIsImlzUmVxdWlyZWQiLCJlbmFibGVSZXF1aXJlZCIsImRpc2FibGVSZXF1aXJlZCIsImlzRXhwb3J0ZWQiLCJlbmFibGVFeHBvcnRpbmciLCJkaXNhYmxlRXhwb3J0aW5nIiwibmVlZHNBcHBlYXJhbmNlc1VwZGF0ZSIsImRlZmF1bHRVcGRhdGVBcHBlYXJhbmNlcyIsIl9mb250IiwibWFya0FzRGlydHkiLCJnZXRGb3JtIiwibWFya0ZpZWxkQXNEaXJ0eSIsIm1hcmtBc0NsZWFuIiwibWFya0ZpZWxkQXNDbGVhbiIsImlzRGlydHkiLCJmaWVsZElzRGlydHkiLCJjcmVhdGVXaWRnZXQiLCJkZWdyZWVzQW5nbGUiLCJjYXB0aW9uIiwiaGlkZGVuIiwicGFnZVJlZiIsInBhZ2UiLCJyZWN0Iiwic2V0UmVjdGFuZ2xlIiwic2V0UCIsImFjIiwiZ2V0T3JDcmVhdGVBcHBlYXJhbmNlQ2hhcmFjdGVyaXN0aWNzIiwic2V0QmFja2dyb3VuZENvbG9yIiwic2V0Um90YXRpb24iLCJzZXRDYXB0aW9ucyIsInNldEJvcmRlckNvbG9yIiwiZ2V0T3JDcmVhdGVCb3JkZXJTdHlsZSIsInNldFdpZHRoIiwibmV3RGEiLCJ1cGRhdGVXaWRnZXRBcHBlYXJhbmNlV2l0aEZvbnQiLCJyb2xsb3ZlciIsInVwZGF0ZVdpZGdldEFwcGVhcmFuY2VzIiwiY3JlYXRlQXBwZWFyYW5jZVN0cmVhbSIsInVwZGF0ZU9uT2ZmV2lkZ2V0QXBwZWFyYW5jZSIsImNyZWF0ZUFwcGVhcmFuY2VEaWN0Iiwic2V0Tm9ybWFsQXBwZWFyYW5jZSIsInNldFJvbGxvdmVyQXBwZWFyYW5jZSIsInJlbW92ZVJvbGxvdmVyQXBwZWFyYW5jZSIsInNldERvd25BcHBlYXJhbmNlIiwicmVtb3ZlRG93bkFwcGVhcmFuY2UiLCJSZXNvdXJjZXMiLCJzdHJlYW0iLCJmb3JtWE9iamVjdCIsIkJCb3giLCJNYXRyaXgiLCJyZWdpc3RlciIsImNyZWF0ZUltYWdlQXBwZWFyYW5jZVN0cmVhbSIsImltYWdlIiwiYWRqIiwiaW1hZ2VEaW1zIiwiaW1hZ2VOYW1lIiwiYWRkUmFuZG9tU3VmZml4IiwiWE9iamVjdCIsIm9uU3RyZWFtUmVmIiwib2ZmU3RyZWFtUmVmIiwiYXBwZWFyYW5jZURpY3QiLCJQREZDaGVja0JveCIsImFjcm9DaGVja0JveCIsImdldE9uVmFsdWUiLCJzZXRWYWx1ZSIsInVuY2hlY2siLCJpc0NoZWNrZWQiLCJnZXRWYWx1ZSIsImFkZFRvUGFnZSIsIndpZGdldFJlZiIsImFkZFdpZGdldCIsInNldEFwcGVhcmFuY2VTdGF0ZSIsInVwZGF0ZVdpZGdldEFwcGVhcmFuY2UiLCJhZGRBbm5vdCIsIndpZGdldHMiLCJnZXRXaWRnZXRzIiwiZ2V0QXBwZWFyYW5jZVN0YXRlIiwiZ2V0QXBwZWFyYW5jZXMiLCJ1cGRhdGVBcHBlYXJhbmNlcyIsInByb3ZpZGVyIiwiRnVuY3Rpb24iLCJhcHBlYXJhbmNlcyIsIlBERkRyb3Bkb3duIiwiYWNyb0NvbWJvQm94IiwicmF3T3B0aW9ucyIsImRpc3BsYXkiLCJkZWNvZGVUZXh0IiwidmFsdWVzIiwiZ2V0VmFsdWVzIiwic2V0T3B0aW9ucyIsIm9wdGlvbk9iamVjdHMiLCJhZGRPcHRpb25zIiwib3B0aW9uc0FyciIsImV4aXN0aW5nT3B0aW9ucyIsIm5ld09wdGlvbnMiLCJzZWxlY3QiLCJtZXJnZSIsInZhbGlkT3B0aW9ucyIsImZpbmQiLCJvcHRpb24iLCJlbmFibGVFZGl0aW5nIiwiZW5hYmxlTXVsdGlzZWxlY3QiLCJleGlzdGluZ1ZhbHVlcyIsInNldFZhbHVlcyIsImNsZWFyIiwic2V0Rm9udFNpemUiLCJpc0VkaXRhYmxlIiwiZGlzYWJsZUVkaXRpbmciLCJlbmFibGVTb3J0aW5nIiwiZGlzYWJsZVNvcnRpbmciLCJpc011bHRpc2VsZWN0IiwiZGlzYWJsZU11bHRpc2VsZWN0IiwiaXNTcGVsbENoZWNrZWQiLCJlbmFibGVTcGVsbENoZWNraW5nIiwiZGlzYWJsZVNwZWxsQ2hlY2tpbmciLCJpc1NlbGVjdE9uQ2xpY2siLCJlbmFibGVTZWxlY3RPbkNsaWNrIiwiZGlzYWJsZVNlbGVjdE9uQ2xpY2siLCJfZyIsImdldERlZmF1bHRGb250IiwiUERGT3B0aW9uTGlzdCIsImFjcm9MaXN0Qm94IiwiUERGUmFkaW9Hcm91cCIsImFjcm9SYWRpb0J1dHRvbiIsImV4cG9ydFZhbHVlcyIsImdldEV4cG9ydFZhbHVlcyIsImV4cG9ydE9wdGlvbnMiLCJvblZhbHVlcyIsImdldE9uVmFsdWVzIiwib25PcHRpb25zIiwiaXNPZmZUb2dnbGVhYmxlIiwiZW5hYmxlT2ZmVG9nZ2xpbmciLCJkaXNhYmxlT2ZmVG9nZ2xpbmciLCJpc011dHVhbGx5RXhjbHVzaXZlIiwiZW5hYmxlTXV0dWFsRXhjbHVzaW9uIiwiZGlzYWJsZU11dHVhbEV4Y2x1c2lvbiIsImFkZE9wdGlvblRvUGFnZSIsIl9oIiwiX2oiLCJhcFN0YXRlVmFsdWUiLCJhZGRXaWRnZXRXaXRoT3B0IiwiUERGU2lnbmF0dXJlIiwiYWNyb1NpZ25hdHVyZSIsIlBERlRleHRGaWVsZCIsImFjcm9UZXh0IiwiaXNSaWNoRm9ybWF0dGVkIiwic2V0VGV4dCIsImRpc2FibGVSaWNoRm9ybWF0dGluZyIsInJlbW92ZVZhbHVlIiwicXVhZGRpbmciLCJnZXRRdWFkZGluZyIsInNldEFsaWdubWVudCIsInNldFF1YWRkaW5nIiwic2V0TWF4TGVuZ3RoIiwiTUFYX1NBRkVfSU5URUdFUiIsInJlbW92ZU1heExlbmd0aCIsInNldEltYWdlIiwiZmllbGRBbGlnbm1lbnQiLCJzdHJlYW1SZWYiLCJlbmFibGVNdWx0aWxpbmUiLCJkaXNhYmxlTXVsdGlsaW5lIiwiaXNQYXNzd29yZCIsImVuYWJsZVBhc3N3b3JkIiwiZGlzYWJsZVBhc3N3b3JkIiwiaXNGaWxlU2VsZWN0b3IiLCJlbmFibGVGaWxlU2VsZWN0aW9uIiwiZGlzYWJsZUZpbGVTZWxlY3Rpb24iLCJpc1Njcm9sbGFibGUiLCJlbmFibGVTY3JvbGxpbmciLCJkaXNhYmxlU2Nyb2xsaW5nIiwiZW5hYmxlQ29tYmluZyIsImNvbnNvbGUiLCJ3YXJuIiwiZGlzYWJsZUNvbWJpbmciLCJlbmFibGVSaWNoRm9ybWF0dGluZyIsIlN0YW5kYXJkRm9udHMiLCJQREZGb3JtIiwiYWNyb0Zvcm0iLCJlbWJlZERlZmF1bHRGb250IiwiZW1iZWRTdGFuZGFyZEZvbnQiLCJIZWx2ZXRpY2EiLCJkaXJ0eUZpZWxkcyIsIlNldCIsImRlZmF1bHRGb250Q2FjaGUiLCJoYXNYRkEiLCJkZWxldGVYRkEiLCJkZWxldGUiLCJnZXRGaWVsZHMiLCJhbGxGaWVsZHMiLCJnZXRBbGxGaWVsZHMiLCJmaWVsZHMiLCJjb252ZXJ0VG9QREZGaWVsZCIsImdldEZpZWxkTWF5YmUiLCJnZXRGaWVsZCIsImdldEJ1dHRvbiIsImdldENoZWNrQm94IiwiZ2V0RHJvcGRvd24iLCJnZXRPcHRpb25MaXN0IiwiZ2V0UmFkaW9Hcm91cCIsImdldFNpZ25hdHVyZSIsImdldFRleHRGaWVsZCIsImNyZWF0ZUJ1dHRvbiIsIm5hbWVQYXJ0cyIsInNwbGl0RmllbGROYW1lIiwicGFyZW50IiwiZmluZE9yQ3JlYXRlTm9uVGVybWluYWxzIiwibm9uVGVybWluYWwiLCJzZXRQYXJ0aWFsTmFtZSIsInRlcm1pbmFsIiwiYWRkRmllbGRUb1BhcmVudCIsImNyZWF0ZUNoZWNrQm94IiwiY3JlYXRlRHJvcGRvd24iLCJjb21ib0JveCIsImNyZWF0ZU9wdGlvbkxpc3QiLCJsaXN0Qm94IiwiY3JlYXRlUmFkaW9Hcm91cCIsInJhZGlvQnV0dG9uIiwiY3JlYXRlVGV4dEZpZWxkIiwiZmxhdHRlbiIsInVwZGF0ZUZpZWxkQXBwZWFyYW5jZXMiLCJsZW5GaWVsZHMiLCJsZW5XaWRnZXRzIiwiZmluZFdpZGdldFBhZ2UiLCJmaW5kV2lkZ2V0QXBwZWFyYW5jZVJlZiIsInhPYmplY3RLZXkiLCJuZXdYT2JqZWN0IiwicHVzaE9wZXJhdG9ycyIsInJlbW92ZUZpZWxkIiwicGFnZXMiLCJhZGQiLCJyZW1vdmVBbm5vdCIsImZvckVhY2giLCJmaWVsZEtpZHMiLCJub3JtYWxpemVkRW50cmllcyIsIktpZHMiLCJraWRzQ291bnQiLCJjaGlsZEluZGV4IiwiY2hpbGQiLCJmaWVsZFJlZiIsImFjY2VzcyIsIlAiLCJnZXRQYWdlcyIsImdldE9iamVjdFJlZiIsImZpbmRQYWdlRm9yQW5ub3RhdGlvblJlZiIsInJlZk9yRGljdCIsImdldE5vcm1hbEFwcGVhcmFuY2UiLCJuYW1lXzEiLCJwYXJ0aWFsTmFtZXMiLCJwYXJlbnRfMSIsInBhcmVudFJlZiIsImZpbmROb25UZXJtaW5hbCIsInNldFBhcmVudCIsIm5vZGVSZWYiLCJhZGRGaWVsZCIsInBhcnRpYWxOYW1lIiwiZ2V0UGFydGlhbE5hbWUiLCJQYXJzZVNwZWVkcyIsImZ1bGx5UXVhbGlmaWVkTmFtZSIsInBhcnRzIiwiZW50cmllcyIsIkZpZWxkcyIsIlBhZ2VTaXplcyIsIkEwIiwiQTEiLCJBMiIsIkEzIiwiQTQiLCJBNSIsIkE2IiwiQTciLCJBOCIsIkE5IiwiQTEwIiwiQjAiLCJCMSIsIkIyIiwiQjMiLCJCNCIsIkI1IiwiQjYiLCJCNyIsIkI4IiwiQjkiLCJCMTAiLCJDMCIsIkMxIiwiQzIiLCJDMyIsIkM0IiwiQzUiLCJDNiIsIkM3IiwiQzgiLCJDOSIsIkMxMCIsIlJBMCIsIlJBMSIsIlJBMiIsIlJBMyIsIlJBNCIsIlNSQTAiLCJTUkExIiwiU1JBMiIsIlNSQTMiLCJTUkE0IiwiRXhlY3V0aXZlIiwiRm9saW8iLCJMZWdhbCIsIkxldHRlciIsIlRhYmxvaWQiLCJJbmZpbml0eSIsIlBERkVtYmVkZGVkRmlsZSIsIk5hbWVzIiwiRW1iZWRkZWRGaWxlcyIsIkVGTmFtZXMiLCJjYXRhbG9nIiwiZmlsZU5hbWUiLCJQREZKYXZhU2NyaXB0IiwiSmF2YXNjcmlwdCIsIkpTTmFtZXMiLCJzY3JpcHROYW1lIiwiSmF2YVNjcmlwdEVtYmVkZGVyIiwic2NyaXB0IiwiZm9yIiwianNBY3Rpb25EaWN0IiwiVHlwZSIsIkpTIiwiUERGSGV4U3RyaW5nIiwiUERGRG9jdW1lbnQiLCJpZ25vcmVFbmNyeXB0aW9uIiwidXBkYXRlTWV0YWRhdGEiLCJkZWZhdWx0V29yZEJyZWFrcyIsImNvbXB1dGVQYWdlcyIsIlBhZ2VzIiwidHJhdmVyc2UiLCJwYWdlTWFwIiwiZ2V0T3JDcmVhdGVGb3JtIiwiZ2V0T3JDcmVhdGVBY3JvRm9ybSIsInRyYWlsZXJJbmZvIiwiUm9vdCIsImlzRW5jcnlwdGVkIiwiRW5jcnlwdCIsInBhZ2VDYWNoZSIsImZvcm1DYWNoZSIsImZvbnRzIiwiaW1hZ2VzIiwiZW1iZWRkZWRQYWdlcyIsImVtYmVkZGVkRmlsZXMiLCJqYXZhU2NyaXB0cyIsInVwZGF0ZUluZm9EaWN0IiwicGRmIiwicGFyc2VTcGVlZCIsInRocm93T25JbnZhbGlkT2JqZWN0IiwiY2FwTnVtYmVycyIsIlNsb3ciLCJBcnJheUJ1ZmZlciIsInBhcnNlRG9jdW1lbnQiLCJjcmVhdGUiLCJwYWdlVHJlZSIsInBhZ2VUcmVlUmVmIiwicmVnaXN0ZXJGb250a2l0IiwiZm9udGtpdCIsImZvcm0iLCJnZXRUaXRsZSIsInRpdGxlIiwiZ2V0SW5mb0RpY3QiLCJhc3NlcnRJc0xpdGVyYWxPckhleFN0cmluZyIsImdldEF1dGhvciIsImF1dGhvciIsImdldFN1YmplY3QiLCJzdWJqZWN0IiwiZ2V0S2V5d29yZHMiLCJrZXl3b3JkcyIsImdldENyZWF0b3IiLCJjcmVhdG9yIiwiZ2V0UHJvZHVjZXIiLCJwcm9kdWNlciIsImdldENyZWF0aW9uRGF0ZSIsImNyZWF0aW9uRGF0ZSIsImRlY29kZURhdGUiLCJnZXRNb2RpZmljYXRpb25EYXRlIiwibW9kaWZpY2F0aW9uRGF0ZSIsInNldFRpdGxlIiwic2hvd0luV2luZG93VGl0bGVCYXIiLCJnZXRPckNyZWF0ZVZpZXdlclByZWZlcmVuY2VzIiwic2V0RGlzcGxheURvY1RpdGxlIiwic2V0QXV0aG9yIiwic2V0U3ViamVjdCIsInNldEtleXdvcmRzIiwic2V0Q3JlYXRvciIsInNldFByb2R1Y2VyIiwic2V0TGFuZ3VhZ2UiLCJsYW5ndWFnZSIsInNldENyZWF0aW9uRGF0ZSIsIkRhdGUiLCJzZXRNb2RpZmljYXRpb25EYXRlIiwiZ2V0UGFnZUNvdW50IiwicGFnZUNvdW50IiwiZ2V0UGFnZSIsImluZGV4IiwiZ2V0UGFnZUluZGljZXMiLCJyZW1vdmVQYWdlIiwicmVtb3ZlTGVhZk5vZGUiLCJhZGRQYWdlIiwiaW5zZXJ0UGFnZSIsInNldFNpemUiLCJpbnNlcnRMZWFmTm9kZSIsImludmFsaWRhdGUiLCJjb3B5UGFnZXMiLCJzcmNEb2MiLCJpbmRpY2VzIiwiY29waWVyIiwic3JjUGFnZXMiLCJjb3BpZWRQYWdlcyIsInNyY1BhZ2UiLCJjb3BpZWRQYWdlIiwicGRmQ29weSIsImNvbnRlbnRQYWdlcyIsImFkZEphdmFTY3JpcHQiLCJuZXh0UmVmIiwiamF2YVNjcmlwdCIsImF0dGFjaCIsImF0dGFjaG1lbnQiLCJlbWJlZGRlZEZpbGUiLCJtaW1lVHlwZSIsImRlc2NyaXB0aW9uIiwiYWZSZWxhdGlvbnNoaXAiLCJGaWxlRW1iZWRkZXIiLCJlbWJlZEZvbnQiLCJzdWJzZXQiLCJjdXN0b21OYW1lIiwiZmVhdHVyZXMiLCJwZGZGb250IiwiYXNzZXJ0Rm9udGtpdCIsImVtYmVkSnBnIiwianBnIiwicGRmSW1hZ2UiLCJlbWJlZFBuZyIsInBuZyIsImVtYmVkUGRmIiwiZW1iZWRQYWdlcyIsImVtYmVkUGFnZSIsImJvdW5kaW5nQm94IiwidHJhbnNmb3JtYXRpb25NYXRyaXgiLCJib3VuZGluZ0JveGVzIiwidHJhbnNmb3JtYXRpb25NYXRyaWNlcyIsImN1cnJQYWdlIiwibmV4dFBhZ2UiLCJtYXliZUNvcHlQYWdlIiwiYm94IiwibWF0cml4IiwiZW1iZWRBbGwiLCJzYXZlIiwidXNlT2JqZWN0U3RyZWFtcyIsImFkZERlZmF1bHRQYWdlIiwib2JqZWN0c1BlclRpY2siLCJmb3JDb250ZXh0Iiwic2VyaWFsaXplVG9CdWZmZXIiLCJzYXZlQXNCYXNlNjQiLCJkYXRhVXJpIiwib3RoZXJPcHRpb25zIiwiYW5ub3RhdGlvbnMiLCJBbm5vdHMiLCJpbmRleE9mIiwiZW1iZWRkYWJsZXMiLCJwZGZMaWIiLCJub3ciLCJpbmZvIiwiZXhpc3RpbmdJbmZvIiwiSW5mbyIsIm5ld0luZm8iLCJwZGZPYmplY3QiLCJCbGVuZE1vZGUiLCJQREZQYWdlIiwibGVhZk5vZGUiLCJmb250Q29sb3IiLCJSb3RhdGUiLCJtZWRpYUJveCIsImdldE1lZGlhQm94Iiwic2V0TWVkaWFCb3giLCJjcm9wQm94IiwiZ2V0Q3JvcEJveCIsImJsZWVkQm94IiwiZ2V0QmxlZWRCb3giLCJ0cmltQm94IiwiZ2V0VHJpbUJveCIsImFydEJveCIsImdldEFydEJveCIsImhhc0Nyb3BCb3giLCJDcm9wQm94IiwiaGFzQmxlZWRCb3giLCJCbGVlZEJveCIsImhhc1RyaW1Cb3giLCJUcmltQm94IiwiaGFzQXJ0Qm94IiwiQXJ0Qm94Iiwic2V0Q3JvcEJveCIsInNldEJsZWVkQm94Iiwic2V0VHJpbUJveCIsInNldEFydEJveCIsImdldFNpemUiLCJzZXRIZWlnaHQiLCJnZXRIZWlnaHQiLCJNZWRpYUJveCIsImFzUmVjdGFuZ2xlIiwidHJhbnNsYXRlQ29udGVudCIsIm5vcm1hbGl6ZSIsImdldENvbnRlbnRTdHJlYW0iLCJjcmVhdGVDb250ZW50U3RyZWFtIiwic3RhcnRSZWYiLCJlbmRSZWYiLCJ3cmFwQ29udGVudFN0cmVhbXMiLCJzY2FsZUNvbnRlbnQiLCJzY2FsZUFubm90YXRpb25zIiwiYW5ub3RzIiwiYW5ub3QiLCJzY2FsZUFubm90IiwicmVzZXRQb3NpdGlvbiIsInNldEZvbnQiLCJmb250S2V5IiwibmV3Rm9udERpY3Rpb25hcnkiLCJzZXRGb250Q29sb3IiLCJnZXRQb3NpdGlvbiIsImdldFgiLCJnZXRZIiwibW92ZURvd24iLCJ5RGVjcmVhc2UiLCJtb3ZlVXAiLCJ5SW5jcmVhc2UiLCJtb3ZlTGVmdCIsInhEZWNyZWFzZSIsIm1vdmVSaWdodCIsInhJbmNyZWFzZSIsIm9wZXJhdG9yIiwiY29udGVudFN0cmVhbSIsIm9wYWNpdHkiLCJ3b3JkQnJlYWtzIiwiYmxlbmRNb2RlIiwic2V0T3JFbWJlZEZvbnQiLCJvbGRGb250IiwibmV3Rm9udCIsIm5ld0ZvbnRLZXkiLCJlbmNvZGVkTGluZXMiLCJncmFwaGljc1N0YXRlS2V5IiwibWF5YmVFbWJlZEdyYXBoaWNzU3RhdGUiLCJyZXNldEZvbnQiLCJlbWJlZGRlZFBhZ2UiLCJib3JkZXJPcGFjaXR5IiwiX2siLCJfbCIsIl9tIiwiX28iLCJkcmF3U3F1YXJlIiwiZHJhd0NpcmNsZSIsIm9sZEZvbnRLZXkiLCJnZXRGb250IiwidXNlRXhpc3RpbmciLCJjb250ZW50U3RyZWFtUmVmIiwiYWRkQ29udGVudFN0cmVhbSIsImNhIiwiQ0EiLCJCTSIsIm5ld0V4dEdTdGF0ZSIsInNlbGVjdG9ycyIsImxpc3QiLCJzY2FsZVBERk51bWJlcnMiLCJpbmtMaXN0cyIsImFyciIsImR1bW15UmVmIiwicGFnZUxlYWYiLCJQREZCdXR0b24iLCJhY3JvUHVzaEJ1dHRvbiIsIkFGUmVsYXRpb25zaGlwIiwiZmlsZURhdGEiLCJlbWJlZGRlZEZpbGVTdHJlYW0iLCJlbWJlZGRlZEZpbGVTdHJlYW1SZWYiLCJmaWxlU3BlY0RpY3QiLCJmbGF0ZVN0cmVhbSIsIlN1YnR5cGUiLCJQYXJhbXMiLCJTaXplIiwiQ3JlYXRpb25EYXRlIiwiTW9kRGF0ZSIsIkYiLCJVRiIsIkVGIiwiRGVzYyIsIk1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IiLCJjbGFzc05hbWUiLCJtZXRob2ROYW1lIiwiUHJpdmF0ZUNvbnN0cnVjdG9yRXJyb3IiLCJVbmV4cGVjdGVkT2JqZWN0VHlwZUVycm9yIiwiVW5zdXBwb3J0ZWRFbmNvZGluZ0Vycm9yIiwiUmVwYXJzZUVycm9yIiwiTWlzc2luZ0NhdGFsb2dFcnJvciIsIk1pc3NpbmdQYWdlQ29udGVudHNFbWJlZGRpbmdFcnJvciIsIlVucmVjb2duaXplZFN0cmVhbVR5cGVFcnJvciIsImNvbnRydWN0b3IiLCJQYWdlRW1iZWRkaW5nTWlzbWF0Y2hlZENvbnRleHRFcnJvciIsIlBERkFycmF5SXNOb3RSZWN0YW5nbGVFcnJvciIsIkludmFsaWRQREZEYXRlU3RyaW5nRXJyb3IiLCJJbnZhbGlkVGFyZ2V0SW5kZXhFcnJvciIsInRhcmdldEluZGV4IiwiQ291bnQiLCJDb3JydXB0UGFnZVRyZWVFcnJvciIsIm9wZXJhdGlvbiIsIkluZGV4T3V0T2ZCb3VuZHNFcnJvciIsIkludmFsaWRBY3JvRmllbGRWYWx1ZUVycm9yIiwiTXVsdGlTZWxlY3RWYWx1ZUVycm9yIiwiTWlzc2luZ0RBRW50cnlFcnJvciIsIk1pc3NpbmdUZk9wZXJhdG9yRXJyb3IiLCJOdW1iZXJQYXJzaW5nRXJyb3IiLCJjb2x1bW4iLCJQREZQYXJzaW5nRXJyb3IiLCJkZXRhaWxzIiwiTmV4dEJ5dGVBc3NlcnRpb25FcnJvciIsImV4cGVjdGVkQnl0ZSIsImFjdHVhbEJ5dGUiLCJQREZPYmplY3RQYXJzaW5nRXJyb3IiLCJieXRlIiwiUERGSW52YWxpZE9iamVjdFBhcnNpbmdFcnJvciIsIlBERlN0cmVhbVBhcnNpbmdFcnJvciIsIlVuYmFsYW5jZWRQYXJlbnRoZXNpc0Vycm9yIiwiU3RhbGxlZFBhcnNlckVycm9yIiwiTWlzc2luZ1BERkhlYWRlckVycm9yIiwiTWlzc2luZ0tleXdvcmRFcnJvciIsImtleXdvcmQiLCJQREZIZWFkZXIiLCJtYWpvciIsIm1pbm9yIiwiYmMiLCJzaXplSW5CeXRlcyIsImNvcHlCeXRlc0ludG8iLCJidWZmZXIiLCJpbml0aWFsT2Zmc2V0IiwiQ2hhckNvZGVzIiwiZm9yVmVyc2lvbiIsIlBERk51bWJlciIsIm51bWJlclZhbHVlIiwic3RyaW5nVmFsdWUiLCJjbG9uZSIsIlBERk9iamVjdCIsIlBERkFycmF5Iiwib2JqZWN0Iiwic3BsaWNlIiwicmVtb3ZlIiwibG9va3VwTWF5YmUiLCJ0eXBlcyIsImxvd2VyTGVmdFgiLCJsb3dlckxlZnRZIiwiYXNBcnJheSIsIndpdGhDb250ZXh0IiwiYXJyYXlTdHJpbmciLCJlbCIsIkVORk9SQ0VSIiwiUERGQm9vbCIsImVuZm9yY2VyIiwiYXNCb29sZWFuIiwiVHJ1ZSIsIkZhbHNlIiwiSXNEZWxpbWl0ZXIiLCJJc1doaXRlc3BhY2UiLCJJc0lycmVndWxhciIsInBvb2wiLCJQREZOYW1lIiwiY2hhckNvZGUiLCJlbmNvZGVkTmFtZSIsImNoYXJhY3RlciIsImFzQnl0ZXMiLCJoZXgiLCJlc2NhcGVkIiwicHVzaEJ5dGUiLCJuZXh0Q2hhciIsInBhcnNlSW50IiwiYXNTdHJpbmciLCJkZWNvZGVkVmFsdWUiLCJyZXBsYWNlIiwiXyIsImRlY29kZU5hbWUiLCJpbnN0YW5jZSIsIkxlbmd0aCIsIkZsYXRlRGVjb2RlIiwiRXh0R1N0YXRlIiwiQ29udGVudHMiLCJQYXJlbnQiLCJQYWdlIiwiVGl0bGUiLCJBdXRob3IiLCJTdWJqZWN0IiwiQ3JlYXRvciIsIktleXdvcmRzIiwiUHJvZHVjZXIiLCJQREZOdWxsIiwiYXNOdWxsIiwiUERGRGljdCIsInByZXNlcnZlUERGTnVsbCIsImFzTWFwIiwidW5pcXVlS2V5IiwiZXhpc3RpbmdLZXlzIiwiZGljdFN0cmluZyIsImZyb21NYXBXaXRoQ29udGV4dCIsIlBERlN0cmVhbSIsIl9jb250ZXh0IiwiZ2V0Q29udGVudHNTdHJpbmciLCJnZXRDb250ZW50cyIsImdldENvbnRlbnRzU2l6ZSIsInVwZGF0ZURpY3QiLCJjb250ZW50c1NpemUiLCJzdHJlYW1TdHJpbmciLCJjb250ZW50cyIsIlBERlJhd1N0cmVhbSIsImFzVWludDhBcnJheSIsIlBERlJlZiIsIm9iamVjdE51bWJlciIsImdlbmVyYXRpb25OdW1iZXIiLCJQREZPcGVyYXRvciIsImFyZyIsIlBERk9wZXJhdG9yTmFtZXMiLCJQREZGbGF0ZVN0cmVhbSIsImVuY29kZSIsImNvbXB1dGVDb250ZW50cyIsInVuZW5jb2RlZENvbnRlbnRzIiwiZ2V0VW5lbmNvZGVkQ29udGVudHMiLCJjb250ZW50c0NhY2hlIiwiUERGQ29udGVudFN0cmVhbSIsImdldFVuZW5jb2RlZENvbnRlbnRzU2l6ZSIsIlNpbXBsZVJORyIsInNlZWQiLCJuZXh0SW50IiwiZmxvb3IiLCJ3aXRoU2VlZCIsImJ5QXNjZW5kaW5nT2JqZWN0TnVtYmVyIiwiUERGQ29udGV4dCIsImxhcmdlc3RPYmplY3ROdW1iZXIiLCJpbmRpcmVjdE9iamVjdHMiLCJybmciLCJlbnVtZXJhdGVJbmRpcmVjdE9iamVjdHMiLCJsaXRlcmFsIiwiRmlsdGVyIiwiZ2V0UHVzaEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtIiwicHVzaEdyYXBoaWNzU3RhdGVDb250ZW50U3RyZWFtUmVmIiwiZ2V0UG9wR3JhcGhpY3NTdGF0ZUNvbnRlbnRTdHJlYW0iLCJwb3BHcmFwaGljc1N0YXRlQ29udGVudFN0cmVhbVJlZiIsInByZWZpeCIsInN1ZmZpeExlbmd0aCIsInBvdyIsIlBERlBhZ2VMZWFmIiwiYXV0b05vcm1hbGl6ZUNUTSIsIm5vcm1hbGl6ZWQiLCJkaWN0T3JSZWYiLCJnZXRJbmhlcml0YWJsZUF0dHJpYnV0ZSIsImFycmF5T3JSZWYiLCJudW1iZXJPclJlZiIsImF0dHJpYnV0ZSIsImFzY2VuZCIsInN0YXJ0U3RyZWFtIiwiZW5kU3RyZWFtIiwiYW5ub3RSZWYiLCJzZXRGb250RGljdGlvbmFyeSIsImZvbnREaWN0UmVmIiwibmV3Rm9udERpY3Rpb25hcnlLZXkiLCJzZXRYT2JqZWN0IiwieE9iamVjdFJlZiIsIm5ld1hPYmplY3RLZXkiLCJzZXRFeHRHU3RhdGUiLCJleHRHU3RhdGVSZWYiLCJuZXdFeHRHU3RhdGVLZXkiLCJ2aXNpdG9yIiwiY29udGVudHNSZWYiLCJJbmhlcml0YWJsZUVudHJpZXMiLCJ3aXRoQ29udGV4dEFuZFBhcmVudCIsIlBERk9iamVjdENvcGllciIsInRyYXZlcnNlZE9iamVjdHMiLCJjb3B5UERGUGFnZSIsImNvcHlQREZEaWN0IiwiY29weVBERkFycmF5IiwiY29weVBERlN0cmVhbSIsImNvcHlQREZJbmRpcmVjdE9iamVjdCIsIm9yaWdpbmFsUGFnZSIsImNsb25lZFBhZ2UiLCJvcmlnaW5hbERpY3QiLCJjbG9uZWREaWN0Iiwib3JpZ2luYWxBcnJheSIsImNsb25lZEFycmF5Iiwib3JpZ2luYWxTdHJlYW0iLCJjbG9uZWRTdHJlYW0iLCJuZXdSZWYiLCJkZXJlZmVyZW5jZWRWYWx1ZSIsImNsb25lZCIsIlBERkNyb3NzUmVmU2VjdGlvbiIsImZpcnN0RW50cnkiLCJzdWJzZWN0aW9ucyIsImNodW5rSWR4IiwiY2h1bmtMZW5ndGgiLCJhZGRFbnRyeSIsImFwcGVuZCIsImRlbGV0ZWQiLCJhZGREZWxldGVkRW50cnkiLCJuZXh0RnJlZU9iamVjdE51bWJlciIsInNlY3Rpb24iLCJyYW5nZUlkeCIsInJhbmdlTGVuIiwicmFuZ2UiLCJlbnRyeUlkeCIsImVudHJ5TGVuIiwiZW50cnkiLCJzdWJzZWN0aW9uIiwic3Vic2VjdGlvbkxlbmd0aCIsImNvcHlTdWJzZWN0aW9uc0ludG9CdWZmZXIiLCJmaXJzdE9iamVjdE51bWJlciIsInJhbmdlTGVuZ3RoIiwiY29weUVudHJpZXNJbnRvQnVmZmVyIiwiZW50cnlPZmZzZXQiLCJlbnRyeUdlbiIsImN1cnJFbnRyeSIsInByZXZFbnRyeSIsImNyZWF0ZUVtcHR5IiwiUERGVHJhaWxlciIsImxhc3RYUmVmT2Zmc2V0IiwiZm9yTGFzdENyb3NzUmVmU2VjdGlvbk9mZnNldCIsIlBERlRyYWlsZXJEaWN0IiwiUERGT2JqZWN0U3RyZWFtIiwib2JqZWN0cyIsIm9mZnNldHMiLCJjb21wdXRlT2JqZWN0T2Zmc2V0cyIsIm9mZnNldHNTdHJpbmciLCJjb21wdXRlT2Zmc2V0c1N0cmluZyIsImdldE9iamVjdHNDb3VudCIsIndpdGhDb250ZXh0QW5kT2JqZWN0cyIsIlBERldyaXRlciIsInBhcnNlZE9iamVjdHMiLCJzaG91bGRXYWl0Rm9yVGljayIsInhyZWYiLCJ0cmFpbGVyRGljdCIsInRyYWlsZXIiLCJjb21wdXRlQnVmZmVyU2l6ZSIsImNvbXB1dGVJbmRpcmVjdE9iamVjdFNpemUiLCJjcmVhdGVUcmFpbGVyRGljdCIsIklEIiwiaW5kaXJlY3RPYmplY3QiLCJ4cmVmT2Zmc2V0IiwiUERGSW52YWxpZE9iamVjdCIsIkVudHJ5VHlwZSIsIlBERkNyb3NzUmVmU3RyZWFtIiwiY29tcHV0ZUluZGV4IiwiY29tcHV0ZUVudHJ5VHVwbGVzIiwiZW50cnlUdXBsZXMiLCJEZWxldGVkIiwiVW5jb21wcmVzc2VkIiwiQ29tcHJlc3NlZCIsIm9iamVjdFN0cmVhbVJlZiIsImNvbXB1dGVNYXhFbnRyeUJ5dGVXaWR0aHMiLCJlbnRyeVR1cGxlc0NhY2hlIiwid2lkdGhzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImZpcnN0U2l6ZSIsInNlY29uZFNpemUiLCJ0aGlyZFNpemUiLCJtYXhCeXRlV2lkdGhzQ2FjaGUiLCJpbmRleENhY2hlIiwiYWRkVW5jb21wcmVzc2VkRW50cnkiLCJhZGRDb21wcmVzc2VkRW50cnkiLCJieXRlV2lkdGhzIiwiZW50cmllc0xlbiIsImZpcnN0Qnl0ZXMiLCJzZWNvbmRCeXRlcyIsInRoaXJkQnl0ZXMiLCJQREZTdHJlYW1Xcml0ZXIiLCJlbmNvZGVTdHJlYW1zIiwib2JqZWN0c1BlclN0cmVhbSIsInhyZWZTdHJlYW0iLCJ1bmNvbXByZXNzZWRPYmplY3RzIiwiY29tcHJlc3NlZE9iamVjdHMiLCJvYmplY3RTdHJlYW1SZWZzIiwib2JqZWN0U3RyZWFtIiwieHJlZlN0cmVhbVJlZiIsIlN0YW5kYXJkRm9udEVtYmVkZGVyIiwiRm9udE5hbWUiLCJnbHlwaHMiLCJlbmNvZGVUZXh0QXNHbHlwaHMiLCJoZXhDb2RlcyIsInRvdGFsV2lkdGgiLCJyaWdodCIsImtlcm5BbW91bnQiLCJ3aWR0aE9mR2x5cGgiLCJBc2NlbmRlciIsIkRlc2NlbmRlciIsIkZvbnRCQm94IiwiZm9udERpY3QiLCJCYXNlRm9udCIsImNvZGVQb2ludHMiLCJjbWFwSGV4Rm9ybWF0IiwiY21hcEhleFN0cmluZyIsImNtYXBDb2RlUG9pbnRGb3JtYXQiLCJocyIsImxzIiwiQ3VzdG9tRm9udEVtYmVkZGVyIiwiZm9udERhdGEiLCJmb250RmVhdHVyZXMiLCJhbGxHbHlwaHNJbkZvbnRTb3J0ZWRCeUlkIiwiZ2x5cGhGb3JDb2RlUG9pbnQiLCJnIiwiaWQiLCJ1bml0c1BlckVtIiwicG9zdHNjcmlwdE5hbWUiLCJiYXNlRm9udE5hbWUiLCJnbHlwaENhY2hlIiwiYWR2YW5jZVdpZHRoIiwiYXNjZW50IiwiZGVzY2VudCIsImJib3giLCJlbWJlZEZvbnREaWN0IiwiY2lkRm9udERpY3RSZWYiLCJ1bmljb2RlQ01hcFJlZiIsImVtYmVkQ0lERm9udERpY3QiLCJlbWJlZFVuaWNvZGVDbWFwIiwiRGVzY2VuZGFudEZvbnRzIiwiVG9Vbmljb2RlIiwiaXNDRkYiLCJjZmYiLCJmb250RGVzY3JpcHRvclJlZiIsImNpZEZvbnREaWN0IiwiZW1iZWRGb250RGVzY3JpcHRvciIsIkNJRFRvR0lETWFwIiwiQ0lEU3lzdGVtSW5mbyIsIlJlZ2lzdHJ5IiwiUERGU3RyaW5nIiwiT3JkZXJpbmciLCJTdXBwbGVtZW50IiwiRm9udERlc2NyaXB0b3IiLCJXIiwiY29tcHV0ZVdpZHRocyIsImZvbnRTdHJlYW1SZWYiLCJpdGFsaWNBbmdsZSIsImNhcEhlaWdodCIsInhIZWlnaHQiLCJmb250RGVzY3JpcHRvciIsImVtYmVkRm9udFN0cmVhbSIsIkZsYWdzIiwiZmFtaWx5Q2xhc3MiLCJzRmFtaWx5Q2xhc3MiLCJmaXhlZFBpdGNoIiwicG9zdCIsImlzRml4ZWRQaXRjaCIsInNlcmlmIiwic3ltYm9saWMiLCJpdGFsaWMiLCJtYWNTdHlsZSIsImZsaXBCaXQiLCJiaXQiLCJub25zeW1ib2xpYyIsImFsbENhcCIsInNtYWxsQ2FwIiwiZm9yY2VCb2xkIiwiSXRhbGljQW5nbGUiLCJBc2NlbnQiLCJEZXNjZW50IiwiQ2FwSGVpZ2h0IiwiWEhlaWdodCIsIlN0ZW1WIiwic2VyaWFsaXplRm9udCIsImZvbnRTdHJlYW0iLCJjbWFwIiwiZ2x5cGhJZCIsImJmQ2hhcnMiLCJnbHlwaCIsInVuaWNvZGUiLCJmaWxsQ21hcFRlbXBsYXRlIiwiY3JlYXRlQ21hcCIsImJpbmQiLCJjbWFwU3RyZWFtIiwiY3VyclNlY3Rpb24iLCJjdXJyR2x5cGgiLCJwcmV2R2x5cGgiLCJjdXJyR2x5cGhJZCIsInByZXZHbHlwaElkIiwiQ3VzdG9tRm9udFN1YnNldEVtYmVkZGVyIiwiY3VzdG9tRm9udE5hbWUiLCJjcmVhdGVTdWJzZXQiLCJnbHlwaElkTWFwIiwic3Vic2V0R2x5cGhJZCIsImluY2x1ZGVHbHlwaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZW5jb2RlU3RyZWFtIiwiQ29sb3JTcGFjZSIsIk1BUktFUlMiLCJDaGFubmVsVG9Db2xvclNwYWNlIiwiRGV2aWNlR3JheSIsIkRldmljZVJHQiIsIkRldmljZUNNWUsiLCJKcGVnRW1iZWRkZXIiLCJpbWFnZURhdGEiLCJiaXRzUGVyQ29tcG9uZW50IiwiZGF0YVZpZXciLCJtYXJrZXIiLCJjaGFubmVsQnl0ZSIsImNoYW5uZWxOYW1lIiwiRGF0YVZpZXciLCJnZXRVaW50MTYiLCJieXRlTGVuZ3RoIiwiZ2V0VWludDgiLCJ4T2JqZWN0IiwiQml0c1BlckNvbXBvbmVudCIsIldpZHRoIiwiSGVpZ2h0IiwiRGVjb2RlIiwiVVBORyIsInRhYnMiLCJhY1RMIiwidG9SR0JBOCIsImRlY29kZUltYWdlIiwiZnJtcyIsImZyYW1lcyIsImltZyIsImVtcHR5IiwiZnJtIiwiZngiLCJmeSIsImZ3IiwiZmgiLCJmZGF0YSIsImJsZW5kIiwiX2NvcHlUaWxlIiwiZGlzcG9zZSIsImFyZWEiLCJicHAiLCJkZWNvZGUiLCJfZ2V0QlBQIiwiYnBsIiwiYmYiLCJiZjMyIiwiVWludDMyQXJyYXkiLCJjdHlwZSIsInJzIiwiX2JpbiIsInJlYWRVc2hvcnQiLCJxYXJlYSIsInRzIiwidGkiLCJ0ciIsInRnIiwidGIiLCJxaSIsInRsIiwiczAiLCJ0MCIsImNqIiwiZ3IiLCJkaSIsImFsIiwiYnVmZiIsImZkIiwiYmluIiwiclVzIiwiclVpIiwicmVhZFVpbnQiLCJkZCIsImRvZmYiLCJmb2ZmIiwibWdjayIsInJlYWRBU0NJSSIsIl9JSERSIiwibnVtX2ZyYW1lcyIsIm51bV9wbGF5cyIsImZyIiwiX2RlY29tcHJlc3MiLCJyY3QiLCJkZWwiLCJkZWxheSIsInJvdW5kIiwibnoiLCJuZXh0WmVybyIsImtleXciLCJyZWFkVVRGOCIsInJlYWRCeXRlcyIsImNvbXByZXNzIiwiaW50ZXJsYWNlIiwiX2luZmxhdGUiLCJfZmlsdGVyWmVybyIsIl9yZWFkSW50ZXJsYWNlIiwiUiIsIkoiLCJYIiwidSIsIkkiLCJLIiwiRCIsIiQiLCJZIiwiYnl0ZU9mZnNldCIsImNicHAiLCJzdGFydGluZ19yb3ciLCJzdGFydGluZ19jb2wiLCJyb3dfaW5jcmVtZW50IiwiY29sX2luY3JlbWVudCIsInBhc3MiLCJyaSIsImNpIiwic3ciLCJzaCIsImNyIiwiY2MiLCJicGxsIiwicm93IiwiY29sIiwiY2RpIiwiaWkiLCJwYWV0aCIsIl9wYWV0aCIsInBhIiwicGIiLCJwYyIsIndyaXRlVXNob3J0Iiwid3JpdGVVaW50Iiwid3JpdGVBU0NJSSIsInBhZCIsIm5zIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2IiLCJ0dyIsInhvZmYiLCJ5b2ZmIiwic2kiLCJmYSIsImZnIiwiZmIiLCJiYSIsImJyIiwiYmciLCJiYiIsImlmYSIsIm9hIiwiaW9hIiwiYnVmcyIsInBzIiwiZGVscyIsImZvcmJpZFBsdGUiLCJuaW1nIiwiY29tcHJlc3NQTkciLCJfbWFpbiIsImVuY29kZUxMIiwiYmlwcCIsImJpcGwiLCJ3VWkiLCJ3VXMiLCJ3QXMiLCJhbmltIiwicGx0QWxwaGEiLCJsZW5nIiwiZGwiLCJwbHRlIiwiY2ltZyIsIndyIiwiZmkiLCJpbWdkIiwiaW9mZiIsImxldmVsWmVybyIsIm5oIiwicHJtcyIsIm9ubHlCbGVuZCIsImV2ZW5DcmQiLCJmb3JiaWRQcmV2IiwibWluQml0cyIsImFscGhhQW5kIiwiaWxlbiIsImdvdEFscGhhIiwiZnJhbWl6ZSIsImluZHMiLCJuYnVmcyIsImFidWYiLCJjb25jYXRSR0JBIiwicXJlcyIsInF1YW50aXplIiwiY29mIiwiYmxuIiwiZXN0IiwicmdiYSIsImltZzMyIiwibnciLCJpbmQiLCJjbWMiLCJpbmoiLCJhbHdheXNCbGVuZCIsImNpbWczMiIsIm54IiwibnkiLCJ0bGltIiwidHN0cCIsInRhcmVhIiwiaXQiLCJwaW1nIiwicDMyIiwibWl4IiwibWl5IiwibWF5Iiwic2FyZWEiLCJfcHJlcGFyZURpZmYiLCJyMCIsInIxIiwibWlYIiwibWlZIiwiX3VwZGF0ZUZyYW1lIiwiVTgiLCJVMzIiLCJwaW1nMzIiLCJyZWMiLCJmbHMiLCJmdHJ5IiwiQ01QUiIsIlVaSVAiLCJfZmlsdGVyTGluZSIsInRzaXplIiwidGFiIiwidXBkYXRlIiwibyIsIm9pbWciLCJuaW1nMzIiLCJLRCIsImdldEtEdHJlZSIsImxlYWZzIiwicGxhbmVEc3QiLCJuZCIsImdldE5lYXJlc3QiLCJpMCIsImkxIiwiYnN0IiwidGRzdCIsInN0YXRzIiwiZXN0YXRzIiwibWF4TCIsIm1pIiwic3BsaXRQaXhlbHMiLCJlTXEyNTUiLCJsbiIsInJuIiwibm9kZTAiLCJub2RlMSIsImVNcSIsImQwIiwiZDEiLCJkMiIsImQzIiwidmVjRG90IiwibTAiLCJtMSIsIm0yIiwibTMiLCJpTiIsIlJqIiwiTTQiLCJ0bWkiLCJtdWx0VmVjIiwic21sIiwiQ292IiwidGxlbiIsIm5vZmYiLCJpbCIsIlBuZ1R5cGUiLCJQTkciLCJwbmdEYXRhIiwidXBuZyIsInJnYmFDaGFubmVsIiwicGl4ZWxDb3VudCIsInJnYkNoYW5uZWwiLCJhbHBoYUNoYW5uZWwiLCJyZ2JhT2Zmc2V0IiwicmdiT2Zmc2V0IiwiYWxwaGFPZmZzZXQiLCJzcGxpdEFscGhhQ2hhbm5lbCIsInNvbWUiLCJHcmV5c2NhbGUiLCJUcnVlY29sb3VyIiwiSW5kZXhlZENvbG91ciIsIkdyZXlzY2FsZVdpdGhBbHBoYSIsIlRydWVjb2xvdXJXaXRoQWxwaGEiLCJnZXRJbWFnZVR5cGUiLCJQbmdFbWJlZGRlciIsIlNNYXNrIiwiZW1iZWRBbHBoYUNoYW5uZWwiLCJTdHJlYW0iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXRCeXRlIiwiYjAiLCJiMSIsImdldEludDMyIiwiZ2V0Qnl0ZXMiLCJmb3JjZUNsYW1wZWQiLCJzdHJFbmQiLCJVaW50OENsYW1wZWRBcnJheSIsInBlZWtCeXRlIiwicGVla2VkQnl0ZSIsInBlZWtCeXRlcyIsInNraXAiLCJyZXNldCIsIm1vdmVTdGFydCIsIm1ha2VTdWJTdHJlYW0iLCJlbXB0eUJ1ZmZlciIsIkRlY29kZVN0cmVhbSIsIm1heWJlTWluQnVmZmVyTGVuZ3RoIiwiZW9mIiwibWluQnVmZmVyTGVuZ3RoIiwicmVhZEJsb2NrIiwiZW5zdXJlQnVmZmVyIiwiYnVmRW5kIiwicmVxdWVzdGVkIiwiYnVmZmVyMiIsImlzU3BhY2UiLCJjaCIsIkFzY2lpODVTdHJlYW0iLCJtYXliZUxlbmd0aCIsIkFzY2lpSGV4U3RyZWFtIiwiZmlyc3REaWdpdCIsIm1heERlY29kZUxlbmd0aCIsImRpZ2l0IiwiY29kZUxlbkNvZGVNYXAiLCJsZW5ndGhEZWNvZGUiLCJkaXN0RGVjb2RlIiwiZml4ZWRMaXRDb2RlVGFiIiwiZml4ZWREaXN0Q29kZVRhYiIsIkZsYXRlU3RyZWFtIiwiY21mIiwiZmxnIiwiY29kZVNpemUiLCJjb2RlQnVmIiwiaGRyIiwiZ2V0Qml0cyIsImxpdENvZGVUYWJsZSIsImRpc3RDb2RlVGFibGUiLCJudW1MaXRDb2RlcyIsIm51bURpc3RDb2RlcyIsIm51bUNvZGVMZW5Db2RlcyIsImNvZGVMZW5Db2RlTGVuZ3RocyIsImNvZGVMZW5Db2RlVGFiIiwiZ2VuZXJhdGVIdWZmbWFuVGFibGUiLCJjb2RlTGVuZ3RocyIsImJpdHNMZW5ndGgiLCJiaXRzT2Zmc2V0Iiwid2hhdCIsImdldENvZGUiLCJyZXBlYXRMZW5ndGgiLCJjb2RlMSIsImNvZGUyIiwiYmxvY2tMZW4iLCJtYXhMZW4iLCJsb2ciLCJjb2RlTGVuIiwiY29kZVZhbCIsImxlbmd0aHMiLCJMWldTdHJlYW0iLCJlYXJseUNoYW5nZSIsImNhY2hlZERhdGEiLCJiaXRzQ2FjaGVkIiwibWF4THp3RGljdGlvbmFyeVNpemUiLCJsendTdGF0ZSIsImNvZGVMZW5ndGgiLCJuZXh0Q29kZSIsImRpY3Rpb25hcnlWYWx1ZXMiLCJkaWN0aW9uYXJ5TGVuZ3RocyIsImRpY3Rpb25hcnlQcmV2Q29kZXMiLCJjdXJyZW50U2VxdWVuY2UiLCJjdXJyZW50U2VxdWVuY2VMZW5ndGgiLCJlc3RpbWF0ZWREZWNvZGVkU2l6ZSIsImJsb2NrU2l6ZSIsInByZXZDb2RlIiwiZGVjb2RlZExlbmd0aCIsImN1cnJlbnRCdWZmZXJMZW5ndGgiLCJyZWFkQml0cyIsImhhc1ByZXYiLCJSdW5MZW5ndGhTdHJlYW0iLCJyZXBlYXRIZWFkZXIiLCJkZWNvZGVTdHJlYW0iLCJFYXJseUNoYW5nZSIsImRlY29kZVBERlJhd1N0cmVhbSIsIkRlY29kZVBhcm1zIiwiUERGUGFnZUVtYmVkZGVyIiwiYm90dG9tIiwiZnVsbFBhZ2VCb3VuZGluZ0JveCIsImJvdW5kaW5nQm94QWRqdXN0ZWRNYXRyaXgiLCJkZWNvZGVkQ29udGVudHMiLCJkZWNvZGVDb250ZW50cyIsIkZvcm1UeXBlIiwibmV3bGluZSIsImNvbnRlbnQiLCJOb25GdWxsU2NyZWVuUGFnZU1vZGUiLCJSZWFkaW5nRGlyZWN0aW9uIiwiUHJpbnRTY2FsaW5nIiwiRHVwbGV4IiwiYXNFbnVtIiwicmF3VmFsdWUiLCJlbnVtVHlwZSIsIlZpZXdlclByZWZlcmVuY2VzIiwibG9va3VwQm9vbCIsInJldHVybk9iaiIsImxvb2t1cE5hbWUiLCJIaWRlVG9vbGJhciIsIkhpZGVNZW51YmFyIiwiSGlkZVdpbmRvd1VJIiwiRml0V2luZG93IiwiQ2VudGVyV2luZG93IiwiRGlzcGxheURvY1RpdGxlIiwiRGlyZWN0aW9uIiwiUGlja1RyYXlCeVBERlNpemUiLCJQcmludFBhZ2VSYW5nZSIsIk51bUNvcGllcyIsImdldEhpZGVUb29sYmFyIiwiZ2V0SGlkZU1lbnViYXIiLCJnZXRIaWRlV2luZG93VUkiLCJnZXRGaXRXaW5kb3ciLCJnZXRDZW50ZXJXaW5kb3ciLCJnZXREaXNwbGF5RG9jVGl0bGUiLCJnZXROb25GdWxsU2NyZWVuUGFnZU1vZGUiLCJVc2VOb25lIiwiZ2V0UmVhZGluZ0RpcmVjdGlvbiIsImRpcmVjdGlvbiIsIkwyUiIsImdldFByaW50U2NhbGluZyIsInNjYWxpbmciLCJBcHBEZWZhdWx0IiwiZ2V0RHVwbGV4IiwiZHVwbGV4IiwiZ2V0UGlja1RyYXlCeVBERlNpemUiLCJnZXRQcmludFBhZ2VSYW5nZSIsInBhZ2VSYW5nZXMiLCJnZXROdW1Db3BpZXMiLCJzZXRIaWRlVG9vbGJhciIsImhpZGVUb29sYmFyIiwic2V0SGlkZU1lbnViYXIiLCJoaWRlTWVudWJhciIsInNldEhpZGVXaW5kb3dVSSIsImhpZGVXaW5kb3dVSSIsInNldEZpdFdpbmRvdyIsImZpdFdpbmRvdyIsInNldENlbnRlcldpbmRvdyIsImNlbnRlcldpbmRvdyIsImRpc3BsYXlUaXRsZSIsInNldE5vbkZ1bGxTY3JlZW5QYWdlTW9kZSIsIm5vbkZ1bGxTY3JlZW5QYWdlTW9kZSIsInNldFJlYWRpbmdEaXJlY3Rpb24iLCJyZWFkaW5nRGlyZWN0aW9uIiwic2V0UHJpbnRTY2FsaW5nIiwicHJpbnRTY2FsaW5nIiwic2V0RHVwbGV4IiwiZHVwIiwic2V0UGlja1RyYXlCeVBERlNpemUiLCJwaWNrVHJheUJ5UERGU2l6ZSIsInNldFByaW50UGFnZVJhbmdlIiwicHJpbnRQYWdlUmFuZ2UiLCJmbGF0UmFuZ2UiLCJzZXROdW1Db3BpZXMiLCJudW1Db3BpZXMiLCJNQVhfVkFMVUUiLCJmcm9tRGljdCIsIlBERkFjcm9GaWVsZCIsIkZmIiwidmFsdWVPclJlZiIsIkRBIiwic2V0S2lkcyIsImtpZHMiLCJnZXRQYXJlbnQiLCJkYVN0YXJ0IiwiZGFFbmQiLCJtb2RpZmllZERhIiwiZ2V0RmxhZ3MiLCJzZXRGbGFncyIsImZsYWciLCJzZXRGbGFnIiwiY2xlYXJGbGFnIiwiZW5hYmxlIiwiQm9yZGVyU3R5bGUiLCJQREZBbm5vdGF0aW9uIiwiUmVjdCIsIkFQIiwiQVMiLCJzZXRBcHBlYXJhbmNlcyIsImVuc3VyZUFQIiwiQXBwZWFyYW5jZUNoYXJhY3RlcmlzdGljcyIsIkJDIiwiQkciLCJSQyIsIkFDIiwiY29tcG9uZW50cyIsImNvbXBvbmVudCIsIlBERldpZGdldEFubm90YXRpb24iLCJNSyIsIkJTIiwiUERGQWNyb1Rlcm1pbmFsIiwiRlQiLCJuYW1lT3JSZWYiLCJraWREaWN0cyIsInJlbW92ZVdpZGdldCIsIlBERkFjcm9CdXR0b24iLCJPcHQiLCJzZXRPcHQiLCJyZW1vdmVFeHBvcnRWYWx1ZSIsIm5vcm1hbGl6ZUV4cG9ydFZhbHVlcyIsImV4cG9ydFZhbCIsImFkZE9wdCIsInVzZUV4aXN0aW5nT3B0SWR4IiwiZXhpc3RpbmdJZHgiLCJvcHRUZXh0Iiwib3B0SWR4IiwiUERGQWNyb0NoZWNrQm94IiwiQWNyb0ZpZWxkRmxhZ3MiLCJBY3JvQnV0dG9uRmxhZ3MiLCJBY3JvVGV4dEZsYWdzIiwiQWNyb0Nob2ljZUZsYWdzIiwiYml0SW5kZXgiLCJQREZBY3JvQ2hvaWNlIiwiQ29tYm8iLCJFZGl0IiwidmFsdWVzQXJlVmFsaWQiLCJNdWx0aVNlbGVjdCIsInVwZGF0ZVNlbGVjdGVkSW5kaWNlcyIsIl9sb29wXzEiLCJzdGF0ZV8xIiwiX2xvb3BfMiIsImZpbmRJbmRleCIsIm5ld09wdCIsIml0ZW0iLCJQREZBY3JvQ29tYm9Cb3giLCJQREZBY3JvTm9uVGVybWluYWwiLCJQREZBY3JvU2lnbmF0dXJlIiwiUERGQWNyb1RleHQiLCJNYXhMZW4iLCJQREZBY3JvUHVzaEJ1dHRvbiIsIlB1c2hCdXR0b24iLCJQREZBY3JvUmFkaW9CdXR0b24iLCJSYWRpbyIsIlBERkFjcm9MaXN0Qm94IiwiY3JlYXRlUERGQWNyb0ZpZWxkcyIsImNyZWF0ZVBERkFjcm9GaWVsZCIsImlzTm9uVGVybWluYWxBY3JvRmllbGQiLCJjcmVhdGVQREZBY3JvVGVybWluYWwiLCJraWQiLCJmdE5hbWVPclJlZiIsImNyZWF0ZVBERkFjcm9CdXR0b24iLCJjcmVhdGVQREZBY3JvQ2hvaWNlIiwiZmZOdW1iZXJPclJlZiIsImZmTnVtYmVyIiwiZmxhZ0lzU2V0Iiwic3RhcnROb2RlIiwiUERGQWNyb0Zvcm0iLCJwdXNoRmllbGRzIiwiZmllbGRNb2RlbCIsIlBERkNhdGFsb2ciLCJBY3JvRm9ybSIsImdldEFjcm9Gb3JtIiwiYWNyb0Zvcm1SZWYiLCJnZXRWaWV3ZXJQcmVmZXJlbmNlcyIsInZpZXdlclByZWZzIiwidmlld2VyUHJlZnNSZWYiLCJsZWFmUmVmIiwicGFnZXNSZWYiLCJ3aXRoQ29udGV4dEFuZFBhZ2VzIiwiUERGUGFnZVRyZWUiLCJwdXNoVHJlZU5vZGUiLCJ0cmVlUmVmIiwicHVzaExlYWZOb2RlIiwiaW5zZXJ0TGVhZktpZCIsImxlYWZzUmVtYWluaW5nVW50aWxUYXJnZXQiLCJraWRSZWYiLCJwcnVuZSIsInJlbW92ZUtpZCIsImtpZElkeCIsIm5ld0NvdW50IiwiSXNEaWdpdCIsIklzTnVtZXJpY1ByZWZpeCIsIklzTnVtZXJpYyIsIk5ld2xpbmUiLCJDYXJyaWFnZVJldHVybiIsIkJhc2VQYXJzZXIiLCJwYXJzZVJhd0ludCIsInBlZWsiLCJwb3NpdGlvbiIsInBhcnNlUmF3TnVtYmVyIiwic2tpcFdoaXRlc3BhY2UiLCJza2lwTGluZSIsInNraXBDb21tZW50Iiwic2tpcFdoaXRlc3BhY2VBbmRDb21tZW50cyIsIm1hdGNoS2V5d29yZCIsIkJ5dGVTdHJlYW0iLCJhc3NlcnROZXh0IiwicGVla0FoZWFkIiwic3RlcHMiLCJwZWVrQXQiLCJmcm9tUERGUmF3U3RyZWFtIiwicmF3U3RyZWFtIiwiU3BhY2UiLCJlbmRzdHJlYW0iLCJlbmRvYmoiLCJzdGFydHhyZWYiLCJ0cnVlIiwiZmFsc2UiLCJudWxsIiwic3RyZWFtRU9GMSIsInN0cmVhbUVPRjIiLCJzdHJlYW1FT0YzIiwic3RyZWFtRU9GNCIsIkVPRjFlbmRzdHJlYW0iLCJFT0YyZW5kc3RyZWFtIiwiRU9GM2VuZHN0cmVhbSIsIlBERk9iamVjdFBhcnNlciIsImJ5dGVTdHJlYW0iLCJwYXJzZU9iamVjdCIsInBhcnNlRGljdE9yU3RyZWFtIiwicGFyc2VIZXhTdHJpbmciLCJwYXJzZVN0cmluZyIsInBhcnNlTmFtZSIsInBhcnNlQXJyYXkiLCJwYXJzZU51bWJlck9yUmVmIiwiZmlyc3ROdW0iLCJsb29rYWhlYWRTdGFydCIsInNlY29uZE51bSIsIm5lc3RpbmdMdmwiLCJpc0VzY2FwZWQiLCJwZGZBcnJheSIsImVsZW1lbnQiLCJwYXJzZURpY3QiLCJzdGFydFBvcyIsImZpbmRFbmRPZlN0cmVhbUZhbGxiYWNrIiwiZm9yQnl0ZXMiLCJmb3JCeXRlU3RyZWFtIiwiUERGT2JqZWN0U3RyZWFtUGFyc2VyIiwiYWxyZWFkeVBhcnNlZCIsImZpcnN0T2Zmc2V0Iiwib2JqZWN0Q291bnQiLCJwYXJzZUludG9Db250ZXh0Iiwib2Zmc2V0c0FuZE9iamVjdE51bWJlcnMiLCJwYXJzZU9mZnNldHNBbmRPYmplY3ROdW1iZXJzIiwiZm9yU3RyZWFtIiwiUERGWFJlZlN0cmVhbVBhcnNlciIsIkluZGV4IiwibGVuZ3RoXzEiLCJwYXJzZUVudHJpZXMiLCJ0eXBlRmllbGRXaWR0aCIsIm9mZnNldEZpZWxkV2lkdGgiLCJnZW5GaWVsZFdpZHRoIiwic3Vic2VjdGlvbklkeCIsInN1YnNlY3Rpb25MZW4iLCJsZW5ndGhfMiIsIm9iaklkeCIsImluT2JqZWN0U3RyZWFtIiwiUERGUGFyc2VyIiwicGRmQnl0ZXMiLCJwcmV2T2Zmc2V0IiwicGFyc2VIZWFkZXIiLCJwYXJzZURvY3VtZW50U2VjdGlvbiIsIm1heWJlUmVjb3ZlclJvb3QiLCJpc1ZhbGlkQ2F0YWxvZyIsInNraXBCaW5hcnlIZWFkZXJDb21tZW50IiwicGFyc2VJbmRpcmVjdE9iamVjdEhlYWRlciIsIm1hdGNoSW5kaXJlY3RPYmplY3RIZWFkZXIiLCJwYXJzZUluZGlyZWN0T2JqZWN0IiwidHJ5VG9QYXJzZUludmFsaWRJbmRpcmVjdE9iamVjdCIsImZhaWxlZCIsInBhcnNlSW5kaXJlY3RPYmplY3RzIiwidHJ5cyIsInNraXBKaWJiZXJpc2giLCJtYXliZVBhcnNlQ3Jvc3NSZWZTZWN0aW9uIiwiZmlyc3RJbnQiLCJzZWNvbmRJbnQiLCJtYXliZVBhcnNlVHJhaWxlckRpY3QiLCJtYXliZVBhcnNlVHJhaWxlciIsImZvckJ5dGVzV2l0aE9wdGlvbnMiLCJBbm5vdGF0aW9uRmxhZ3MiLCJoZXhMZW5ndGgiLCJoZXhPZmZzZXQiLCJieXRlc09mZnNldCIsImRhdGUiLCJmcm9tVGV4dCIsIl9idWZmZXIiLCJfb2Zmc2V0Iiwib2N0YWwiLCJmcm9tRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImVuY29kZVRvQmFzZTY0IiwiREFUQV9VUklfUFJFRklYX1JFR0VYIiwiZGVjb2RlRnJvbUJhc2U2NERhdGFVcmkiLCJ0cmltbWVkVXJpIiwiZnVsbE1hdGNoIiwidHlwZWRBcnJheUZvciIsInR5cGVkQXJyYXkiLCJtZXJnZUludG9UeXBlZEFycmF5IiwiYXJyYXlzIiwiYXJyYXlDb3VudCIsInR5cGVkQXJyYXlzIiwidG90YWxTaXplIiwibWVyZ2VkIiwiYXJySWR4IiwiYnl0ZUlkeCIsImFyckxlbiIsIm1lcmdlVWludDhBcnJheXMiLCJtZXJnZWRCdWZmZXIiLCJhcnJheUFzU3RyaW5nIiwiYnlBc2NlbmRpbmdJZCIsInNvcnRlZFVuaXEiLCJpbmRleGVyIiwidW5pcSIsInJldmVyc2VBcnJheSIsImFycmF5TGVuIiwibGVmdElkeCIsInJpZ2h0SWR4IiwidGVtcCIsInN1bSIsInBsdWNrSW5kaWNlcyIsInBsdWNrZWQiLCJjYW5CZUNvbnZlcnRlZFRvVWludDhBcnJheSIsInRvVWludDhBcnJheSIsIndhaXRGb3JUaWNrIiwic2V0VGltZW91dCIsIm51bWJlclRvU3RyaW5nIiwibnVtU3RyIiwibmVnYXRpdmUiLCJieXRlc0ZvciIsImVycm9yIiwiU3RhbmRhcmRGb250VmFsdWVzIiwiaXNTdGFuZGFyZEZvbnQiLCJyZWN0YW5nbGVzQXJlRXF1YWwiLCJiYWNrdGljayIsInNpbmdsZVF1b3RlIiwiZm9ybWF0VmFsdWUiLCJjcmVhdGVWYWx1ZUVycm9yTXNnIiwidmFsdWVOYW1lIiwiYWxsb3dlZFZhbHVlcyIsImpvaW5lZFZhbHVlcyIsImFzc2VydElzT25lT2YiLCJhc3NlcnRJc09uZU9mT3JVbmRlZmluZWQiLCJhc3NlcnRJc1N1YnNldCIsImdldFR5cGUiLCJpc05hTiIsImlzVHlwZSIsImNyZWF0ZVR5cGVFcnJvck1zZyIsImFsbG93ZWRUeXBlcyIsImpvaW5lZFR5cGVzIiwiYXNzZXJ0SXMiLCJhc3NlcnRPclVuZGVmaW5lZCIsImFzc2VydEVhY2hJcyIsImFzc2VydFJhbmdlIiwiYXNzZXJ0UmFuZ2VPclVuZGVmaW5lZCIsImFzc2VydE11bHRpcGxlIiwibXVsdGlwbGllciIsImFzc2VydEludGVnZXIiLCJpc0ludGVnZXIiLCJhc3NlcnRQb3NpdGl2ZSIsInNpZ24iLCJwZGZEb2NFbmNvZGluZ1RvVW5pY29kZSIsInBkZkRvY0VuY29kaW5nRGVjb2RlIiwiZnJvbUNvZGVQb2ludCIsIkNhY2hlIiwicG9wdWxhdGUiLCJwb3B1bGF0ZWRCeSIsInRvQ2hhckNvZGUiLCJ0b0NvZGVQb2ludCIsImNvZGVQb2ludEF0IiwidG9IZXhTdHJpbmdPZk1pbkxlbmd0aCIsIm1pbkxlbmd0aCIsInRvVXBwZXJDYXNlIiwidG9IZXhTdHJpbmciLCJjaGFyRnJvbUNvZGUiLCJjaGFyRnJvbUhleENvZGUiLCJjb3B5U3RyaW5nSW50b0J1ZmZlciIsInJhbmRvbSIsImVzY2FwZVJlZ0V4cCIsImNsZWFuVGV4dCIsImVzY2FwZWROZXdsaW5lQ2hhcnMiLCJuZXdsaW5lQ2hhcnMiLCJpc05ld2xpbmVDaGFyIiwibGluZVNwbGl0IiwibWVyZ2VMaW5lcyIsImNoYXJBdEluZGV4IiwiY3VTZWNvbmQiLCJjdUZpcnN0IiwibmV4dEluZGV4IiwiY2hhclNwbGl0IiwiY0xlbiIsImJyZWFrVGV4dEludG9MaW5lcyIsImNvbXB1dGVXaWR0aE9mVGV4dCIsInJlZ2V4IiwibmV3bGluZUNoYXJVbmlvbiIsImVzY2FwZWRSdWxlcyIsIndvcmRCcmVhayIsImJyZWFrUnVsZXMiLCJSZWdFeHAiLCJidWlsZFdvcmRCcmVha1JlZ2V4IiwiY3VyckxpbmUiLCJjdXJyV2lkdGgiLCJwdXNoQ3VyckxpbmUiLCJkYXRlUmVnZXgiLCJwYXJzZURhdGUiLCJkYXRlU3RyIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91cnMiLCJtaW5zIiwic2VjcyIsIm9mZnNldFNpZ24iLCJvZmZzZXRIb3VycyIsImZpbmRMYXN0TWF0Y2giLCJsYXN0TWF0Y2giLCJCeXRlT3JkZXIiLCJ1dGY4RW5jb2RlIiwiYnl0ZU9yZGVyTWFyayIsImJ5dGUxIiwiYnl0ZTIiLCJieXRlMyIsImJ5dGU0IiwidXRmMTZFbmNvZGUiLCJoaWdoU3Vycm9nYXRlIiwibG93U3Vycm9nYXRlIiwiaXNXaXRoaW5CTVAiLCJoYXNTdXJyb2dhdGVzIiwiUkVQTEFDRU1FTlQiLCJ1dGYxNkRlY29kZSIsImJ5dGVPcmRlciIsInJlYWRCT00iLCJCaWdFbmRpYW4iLCJkZWNvZGVWYWx1ZXMiLCJpc0hpZ2hTdXJyb2dhdGUiLCJpc0xvd1N1cnJvZ2F0ZSIsIkxpdHRsZUVuZGlhbiIsImhhc1V0ZjE2QmlnRW5kaWFuQk9NIiwiaGFzVXRmMTZMaXR0bGVFbmRpYW5CT00iLCJoYXNVdGYxNkJPTSIsIkNlbGwiLCJwb3NzaWJsZXNWYWx1ZXMiLCJwb3NzaWJsZVZhbHVlcyIsImdldFJvdyIsImdldENvbHVtbiIsImdldEJveCIsImdldFBvc3NpYmxlVmFsdWVzIiwic2V0UG9zc2libGVWYWx1ZXMiLCJjb3BpZWRDZWxsIiwicmVtb3ZlUG9zc2libGVWYWx1ZSIsImlzRW1wdHkiLCJlcXVhbHMiLCJvdGhlckNlbGwiLCJhcnIxIiwiYXJyMiIsImFycmF5c0VxdWFsIiwiR3JpZCIsImdyaWREYXRhIiwib3RoZXJDZWxscyIsImNlbGwiLCJjb3BpZWRHcmlkRGF0YSIsInRvTnVtYmVyQXJyYXkiLCJvdGhlckdyaWQiLCJ0aGlzQ2VsbHMiLCJnZXRDZWxscyIsImdldENlbGwiLCJyb3dJbmRleCIsImNvbHVtbkluZGV4IiwibnVtQXJyYXkiLCJyb3dEYXRhIiwiaXNGdWxsIiwiZXZlcnkiLCJzdHJpbmciLCJnZXRDdXJyZW50R3JpZCIsImdyaWQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJIVE1MRWxlbWVudCIsInRlbXBOdW0iLCJpbm5lclRleHQiLCJjcmVhdGVCb2FyZCIsIndpdGhHcmlkIiwiZ2V0RWxlbWVudEJ5SWQiLCJlbGVtIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsInNldEF0dHJpYnV0ZSIsImNvbEluZGV4IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZE51bWJlciIsImV2ZW50IiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsInByb210IiwicHJvbXB0IiwibnVtYmVyQmVmb3JlQ2hhbmdlIiwiaW5uZXJIVE1MIiwidW5kb1N0YWNrIiwibnVtT2ZFYXN5R3JpZHMiLCJlYXN5R3JpZDEiLCJlYXN5R3JpZDIiLCJudW1PZkhhcmRyaWRzIiwiaGFyZEdyaWQxIiwiaGFyZEdyaWQyIiwibnVtT2ZNZWRpdW1HcmlkcyIsIm1lZGl1bUdyaWQxIiwibWVkaXVtR3JpZDIiLCJnZXRSYW5kb21FYXN5R3JpZCIsInJhbmROdW0iLCJFYXN5R3JpZHMiLCJnZXRSYW5kb21NZWRpdW1HcmlkIiwiTWVkaXVtR3JpZHMiLCJnZXRSYW5kb21IYXJkR3JpZCIsIkhhcmRHcmlkcyIsImNoZWNrR3JpZCIsImFsZXJ0IiwiZ3JpZElzRnVsbCIsImNoZWNrUm93c0FuZENvbHVtbnMiLCJjaGVja0JveGVzIiwiY3VycmVudEdyaWQiLCJjb3VudGVyUm93cyIsImNvdW50ZXJDb2x1bW5zIiwibnVtUm93IiwibnVtQ29sIiwiYm94Q2hlY2tIZWxwZXIiLCJmcm9tUm93IiwidG9Sb3ciLCJmcm9tQ29sdW1uIiwidG9Db2x1bW4iLCJjb3VudGVyIiwiZGVsZXRlQm9hcmQiLCJsYXN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImNsZWFyQm9hcmQiLCJjcmVhdGVWb2lkR3JpZCIsImdlbmVyYXRlU3Vkb2t1UERGIiwicGRmRG9jIiwiZ3JpZFkiLCJncmlkWCIsInRleHRYIiwiY2VsbFNpemUiLCJ0ZXh0WSIsInZhbHVlQXNTdHJpbmciLCJibG9iIiwiQmxvYiIsImxpbmsiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInJldm9rZU9iamVjdFVSTCIsInNvbHZlR3JpZCIsInJlc3VsdGluZ0dyaWRUb051bUFyciIsInNvbHZlU3Vkb2t1IiwiQ29sbGVjdGlvbiIsInN0b3JhZ2UiLCJjYXBhY2l0eSIsInN1cGVyIiwicG9wIiwidW5kb1N0ZXAiLCJhcHBseUhpZGRlblNpbmdsZSIsImhpZGRlblNpbmdsZUZvdW5kIiwicG9zc2libGVWYWx1ZXNPZkN1cnJlbnRSb3ciLCJyb3dDZWxsIiwicG9zc2libGVWYWx1ZXNPZkN1cnJlbnRDb2x1bW4iLCJjb2xDZWxsIiwic3RhcnRSb3ciLCJzdGFydENvbCIsInBvc3NpYmxlVmFsdWVzT2ZDdXJyZW50Qm94IiwiYm94Q2VsbCIsImFwcGx5TmFrZWRTaW5nbGUiLCJhcHBseUhpZGRlblBhaXIiLCJjb2xEZWxldGUiLCJjYW5kaWRhdGVDZWxsIiwicm93RGVsZXRlIiwic3RhcnRSb3dEZWwiLCJzdGFydENvbERlbCIsImFwcGx5U3Vkb2t1UnVsZXMiLCJib3hSb3ciLCJib3hDb2x1bW4iLCJoYXNNYWRlQ2hhbmdlcyIsIml0ZXJhdGlvbiIsIm9sZEdyaWQiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX2V4dGVuZHMiLCJfX2Fzc2lnbiIsIl9fcmVzdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJ0aGVuIiwiX19nZW5lcmF0b3IiLCJib2R5Iiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwiX19zcHJlYWRBcnJheXMiLCJqbCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsImNsZWFyQnV0dG9uIiwiY2hlY2tlckJ1dHRvbiIsImN0cmxLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInVuZG9CdXR0b24iLCJzb2x2ZUJ1dHRvbiIsImRvd25sb2FkQnV0dG9uIiwiUmFuZG9tR3JpZCJdLCJzb3VyY2VSb290IjoiIn0=