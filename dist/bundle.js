(()=>{"use strict";var e={346:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0;class l{constructor(e=null,t=null,l=null,o=0){this.row=e,this.column=t,this.box=null===e||null===t?null:3*Math.floor(this.row/3)+Math.floor(this.column/3),this.value=o,this.possibleValues=l}getRow(){return this.row}getColumn(){return this.column}getBox(){return this.box}getPossibleValues(){return this.possibleValues}getValue(){return this.value}setValue(e){this.value=e}setPossibleValues(e){this.possibleValues=e}clone(){return new l(this.row,this.column,[...this.possibleValues],this.value)}removePossibleValue(e){const t=this.possibleValues.indexOf(e);t>-1&&this.possibleValues.splice(t,1)}isEmpty(){return 0===this.value||null===this.value}}t.Cell=l},393:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0;const o=l(346);t.Grid=class{constructor(e){this.cells=[];for(let t=0;t<9;t++)for(let l=0;l<9;l++){const r=e[t][l],n=new o.Cell(t,l,0!==r?[]:[1,2,3,4,5,6,7,8,9],0!==r?r:0);this.cells.push(n)}}getCells(){return this.cells}getCell(e,t){for(let l=0;l<9;l++)for(let o=0;o<9;o++)if(l===e&&o===t)return this.cells[9*l+o]}toNumberArray(){const e=[];for(let t=0;t<9;t++){const l=[];for(let e=0;e<9;e++){const o=this.getCell(t,e);l.push(o.getValue())}e.push(l)}return e}}},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);const t=document.querySelectorAll(".cell");if(null==t)return null;for(let l=0;l<=8;l++)for(let o=0;o<=8;o++){const r=t[9*l+o];if(!(r instanceof HTMLElement))return null;if(!r)return null;const n=r.innerText;e[l][o]=Number(n)}return e}},945:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;const o=l(410);t.createBoard=e=>{const t=document.getElementById("grid");null!=t&&e.forEach(((e,l)=>{const o=document.createElement("div");null!==o&&(o.classList.add("row"),o.setAttribute("row",`${l}`),2!==l&&5!==l||o.classList.add("underline"),t.append(o),e.forEach(((e,t)=>{const n=document.createElement("div");null!==n&&(n.setAttribute("row",`${l}`),n.setAttribute("column",`${t}`),n.classList.add("cell"),2!=t&&5!=t||n.classList.add("rightline"),null===e||0===e?(n.setAttribute("type","button"),n.addEventListener("click",r)):n.innerText=e.toString(),o.append(n))})))}))};const r=e=>{const t=e.target;if(!(t instanceof HTMLElement))return;const l=t.getAttribute("row"),r=t.getAttribute("column"),n=document.querySelector(`[row="${l}"][column="${r}"]`);if(!(n instanceof HTMLElement))return;let s;do{const e=prompt("Enter a number between 1 and 9:");if(null===e)return;s=Number.parseInt(e)}while(isNaN(Number(s)));if(!isNaN(Number(s))&&null!==n){let e;e=""===n.innerHTML?0:Number.parseInt(n.innerHTML),n.innerText=s.toString(),o.undoStack.push([Number.parseInt(l),Number.parseInt(r),e])}}},614:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testGridFilledWrong=t.testGridFilledRight=t.testGrid=void 0,t.testGrid=[[0,5,0,0,3,0,0,0,0],[0,6,9,0,0,0,5,0,1],[0,0,7,9,0,0,0,4,8],[7,9,0,1,0,5,6,8,2],[4,2,0,3,8,9,7,0,5],[1,8,0,0,6,0,0,0,0],[0,0,8,0,0,0,4,0,0],[0,7,0,5,0,4,0,0,0],[0,0,0,0,7,3,0,5,6]],t.testGridFilledRight=[["8","5","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]],t.testGridFilledWrong=[["5","8","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]]},38:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;const o=l(12);t.checkGrid=()=>{let e;return null==(0,o.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):!0!==r()?(e="the grid is not fully filled :S",alert(e),e):!0!==n()&&!0!==s()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};const r=()=>{const e=(0,o.getCurrentGrid)();for(let t=0;t<9;t++)for(let l=0;l<9;l++)if(null==e[t][l])return!1;return!0},n=()=>{const e=(0,o.getCurrentGrid)();let t=new Array(9).fill(0),l=new Array(9).fill(0);for(let o=0;o<9;o++){t.fill(0),l.fill(0);for(let r=0;r<9;r++){const n=e[o][r],s=e[r][o];if(t[n-1]++,l[s-1]++,1!=t[n-1])return!1;if(1!=l[s-1])return!1}}return!0};t.checkRowsAndColumns=n;const s=()=>1==i(0,2,0,2)&&1==i(0,2,3,5)&&1==i(0,2,6,8)&&1==i(3,5,0,2)&&1==i(3,5,6,8)&&1==i(3,5,0,2)&&1==i(5,8,0,2)&&1==i(5,8,3,5)&&1==i(5,8,5,8),i=(e,t,l,r)=>{const n=(0,o.getCurrentGrid)();let s=new Array(9).fill(0);for(let o=e;o<=t;o++)for(let e=l;e<=r;e++){const t=n[o][e];if(s[t-1]++,s[t-1]>1)return!1}return!0}},296:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteBoard=t.clearBoard=void 0;const o=l(945),r=()=>{const e=document.getElementById("grid");if(null!==e)for(;e.lastChild;)e.removeChild(e.lastChild)};t.deleteBoard=r,t.clearBoard=()=>{r(),(0,o.createBoard)((()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);return e})())}},10:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveGrid=void 0;const o=l(12),r=l(296),n=l(945),s=l(393),i=l(828);t.solveGrid=()=>{console.log("the solve button was pressed.");const e=(0,o.getCurrentGrid)(),t=new s.Grid(e),l=(0,i.solveSudoku)(t).toNumberArray();(0,r.deleteBoard)(),(0,n.createBoard)(l)}},410:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;class l{constructor(){this.storage=[]}size(){return this.storage.length}}const o=new class extends l{constructor(e=1/0){super(),this.capacity=e}push(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)}pop(){return this.storage.pop()}peek(){return this.storage[this.size()-1]}isFull(){return this.capacity===this.size()}};t.undoStack=o,t.undoStep=()=>{if(null===o.peek()||void 0===o.peek()){const e="undoStack is null or undefined";return alert(e),e}if(0===o.size()){const e="the undoStack is not yet built";return alert(e),e}const e=o.pop();if(3!==e.length){const e="something went wrong with fetching an undoStack-element";return alert(e),e}const t=document.querySelector(`[row="${e[0]}"][column="${e[1]}"]`);return console.log(`undid row ${e[0]+1} column ${e[1]+1} from ${t.innerHTML} to ${e[2]}`),0===e[2]?t.innerHTML="":t.innerHTML=e[2].toString(),"good work mate"}},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyHiddenSingle=void 0,t.applyHiddenSingle=e=>{for(let t=0;t<9;t++)for(let l=0;l<9;l++){const o=e.getCell(t,l);if(o.isEmpty()){const r=o.getPossibleValues();for(let n=0;n<9;n++)if(n!==l&&e.getCell(t,n).isEmpty()){const l=e.getCell(t,n).getPossibleValues();r.forEach((e=>{l.includes(e)||o.removePossibleValue(e)}))}for(let n=0;n<9;n++)if(n!==t&&e.getCell(n,l).isEmpty()){const t=e.getCell(n,l).getPossibleValues();r.forEach((e=>{t.includes(e)||o.removePossibleValue(e)}))}const n=3*Math.floor(t/3),s=3*Math.floor(l/3);for(let i=n;i<n+3;i++)for(let n=s;n<s+3;n++)if(i!==t&&n!==l&&e.getCell(i,n).isEmpty()){const t=e.getCell(i,n).getPossibleValues();r.forEach((e=>{t.includes(e)||o.removePossibleValue(e)}))}o.setPossibleValues(r)}}return e}},608:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyPointingPairs=void 0;const o=l(393);t.applyPointingPairs=e=>{const t=new o.Grid(e.toNumberArray());for(let e=0;e<9;e+=3)for(let l=0;l<9;l+=3){const o=new Set,r=[];for(let n=e;n<e+3;n++)for(let e=l;e<l+3;e++){const l=t.getCell(n,e);if(l.isEmpty()){const t=l.getPossibleValues();for(const e of t)o.add(e);r.push({row:n,column:e})}}for(const n of o){let o,s,i=!0,u=!0;for(const{row:e,column:l}of r)t.getCell(e,l).getPossibleValues().includes(n)&&(void 0===o?o=e:o!==e&&(i=!1),void 0===s?s=l:s!==l&&(u=!1));if(i&&void 0!==o){const e=l+3-l%3;for(let r=l-l%3;r<e;r++)if(r<l||r>=l+3){const e=t.getCell(o,r);e.isEmpty()&&e.getPossibleValues().includes(n)&&e.removePossibleValue(n)}}if(u&&void 0!==s){const l=e+3-e%3;for(let o=e-e%3;o<l;o++)if(o<e||o>=e+3){const e=t.getCell(o,s);e.isEmpty()&&e.getPossibleValues().includes(n)&&e.removePossibleValue(n)}}}}return t}},517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applySudokuRules=void 0,t.applySudokuRules=e=>(e.getCells().forEach((t=>{const l=t.getRow(),o=t.getColumn(),r=t.getBox(),n=t.getPossibleValues();for(let o=0;o<9;o++){const r=e.getCell(l,o).getValue();null!==r&&n.includes(r)&&t.removePossibleValue(r)}for(let l=0;l<9;l++){const r=e.getCell(l,o).getValue();null!==r&&n.includes(r)&&t.removePossibleValue(r)}const s=3*Math.floor(r/3),i=r%3*3;for(let l=s;l<s+3;l++)for(let o=i;o<i+3;o++){const r=e.getCell(l,o).getValue();null!==r&&n.includes(r)&&t.removePossibleValue(r)}t.setPossibleValues(n)})),e)},828:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveSudoku=void 0;const o=l(412),r=l(517),n=l(608);t.solveSudoku=e=>{console.log("inside 'solveSudoku' method.");let t=!1,l=!1,s=0;do{l=!1;let i=(0,o.applyHiddenSingle)(e);e!==i&&(e=i,l=!0),i=(0,r.applySudokuRules)(e),e!==i&&(e=i,l=!0),i=(0,n.applyPointingPairs)(e),e!==i&&(e=i,l=!0),t=e.getCells().every((e=>0!==e.getValue())),s++}while(!t&&l&&s<=10);return e}}},t={};function l(o){var r=t[o];if(void 0!==r)return r.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,l),n.exports}(()=>{const e=l(38),t=l(945),o=l(296),r=l(410),n=l(614),s=l(10),i=document.getElementById("clear");null!==i?i.addEventListener("click",o.clearBoard):alert("we've got a problem with the check button :/");const u=document.getElementById("check");null!==u?u.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,r.undoStep)())}));const c=document.getElementById("undo");null!==c?c.addEventListener("click",r.undoStep):alert("we've got a problem with the undo button");const d=document.getElementById("solve");null!==d||void 0!==d?d.addEventListener("click",s.solveGrid):alert("we've got a problem with the undo button"),(0,t.createBoard)(n.testGrid)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,