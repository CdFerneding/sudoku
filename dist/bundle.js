(()=>{"use strict";var e={346:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0;class l{constructor(e=null,t=null,l=null,r=0){this.row=e,this.column=t,this.box=null===e||null===t?null:3*Math.floor(this.row/3)+Math.floor(this.column/3),this.value=r,this.possibleValues=l}getRow(){return this.row}getColumn(){return this.column}getBox(){return this.box}getPossibleValues(){return this.possibleValues}getValue(){return this.value}setValue(e){this.value=e}setPossibleValues(e){this.possibleValues=e}clone(){return new l(this.row,this.column,[...this.possibleValues],this.value)}copy(){const e=new l;return e.row=this.row,e.column=this.column,e.box=this.box,e.value=this.value,e.possibleValues=[...this.possibleValues],e}removePossibleValue(e){const t=this.possibleValues.indexOf(e);t>-1&&this.possibleValues.splice(t,1)}isEmpty(){return 0===this.value||null===this.value}equals(e){return this.row===e.getRow()&&this.column===e.getColumn()&&this.box===e.getBox()&&this.value===e.getValue()&&function(e,t){if(e.length!==t.length)return!1;for(let l=0;l<e.length;l++)if(e[l]!==t[l])return!1;return!0}(this.possibleValues,e.getPossibleValues())}}t.Cell=l},393:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0;const r=l(346);class o{constructor(e,t){if(this.cells=[],t){const e=t;for(const t of e){const e=t.copy();this.cells.push(e)}}else for(let t=0;t<9;t++)for(let l=0;l<9;l++){const o=e[t][l],s=new r.Cell(t,l,0!==o?[]:[1,2,3,4,5,6,7,8,9],0!==o?o:0);this.cells.push(s)}}copy(){const e=this.toNumberArray();return new o(e,this.cells)}equals(e){const t=this.getCells(),l=e.getCells();for(let e=0;e<t.length;e++)if(!t[e].equals(l[e]))return!1;return!0}getCells(){return this.cells}getCell(e,t){for(let l=0;l<9;l++)for(let r=0;r<9;r++)if(l===e&&r===t)return this.cells[9*l+r]}toNumberArray(){const e=[];for(let t=0;t<9;t++){const l=[];for(let e=0;e<9;e++){const r=this.getCell(t,e);l.push(r.getValue())}e.push(l)}return e}isFull(){return this.cells.every((e=>0!==e.getValue()))}}t.Grid=o},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);const t=document.querySelectorAll(".cell");if(null==t)return null;for(let l=0;l<=8;l++)for(let r=0;r<=8;r++){const o=t[9*l+r];if(!(o instanceof HTMLElement))return null;if(!o)return null;const s=o.innerText;e[l][r]=Number(s)}return e}},945:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;const r=l(410);t.createBoard=e=>{const t=document.getElementById("grid");null!=t&&e.forEach(((e,l)=>{const r=document.createElement("div");null!==r&&(r.classList.add("row"),r.setAttribute("row",`${l}`),2!==l&&5!==l||r.classList.add("underline"),t.append(r),e.forEach(((e,t)=>{const s=document.createElement("div");null!==s&&(s.setAttribute("row",`${l}`),s.setAttribute("column",`${t}`),s.classList.add("cell"),2!=t&&5!=t||s.classList.add("rightline"),null===e||0===e?(s.setAttribute("type","button"),s.addEventListener("click",o)):s.innerText=e.toString(),r.append(s))})))}))};const o=e=>{const t=e.target;if(!(t instanceof HTMLElement))return;const l=t.getAttribute("row"),o=t.getAttribute("column"),s=document.querySelector(`[row="${l}"][column="${o}"]`);if(!(s instanceof HTMLElement))return;let n;do{const e=prompt("Enter a number between 1 and 9:");if(null===e)return;n=Number.parseInt(e)}while(isNaN(Number(n)));if(!isNaN(Number(n))&&null!==s){let e;e=""===s.innerHTML?0:Number.parseInt(s.innerHTML),s.innerText=n.toString(),r.undoStack.push([Number.parseInt(l),Number.parseInt(o),e])}}},314:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.easyGrid2=t.easyGrid1=t.numOfEasyGrids=void 0,t.numOfEasyGrids=2,t.easyGrid1=[[8,2,7,3,0,0,0,4,9],[6,4,9,0,5,0,8,3,0],[0,0,0,4,8,9,6,0,0],[0,0,0,6,0,1,2,0,0],[2,1,0,0,0,7,0,0,6],[4,9,0,0,0,0,1,5,7],[1,8,0,0,2,4,7,0,0],[0,0,0,0,7,3,0,0,0],[3,0,4,1,0,0,0,0,0]],t.easyGrid2=[[4,9,0,8,0,0,5,1,0],[0,1,8,0,5,0,0,0,6],[0,0,0,0,6,9,0,0,4],[0,0,5,0,0,0,6,0,0],[0,7,4,5,0,6,2,9,0],[9,0,0,3,0,0,1,4,5],[5,0,0,9,4,0,0,6,0],[0,0,9,2,7,5,0,0,0],[8,2,7,0,3,1,0,0,0]]},380:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hardGrid2=t.hardGrid1=t.numOfHardrids=void 0,t.numOfHardrids=2,t.hardGrid1=[[0,8,9,3,7,0,0,4,0],[3,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,2,0,0],[0,0,0,0,0,8,0,0,4],[0,7,6,0,9,0,0,8,0],[0,5,0,0,0,0,0,0,0],[5,0,0,0,0,0,0,6,0],[4,0,0,0,3,0,0,0,0],[0,6,3,7,0,0,0,0,1]],t.hardGrid2=[[0,0,8,1,0,0,5,0,0],[7,0,0,9,0,0,0,0,0],[0,0,4,0,5,7,0,6,0],[2,0,0,0,4,5,8,0,0],[0,8,0,0,0,0,0,9,0],[0,0,0,0,1,0,0,0,0],[0,0,0,7,0,0,0,0,0],[4,0,0,0,8,2,9,0,0],[0,0,6,0,0,0,0,0,3]]},427:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mediumGrid2=t.mediumGrid1=t.numOfMediumGrids=void 0,t.numOfMediumGrids=2,t.mediumGrid1=[[9,0,0,0,0,4,0,0,0],[0,0,5,0,0,0,0,6,0],[0,7,0,0,1,2,0,0,5],[0,0,0,8,0,0,0,0,0],[3,0,0,0,0,0,9,0,0],[0,2,0,0,7,5,0,0,6],[2,0,0,0,8,1,0,3,0],[0,0,0,4,0,0,0,0,1],[0,8,0,6,0,0,0,0,0]],t.mediumGrid2=[[5,0,0,2,0,0,0,4,0],[6,0,0,0,3,0,0,0,2],[0,0,0,0,0,0,3,0,1],[0,8,0,0,4,0,9,1,0],[0,1,0,3,0,0,0,0,0],[0,9,0,7,0,0,0,6,0],[0,6,0,0,0,8,0,2,0],[7,0,0,4,0,0,0,9,0],[0,0,0,0,0,0,0,0,0]]},610:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomHardGrid=t.getRandomMediumGrid=t.getRandomEasyGrid=void 0;const r=l(314),o=l(380),s=l(427);t.getRandomEasyGrid=()=>{const e=Math.floor(100*Math.random()%r.numOfEasyGrids)+1;return r[`easyGrid${e}`]},t.getRandomMediumGrid=()=>{const e=Math.floor(100*Math.random()%s.numOfMediumGrids)+1;return s[`mediumGrid${e}`]},t.getRandomHardGrid=()=>{const e=Math.floor(100*Math.random()%o.numOfHardrids)+1;return o[`hardGrid${e}`]}},38:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;const r=l(12);t.checkGrid=()=>{let e;return null==(0,r.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):!0!==o()?(e="the grid is not fully filled :S",alert(e),e):!0!==s()&&!0!==n()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};const o=()=>{const e=(0,r.getCurrentGrid)();for(let t=0;t<9;t++)for(let l=0;l<9;l++)if(null==e[t][l])return!1;return!0},s=()=>{const e=(0,r.getCurrentGrid)();let t=new Array(9).fill(0),l=new Array(9).fill(0);for(let r=0;r<9;r++){t.fill(0),l.fill(0);for(let o=0;o<9;o++){const s=e[r][o],n=e[o][r];if(t[s-1]++,l[n-1]++,1!=t[s-1])return!1;if(1!=l[n-1])return!1}}return!0};t.checkRowsAndColumns=s;const n=()=>1==i(0,2,0,2)&&1==i(0,2,3,5)&&1==i(0,2,6,8)&&1==i(3,5,0,2)&&1==i(3,5,6,8)&&1==i(3,5,0,2)&&1==i(5,8,0,2)&&1==i(5,8,3,5)&&1==i(5,8,5,8),i=(e,t,l,o)=>{const s=(0,r.getCurrentGrid)();let n=new Array(9).fill(0);for(let r=e;r<=t;r++)for(let e=l;e<=o;e++){const t=s[r][e];if(n[t-1]++,n[t-1]>1)return!1}return!0}},296:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteBoard=t.clearBoard=void 0;const r=l(945),o=()=>{const e=document.getElementById("grid");if(null!==e)for(;e.lastChild;)e.removeChild(e.lastChild)};t.deleteBoard=o,t.clearBoard=()=>{o(),(0,r.createBoard)((()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);return e})())}},10:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveGrid=void 0;const r=l(12),o=l(296),s=l(945),n=l(393),i=l(828);t.solveGrid=()=>{console.log("the solve button was pressed.");const e=(0,r.getCurrentGrid)(),t=new n.Grid(e),l=(0,i.solveSudoku)(t).toNumberArray();(0,o.deleteBoard)(),(0,s.createBoard)(l)}},410:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;class l{constructor(){this.storage=[]}size(){return this.storage.length}}const r=new class extends l{constructor(e=1/0){super(),this.capacity=e}push(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)}pop(){return this.storage.pop()}peek(){return this.storage[this.size()-1]}isFull(){return this.capacity===this.size()}};t.undoStack=r,t.undoStep=()=>{if(null===r.peek()||void 0===r.peek()){const e="undoStack is null or undefined";return alert(e),e}if(0===r.size()){const e="the undoStack is not yet built";return alert(e),e}const e=r.pop();if(3!==e.length){const e="something went wrong with fetching an undoStack-element";return alert(e),e}const t=document.querySelector(`[row="${e[0]}"][column="${e[1]}"]`);return console.log(`undid row ${e[0]+1} column ${e[1]+1} from ${t.innerHTML} to ${e[2]}`),0===e[2]?t.innerHTML="":t.innerHTML=e[2].toString(),"good work mate"}},194:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyNakedSingle=void 0,t.applyNakedSingle=e=>(e.getCells().forEach((function(e){1===e.getPossibleValues().length&&(e.setValue(e.getPossibleValues()[0]),e.setPossibleValues([]))})),e)},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyHiddenSingle=void 0,t.applyHiddenSingle=e=>{for(let t=0;t<9;t++)for(let l=0;l<9;l++){const r=e.getCell(t,l);if(!r.isEmpty())continue;let o=!1,s=[];for(let r=0;r<9;r++){const o=e.getCell(t,r);r!==l&&o.isEmpty()&&o.getPossibleValues().forEach((e=>{s.includes(e)||s.push(e)}))}if(r.getPossibleValues().forEach((e=>{s.includes(e)||(r.setValue(e),r.setPossibleValues([]),o=!0)})),o)return e;o=!1;let n=[];for(let r=0;r<9;r++){const o=e.getCell(r,l);r!==t&&o.isEmpty()&&o.getPossibleValues().forEach((e=>{n.includes(e)||n.push(e)}))}if(r.getPossibleValues().forEach((e=>{n.includes(e)||(r.setValue(e),r.setPossibleValues([]),o=!0)})),o)return e;const i=3*Math.floor(t/3),u=3*Math.floor(l/3);let d=[];for(let r=i;r<i+3;r++)for(let o=u;o<u+3;o++){const s=e.getCell(r,o);r===t&&o===l||!s.isEmpty()||s.getPossibleValues().forEach((e=>{d.includes(e)||d.push(e)}))}if(r.getPossibleValues().forEach((e=>{d.includes(e)||(r.setValue(e),r.setPossibleValues([]),o=!0)})),o)return e}return e}},517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applySudokuRules=void 0,t.applySudokuRules=e=>(e.getCells().forEach((t=>{if(0!==t.getValue())return;const l=t.getRow(),r=t.getColumn(),o=t.getBox(),s=t.getPossibleValues();for(let o=0;o<9;o++){const n=e.getCell(l,o).getValue();o!==r&&null!==n&&s.includes(n)&&t.removePossibleValue(n)}for(let o=0;o<9;o++){const n=e.getCell(o,r).getValue();o!==l&&null!==n&&s.includes(n)&&t.removePossibleValue(n)}const n=3*Math.floor(o/3),i=o%3*3;for(let o=n;o<n+3;o++)for(let n=i;n<i+3;n++){const i=e.getCell(o,n).getValue();o===l&&n===r||null===i||!s.includes(i)||t.removePossibleValue(i)}t.setPossibleValues(s)})),e)},828:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveSudoku=void 0;const r=l(412),o=l(517),s=l(194);t.solveSudoku=e=>{console.log("inside 'solveSudoku' method.");let t=!1,l=0;do{let n;t=!1;do{t=!1,n=e.copy(),e=(0,o.applySudokuRules)(e),console.log(!e.equals(n)),e.equals(n)||(t=!0),n=e.copy(),(e=(0,s.applyNakedSingle)(e)).equals(n)||(t=!0)}while(!e.isFull()&&t);n=e.copy(),(e=(0,r.applyHiddenSingle)(e)).equals(n)||(t=!0),n=e.copy(),l++}while(!e.isFull()&&t&&l<=10);return e}}},t={};function l(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,l),s.exports}(()=>{const e=l(38),t=l(945),r=l(296),o=l(410),s=l(610),n=l(10),i=document.getElementById("clear");null!==i?i.addEventListener("click",r.clearBoard):alert("we've got a problem with the check button :/");const u=document.getElementById("check");null!==u?u.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,o.undoStep)())}));const d=document.getElementById("undo");null!==d?d.addEventListener("click",o.undoStep):alert("we've got a problem with the undo button");const a=document.getElementById("solve");null!==a||void 0!==a?a.addEventListener("click",n.solveGrid):alert("we've got a problem with the undo button"),(0,t.createBoard)(s.getRandomHardGrid())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,