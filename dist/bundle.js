(()=>{"use strict";var e={148:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;var n=r(12);t.checkGrid=function(){var e;return null==(0,n.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):!0!==o()?(e="the grid is not fully filled :S",alert(e),e):!0!==i()&&!0!==l()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};var o=function(){for(var e=(0,n.getCurrentGrid)(),t=0;t<9;t++)for(var r=0;r<9;r++)if(null==e[t][r])return!1;return!0},i=function(){for(var e=(0,n.getCurrentGrid)(),t=new Array(9).fill(0),r=new Array(9).fill(0),o=0;o<9;o++){t.fill(0),r.fill(0);for(var i=0;i<9;i++){var l=e[o][i],u=e[i][o];if(t[l-1]++,r[u-1]++,1!=t[l-1])return!1;if(1!=r[u-1])return!1}}return!0};t.checkRowsAndColumns=i;var l=function(){return 1==u(0,2,0,2)&&1==u(0,2,3,5)&&1==u(0,2,6,8)&&1==u(3,5,0,2)&&1==u(3,5,6,8)&&1==u(3,5,0,2)&&1==u(5,8,0,2)&&1==u(5,8,3,5)&&1==u(5,8,5,8)},u=function(e,t,r,o){for(var i=(0,n.getCurrentGrid)(),l=new Array(9).fill(0),u=e;u<=t;u++)for(var a=r;a<=o;a++){var c=i[u][a];if(l[c-1]++,l[c-1]>1)return!1}return!0}},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill(null);var r=document.querySelectorAll(".cell");if(null==r)return null;for(t=0;t<=8;t++)for(var n=0;n<=8;n++){var o=r[9*t+n];if(!(o instanceof HTMLElement))return null;if(!o)return null;var i=o.innerText;e[t][n]=Number(i)}return e}},483:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteBoard=t.clearBoard=void 0;var n=r(945),o=function(){var e=document.getElementById("grid");if(null!==e)for(;e.lastChild;)e.removeChild(e.lastChild)};t.deleteBoard=o,t.clearBoard=function(){o(),(0,n.createBoard)(function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill(null);return e}())}},945:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;var n=r(295);t.createBoard=function(e){var t=document.getElementById("grid");null!=t&&e.forEach((function(e,r){var n=document.createElement("div");null!==n&&(n.classList.add("row"),n.setAttribute("row","".concat(r)),2!==r&&5!==r||n.classList.add("underline"),t.append(n),e.forEach((function(e,t){var i=document.createElement("div");null!==i&&(i.setAttribute("row","".concat(r)),i.setAttribute("column","".concat(t)),i.classList.add("cell"),2!=t&&5!=t||i.classList.add("rightline"),null===e||0===e?(i.setAttribute("type","button"),i.addEventListener("click",o)):i.innerText=e.toString(),n.append(i))})))}))};var o=function(e){var t=e.target;if(t instanceof HTMLElement){var r=t.getAttribute("row"),o=t.getAttribute("column"),i=document.querySelector('[row="'.concat(r,'"][column="').concat(o,'"]'));if(i instanceof HTMLElement){var l;do{var u=prompt("Enter a number between 1 and 9:");if(null===u)return;l=Number.parseInt(u)}while(isNaN(Number(l)));if(!isNaN(Number(l))&&null!==i){var a;a=""===i.innerHTML?0:Number.parseInt(i.innerHTML),i.innerText=l.toString(),n.undoStack.push([Number.parseInt(r),Number.parseInt(o),a])}}}}},295:function(e,t){var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;var o=new(function(e){function t(t){void 0===t&&(t=1/0);var r=e.call(this)||this;return r.capacity=t,r}return n(t,e),t.prototype.push=function(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)},t.prototype.pop=function(){return this.storage.pop()},t.prototype.peek=function(){return this.storage[this.size()-1]},t.prototype.isFull=function(){return this.capacity===this.size()},t}(function(){function e(){this.storage=[]}return e.prototype.size=function(){return this.storage.length},e}()));t.undoStack=o,t.undoStep=function(){if(null===o.peek()||void 0===o.peek()){var e="undoStack is null or undefined";return alert(e),e}if(0===o.size())return e="the undoStack is not yet built",alert(e),e;var t=o.pop();if(3!==t.length)return e="something went wrong with fetching an undoStack-element",alert(e),e;var r=document.querySelector('[row="'.concat(t[0],'"][column="').concat(t[1],'"]'));return console.log("undid row ".concat(t[0]+1," column ").concat(t[1]+1," from ").concat(r.innerHTML," to ").concat(t[2])),0===t[2]?r.innerHTML="":r.innerHTML=t[2].toString(),"good work mate"}},910:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testNakedSingle=void 0,t.testNakedSingle=[[0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]},291:function(e,t){var r=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0;var n=function(){function e(e,t,r){void 0===e&&(e=null),void 0===t&&(t=null),void 0===r&&(r=null),this.row=e,this.column=t,this.box=null===e||null===t?null:3*Math.floor(this.row/3)+Math.floor(this.column/3),this.possibleValues=r}return e.prototype.getRow=function(){return this.row},e.prototype.getColumn=function(){return this.column},e.prototype.getBox=function(){return this.box},e.prototype.getPossibleValues=function(){return this.possibleValues},e.prototype.setPossibleValues=function(e){this.possibleValues=e},e.prototype.clone=function(){return new e(this.row,this.column,r([],this.possibleValues,!0))},e}();t.Cell=n},84:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findNumbers=void 0;var n=r(512),o=r(770),i=r(291),l=function(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0};t.findNumbers=function(e){var t,r=u(e),n=0;do{t=!1;for(var o=0;o<r.length;o++){var i=r[o],c=i.getPossibleValues(),s=a(i.clone(),e);if(1===s.length){var d=s[0],f=i.getRow(),v=i.getColumn();e[f][v]=d,r.splice(o,1),o--,t=!0}else l(c,s)||(i.setPossibleValues(s),t=!0)}console.log("".concat(n)),n++}while(r.length>0&&t&&n<100);return e};var u=function(e){for(var t=[],r=0;r<=8;r++)for(var n=0;n<=8;n++)if(0===e[r][n]){var o=new i.Cell(r,n,[1,2,3,4,5,6,7,8,9]);t.push(o)}return t},a=function(e,t){var r=[1,2,3,4,5,6,7,8,9];return e.getPossibleValues().length>1&&(r=(0,o.applyNakedSingle)(e,t)),e.getPossibleValues().length>1&&(r=(0,n.applyHiddenSingle)(e,t)),r}},512:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyHiddenSingle=void 0;var n=r(291);t.applyHiddenSingle=function(e,t){for(var r=e.getRow(),o=e.getColumn(),i=(e.getBox(),e.getPossibleValues()),l=function(e){if(e!==o&&0===t[r][e]){var l=new n.Cell(r,e,[t[r][e]]).getPossibleValues();i.forEach((function(e){if(l.includes(e)){var t=i.indexOf(e);i.splice(t,1)}}))}},u=0;u<9;u++)l(u);for(var a=function(e){if(e!==r&&0===t[e][o]){var l=new n.Cell(e,o,[t[e][o]]).getPossibleValues();i.forEach((function(e){if(l.includes(e)){var t=i.indexOf(e);i.splice(t,1)}}))}},c=0;c<9;c++)a(c);var s=3*Math.floor(r/3),d=3*Math.floor(o/3);for(c=s;c<s+3;c++){var f=function(e){if(c!==r&&e!==o&&0===t[c][e]){var l=new n.Cell(c,e,[t[c][e]]).getPossibleValues();i.forEach((function(e){if(l.includes(e)){var t=i.indexOf(e);i.splice(t,1)}}))}};for(u=d;u<d+3;u++)f(u)}return e.setPossibleValues(i),i}},770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyNakedSingle=void 0,t.applyNakedSingle=function(e,t){for(var r=e.getRow(),n=e.getColumn(),o=e.getBox(),i=e.getPossibleValues(),l=0;l<9;l++)if(0!==(d=t[r][l])&&i.includes(d)){var u=i.indexOf(d);i.splice(u,1)}for(var a=0;a<9;a++)0!==(d=t[a][n])&&i.includes(d)&&(u=i.indexOf(d),i.splice(u,1));var c=3*Math.floor(o/3),s=o%3*3;for(a=c;a<c+3;a++)for(l=s;l<s+3;l++){var d;0!==(d=t[a][l])&&i.includes(d)&&(u=i.indexOf(d),i.splice(u,1))}return i}},659:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveGrid=void 0;var n=r(12),o=r(84),i=r(483),l=r(945);t.solveGrid=function(){var e=(0,n.getCurrentGrid)(),t=(0,o.findNumbers)(e);(0,i.deleteBoard)(),(0,l.createBoard)(t)}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(()=>{var e=r(148),t=r(945),n=r(483),o=r(295),i=r(910),l=r(659),u=document.getElementById("clear");null!==u?u.addEventListener("click",n.clearBoard):alert("we've got a problem with the check button :/");var a=document.getElementById("check");null!==a?a.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,o.undoStep)())}));var c=document.getElementById("undo");null!==c?c.addEventListener("click",o.undoStep):alert("we've got a problem with the undo button");var s=document.getElementById("solve");null!==s||void 0!==s?s.addEventListener("click",l.solveGrid):alert("we've got a problem with the undo button"),(0,t.createBoard)(i.testNakedSingle)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,