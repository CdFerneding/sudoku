(()=>{"use strict";var e={148:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;var n=r(12);t.checkGrid=function(){var e;return null==(0,n.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):1!=o()?(e="the grid is not fully filled :S",alert(e),e):1!=i()&&1!=a()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};var o=function(){for(var e=(0,n.getCurrentGrid)(),t=0;t<9;t++)for(var r=0;r<9;r++)if(""==e[t][r])return!1;return!0},i=function(){for(var e=(0,n.getCurrentGrid)(),t=new Array(9).fill(0),r=new Array(9).fill(0),o=0;o<9;o++){t.fill(0),r.fill(0);for(var i=0;i<9;i++){var a=Number.parseInt(e[o][i]),u=Number.parseInt(e[i][o]);if(t[a-1]++,r[u-1]++,1!=t[a-1])return!1;if(1!=r[u-1])return!1}}return!0};t.checkRowsAndColumns=i;var a=function(){return 1==u(0,2,0,2)&&1==u(0,2,3,5)&&1==u(0,2,6,8)&&1==u(3,5,0,2)&&1==u(3,5,6,8)&&1==u(3,5,0,2)&&1==u(5,8,0,2)&&1==u(5,8,3,5)&&1==u(5,8,5,8)},u=function(e,t,r,o){for(var i=(0,n.getCurrentGrid)(),a=new Array(9).fill(0),u=e;u<=t;u++)for(var c=r;c<=o;c++){var l=Number.parseInt(i[u][c]);if(a[l-1]++,a[l-1]>1)return!1}return!0}},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill("");var r=document.querySelectorAll(".cell");if(null===r)return[[""]];for(t=0;t<=8;t++)for(var n=0;n<=8;n++){var o=r[9*t+n];if(!(o instanceof HTMLElement))return[[""]];if(!o)return[[""]];var i=o.innerText;e[t][n]=i}return e}},284:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clearBoard=void 0;var n=r(741);t.clearBoard=function(){!function(){var e=document.getElementById("grid");null!==e&&e.remove()}();var e=document.createElement("div");null!==e&&(e.id="grid",document.body.append(e),(0,n.createBoard)(function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill("");return e}()))}},741:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;var n=r(295);t.createBoard=function(e){var t=document.getElementById("grid");null!==t&&e.forEach((function(e,r){var n=document.createElement("div");null!==n&&(n.classList.add("row"),n.setAttribute("row","".concat(r)),2!=r&&5!=r||n.classList.add("underline"),t.append(n),e.forEach((function(e,t){var i=document.createElement("div");null!==i&&(i.setAttribute("row","".concat(r)),i.setAttribute("column","".concat(t)),i.classList.add("cell"),2!=t&&5!=t||i.classList.add("rightline"),""===e.toString()?(i.setAttribute("type","button"),i.addEventListener("click",o)):i.innerText=e.toString(),n.append(i))})))}))};var o=function(e){var t=e.target;if(t instanceof HTMLElement){var r=t.getAttribute("row"),o=t.getAttribute("column"),i=document.querySelector('[row="'.concat(r,'"][column="').concat(o,'"]'));if(i instanceof HTMLElement){var a;do{var u=prompt("Enter a number between 1 and 9:");if(null===u)return;a=Number.parseInt(u)}while(isNaN(Number(a)));if(!isNaN(Number(a))&&null!==i){var c;c=""===i.innerHTML?0:Number.parseInt(i.innerHTML),i.innerText=a.toString(),n.undoStack.push([Number.parseInt(r),Number.parseInt(o),c])}}}}},295:function(e,t){var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;var o=new(function(e){function t(t){void 0===t&&(t=1/0);var r=e.call(this)||this;return r.capacity=t,r}return n(t,e),t.prototype.push=function(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)},t.prototype.pop=function(){return this.storage.pop()},t.prototype.peek=function(){return this.storage[this.size()-1]},t.prototype.isFull=function(){return this.capacity===this.size()},t}(function(){function e(){this.storage=[]}return e.prototype.size=function(){return this.storage.length},e}()));t.undoStack=o,t.undoStep=function(){if(null===o.peek()||void 0===o.peek()){var e="undoStack is null or undefined";return alert(e),e}if(0===o.size())return e="the undoStack is not yet built",alert(e),e;var t=o.pop();if(3!==t.length)return e="something went wrong with fetching an undoStack-element",alert(e),e;var r=document.querySelector('[row="'.concat(t[0],'"][column="').concat(t[1],'"]'));return console.log("undid row ".concat(t[0]+1," column ").concat(t[1]+1," from ").concat(r.innerHTML," to ").concat(t[2])),0===t[2]?r.innerHTML="":r.innerHTML=t[2].toString(),"good work mate"}},745:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testGridFilledWrong=t.testGridFilledRight=t.testGrid=void 0,t.testGrid=[["","5","","","3","","","",""],["","6","9","","","","5","","1"],["","","7","9","","","","4","8"],["7","9","","1","","5","6","8","2"],["4","2","","3","8","9","7","","5"],["1","8","","","6","","","",""],["","","8","","","","4","",""],["","7","","5","","4","","",""],["","","","","7","3","","5","6"]],t.testGridFilledRight=[["8","5","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]],t.testGridFilledWrong=[["5","8","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]]}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(()=>{var e=r(148),t=r(741),n=r(284),o=r(295),i=r(745),a=document.getElementById("clear");null!==a?a.addEventListener("click",n.clearBoard):alert("we've got a problem with the check button :/");var u=document.getElementById("check");null!==u?u.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,o.undoStep)())}));var c=document.getElementById("undo");null!==c?c.addEventListener("click",o.undoStep):alert("we've got a problem with the undo button"),(0,t.createBoard)(i.testGrid)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,