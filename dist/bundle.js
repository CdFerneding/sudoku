(()=>{"use strict";var e={346:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0;class l{constructor(e=null,t=null,l=null,o=0){this.row=e,this.column=t,this.box=null===e||null===t?null:3*Math.floor(this.row/3)+Math.floor(this.column/3),this.value=o,this.possibleValues=l}getRow(){return this.row}getColumn(){return this.column}getBox(){return this.box}getPossibleValues(){return this.possibleValues}getValue(){return this.value}setValue(e){this.value=e}setPossibleValues(e){this.possibleValues=e}clone(){return new l(this.row,this.column,[...this.possibleValues],this.value)}copy(){const e=new l;return e.row=this.row,e.column=this.column,e.box=this.box,e.value=this.value,e.possibleValues=[...this.possibleValues],e}removePossibleValue(e){const t=this.possibleValues.indexOf(e);t>-1&&this.possibleValues.splice(t,1)}isEmpty(){return 0===this.value||null===this.value}equals(e){return this.row===e.getRow()&&this.column===e.getColumn()&&this.box===e.getBox()&&this.value===e.getValue()&&function(e,t){if(e.length!==t.length)return!1;for(let l=0;l<e.length;l++)if(e[l]!==t[l])return!1;return!0}(this.possibleValues,e.getPossibleValues())}}t.Cell=l},393:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0;const o=l(346);class r{constructor(e,t){if(this.cells=[],t){const e=t;for(const t of e){const e=t.copy();this.cells.push(e)}}else for(let t=0;t<9;t++)for(let l=0;l<9;l++){const r=e[t][l],s=new o.Cell(t,l,0!==r?[]:[1,2,3,4,5,6,7,8,9],0!==r?r:0);this.cells.push(s)}}copy(){const e=this.toNumberArray();return new r(e,this.cells)}equals(e){const t=this.getCells(),l=e.getCells();for(let e=0;e<t.length;e++)if(!t[e].equals(l[e]))return!1;return!0}getCells(){return this.cells}getCell(e,t){for(let l=0;l<9;l++)for(let o=0;o<9;o++)if(l===e&&o===t)return this.cells[9*l+o]}toNumberArray(){const e=[];for(let t=0;t<9;t++){const l=[];for(let e=0;e<9;e++){const o=this.getCell(t,e);l.push(o.getValue())}e.push(l)}return e}isFull(){return this.cells.every((e=>0!==e.getValue()))}}t.Grid=r},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);const t=document.querySelectorAll(".cell");if(null==t)return null;for(let l=0;l<=8;l++)for(let o=0;o<=8;o++){const r=t[9*l+o];if(!(r instanceof HTMLElement))return null;if(!r)return null;const s=r.innerText;e[l][o]=Number(s)}return e}},945:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;const o=l(410);t.createBoard=e=>{const t=document.getElementById("grid");null!=t&&e.forEach(((e,l)=>{const o=document.createElement("div");null!==o&&(o.classList.add("row"),o.setAttribute("row",`${l}`),2!==l&&5!==l||o.classList.add("underline"),t.append(o),e.forEach(((e,t)=>{const s=document.createElement("div");null!==s&&(s.setAttribute("row",`${l}`),s.setAttribute("column",`${t}`),s.classList.add("cell"),2!=t&&5!=t||s.classList.add("rightline"),null===e||0===e?(s.setAttribute("type","button"),s.addEventListener("click",r)):s.innerText=e.toString(),o.append(s))})))}))};const r=e=>{const t=e.target;if(!(t instanceof HTMLElement))return;const l=t.getAttribute("row"),r=t.getAttribute("column"),s=document.querySelector(`[row="${l}"][column="${r}"]`);if(!(s instanceof HTMLElement))return;let n;do{const e=prompt("Enter a number between 1 and 9:");if(null===e)return;n=Number.parseInt(e)}while(isNaN(Number(n)));if(!isNaN(Number(n))&&null!==s){let e;e=""===s.innerHTML?0:Number.parseInt(s.innerHTML),s.innerText=n.toString(),o.undoStack.push([Number.parseInt(l),Number.parseInt(r),e])}}},614:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testGridFilledWrong=t.testGridFilledRight=t.testGrid=void 0,t.testGrid=[[0,5,0,0,3,0,0,0,0],[0,6,9,0,0,0,5,0,1],[0,0,7,9,0,0,0,4,8],[7,9,0,1,0,5,6,8,2],[4,2,0,3,8,9,7,0,5],[1,8,0,0,6,0,0,0,0],[0,0,8,0,0,0,4,0,0],[0,7,0,5,0,4,0,0,0],[0,0,0,0,7,3,0,5,6]],t.testGridFilledRight=[["8","5","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]],t.testGridFilledWrong=[["5","8","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]]},38:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;const o=l(12);t.checkGrid=()=>{let e;return null==(0,o.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):!0!==r()?(e="the grid is not fully filled :S",alert(e),e):!0!==s()&&!0!==n()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};const r=()=>{const e=(0,o.getCurrentGrid)();for(let t=0;t<9;t++)for(let l=0;l<9;l++)if(null==e[t][l])return!1;return!0},s=()=>{const e=(0,o.getCurrentGrid)();let t=new Array(9).fill(0),l=new Array(9).fill(0);for(let o=0;o<9;o++){t.fill(0),l.fill(0);for(let r=0;r<9;r++){const s=e[o][r],n=e[r][o];if(t[s-1]++,l[n-1]++,1!=t[s-1])return!1;if(1!=l[n-1])return!1}}return!0};t.checkRowsAndColumns=s;const n=()=>1==u(0,2,0,2)&&1==u(0,2,3,5)&&1==u(0,2,6,8)&&1==u(3,5,0,2)&&1==u(3,5,6,8)&&1==u(3,5,0,2)&&1==u(5,8,0,2)&&1==u(5,8,3,5)&&1==u(5,8,5,8),u=(e,t,l,r)=>{const s=(0,o.getCurrentGrid)();let n=new Array(9).fill(0);for(let o=e;o<=t;o++)for(let e=l;e<=r;e++){const t=s[o][e];if(n[t-1]++,n[t-1]>1)return!1}return!0}},296:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteBoard=t.clearBoard=void 0;const o=l(945),r=()=>{const e=document.getElementById("grid");if(null!==e)for(;e.lastChild;)e.removeChild(e.lastChild)};t.deleteBoard=r,t.clearBoard=()=>{r(),(0,o.createBoard)((()=>{let e=[];for(let t=0;t<9;t++)e[t]=new Array(9).fill(null);return e})())}},10:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveGrid=void 0;const o=l(12),r=l(296),s=l(945),n=l(393),u=l(828);t.solveGrid=()=>{console.log("the solve button was pressed.");const e=(0,o.getCurrentGrid)(),t=new n.Grid(e),l=(0,u.solveSudoku)(t).toNumberArray();(0,r.deleteBoard)(),(0,s.createBoard)(l)}},410:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;class l{constructor(){this.storage=[]}size(){return this.storage.length}}const o=new class extends l{constructor(e=1/0){super(),this.capacity=e}push(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)}pop(){return this.storage.pop()}peek(){return this.storage[this.size()-1]}isFull(){return this.capacity===this.size()}};t.undoStack=o,t.undoStep=()=>{if(null===o.peek()||void 0===o.peek()){const e="undoStack is null or undefined";return alert(e),e}if(0===o.size()){const e="the undoStack is not yet built";return alert(e),e}const e=o.pop();if(3!==e.length){const e="something went wrong with fetching an undoStack-element";return alert(e),e}const t=document.querySelector(`[row="${e[0]}"][column="${e[1]}"]`);return console.log(`undid row ${e[0]+1} column ${e[1]+1} from ${t.innerHTML} to ${e[2]}`),0===e[2]?t.innerHTML="":t.innerHTML=e[2].toString(),"good work mate"}},194:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyNakedSingle=void 0,t.applyNakedSingle=e=>(e.getCells().forEach((function(e){1===e.getPossibleValues().length&&(e.setValue(e.getPossibleValues()[0]),e.setPossibleValues([]))})),e)},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applyHiddenSingle=void 0,t.applyHiddenSingle=e=>{for(let t=0;t<9;t++)for(let l=0;l<9;l++){const o=e.getCell(t,l);if(!o.isEmpty())continue;let r=!1,s=[];for(let o=0;o<9;o++){const r=e.getCell(t,o);o!==l&&r.isEmpty()&&r.getPossibleValues().forEach((e=>{s.includes(e)||s.push(e)}))}if(o.getPossibleValues().forEach((e=>{s.includes(e)||(o.setValue(e),o.setPossibleValues([]),r=!0)})),r)continue;r=!1;let n=[];for(let o=0;o<9;o++){const r=e.getCell(o,l);o!==t&&r.isEmpty()&&r.getPossibleValues().forEach((e=>{n.includes(e)||n.push(e)}))}if(o.getPossibleValues().forEach((e=>{n.includes(e)||(o.setValue(e),o.setPossibleValues([]),r=!0)})),r)continue;const u=3*Math.floor(t/3),i=3*Math.floor(l/3);let c=[];for(let o=u;o<u+3;o++)for(let r=i;r<i+3;r++){const s=e.getCell(o,r);o===t&&r===l||!s.isEmpty()||s.getPossibleValues().forEach((e=>{c.includes(e)||c.push(e)}))}o.getPossibleValues().forEach((e=>{c.includes(e)||(o.setValue(e),o.setPossibleValues([]),r=!0)}))}return e}},517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.applySudokuRules=void 0,t.applySudokuRules=e=>(e.getCells().forEach((t=>{if(0!==t.getValue())return;const l=t.getRow(),o=t.getColumn(),r=t.getBox(),s=t.getPossibleValues();for(let r=0;r<9;r++){const n=e.getCell(l,r).getValue();r!==o&&null!==n&&s.includes(n)&&t.removePossibleValue(n)}for(let r=0;r<9;r++){const n=e.getCell(r,o).getValue();r!==l&&null!==n&&s.includes(n)&&t.removePossibleValue(n)}const n=3*Math.floor(r/3),u=r%3*3;for(let r=n;r<n+3;r++)for(let n=u;n<u+3;n++){const u=e.getCell(r,n).getValue();r===l&&n===o||null===u||!s.includes(u)||t.removePossibleValue(u)}t.setPossibleValues(s)})),e)},828:(e,t,l)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveSudoku=void 0;const o=l(412),r=l(517),s=l(194);t.solveSudoku=e=>{console.log("inside 'solveSudoku' method.");let t=!1,l=0;do{let n;t=!1;do{t=!1,n=e.copy(),e=(0,r.applySudokuRules)(e),console.log(!e.equals(n)),e.equals(n)||(t=!0),n=e.copy(),(e=(0,s.applyNakedSingle)(e)).equals(n)||(t=!0)}while(!e.isFull()&&t);n=e.copy(),(e=(0,o.applyHiddenSingle)(e)).equals(n)||(t=!0),n=e.copy(),l++}while(!e.isFull()&&t&&l<=10);return e}}},t={};function l(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,l),s.exports}(()=>{const e=l(38),t=l(945),o=l(296),r=l(410),s=l(614),n=l(10),u=document.getElementById("clear");null!==u?u.addEventListener("click",o.clearBoard):alert("we've got a problem with the check button :/");const i=document.getElementById("check");null!==i?i.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,r.undoStep)())}));const c=document.getElementById("undo");null!==c?c.addEventListener("click",r.undoStep):alert("we've got a problem with the undo button");const a=document.getElementById("solve");null!==a||void 0!==a?a.addEventListener("click",n.solveGrid):alert("we've got a problem with the undo button"),(0,t.createBoard)(s.testGrid)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,