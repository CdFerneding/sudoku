(()=>{"use strict";var e={148:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkRowsAndColumns=t.checkGrid=void 0;var r=n(12);t.checkGrid=function(){var e;return null==(0,r.getCurrentGrid)()?(e="something went wrong with fetching the grid :S",alert(e),e):!0!==l()?(e="the grid is not fully filled :S",alert(e),e):!0!==o()&&!0!==u()?(e="the grid is incorrect :S",alert(e),e):(e="the grid is correct :D. Well done!",alert(e),e)};var l=function(){for(var e=(0,r.getCurrentGrid)(),t=0;t<9;t++)for(var n=0;n<9;n++)if(null==e[t][n])return!1;return!0},o=function(){for(var e=(0,r.getCurrentGrid)(),t=new Array(9).fill(0),n=new Array(9).fill(0),l=0;l<9;l++){t.fill(0),n.fill(0);for(var o=0;o<9;o++){var u=e[l][o],i=e[o][l];if(t[u-1]++,n[i-1]++,1!=t[u-1])return!1;if(1!=n[i-1])return!1}}return!0};t.checkRowsAndColumns=o;var u=function(){return 1==i(0,2,0,2)&&1==i(0,2,3,5)&&1==i(0,2,6,8)&&1==i(3,5,0,2)&&1==i(3,5,6,8)&&1==i(3,5,0,2)&&1==i(5,8,0,2)&&1==i(5,8,3,5)&&1==i(5,8,5,8)},i=function(e,t,n,l){for(var o=(0,r.getCurrentGrid)(),u=new Array(9).fill(0),i=e;i<=t;i++)for(var c=n;c<=l;c++){var a=o[i][c];if(u[a-1]++,u[a-1]>1)return!1}return!0}},12:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentGrid=void 0,t.getCurrentGrid=function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill(null);var n=document.querySelectorAll(".cell");if(null==n)return null;for(t=0;t<=8;t++)for(var r=0;r<=8;r++){var l=n[9*t+r];if(!(l instanceof HTMLElement))return null;if(!l)return null;var o=l.innerText;e[t][r]=Number(o)}return e}},483:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clearBoard=void 0;var r=n(945);t.clearBoard=function(){!function(){var e=document.getElementById("grid");if(null!==e)for(;e.lastChild;)e.removeChild(e.lastChild)}();var e=document.createElement("div");null!==e&&(e.id="grid",document.body.append(e),(0,r.createBoard)(function(){for(var e=[],t=0;t<9;t++)e[t]=new Array(9).fill(null);return e}()))}},945:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=void 0;var r=n(295);t.createBoard=function(e){console.log("called 'createBoard' function from:"),e.forEach((function(e){console.log("".concat(e,"\n"))}));var t=document.getElementById("grid");null!==t&&e.forEach((function(e,n){var r=document.createElement("div");null!==r&&(r.classList.add("row"),r.setAttribute("row","".concat(n)),2!=n&&5!=n||r.classList.add("underline"),t.append(r),e.forEach((function(e,t){var o=document.createElement("div");null!==o&&(o.setAttribute("row","".concat(n)),o.setAttribute("column","".concat(t)),o.classList.add("cell"),2!=t&&5!=t||o.classList.add("rightline"),null===e?(o.setAttribute("type","button"),o.addEventListener("click",l)):o.innerText=e.toString(),r.append(o))})))}))};var l=function(e){var t=e.target;if(t instanceof HTMLElement){var n=t.getAttribute("row"),l=t.getAttribute("column"),o=document.querySelector('[row="'.concat(n,'"][column="').concat(l,'"]'));if(o instanceof HTMLElement){var u;do{var i=prompt("Enter a number between 1 and 9:");if(null===i)return;u=Number.parseInt(i)}while(isNaN(Number(u)));if(!isNaN(Number(u))&&null!==o){var c;c=""===o.innerHTML?0:Number.parseInt(o.innerHTML),o.innerText=u.toString(),r.undoStack.push([Number.parseInt(n),Number.parseInt(l),c])}}}}},369:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveGrid=void 0;var r=n(12),l=n(188);t.solveGrid=function(){var e=(0,r.getCurrentGrid)();console.log(e),(0,l.possibles)(e)}},295:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.undoStep=t.undoStack=void 0;var l=new(function(e){function t(t){void 0===t&&(t=1/0);var n=e.call(this)||this;return n.capacity=t,n}return r(t,e),t.prototype.push=function(e){if(this.isFull())throw Error("Stack has reached max capacity, you cannot add more items");this.storage.push(e)},t.prototype.pop=function(){return this.storage.pop()},t.prototype.peek=function(){return this.storage[this.size()-1]},t.prototype.isFull=function(){return this.capacity===this.size()},t}(function(){function e(){this.storage=[]}return e.prototype.size=function(){return this.storage.length},e}()));t.undoStack=l,t.undoStep=function(){if(null===l.peek()||void 0===l.peek()){var e="undoStack is null or undefined";return alert(e),e}if(0===l.size())return e="the undoStack is not yet built",alert(e),e;var t=l.pop();if(3!==t.length)return e="something went wrong with fetching an undoStack-element",alert(e),e;var n=document.querySelector('[row="'.concat(t[0],'"][column="').concat(t[1],'"]'));return console.log("undid row ".concat(t[0]+1," column ").concat(t[1]+1," from ").concat(n.innerHTML," to ").concat(t[2])),0===t[2]?n.innerHTML="":n.innerHTML=t[2].toString(),"good work mate"}},745:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testGridFilledWrong=t.testGridFilledRight=t.testGrid=void 0,t.testGrid=[[null,5,null,null,3,null,null,null,null],[null,6,9,null,null,null,5,null,1],[null,null,7,9,null,null,null,4,8],[7,9,null,1,null,5,6,8,2],[4,2,null,3,8,9,7,null,5],[1,8,null,null,6,null,null,null,null],[null,null,8,null,null,null,4,null,null],[null,7,null,5,null,4,null,null,null],[null,null,null,null,7,3,null,5,6]],t.testGridFilledRight=[["8","5","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]],t.testGridFilledWrong=[["5","8","4","7","3","1","2","6","9"],["3","6","9","4","2","8","5","7","1"],["2","1","7","9","5","6","3","4","8"],["7","9","3","1","4","5","6","8","2"],["4","2","6","3","8","9","7","1","5"],["1","8","5","2","6","7","9","3","4"],["5","3","8","6","1","2","4","9","7"],["6","7","1","5","9","4","8","2","3"],["9","4","2","8","7","3","1","5","6"]]},188:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.possibles=void 0;var n=function(){function e(e,t,n){this.row=e,this.column=t,this.box=3*Math.floor(this.row/3)+Math.floor(this.column/3),this.possibleValues=n}return e.prototype.getRow=function(){return this.row},e.prototype.getColumn=function(){return this.column},e.prototype.getBox=function(){return this.box},e.prototype.getPossibleValues=function(){return this.possibleValues},e}();t.possibles=function(e){var t=r(e);console.log(t)};var r=function(e){console.log("getAllNumbers got called");for(var t=[],r=0;r<=8;r++)for(var l=0;l<=8;l++)if(0===e[r][l]){var o=new n(r,l,[1,2,3,4,5,6,7,8,9]);t.push(o)}return t}}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(()=>{var e=n(148),t=n(945),r=n(483),l=n(295),o=n(745),u=n(369),i=document.getElementById("clear");null!==i?i.addEventListener("click",r.clearBoard):alert("we've got a problem with the check button :/");var c=document.getElementById("check");null!==c?c.addEventListener("click",e.checkGrid):alert("we've got a problem with the check button"),window.addEventListener("keydown",(function(e){"z"===e.key&&!0===e.ctrlKey&&(e.preventDefault(),(0,l.undoStep)())}));var a=document.getElementById("undo");null!==a?a.addEventListener("click",l.undoStep):alert("we've got a problem with the undo button");var d=document.getElementById("solve");null!==d||void 0!==d?d.addEventListener("click",u.solveGrid):alert("we've got a problem with the undo button"),(0,t.createBoard)(o.testGrid)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,